
nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009824  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  080099c8  080099c8  000199c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f24  08009f24  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  08009f24  08009f24  00019f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f2c  08009f2c  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f2c  08009f2c  00019f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f30  08009f30  00019f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08009f34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  200001f8  0800a12c  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000037c  0800a12c  0002037c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011600  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b63  00000000  00000000  00031828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  00034390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ec0  00000000  00000000  00035368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184e8  00000000  00000000  00036228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001287b  00000000  00000000  0004e710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090471  00000000  00000000  00060f8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f13fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005858  00000000  00000000  000f144c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080099ac 	.word	0x080099ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	080099ac 	.word	0x080099ac

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <HAL_TIM_PeriodElapsedCallback>:

}


void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)//0.1ms
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  if(htim == &htim1)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4a0c      	ldr	r2, [pc, #48]	; (8001044 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d10f      	bne.n	8001038 <HAL_TIM_PeriodElapsedCallback+0x30>
  {
	  if(RxTimerCnt++ > 600)
 8001018:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800101a:	881b      	ldrh	r3, [r3, #0]
 800101c:	b29b      	uxth	r3, r3
 800101e:	1c5a      	adds	r2, r3, #1
 8001020:	b291      	uxth	r1, r2
 8001022:	4a09      	ldr	r2, [pc, #36]	; (8001048 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001024:	8011      	strh	r1, [r2, #0]
 8001026:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800102a:	d905      	bls.n	8001038 <HAL_TIM_PeriodElapsedCallback+0x30>
	  {
		  RxTimerCnt = 0;
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800102e:	2200      	movs	r2, #0
 8001030:	801a      	strh	r2, [r3, #0]
		  RxTimerFlag = OFF;
 8001032:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]

	  }
  }

}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	20000230 	.word	0x20000230
 8001048:	2000022e 	.word	0x2000022e
 800104c:	2000022d 	.word	0x2000022d

08001050 <TIMER__Wait_us>:
#define SW_I2Cx_SCL_PIN   GPIO_SW_I2Cx_SCL_PIN
#define SW_I2Cx_SDA_PIN   GPIO_SW_I2Cx_SDA_PIN
*/

void TIMER__Wait_us(__IO uint32_t nCount)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
    for (; nCount != 0;nCount--);
 8001058:	e002      	b.n	8001060 <TIMER__Wait_us+0x10>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3b01      	subs	r3, #1
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d1f9      	bne.n	800105a <TIMER__Wait_us+0xa>
}
 8001066:	bf00      	nop
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <SW_I2C_initial>:


void SW_I2C_initial(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef			GPIO_InitStructure;

	GPIO_InitStructure.Speed=GPIO_SPEED_FREQ_HIGH;
 800107a:	2302      	movs	r3, #2
 800107c:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Mode=GPIO_MODE_OUTPUT_PP;
 800107e:	2301      	movs	r3, #1
 8001080:	60bb      	str	r3, [r7, #8]
//	HAL_GPIO_Init(GPIO_SW_I2C1_SCL, &GPIO_InitStructure);
//	GPIO_InitStructure.Pin   = GPIO_SW_I2C1_SDA_PIN;
//	HAL_GPIO_Init(GPIO_SW_I2C1_SDA, &GPIO_InitStructure);

	/* SW_I2C2 ----------------------------------------*/
	GPIO_InitStructure.Pin   = GPIO_SW_I2C2_SCL_PIN;
 8001082:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001086:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_SW_I2C2_SCL, &GPIO_InitStructure);
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	4619      	mov	r1, r3
 800108c:	4807      	ldr	r0, [pc, #28]	; (80010ac <SW_I2C_initial+0x38>)
 800108e:	f001 fc5f 	bl	8002950 <HAL_GPIO_Init>
	GPIO_InitStructure.Pin   = GPIO_SW_I2C2_SDA_PIN;
 8001092:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001096:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_SW_I2C2_SDA, &GPIO_InitStructure);
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	4619      	mov	r1, r3
 800109c:	4803      	ldr	r0, [pc, #12]	; (80010ac <SW_I2C_initial+0x38>)
 800109e:	f001 fc57 	bl	8002950 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIO_SW_I2Cx_SCL, &GPIO_InitStructure);
	GPIO_InitStructure.Pin   = GPIO_SW_I2Cx_SDA_PIN;
	HAL_GPIO_Init(GPIO_SW_I2Cx_SDA, &GPIO_InitStructure);
	*/

}
 80010a2:	bf00      	nop
 80010a4:	3718      	adds	r7, #24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40020400 	.word	0x40020400

080010b0 <GPIO_SetBits>:

void GPIO_SetBits(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx,GPIO_Pin,GPIO_PIN_SET);
 80010bc:	887b      	ldrh	r3, [r7, #2]
 80010be:	2201      	movs	r2, #1
 80010c0:	4619      	mov	r1, r3
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f001 fde0 	bl	8002c88 <HAL_GPIO_WritePin>
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <GPIO_ResetBits>:

void GPIO_ResetBits(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	460b      	mov	r3, r1
 80010da:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx,GPIO_Pin,GPIO_PIN_RESET);
 80010dc:	887b      	ldrh	r3, [r7, #2]
 80010de:	2200      	movs	r2, #0
 80010e0:	4619      	mov	r1, r3
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f001 fdd0 	bl	8002c88 <HAL_GPIO_WritePin>
}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <GPIO_ReadInputDataBit>:

uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	807b      	strh	r3, [r7, #2]
	uint8_t Ret;
	Ret=(uint16_t)HAL_GPIO_ReadPin(GPIOx,GPIO_Pin);
 80010fc:	887b      	ldrh	r3, [r7, #2]
 80010fe:	4619      	mov	r1, r3
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f001 fda9 	bl	8002c58 <HAL_GPIO_ReadPin>
 8001106:	4603      	mov	r3, r0
 8001108:	73fb      	strb	r3, [r7, #15]
	return Ret;
 800110a:	7bfb      	ldrb	r3, [r7, #15]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <sda_high>:
	
void sda_high(uint8_t sel)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	71fb      	strb	r3, [r7, #7]
    if(sel == 1)
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d105      	bne.n	8001130 <sda_high+0x1c>

        GPIO_SetBits(SW_I2C1_SDA_GPIO, SW_I2C1_SDA_PIN);
 8001124:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001128:	4807      	ldr	r0, [pc, #28]	; (8001148 <sda_high+0x34>)
 800112a:	f7ff ffc1 	bl	80010b0 <GPIO_SetBits>

    else if(sel == 2)
    	GPIO_SetBits(SW_I2C2_SDA_GPIO, SW_I2C2_SDA_PIN);

    //else if(sel==x) ...
}
 800112e:	e007      	b.n	8001140 <sda_high+0x2c>
    else if(sel == 2)
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	2b02      	cmp	r3, #2
 8001134:	d104      	bne.n	8001140 <sda_high+0x2c>
    	GPIO_SetBits(SW_I2C2_SDA_GPIO, SW_I2C2_SDA_PIN);
 8001136:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800113a:	4803      	ldr	r0, [pc, #12]	; (8001148 <sda_high+0x34>)
 800113c:	f7ff ffb8 	bl	80010b0 <GPIO_SetBits>
}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40020400 	.word	0x40020400

0800114c <sda_low>:


void sda_low(uint8_t sel)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
    if(sel == 1)
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d105      	bne.n	8001168 <sda_low+0x1c>
        GPIO_ResetBits(SW_I2C1_SDA_GPIO, SW_I2C1_SDA_PIN);
 800115c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001160:	4807      	ldr	r0, [pc, #28]	; (8001180 <sda_low+0x34>)
 8001162:	f7ff ffb5 	bl	80010d0 <GPIO_ResetBits>

    else if(sel == 2)
    	GPIO_ResetBits(SW_I2C2_SDA_GPIO, SW_I2C2_SDA_PIN);

//else if(sel==x) ...
}
 8001166:	e007      	b.n	8001178 <sda_low+0x2c>
    else if(sel == 2)
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	2b02      	cmp	r3, #2
 800116c:	d104      	bne.n	8001178 <sda_low+0x2c>
    	GPIO_ResetBits(SW_I2C2_SDA_GPIO, SW_I2C2_SDA_PIN);
 800116e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001172:	4803      	ldr	r0, [pc, #12]	; (8001180 <sda_low+0x34>)
 8001174:	f7ff ffac 	bl	80010d0 <GPIO_ResetBits>
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40020400 	.word	0x40020400

08001184 <scl_high>:


void scl_high(uint8_t sel)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
    if(sel == 1)
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d105      	bne.n	80011a0 <scl_high+0x1c>
        GPIO_SetBits(SW_I2C1_SCL_GPIO, SW_I2C1_SCL_PIN);
 8001194:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001198:	4807      	ldr	r0, [pc, #28]	; (80011b8 <scl_high+0x34>)
 800119a:	f7ff ff89 	bl	80010b0 <GPIO_SetBits>

    else if(sel == 2)
     	GPIO_SetBits(SW_I2C2_SCL_GPIO, SW_I2C2_SCL_PIN);

//else if(sel==x) ...
}
 800119e:	e007      	b.n	80011b0 <scl_high+0x2c>
    else if(sel == 2)
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d104      	bne.n	80011b0 <scl_high+0x2c>
     	GPIO_SetBits(SW_I2C2_SCL_GPIO, SW_I2C2_SCL_PIN);
 80011a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011aa:	4803      	ldr	r0, [pc, #12]	; (80011b8 <scl_high+0x34>)
 80011ac:	f7ff ff80 	bl	80010b0 <GPIO_SetBits>
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40020400 	.word	0x40020400

080011bc <scl_low>:


void scl_low(uint8_t sel)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
    if(sel == 1)
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d105      	bne.n	80011d8 <scl_low+0x1c>
        GPIO_ResetBits(SW_I2C1_SCL_GPIO, SW_I2C1_SCL_PIN);
 80011cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011d0:	4807      	ldr	r0, [pc, #28]	; (80011f0 <scl_low+0x34>)
 80011d2:	f7ff ff7d 	bl	80010d0 <GPIO_ResetBits>

    else if(sel == 2)
        GPIO_ResetBits(SW_I2C2_SCL_GPIO, SW_I2C2_SCL_PIN);

//else if(sel==x) ...
}
 80011d6:	e007      	b.n	80011e8 <scl_low+0x2c>
    else if(sel == 2)
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d104      	bne.n	80011e8 <scl_low+0x2c>
        GPIO_ResetBits(SW_I2C2_SCL_GPIO, SW_I2C2_SCL_PIN);
 80011de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011e2:	4803      	ldr	r0, [pc, #12]	; (80011f0 <scl_low+0x34>)
 80011e4:	f7ff ff74 	bl	80010d0 <GPIO_ResetBits>
}
 80011e8:	bf00      	nop
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40020400 	.word	0x40020400

080011f4 <sda_out>:

void sda_out(uint8_t sel, uint8_t out)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	460a      	mov	r2, r1
 80011fe:	71fb      	strb	r3, [r7, #7]
 8001200:	4613      	mov	r3, r2
 8001202:	71bb      	strb	r3, [r7, #6]
    if (out)
 8001204:	79bb      	ldrb	r3, [r7, #6]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d004      	beq.n	8001214 <sda_out+0x20>
    {
        sda_high(sel);
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff81 	bl	8001114 <sda_high>
    }
    else
    {
        sda_low(sel);
    }
}
 8001212:	e003      	b.n	800121c <sda_out+0x28>
        sda_low(sel);
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff ff98 	bl	800114c <sda_low>
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <sda_in_mode>:

void sda_in_mode(uint8_t sel)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b088      	sub	sp, #32
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
    GPIO_InitTypeDef GPIO_InitStructure;

    GPIO_InitStructure.Speed=GPIO_SPEED_FREQ_HIGH;
 800122e:	2302      	movs	r3, #2
 8001230:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Mode=GPIO_MODE_INPUT;
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 8001236:	2301      	movs	r3, #1
 8001238:	617b      	str	r3, [r7, #20]

    if(sel == 1)
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d109      	bne.n	8001254 <sda_in_mode+0x30>
    {
        GPIO_InitStructure.Pin   = SW_I2C1_SDA_PIN;
 8001240:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001244:	60fb      	str	r3, [r7, #12]
        HAL_GPIO_Init(SW_I2C1_SDA_GPIO, &GPIO_InitStructure);
 8001246:	f107 030c 	add.w	r3, r7, #12
 800124a:	4619      	mov	r1, r3
 800124c:	4809      	ldr	r0, [pc, #36]	; (8001274 <sda_in_mode+0x50>)
 800124e:	f001 fb7f 	bl	8002950 <HAL_GPIO_Init>
		HAL_GPIO_Init(SW_I2C2_SDA_GPIO, &GPIO_InitStructure);
	}

    //else if(sel==x) ...

}
 8001252:	e00b      	b.n	800126c <sda_in_mode+0x48>
    else if(sel == 2)
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	2b02      	cmp	r3, #2
 8001258:	d108      	bne.n	800126c <sda_in_mode+0x48>
		GPIO_InitStructure.Pin   = SW_I2C2_SDA_PIN;
 800125a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800125e:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_Init(SW_I2C2_SDA_GPIO, &GPIO_InitStructure);
 8001260:	f107 030c 	add.w	r3, r7, #12
 8001264:	4619      	mov	r1, r3
 8001266:	4803      	ldr	r0, [pc, #12]	; (8001274 <sda_in_mode+0x50>)
 8001268:	f001 fb72 	bl	8002950 <HAL_GPIO_Init>
}
 800126c:	bf00      	nop
 800126e:	3720      	adds	r7, #32
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40020400 	.word	0x40020400

08001278 <sda_out_mode>:

void sda_out_mode(uint8_t sel)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
    GPIO_InitTypeDef GPIO_InitStructure;
	
    GPIO_InitStructure.Speed=GPIO_SPEED_FREQ_HIGH;
 8001282:	2302      	movs	r3, #2
 8001284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStructure.Mode=GPIO_MODE_OUTPUT_PP;
 8001286:	2301      	movs	r3, #1
 8001288:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]

		
    if(sel == 1)
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d109      	bne.n	80012a8 <sda_out_mode+0x30>
    {
        GPIO_InitStructure.Pin   = SW_I2C1_SDA_PIN;
 8001294:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001298:	60fb      	str	r3, [r7, #12]
        HAL_GPIO_Init(SW_I2C1_SDA_GPIO, &GPIO_InitStructure);
 800129a:	f107 030c 	add.w	r3, r7, #12
 800129e:	4619      	mov	r1, r3
 80012a0:	4809      	ldr	r0, [pc, #36]	; (80012c8 <sda_out_mode+0x50>)
 80012a2:	f001 fb55 	bl	8002950 <HAL_GPIO_Init>
        GPIO_InitStructure.Pin   = SW_I2C2_SDA_PIN;
        HAL_GPIO_Init(SW_I2C1_SDA_GPIO, &GPIO_InitStructure);
    }

    //else if(sel==x) ...
}
 80012a6:	e00b      	b.n	80012c0 <sda_out_mode+0x48>
    else if(sel == 2)
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d108      	bne.n	80012c0 <sda_out_mode+0x48>
        GPIO_InitStructure.Pin   = SW_I2C2_SDA_PIN;
 80012ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012b2:	60fb      	str	r3, [r7, #12]
        HAL_GPIO_Init(SW_I2C1_SDA_GPIO, &GPIO_InitStructure);
 80012b4:	f107 030c 	add.w	r3, r7, #12
 80012b8:	4619      	mov	r1, r3
 80012ba:	4803      	ldr	r0, [pc, #12]	; (80012c8 <sda_out_mode+0x50>)
 80012bc:	f001 fb48 	bl	8002950 <HAL_GPIO_Init>
}
 80012c0:	bf00      	nop
 80012c2:	3720      	adds	r7, #32
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40020400 	.word	0x40020400

080012cc <i2c_clk_data_out>:

    //else if(sel==x) ...
}

void i2c_clk_data_out(uint8_t sel)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
    scl_high(sel);
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ff53 	bl	8001184 <scl_high>
    TIMER__Wait_us(SW_I2C_WAIT_TIME);
 80012de:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80012e2:	f7ff feb5 	bl	8001050 <TIMER__Wait_us>
    scl_low(sel);
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff ff67 	bl	80011bc <scl_low>

}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <i2c_port_initial>:

void i2c_port_initial(uint8_t sel)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	4603      	mov	r3, r0
 80012fe:	71fb      	strb	r3, [r7, #7]
    sda_high(sel);
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff ff06 	bl	8001114 <sda_high>
    scl_high(sel);
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff ff3a 	bl	8001184 <scl_high>
}
 8001310:	bf00      	nop
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <i2c_start_condition>:

void i2c_start_condition(uint8_t sel)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	71fb      	strb	r3, [r7, #7]
    sda_high(sel);
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff fef5 	bl	8001114 <sda_high>
    scl_high(sel);
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff ff29 	bl	8001184 <scl_high>

    TIMER__Wait_us(SW_I2C_WAIT_TIME);
 8001332:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001336:	f7ff fe8b 	bl	8001050 <TIMER__Wait_us>
    sda_low(sel);
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff05 	bl	800114c <sda_low>
    TIMER__Wait_us(SW_I2C_WAIT_TIME);
 8001342:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001346:	f7ff fe83 	bl	8001050 <TIMER__Wait_us>
    scl_low(sel);
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ff35 	bl	80011bc <scl_low>

    TIMER__Wait_us(SW_I2C_WAIT_TIME << 1);
 8001352:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001356:	f7ff fe7b 	bl	8001050 <TIMER__Wait_us>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <i2c_stop_condition>:

void i2c_stop_condition(uint8_t sel)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	4603      	mov	r3, r0
 800136a:	71fb      	strb	r3, [r7, #7]
    sda_low(sel);
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff feec 	bl	800114c <sda_low>
    scl_high(sel);
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff ff04 	bl	8001184 <scl_high>

    TIMER__Wait_us(SW_I2C_WAIT_TIME);
 800137c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001380:	f7ff fe66 	bl	8001050 <TIMER__Wait_us>
    sda_high(sel);
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff fec4 	bl	8001114 <sda_high>
    TIMER__Wait_us(SW_I2C_WAIT_TIME);
 800138c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001390:	f7ff fe5e 	bl	8001050 <TIMER__Wait_us>
}
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <i2c_check_ack>:

uint8_t i2c_check_ack(uint8_t sel)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
    uint8_t         ack;
    int             i;
    unsigned int    temp;

    sda_in_mode(sel);
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff3b 	bl	8001224 <sda_in_mode>

    TIMER__Wait_us(SW_I2C_WAIT_TIME);/*add*/
 80013ae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80013b2:	f7ff fe4d 	bl	8001050 <TIMER__Wait_us>
    scl_high(sel);
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff fee3 	bl	8001184 <scl_high>

    ack = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	75fb      	strb	r3, [r7, #23]
    TIMER__Wait_us(SW_I2C_WAIT_TIME);
 80013c2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80013c6:	f7ff fe43 	bl	8001050 <TIMER__Wait_us>

    for (i = 10; i > 0; i--)
 80013ca:	230a      	movs	r3, #10
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	e013      	b.n	80013f8 <i2c_check_ack+0x5c>
    {
        temp = !(SW_I2C_ReadVal_SDA(sel));	
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f000 f8a8 	bl	8001528 <SW_I2C_ReadVal_SDA>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	bf0c      	ite	eq
 80013de:	2301      	moveq	r3, #1
 80013e0:	2300      	movne	r3, #0
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	60fb      	str	r3, [r7, #12]
        if (temp)	
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d002      	beq.n	80013f2 <i2c_check_ack+0x56>
        {
            ack = 1;
 80013ec:	2301      	movs	r3, #1
 80013ee:	75fb      	strb	r3, [r7, #23]
            break;
 80013f0:	e005      	b.n	80013fe <i2c_check_ack+0x62>
    for (i = 10; i > 0; i--)
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	3b01      	subs	r3, #1
 80013f6:	613b      	str	r3, [r7, #16]
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dce8      	bgt.n	80013d0 <i2c_check_ack+0x34>
        }
    }
    scl_low(sel);
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff fedb 	bl	80011bc <scl_low>
    sda_out_mode(sel);	
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ff35 	bl	8001278 <sda_out_mode>

    return ack;
 800140e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <i2c_check_not_ack>:

void i2c_check_not_ack(uint8_t sel)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	71fb      	strb	r3, [r7, #7]
    sda_in_mode(sel);
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fefd 	bl	8001224 <sda_in_mode>
    i2c_clk_data_out(sel);
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ff4d 	bl	80012cc <i2c_clk_data_out>
    sda_out_mode(sel);
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff ff1f 	bl	8001278 <sda_out_mode>
    TIMER__Wait_us(SW_I2C_WAIT_TIME);
 800143a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800143e:	f7ff fe07 	bl	8001050 <TIMER__Wait_us>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <i2c_slave_address>:

    TIMER__Wait_us(SW_I2C_WAIT_TIME);
}

void i2c_slave_address(uint8_t sel, uint8_t IICID, uint8_t readwrite)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b084      	sub	sp, #16
 800144e:	af00      	add	r7, sp, #0
 8001450:	4603      	mov	r3, r0
 8001452:	71fb      	strb	r3, [r7, #7]
 8001454:	460b      	mov	r3, r1
 8001456:	71bb      	strb	r3, [r7, #6]
 8001458:	4613      	mov	r3, r2
 800145a:	717b      	strb	r3, [r7, #5]
    int x;

    if (readwrite)
 800145c:	797b      	ldrb	r3, [r7, #5]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d004      	beq.n	800146c <i2c_slave_address+0x22>
    {
        IICID |= I2C_READ;
 8001462:	79bb      	ldrb	r3, [r7, #6]
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	71bb      	strb	r3, [r7, #6]
 800146a:	e003      	b.n	8001474 <i2c_slave_address+0x2a>
    }
    else
    {
        IICID &= ~I2C_READ;
 800146c:	79bb      	ldrb	r3, [r7, #6]
 800146e:	f023 0301 	bic.w	r3, r3, #1
 8001472:	71bb      	strb	r3, [r7, #6]
    }

    scl_low(sel);
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fea0 	bl	80011bc <scl_low>

    for (x = 7; x >= 0; x--)
 800147c:	2307      	movs	r3, #7
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	e019      	b.n	80014b6 <i2c_slave_address+0x6c>
    {
        sda_out(sel, IICID & (1 << x));
 8001482:	2201      	movs	r2, #1
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	b25a      	sxtb	r2, r3
 800148c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001490:	4013      	ands	r3, r2
 8001492:	b25b      	sxtb	r3, r3
 8001494:	b2da      	uxtb	r2, r3
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	4611      	mov	r1, r2
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff feaa 	bl	80011f4 <sda_out>
        TIMER__Wait_us(SW_I2C_WAIT_TIME);
 80014a0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80014a4:	f7ff fdd4 	bl	8001050 <TIMER__Wait_us>
        i2c_clk_data_out(sel);
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff ff0e 	bl	80012cc <i2c_clk_data_out>
    for (x = 7; x >= 0; x--)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	dae2      	bge.n	8001482 <i2c_slave_address+0x38>

    }
}
 80014bc:	bf00      	nop
 80014be:	bf00      	nop
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <i2c_register_address>:

void i2c_register_address(uint8_t sel, uint8_t addr)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b084      	sub	sp, #16
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	4603      	mov	r3, r0
 80014ce:	460a      	mov	r2, r1
 80014d0:	71fb      	strb	r3, [r7, #7]
 80014d2:	4613      	mov	r3, r2
 80014d4:	71bb      	strb	r3, [r7, #6]
    int  x;

    scl_low(sel);
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fe6f 	bl	80011bc <scl_low>

    for (x = 7; x >= 0; x--)
 80014de:	2307      	movs	r3, #7
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	e019      	b.n	8001518 <i2c_register_address+0x52>
    {
        sda_out(sel, addr & (1 << x));
 80014e4:	2201      	movs	r2, #1
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	b25a      	sxtb	r2, r3
 80014ee:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80014f2:	4013      	ands	r3, r2
 80014f4:	b25b      	sxtb	r3, r3
 80014f6:	b2da      	uxtb	r2, r3
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	4611      	mov	r1, r2
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff fe79 	bl	80011f4 <sda_out>
        TIMER__Wait_us(SW_I2C_WAIT_TIME);
 8001502:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001506:	f7ff fda3 	bl	8001050 <TIMER__Wait_us>
        i2c_clk_data_out(sel);
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fedd 	bl	80012cc <i2c_clk_data_out>
    for (x = 7; x >= 0; x--)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	3b01      	subs	r3, #1
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2b00      	cmp	r3, #0
 800151c:	dae2      	bge.n	80014e4 <i2c_register_address+0x1e>

    }
}
 800151e:	bf00      	nop
 8001520:	bf00      	nop
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <SW_I2C_ReadVal_SDA>:
    TIMER__Wait_us(SW_I2C_WAIT_TIME);
}


uint8_t SW_I2C_ReadVal_SDA(uint8_t sel)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
    if(sel == 1)
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d106      	bne.n	8001546 <SW_I2C_ReadVal_SDA+0x1e>
        return GPIO_ReadInputDataBit(SW_I2C1_SDA_GPIO, SW_I2C1_SDA_PIN);
 8001538:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800153c:	4809      	ldr	r0, [pc, #36]	; (8001564 <SW_I2C_ReadVal_SDA+0x3c>)
 800153e:	f7ff fdd7 	bl	80010f0 <GPIO_ReadInputDataBit>
 8001542:	4603      	mov	r3, r0
 8001544:	e00a      	b.n	800155c <SW_I2C_ReadVal_SDA+0x34>

    else if (sel == 2)
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	2b02      	cmp	r3, #2
 800154a:	d106      	bne.n	800155a <SW_I2C_ReadVal_SDA+0x32>
    	return GPIO_ReadInputDataBit(SW_I2C2_SDA_GPIO, SW_I2C2_SDA_PIN);
 800154c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001550:	4804      	ldr	r0, [pc, #16]	; (8001564 <SW_I2C_ReadVal_SDA+0x3c>)
 8001552:	f7ff fdcd 	bl	80010f0 <GPIO_ReadInputDataBit>
 8001556:	4603      	mov	r3, r0
 8001558:	e000      	b.n	800155c <SW_I2C_ReadVal_SDA+0x34>

    return 0;
 800155a:	2300      	movs	r3, #0
}
 800155c:	4618      	mov	r0, r3
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40020400 	.word	0x40020400

08001568 <SW_I2C_Write_Data>:

    return 0;
}

void SW_I2C_Write_Data(uint8_t sel, uint8_t data)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	460a      	mov	r2, r1
 8001572:	71fb      	strb	r3, [r7, #7]
 8001574:	4613      	mov	r3, r2
 8001576:	71bb      	strb	r3, [r7, #6]
    int  x;

    scl_low(sel);
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff fe1e 	bl	80011bc <scl_low>

    for (x = 7; x >= 0; x--)
 8001580:	2307      	movs	r3, #7
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	e019      	b.n	80015ba <SW_I2C_Write_Data+0x52>
    {
        sda_out(sel, data & (1 << x));
 8001586:	2201      	movs	r2, #1
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	b25a      	sxtb	r2, r3
 8001590:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001594:	4013      	ands	r3, r2
 8001596:	b25b      	sxtb	r3, r3
 8001598:	b2da      	uxtb	r2, r3
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	4611      	mov	r1, r2
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fe28 	bl	80011f4 <sda_out>
        TIMER__Wait_us(SW_I2C_WAIT_TIME);
 80015a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80015a8:	f7ff fd52 	bl	8001050 <TIMER__Wait_us>
        i2c_clk_data_out(sel);
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fe8c 	bl	80012cc <i2c_clk_data_out>
    for (x = 7; x >= 0; x--)
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	dae2      	bge.n	8001586 <SW_I2C_Write_Data+0x1e>

    }
}
 80015c0:	bf00      	nop
 80015c2:	bf00      	nop
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <SW_I2C_Read_Data>:

uint8_t SW_I2C_Read_Data(uint8_t sel)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b084      	sub	sp, #16
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	4603      	mov	r3, r0
 80015d2:	71fb      	strb	r3, [r7, #7]
    int      x;
    uint8_t  readdata = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	72fb      	strb	r3, [r7, #11]

    sda_in_mode(sel);
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fe22 	bl	8001224 <sda_in_mode>

    for (x = 8; x--;)
 80015e0:	2308      	movs	r3, #8
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	e01d      	b.n	8001622 <SW_I2C_Read_Data+0x58>
    {
        scl_high(sel);
 80015e6:	79fb      	ldrb	r3, [r7, #7]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff fdcb 	bl	8001184 <scl_high>

        readdata <<= 1;
 80015ee:	7afb      	ldrb	r3, [r7, #11]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	72fb      	strb	r3, [r7, #11]
        if (SW_I2C_ReadVal_SDA(sel))
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff ff96 	bl	8001528 <SW_I2C_ReadVal_SDA>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <SW_I2C_Read_Data+0x40>
            readdata |= 0x01;
 8001602:	7afb      	ldrb	r3, [r7, #11]
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	72fb      	strb	r3, [r7, #11]

        TIMER__Wait_us(SW_I2C_WAIT_TIME);
 800160a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800160e:	f7ff fd1f 	bl	8001050 <TIMER__Wait_us>
        scl_low(sel);
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fdd1 	bl	80011bc <scl_low>

        TIMER__Wait_us(SW_I2C_WAIT_TIME);
 800161a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800161e:	f7ff fd17 	bl	8001050 <TIMER__Wait_us>
    for (x = 8; x--;)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	1e5a      	subs	r2, r3, #1
 8001626:	60fa      	str	r2, [r7, #12]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1dc      	bne.n	80015e6 <SW_I2C_Read_Data+0x1c>
    }

    sda_out_mode(sel);
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff fe22 	bl	8001278 <sda_out_mode>
    return readdata;
 8001634:	7afb      	ldrb	r3, [r7, #11]
}
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <SW_I2C_WriteControl_8Bit>:

uint8_t SW_I2C_WriteControl_8Bit(uint8_t sel, uint8_t IICID, uint8_t regaddr, uint8_t data)
{
 8001640:	b590      	push	{r4, r7, lr}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	4604      	mov	r4, r0
 8001648:	4608      	mov	r0, r1
 800164a:	4611      	mov	r1, r2
 800164c:	461a      	mov	r2, r3
 800164e:	4623      	mov	r3, r4
 8001650:	71fb      	strb	r3, [r7, #7]
 8001652:	4603      	mov	r3, r0
 8001654:	71bb      	strb	r3, [r7, #6]
 8001656:	460b      	mov	r3, r1
 8001658:	717b      	strb	r3, [r7, #5]
 800165a:	4613      	mov	r3, r2
 800165c:	713b      	strb	r3, [r7, #4]
    uint8_t   returnack = TRUE;
 800165e:	2301      	movs	r3, #1
 8001660:	73fb      	strb	r3, [r7, #15]

    i2c_start_condition(sel);
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff fe57 	bl	8001318 <i2c_start_condition>

    i2c_slave_address(sel, IICID, WRITE_CMD);
 800166a:	79b9      	ldrb	r1, [r7, #6]
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	2200      	movs	r2, #0
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff feea 	bl	800144a <i2c_slave_address>
    if (!i2c_check_ack(sel))
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fe8f 	bl	800139c <i2c_check_ack>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d104      	bne.n	800168e <SW_I2C_WriteControl_8Bit+0x4e>
    {
    	printf("ACKNO\n");
 8001684:	481e      	ldr	r0, [pc, #120]	; (8001700 <SW_I2C_WriteControl_8Bit+0xc0>)
 8001686:	f004 fb5d 	bl	8005d44 <puts>
        returnack = FALSE;
 800168a:	2300      	movs	r3, #0
 800168c:	73fb      	strb	r3, [r7, #15]
    }

    TIMER__Wait_us(SW_I2C_WAIT_TIME);
 800168e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001692:	f7ff fcdd 	bl	8001050 <TIMER__Wait_us>

    i2c_register_address(sel, regaddr);
 8001696:	797a      	ldrb	r2, [r7, #5]
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	4611      	mov	r1, r2
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff ff12 	bl	80014c6 <i2c_register_address>
    if (!i2c_check_ack(sel))
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff fe79 	bl	800139c <i2c_check_ack>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d104      	bne.n	80016ba <SW_I2C_WriteControl_8Bit+0x7a>
    {
    	printf("ACKNO\n");
 80016b0:	4813      	ldr	r0, [pc, #76]	; (8001700 <SW_I2C_WriteControl_8Bit+0xc0>)
 80016b2:	f004 fb47 	bl	8005d44 <puts>
        returnack = FALSE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	73fb      	strb	r3, [r7, #15]
    }

    TIMER__Wait_us(SW_I2C_WAIT_TIME);
 80016ba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80016be:	f7ff fcc7 	bl	8001050 <TIMER__Wait_us>

    SW_I2C_Write_Data(sel, data);
 80016c2:	793a      	ldrb	r2, [r7, #4]
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	4611      	mov	r1, r2
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ff4d 	bl	8001568 <SW_I2C_Write_Data>
    if (!i2c_check_ack(sel))
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fe63 	bl	800139c <i2c_check_ack>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d104      	bne.n	80016e6 <SW_I2C_WriteControl_8Bit+0xa6>
    {
    	printf("ACKNO\n");
 80016dc:	4808      	ldr	r0, [pc, #32]	; (8001700 <SW_I2C_WriteControl_8Bit+0xc0>)
 80016de:	f004 fb31 	bl	8005d44 <puts>
        returnack = FALSE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	73fb      	strb	r3, [r7, #15]
    }

    TIMER__Wait_us(SW_I2C_WAIT_TIME);
 80016e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80016ea:	f7ff fcb1 	bl	8001050 <TIMER__Wait_us>

    i2c_stop_condition(sel);
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fe36 	bl	8001362 <i2c_stop_condition>

    return returnack;
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd90      	pop	{r4, r7, pc}
 8001700:	080099c8 	.word	0x080099c8

08001704 <SW_I2C_ReadControl_8Bit>:

    return readdata;
}

uint8_t SW_I2C_ReadControl_8Bit(uint8_t sel, uint8_t IICID, uint8_t regaddr)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
 800170e:	460b      	mov	r3, r1
 8001710:	71bb      	strb	r3, [r7, #6]
 8001712:	4613      	mov	r3, r2
 8001714:	717b      	strb	r3, [r7, #5]
    uint8_t  readdata = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	73fb      	strb	r3, [r7, #15]

    i2c_port_initial(sel);
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fdea 	bl	80012f6 <i2c_port_initial>

    i2c_start_condition(sel);
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fdf7 	bl	8001318 <i2c_start_condition>

    i2c_slave_address(sel, IICID, WRITE_CMD);
 800172a:	79b9      	ldrb	r1, [r7, #6]
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	2200      	movs	r2, #0
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fe8a 	bl	800144a <i2c_slave_address>
    i2c_check_ack(sel);
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff fe2f 	bl	800139c <i2c_check_ack>

    i2c_register_address(sel, regaddr);
 800173e:	797a      	ldrb	r2, [r7, #5]
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	4611      	mov	r1, r2
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff febe 	bl	80014c6 <i2c_register_address>
    i2c_check_ack(sel);
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff fe25 	bl	800139c <i2c_check_ack>

    TIMER__Wait_us(SW_I2C_WAIT_TIME);
 8001752:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001756:	f7ff fc7b 	bl	8001050 <TIMER__Wait_us>

    i2c_start_condition(sel);
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff fddb 	bl	8001318 <i2c_start_condition>

    i2c_slave_address(sel, IICID, READ_CMD);
 8001762:	79b9      	ldrb	r1, [r7, #6]
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	2201      	movs	r2, #1
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff fe6e 	bl	800144a <i2c_slave_address>
    i2c_check_ack(sel);
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff fe13 	bl	800139c <i2c_check_ack>

    TIMER__Wait_us(SW_I2C_WAIT_TIME);
 8001776:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800177a:	f7ff fc69 	bl	8001050 <TIMER__Wait_us>

    readdata = SW_I2C_Read_Data(sel);
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ff22 	bl	80015ca <SW_I2C_Read_Data>
 8001786:	4603      	mov	r3, r0
 8001788:	73fb      	strb	r3, [r7, #15]

    i2c_check_not_ack(sel);
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fe43 	bl	8001418 <i2c_check_not_ack>

    i2c_stop_condition(sel);
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff fde4 	bl	8001362 <i2c_stop_condition>

    return readdata;
 800179a:	7bfb      	ldrb	r3, [r7, #15]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80017ac:	1d39      	adds	r1, r7, #4
 80017ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017b2:	2201      	movs	r2, #1
 80017b4:	4803      	ldr	r0, [pc, #12]	; (80017c4 <__io_putchar+0x20>)
 80017b6:	f002 fb48 	bl	8003e4a <HAL_UART_Transmit>

  return ch;
 80017ba:	687b      	ldr	r3, [r7, #4]

}
 80017bc:	4618      	mov	r0, r3
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000278 	.word	0x20000278

080017c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017ce:	f000 fe85 	bl	80024dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017d2:	f000 f82f 	bl	8001834 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017d6:	f000 f96f 	bl	8001ab8 <MX_GPIO_Init>
  MX_TIM1_Init();
 80017da:	f000 f8c9 	bl	8001970 <MX_TIM1_Init>
  MX_USART6_UART_Init();
 80017de:	f000 f941 	bl	8001a64 <MX_USART6_UART_Init>
  MX_USART2_UART_Init();
 80017e2:	f000 f915 	bl	8001a10 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80017e6:	f000 f88f 	bl	8001908 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &RX_Data, 1);
 80017ea:	2201      	movs	r2, #1
 80017ec:	490e      	ldr	r1, [pc, #56]	; (8001828 <main+0x60>)
 80017ee:	480f      	ldr	r0, [pc, #60]	; (800182c <main+0x64>)
 80017f0:	f002 fbbd 	bl	8003f6e <HAL_UART_Receive_IT>
  SW_I2C_initial();
 80017f4:	f7ff fc3e 	bl	8001074 <SW_I2C_initial>
  i2c_port_initial(2);
 80017f8:	2002      	movs	r0, #2
 80017fa:	f7ff fd7c 	bl	80012f6 <i2c_port_initial>
  //MPU6050_Init(2);
//  HAL_Delay(500);

  printf("UART2!!\n");
 80017fe:	480c      	ldr	r0, [pc, #48]	; (8001830 <main+0x68>)
 8001800:	f004 faa0 	bl	8005d44 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 uint8_t sel = 2U;
 8001804:	2302      	movs	r3, #2
 8001806:	71fb      	strb	r3, [r7, #7]
	 uint8_t dev_addr = GYRO_DEV;
 8001808:	23d0      	movs	r3, #208	; 0xd0
 800180a:	71bb      	strb	r3, [r7, #6]
	 uint8_t reg = 0x3B;
 800180c:	233b      	movs	r3, #59	; 0x3b
 800180e:	717b      	strb	r3, [r7, #5]
	 uint8_t returnack = 0U;
 8001810:	2300      	movs	r3, #0
 8001812:	713b      	strb	r3, [r7, #4]

    /* USER CODE END WHILE */
	  //ReadI2C(2);
	 MPU6050_Read_Accel(sel, GYRO_DEV);
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	21d0      	movs	r1, #208	; 0xd0
 8001818:	4618      	mov	r0, r3
 800181a:	f000 f9e7 	bl	8001bec <MPU6050_Read_Accel>
//		 returnack = FALSE;
//	 }
//
//	 i2c_stop_condition(sel);
//
	 HAL_Delay(500);
 800181e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001822:	f000 fecd 	bl	80025c0 <HAL_Delay>
  {
 8001826:	e7ed      	b.n	8001804 <main+0x3c>
 8001828:	2000022c 	.word	0x2000022c
 800182c:	20000278 	.word	0x20000278
 8001830:	080099d0 	.word	0x080099d0

08001834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b094      	sub	sp, #80	; 0x50
 8001838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800183a:	f107 0320 	add.w	r3, r7, #32
 800183e:	2230      	movs	r2, #48	; 0x30
 8001840:	2100      	movs	r1, #0
 8001842:	4618      	mov	r0, r3
 8001844:	f003 fb60 	bl	8004f08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001848:	f107 030c 	add.w	r3, r7, #12
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001858:	2300      	movs	r3, #0
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	4b28      	ldr	r3, [pc, #160]	; (8001900 <SystemClock_Config+0xcc>)
 800185e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001860:	4a27      	ldr	r2, [pc, #156]	; (8001900 <SystemClock_Config+0xcc>)
 8001862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001866:	6413      	str	r3, [r2, #64]	; 0x40
 8001868:	4b25      	ldr	r3, [pc, #148]	; (8001900 <SystemClock_Config+0xcc>)
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001874:	2300      	movs	r3, #0
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	4b22      	ldr	r3, [pc, #136]	; (8001904 <SystemClock_Config+0xd0>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a21      	ldr	r2, [pc, #132]	; (8001904 <SystemClock_Config+0xd0>)
 800187e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001882:	6013      	str	r3, [r2, #0]
 8001884:	4b1f      	ldr	r3, [pc, #124]	; (8001904 <SystemClock_Config+0xd0>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800188c:	607b      	str	r3, [r7, #4]
 800188e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001890:	2302      	movs	r3, #2
 8001892:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001894:	2301      	movs	r3, #1
 8001896:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001898:	2310      	movs	r3, #16
 800189a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800189c:	2302      	movs	r3, #2
 800189e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018a0:	2300      	movs	r3, #0
 80018a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80018a4:	2310      	movs	r3, #16
 80018a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80018a8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80018ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80018ae:	2304      	movs	r3, #4
 80018b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018b2:	2304      	movs	r3, #4
 80018b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018b6:	f107 0320 	add.w	r3, r7, #32
 80018ba:	4618      	mov	r0, r3
 80018bc:	f001 f9fe 	bl	8002cbc <HAL_RCC_OscConfig>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <SystemClock_Config+0x96>
  {
    Error_Handler();
 80018c6:	f000 f98b 	bl	8001be0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ca:	230f      	movs	r3, #15
 80018cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018ce:	2302      	movs	r3, #2
 80018d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018d2:	2300      	movs	r3, #0
 80018d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018dc:	2300      	movs	r3, #0
 80018de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018e0:	f107 030c 	add.w	r3, r7, #12
 80018e4:	2102      	movs	r1, #2
 80018e6:	4618      	mov	r0, r3
 80018e8:	f001 fc60 	bl	80031ac <HAL_RCC_ClockConfig>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80018f2:	f000 f975 	bl	8001be0 <Error_Handler>
  }
}
 80018f6:	bf00      	nop
 80018f8:	3750      	adds	r7, #80	; 0x50
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40023800 	.word	0x40023800
 8001904:	40007000 	.word	0x40007000

08001908 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800190c:	2200      	movs	r2, #0
 800190e:	2100      	movs	r1, #0
 8001910:	2026      	movs	r0, #38	; 0x26
 8001912:	f000 ff54 	bl	80027be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001916:	2026      	movs	r0, #38	; 0x26
 8001918:	f000 ff6d 	bl	80027f6 <HAL_NVIC_EnableIRQ>
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800191c:	2200      	movs	r2, #0
 800191e:	2100      	movs	r1, #0
 8001920:	2047      	movs	r0, #71	; 0x47
 8001922:	f000 ff4c 	bl	80027be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001926:	2047      	movs	r0, #71	; 0x47
 8001928:	f000 ff65 	bl	80027f6 <HAL_NVIC_EnableIRQ>
  /* TIM1_CC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800192c:	2200      	movs	r2, #0
 800192e:	2100      	movs	r1, #0
 8001930:	201b      	movs	r0, #27
 8001932:	f000 ff44 	bl	80027be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001936:	201b      	movs	r0, #27
 8001938:	f000 ff5d 	bl	80027f6 <HAL_NVIC_EnableIRQ>
  /* TIM1_TRG_COM_TIM11_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800193c:	2200      	movs	r2, #0
 800193e:	2100      	movs	r1, #0
 8001940:	201a      	movs	r0, #26
 8001942:	f000 ff3c 	bl	80027be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001946:	201a      	movs	r0, #26
 8001948:	f000 ff55 	bl	80027f6 <HAL_NVIC_EnableIRQ>
  /* TIM1_UP_TIM10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800194c:	2200      	movs	r2, #0
 800194e:	2100      	movs	r1, #0
 8001950:	2019      	movs	r0, #25
 8001952:	f000 ff34 	bl	80027be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001956:	2019      	movs	r0, #25
 8001958:	f000 ff4d 	bl	80027f6 <HAL_NVIC_EnableIRQ>
  /* TIM1_BRK_TIM9_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800195c:	2200      	movs	r2, #0
 800195e:	2100      	movs	r1, #0
 8001960:	2018      	movs	r0, #24
 8001962:	f000 ff2c 	bl	80027be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001966:	2018      	movs	r0, #24
 8001968:	f000 ff45 	bl	80027f6 <HAL_NVIC_EnableIRQ>
}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}

08001970 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001976:	f107 0308 	add.w	r3, r7, #8
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	605a      	str	r2, [r3, #4]
 8001980:	609a      	str	r2, [r3, #8]
 8001982:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001984:	463b      	mov	r3, r7
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800198c:	4b1e      	ldr	r3, [pc, #120]	; (8001a08 <MX_TIM1_Init+0x98>)
 800198e:	4a1f      	ldr	r2, [pc, #124]	; (8001a0c <MX_TIM1_Init+0x9c>)
 8001990:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 840-1;
 8001992:	4b1d      	ldr	r3, [pc, #116]	; (8001a08 <MX_TIM1_Init+0x98>)
 8001994:	f240 3247 	movw	r2, #839	; 0x347
 8001998:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800199a:	4b1b      	ldr	r3, [pc, #108]	; (8001a08 <MX_TIM1_Init+0x98>)
 800199c:	2200      	movs	r2, #0
 800199e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80019a0:	4b19      	ldr	r3, [pc, #100]	; (8001a08 <MX_TIM1_Init+0x98>)
 80019a2:	2263      	movs	r2, #99	; 0x63
 80019a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019a6:	4b18      	ldr	r3, [pc, #96]	; (8001a08 <MX_TIM1_Init+0x98>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019ac:	4b16      	ldr	r3, [pc, #88]	; (8001a08 <MX_TIM1_Init+0x98>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b2:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <MX_TIM1_Init+0x98>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80019b8:	4813      	ldr	r0, [pc, #76]	; (8001a08 <MX_TIM1_Init+0x98>)
 80019ba:	f001 fe17 	bl	80035ec <HAL_TIM_Base_Init>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80019c4:	f000 f90c 	bl	8001be0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80019ce:	f107 0308 	add.w	r3, r7, #8
 80019d2:	4619      	mov	r1, r3
 80019d4:	480c      	ldr	r0, [pc, #48]	; (8001a08 <MX_TIM1_Init+0x98>)
 80019d6:	f001 ff60 	bl	800389a <HAL_TIM_ConfigClockSource>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80019e0:	f000 f8fe 	bl	8001be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019e4:	2300      	movs	r3, #0
 80019e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e8:	2300      	movs	r3, #0
 80019ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019ec:	463b      	mov	r3, r7
 80019ee:	4619      	mov	r1, r3
 80019f0:	4805      	ldr	r0, [pc, #20]	; (8001a08 <MX_TIM1_Init+0x98>)
 80019f2:	f002 f95b 	bl	8003cac <HAL_TIMEx_MasterConfigSynchronization>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80019fc:	f000 f8f0 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a00:	bf00      	nop
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20000230 	.word	0x20000230
 8001a0c:	40010000 	.word	0x40010000

08001a10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a14:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <MX_USART2_UART_Init+0x4c>)
 8001a16:	4a12      	ldr	r2, [pc, #72]	; (8001a60 <MX_USART2_UART_Init+0x50>)
 8001a18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001a1a:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <MX_USART2_UART_Init+0x4c>)
 8001a1c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a22:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <MX_USART2_UART_Init+0x4c>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a28:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <MX_USART2_UART_Init+0x4c>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a2e:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <MX_USART2_UART_Init+0x4c>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a34:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <MX_USART2_UART_Init+0x4c>)
 8001a36:	220c      	movs	r2, #12
 8001a38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a3a:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <MX_USART2_UART_Init+0x4c>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <MX_USART2_UART_Init+0x4c>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a46:	4805      	ldr	r0, [pc, #20]	; (8001a5c <MX_USART2_UART_Init+0x4c>)
 8001a48:	f002 f9b2 	bl	8003db0 <HAL_UART_Init>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a52:	f000 f8c5 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000278 	.word	0x20000278
 8001a60:	40004400 	.word	0x40004400

08001a64 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001a68:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <MX_USART6_UART_Init+0x4c>)
 8001a6a:	4a12      	ldr	r2, [pc, #72]	; (8001ab4 <MX_USART6_UART_Init+0x50>)
 8001a6c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001a6e:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <MX_USART6_UART_Init+0x4c>)
 8001a70:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a74:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001a76:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <MX_USART6_UART_Init+0x4c>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <MX_USART6_UART_Init+0x4c>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001a82:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <MX_USART6_UART_Init+0x4c>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001a88:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <MX_USART6_UART_Init+0x4c>)
 8001a8a:	220c      	movs	r2, #12
 8001a8c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a8e:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <MX_USART6_UART_Init+0x4c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <MX_USART6_UART_Init+0x4c>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001a9a:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <MX_USART6_UART_Init+0x4c>)
 8001a9c:	f002 f988 	bl	8003db0 <HAL_UART_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001aa6:	f000 f89b 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	200002bc 	.word	0x200002bc
 8001ab4:	40011400 	.word	0x40011400

08001ab8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08a      	sub	sp, #40	; 0x28
 8001abc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	60da      	str	r2, [r3, #12]
 8001acc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	4b3f      	ldr	r3, [pc, #252]	; (8001bd0 <MX_GPIO_Init+0x118>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	4a3e      	ldr	r2, [pc, #248]	; (8001bd0 <MX_GPIO_Init+0x118>)
 8001ad8:	f043 0304 	orr.w	r3, r3, #4
 8001adc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ade:	4b3c      	ldr	r3, [pc, #240]	; (8001bd0 <MX_GPIO_Init+0x118>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	f003 0304 	and.w	r3, r3, #4
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	4b38      	ldr	r3, [pc, #224]	; (8001bd0 <MX_GPIO_Init+0x118>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	4a37      	ldr	r2, [pc, #220]	; (8001bd0 <MX_GPIO_Init+0x118>)
 8001af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001af8:	6313      	str	r3, [r2, #48]	; 0x30
 8001afa:	4b35      	ldr	r3, [pc, #212]	; (8001bd0 <MX_GPIO_Init+0x118>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	60bb      	str	r3, [r7, #8]
 8001b0a:	4b31      	ldr	r3, [pc, #196]	; (8001bd0 <MX_GPIO_Init+0x118>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	4a30      	ldr	r2, [pc, #192]	; (8001bd0 <MX_GPIO_Init+0x118>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	6313      	str	r3, [r2, #48]	; 0x30
 8001b16:	4b2e      	ldr	r3, [pc, #184]	; (8001bd0 <MX_GPIO_Init+0x118>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	607b      	str	r3, [r7, #4]
 8001b26:	4b2a      	ldr	r3, [pc, #168]	; (8001bd0 <MX_GPIO_Init+0x118>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	4a29      	ldr	r2, [pc, #164]	; (8001bd0 <MX_GPIO_Init+0x118>)
 8001b2c:	f043 0302 	orr.w	r3, r3, #2
 8001b30:	6313      	str	r3, [r2, #48]	; 0x30
 8001b32:	4b27      	ldr	r3, [pc, #156]	; (8001bd0 <MX_GPIO_Init+0x118>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	607b      	str	r3, [r7, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2120      	movs	r1, #32
 8001b42:	4824      	ldr	r0, [pc, #144]	; (8001bd4 <MX_GPIO_Init+0x11c>)
 8001b44:	f001 f8a0 	bl	8002c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_SDA1_Pin|GPIO_SCL1_Pin|GPIO_SCL2_Pin, GPIO_PIN_RESET);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f44f 4130 	mov.w	r1, #45056	; 0xb000
 8001b4e:	4822      	ldr	r0, [pc, #136]	; (8001bd8 <MX_GPIO_Init+0x120>)
 8001b50:	f001 f89a 	bl	8002c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b5a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001b5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	4619      	mov	r1, r3
 8001b6a:	481c      	ldr	r0, [pc, #112]	; (8001bdc <MX_GPIO_Init+0x124>)
 8001b6c:	f000 fef0 	bl	8002950 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001b70:	2320      	movs	r3, #32
 8001b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b74:	2301      	movs	r3, #1
 8001b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001b80:	f107 0314 	add.w	r3, r7, #20
 8001b84:	4619      	mov	r1, r3
 8001b86:	4813      	ldr	r0, [pc, #76]	; (8001bd4 <MX_GPIO_Init+0x11c>)
 8001b88:	f000 fee2 	bl	8002950 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_SDA1_Pin GPIO_SCL1_Pin GPIO_SCL2_Pin */
  GPIO_InitStruct.Pin = GPIO_SDA1_Pin|GPIO_SCL1_Pin|GPIO_SCL2_Pin;
 8001b8c:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001b90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b92:	2301      	movs	r3, #1
 8001b94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9e:	f107 0314 	add.w	r3, r7, #20
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	480c      	ldr	r0, [pc, #48]	; (8001bd8 <MX_GPIO_Init+0x120>)
 8001ba6:	f000 fed3 	bl	8002950 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_SDA2_Pin */
  GPIO_InitStruct.Pin = GPIO_SDA2_Pin;
 8001baa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bb0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001bb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_SDA2_GPIO_Port, &GPIO_InitStruct);
 8001bba:	f107 0314 	add.w	r3, r7, #20
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4805      	ldr	r0, [pc, #20]	; (8001bd8 <MX_GPIO_Init+0x120>)
 8001bc2:	f000 fec5 	bl	8002950 <HAL_GPIO_Init>

}
 8001bc6:	bf00      	nop
 8001bc8:	3728      	adds	r7, #40	; 0x28
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	40020000 	.word	0x40020000
 8001bd8:	40020400 	.word	0x40020400
 8001bdc:	40020800 	.word	0x40020800

08001be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001be4:	b672      	cpsid	i
}
 8001be6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001be8:	e7fe      	b.n	8001be8 <Error_Handler+0x8>
	...

08001bec <MPU6050_Read_Accel>:
    return 1;
}


void MPU6050_Read_Accel(uint8_t sel, uint8_t IICID)
{
 8001bec:	b590      	push	{r4, r7, lr}
 8001bee:	b089      	sub	sp, #36	; 0x24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	460a      	mov	r2, r1
 8001bf6:	71fb      	strb	r3, [r7, #7]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	71bb      	strb	r3, [r7, #6]
    uint16_t raw_accel_x = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	837b      	strh	r3, [r7, #26]
    uint16_t raw_accel_y = 0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	833b      	strh	r3, [r7, #24]
    uint16_t raw_accel_z = 0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	82fb      	strh	r3, [r7, #22]
    int16_t temp[3] = {0,0,0};
 8001c08:	2300      	movs	r3, #0
 8001c0a:	823b      	strh	r3, [r7, #16]
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	827b      	strh	r3, [r7, #18]
 8001c10:	2300      	movs	r3, #0
 8001c12:	82bb      	strh	r3, [r7, #20]
    short mpu6050[3] = {0,0,0};
 8001c14:	2300      	movs	r3, #0
 8001c16:	813b      	strh	r3, [r7, #8]
 8001c18:	2300      	movs	r3, #0
 8001c1a:	817b      	strh	r3, [r7, #10]
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	81bb      	strh	r3, [r7, #12]
    static uint8_t CntReset = 0, CntInit = 0;

    int i = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	61fb      	str	r3, [r7, #28]
//    raw_accel_x = SW_I2C_ReadControl_16Bit(sel, IICID, ACCEL_XOUT_H_REG);
//    raw_accel_y = SW_I2C_ReadControl_16Bit(sel, IICID, ACCEL_YOUT_H_REG);
//    raw_accel_z = SW_I2C_ReadControl_16Bit(sel, IICID, ACCEL_ZOUT_H_REG);


    raw_accel_x = (SW_I2C_ReadControl_8Bit(sel, IICID, ACCEL_XOUT_H_REG) << 8 | SW_I2C_ReadControl_8Bit(sel, IICID, ACCEL_XOUT_L_REG) );
 8001c24:	79b9      	ldrb	r1, [r7, #6]
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	223b      	movs	r2, #59	; 0x3b
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff fd6a 	bl	8001704 <SW_I2C_ReadControl_8Bit>
 8001c30:	4603      	mov	r3, r0
 8001c32:	021b      	lsls	r3, r3, #8
 8001c34:	b21c      	sxth	r4, r3
 8001c36:	79b9      	ldrb	r1, [r7, #6]
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	223c      	movs	r2, #60	; 0x3c
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff fd61 	bl	8001704 <SW_I2C_ReadControl_8Bit>
 8001c42:	4603      	mov	r3, r0
 8001c44:	b21b      	sxth	r3, r3
 8001c46:	4323      	orrs	r3, r4
 8001c48:	b21b      	sxth	r3, r3
 8001c4a:	837b      	strh	r3, [r7, #26]
    raw_accel_y = (SW_I2C_ReadControl_8Bit(sel, IICID, ACCEL_YOUT_H_REG) << 8 | SW_I2C_ReadControl_8Bit(sel, IICID, ACCEL_YOUT_L_REG) );
 8001c4c:	79b9      	ldrb	r1, [r7, #6]
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
 8001c50:	223d      	movs	r2, #61	; 0x3d
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff fd56 	bl	8001704 <SW_I2C_ReadControl_8Bit>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	021b      	lsls	r3, r3, #8
 8001c5c:	b21c      	sxth	r4, r3
 8001c5e:	79b9      	ldrb	r1, [r7, #6]
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	223e      	movs	r2, #62	; 0x3e
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff fd4d 	bl	8001704 <SW_I2C_ReadControl_8Bit>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	b21b      	sxth	r3, r3
 8001c6e:	4323      	orrs	r3, r4
 8001c70:	b21b      	sxth	r3, r3
 8001c72:	833b      	strh	r3, [r7, #24]
    raw_accel_z = (SW_I2C_ReadControl_8Bit(sel, IICID, ACCEL_ZOUT_H_REG) << 8 | SW_I2C_ReadControl_8Bit(sel, IICID, ACCEL_ZOUT_L_REG) );
 8001c74:	79b9      	ldrb	r1, [r7, #6]
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	223f      	movs	r2, #63	; 0x3f
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fd42 	bl	8001704 <SW_I2C_ReadControl_8Bit>
 8001c80:	4603      	mov	r3, r0
 8001c82:	021b      	lsls	r3, r3, #8
 8001c84:	b21c      	sxth	r4, r3
 8001c86:	79b9      	ldrb	r1, [r7, #6]
 8001c88:	79fb      	ldrb	r3, [r7, #7]
 8001c8a:	2240      	movs	r2, #64	; 0x40
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff fd39 	bl	8001704 <SW_I2C_ReadControl_8Bit>
 8001c92:	4603      	mov	r3, r0
 8001c94:	b21b      	sxth	r3, r3
 8001c96:	4323      	orrs	r3, r4
 8001c98:	b21b      	sxth	r3, r3
 8001c9a:	82fb      	strh	r3, [r7, #22]

    temp[0] = (int16_t)raw_accel_x;
 8001c9c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001ca0:	823b      	strh	r3, [r7, #16]
    temp[1] = (int16_t)raw_accel_y;
 8001ca2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001ca6:	827b      	strh	r3, [r7, #18]
    temp[2] = (int16_t)raw_accel_z;
 8001ca8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001cac:	82bb      	strh	r3, [r7, #20]


    for (i = 0;  i < 3; i++)
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61fb      	str	r3, [r7, #28]
 8001cb2:	e016      	b.n	8001ce2 <MPU6050_Read_Accel+0xf6>
    {
    	mpu6050[i] = ss_Kalman(temp[i], i);
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	3320      	adds	r3, #32
 8001cba:	443b      	add	r3, r7
 8001cbc:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001cc0:	69fa      	ldr	r2, [r7, #28]
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	4611      	mov	r1, r2
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f000 fb2a 	bl	8002320 <ss_Kalman>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	461a      	mov	r2, r3
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	3320      	adds	r3, #32
 8001cd6:	443b      	add	r3, r7
 8001cd8:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0;  i < 3; i++)
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	61fb      	str	r3, [r7, #28]
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	dde5      	ble.n	8001cb4 <MPU6050_Read_Accel+0xc8>
	}

    if( (mpu6050[0] == mpu6050[1]) && (mpu6050[1] == mpu6050[2]) && (mpu6050[0] != 0) )
 8001ce8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001cec:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d134      	bne.n	8001d5e <MPU6050_Read_Accel+0x172>
 8001cf4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001cf8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d12e      	bne.n	8001d5e <MPU6050_Read_Accel+0x172>
 8001d00:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d02a      	beq.n	8001d5e <MPU6050_Read_Accel+0x172>
    {
		SW_I2C_WriteControl_8Bit(sel, IICID, PWR_MGMT_1_REG,	0x80);
 8001d08:	79b9      	ldrb	r1, [r7, #6]
 8001d0a:	79f8      	ldrb	r0, [r7, #7]
 8001d0c:	2380      	movs	r3, #128	; 0x80
 8001d0e:	226b      	movs	r2, #107	; 0x6b
 8001d10:	f7ff fc96 	bl	8001640 <SW_I2C_WriteControl_8Bit>
		HAL_Delay(10);
 8001d14:	200a      	movs	r0, #10
 8001d16:	f000 fc53 	bl	80025c0 <HAL_Delay>

		SW_I2C_WriteControl_8Bit(sel, IICID, PWR_MGMT_1_REG,	0x00);
 8001d1a:	79b9      	ldrb	r1, [r7, #6]
 8001d1c:	79f8      	ldrb	r0, [r7, #7]
 8001d1e:	2300      	movs	r3, #0
 8001d20:	226b      	movs	r2, #107	; 0x6b
 8001d22:	f7ff fc8d 	bl	8001640 <SW_I2C_WriteControl_8Bit>
		HAL_Delay(10);
 8001d26:	200a      	movs	r0, #10
 8001d28:	f000 fc4a 	bl	80025c0 <HAL_Delay>

		SW_I2C_WriteControl_8Bit(sel, IICID, SMPLRT_DIV_REG,	0x00);
 8001d2c:	79b9      	ldrb	r1, [r7, #6]
 8001d2e:	79f8      	ldrb	r0, [r7, #7]
 8001d30:	2300      	movs	r3, #0
 8001d32:	2219      	movs	r2, #25
 8001d34:	f7ff fc84 	bl	8001640 <SW_I2C_WriteControl_8Bit>
		SW_I2C_WriteControl_8Bit(sel, IICID, GYRO_CONFIG_REG,	0x00);
 8001d38:	79b9      	ldrb	r1, [r7, #6]
 8001d3a:	79f8      	ldrb	r0, [r7, #7]
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	221b      	movs	r2, #27
 8001d40:	f7ff fc7e 	bl	8001640 <SW_I2C_WriteControl_8Bit>
		SW_I2C_WriteControl_8Bit(sel, IICID, ACCEL_CONFIG_REG,	0x00);
 8001d44:	79b9      	ldrb	r1, [r7, #6]
 8001d46:	79f8      	ldrb	r0, [r7, #7]
 8001d48:	2300      	movs	r3, #0
 8001d4a:	221c      	movs	r2, #28
 8001d4c:	f7ff fc78 	bl	8001640 <SW_I2C_WriteControl_8Bit>

		//i2c_device_write(GYRO_DEV, 0x1C, 0x18); //ACCE CONFIG

		CntReset ++;
 8001d50:	4b55      	ldr	r3, [pc, #340]	; (8001ea8 <MPU6050_Read_Accel+0x2bc>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	3301      	adds	r3, #1
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	4b53      	ldr	r3, [pc, #332]	; (8001ea8 <MPU6050_Read_Accel+0x2bc>)
 8001d5a:	701a      	strb	r2, [r3, #0]
 8001d5c:	e045      	b.n	8001dea <MPU6050_Read_Accel+0x1fe>
    }


    else if( (mpu6050[0] == mpu6050[1]) || (mpu6050[1] == mpu6050[2]) )  //-32767을 띄는 형태
 8001d5e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001d62:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d005      	beq.n	8001d76 <MPU6050_Read_Accel+0x18a>
 8001d6a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001d6e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d134      	bne.n	8001de0 <MPU6050_Read_Accel+0x1f4>
    {
		if( (mpu6050[0] == -32767) || (mpu6050[2] == -32767) )
 8001d76:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001d7a:	4a4c      	ldr	r2, [pc, #304]	; (8001eac <MPU6050_Read_Accel+0x2c0>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d004      	beq.n	8001d8a <MPU6050_Read_Accel+0x19e>
 8001d80:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001d84:	4a49      	ldr	r2, [pc, #292]	; (8001eac <MPU6050_Read_Accel+0x2c0>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d12e      	bne.n	8001de8 <MPU6050_Read_Accel+0x1fc>
		{
			SW_I2C_WriteControl_8Bit(sel, IICID, PWR_MGMT_1_REG,	0x80);
 8001d8a:	79b9      	ldrb	r1, [r7, #6]
 8001d8c:	79f8      	ldrb	r0, [r7, #7]
 8001d8e:	2380      	movs	r3, #128	; 0x80
 8001d90:	226b      	movs	r2, #107	; 0x6b
 8001d92:	f7ff fc55 	bl	8001640 <SW_I2C_WriteControl_8Bit>
			HAL_Delay(10);
 8001d96:	200a      	movs	r0, #10
 8001d98:	f000 fc12 	bl	80025c0 <HAL_Delay>

			SW_I2C_WriteControl_8Bit(sel, IICID, PWR_MGMT_1_REG,	0x00);
 8001d9c:	79b9      	ldrb	r1, [r7, #6]
 8001d9e:	79f8      	ldrb	r0, [r7, #7]
 8001da0:	2300      	movs	r3, #0
 8001da2:	226b      	movs	r2, #107	; 0x6b
 8001da4:	f7ff fc4c 	bl	8001640 <SW_I2C_WriteControl_8Bit>
			HAL_Delay(10);
 8001da8:	200a      	movs	r0, #10
 8001daa:	f000 fc09 	bl	80025c0 <HAL_Delay>

			SW_I2C_WriteControl_8Bit(sel, IICID, SMPLRT_DIV_REG,	0x00);
 8001dae:	79b9      	ldrb	r1, [r7, #6]
 8001db0:	79f8      	ldrb	r0, [r7, #7]
 8001db2:	2300      	movs	r3, #0
 8001db4:	2219      	movs	r2, #25
 8001db6:	f7ff fc43 	bl	8001640 <SW_I2C_WriteControl_8Bit>
			SW_I2C_WriteControl_8Bit(sel, IICID, GYRO_CONFIG_REG,	0x00);
 8001dba:	79b9      	ldrb	r1, [r7, #6]
 8001dbc:	79f8      	ldrb	r0, [r7, #7]
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	221b      	movs	r2, #27
 8001dc2:	f7ff fc3d 	bl	8001640 <SW_I2C_WriteControl_8Bit>
			SW_I2C_WriteControl_8Bit(sel, IICID, ACCEL_CONFIG_REG,	0x00);
 8001dc6:	79b9      	ldrb	r1, [r7, #6]
 8001dc8:	79f8      	ldrb	r0, [r7, #7]
 8001dca:	2300      	movs	r3, #0
 8001dcc:	221c      	movs	r2, #28
 8001dce:	f7ff fc37 	bl	8001640 <SW_I2C_WriteControl_8Bit>

			//i2c_device_write(GYRO_DEV, 0x1C, 0x18); //ACCE CONFIG

			CntReset ++;
 8001dd2:	4b35      	ldr	r3, [pc, #212]	; (8001ea8 <MPU6050_Read_Accel+0x2bc>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	4b33      	ldr	r3, [pc, #204]	; (8001ea8 <MPU6050_Read_Accel+0x2bc>)
 8001ddc:	701a      	strb	r2, [r3, #0]
		if( (mpu6050[0] == -32767) || (mpu6050[2] == -32767) )
 8001dde:	e003      	b.n	8001de8 <MPU6050_Read_Accel+0x1fc>
		}

    }
    else
    {
	  CntReset = 0;
 8001de0:	4b31      	ldr	r3, [pc, #196]	; (8001ea8 <MPU6050_Read_Accel+0x2bc>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	701a      	strb	r2, [r3, #0]
 8001de6:	e000      	b.n	8001dea <MPU6050_Read_Accel+0x1fe>
		if( (mpu6050[0] == -32767) || (mpu6050[2] == -32767) )
 8001de8:	bf00      	nop
    }

	if( (mpu6050[0] == mpu6050[1]) && (mpu6050[1] == mpu6050[2]) && (mpu6050[0] == 0) ) //중간에 뺏따가 꽂았을 때
 8001dea:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001dee:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d10f      	bne.n	8001e16 <MPU6050_Read_Accel+0x22a>
 8001df6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001dfa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d109      	bne.n	8001e16 <MPU6050_Read_Accel+0x22a>
 8001e02:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d105      	bne.n	8001e16 <MPU6050_Read_Accel+0x22a>
	{
		CntInit ++;
 8001e0a:	4b29      	ldr	r3, [pc, #164]	; (8001eb0 <MPU6050_Read_Accel+0x2c4>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	4b27      	ldr	r3, [pc, #156]	; (8001eb0 <MPU6050_Read_Accel+0x2c4>)
 8001e14:	701a      	strb	r2, [r3, #0]
	}

	if( CntInit > 50 )
 8001e16:	4b26      	ldr	r3, [pc, #152]	; (8001eb0 <MPU6050_Read_Accel+0x2c4>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b32      	cmp	r3, #50	; 0x32
 8001e1c:	d929      	bls.n	8001e72 <MPU6050_Read_Accel+0x286>
	{
		CntInit = 0;
 8001e1e:	4b24      	ldr	r3, [pc, #144]	; (8001eb0 <MPU6050_Read_Accel+0x2c4>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	701a      	strb	r2, [r3, #0]

		SW_I2C_WriteControl_8Bit(sel, IICID, PWR_MGMT_1_REG,	0x80);
 8001e24:	79b9      	ldrb	r1, [r7, #6]
 8001e26:	79f8      	ldrb	r0, [r7, #7]
 8001e28:	2380      	movs	r3, #128	; 0x80
 8001e2a:	226b      	movs	r2, #107	; 0x6b
 8001e2c:	f7ff fc08 	bl	8001640 <SW_I2C_WriteControl_8Bit>
		HAL_Delay(10);
 8001e30:	200a      	movs	r0, #10
 8001e32:	f000 fbc5 	bl	80025c0 <HAL_Delay>

		SW_I2C_WriteControl_8Bit(sel, IICID, PWR_MGMT_1_REG,	0x00);
 8001e36:	79b9      	ldrb	r1, [r7, #6]
 8001e38:	79f8      	ldrb	r0, [r7, #7]
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	226b      	movs	r2, #107	; 0x6b
 8001e3e:	f7ff fbff 	bl	8001640 <SW_I2C_WriteControl_8Bit>
		HAL_Delay(10);
 8001e42:	200a      	movs	r0, #10
 8001e44:	f000 fbbc 	bl	80025c0 <HAL_Delay>

		SW_I2C_WriteControl_8Bit(sel, IICID, SMPLRT_DIV_REG,	0x00);
 8001e48:	79b9      	ldrb	r1, [r7, #6]
 8001e4a:	79f8      	ldrb	r0, [r7, #7]
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	2219      	movs	r2, #25
 8001e50:	f7ff fbf6 	bl	8001640 <SW_I2C_WriteControl_8Bit>
		SW_I2C_WriteControl_8Bit(sel, IICID, GYRO_CONFIG_REG,	0x00);
 8001e54:	79b9      	ldrb	r1, [r7, #6]
 8001e56:	79f8      	ldrb	r0, [r7, #7]
 8001e58:	2300      	movs	r3, #0
 8001e5a:	221b      	movs	r2, #27
 8001e5c:	f7ff fbf0 	bl	8001640 <SW_I2C_WriteControl_8Bit>
		SW_I2C_WriteControl_8Bit(sel, IICID, ACCEL_CONFIG_REG,	0x00);
 8001e60:	79b9      	ldrb	r1, [r7, #6]
 8001e62:	79f8      	ldrb	r0, [r7, #7]
 8001e64:	2300      	movs	r3, #0
 8001e66:	221c      	movs	r2, #28
 8001e68:	f7ff fbea 	bl	8001640 <SW_I2C_WriteControl_8Bit>

		HAL_Delay(100);
 8001e6c:	2064      	movs	r0, #100	; 0x64
 8001e6e:	f000 fba7 	bl	80025c0 <HAL_Delay>
	}

    for (i = 0;  i < 3; i++)
 8001e72:	2300      	movs	r3, #0
 8001e74:	61fb      	str	r3, [r7, #28]
 8001e76:	e00c      	b.n	8001e92 <MPU6050_Read_Accel+0x2a6>
	{
    	printf("%d/",mpu6050[i]);
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	3320      	adds	r3, #32
 8001e7e:	443b      	add	r3, r7
 8001e80:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8001e84:	4619      	mov	r1, r3
 8001e86:	480b      	ldr	r0, [pc, #44]	; (8001eb4 <MPU6050_Read_Accel+0x2c8>)
 8001e88:	f003 fec0 	bl	8005c0c <iprintf>
    for (i = 0;  i < 3; i++)
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	61fb      	str	r3, [r7, #28]
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	ddef      	ble.n	8001e78 <MPU6050_Read_Accel+0x28c>
	}
    printf("\n");
 8001e98:	200a      	movs	r0, #10
 8001e9a:	f003 fecf 	bl	8005c3c <putchar>

}
 8001e9e:	bf00      	nop
 8001ea0:	3724      	adds	r7, #36	; 0x24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd90      	pop	{r4, r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20000300 	.word	0x20000300
 8001eac:	ffff8001 	.word	0xffff8001
 8001eb0:	20000301 	.word	0x20000301
 8001eb4:	08009a58 	.word	0x08009a58

08001eb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	607b      	str	r3, [r7, #4]
 8001ec2:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <HAL_MspInit+0x4c>)
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec6:	4a0f      	ldr	r2, [pc, #60]	; (8001f04 <HAL_MspInit+0x4c>)
 8001ec8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ecc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ece:	4b0d      	ldr	r3, [pc, #52]	; (8001f04 <HAL_MspInit+0x4c>)
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ed6:	607b      	str	r3, [r7, #4]
 8001ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	603b      	str	r3, [r7, #0]
 8001ede:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <HAL_MspInit+0x4c>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	4a08      	ldr	r2, [pc, #32]	; (8001f04 <HAL_MspInit+0x4c>)
 8001ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eea:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <HAL_MspInit+0x4c>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef2:	603b      	str	r3, [r7, #0]
 8001ef4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ef6:	2007      	movs	r0, #7
 8001ef8:	f000 fc56 	bl	80027a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001efc:	bf00      	nop
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40023800 	.word	0x40023800

08001f08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a0b      	ldr	r2, [pc, #44]	; (8001f44 <HAL_TIM_Base_MspInit+0x3c>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d10d      	bne.n	8001f36 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	4b0a      	ldr	r3, [pc, #40]	; (8001f48 <HAL_TIM_Base_MspInit+0x40>)
 8001f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f22:	4a09      	ldr	r2, [pc, #36]	; (8001f48 <HAL_TIM_Base_MspInit+0x40>)
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	6453      	str	r3, [r2, #68]	; 0x44
 8001f2a:	4b07      	ldr	r3, [pc, #28]	; (8001f48 <HAL_TIM_Base_MspInit+0x40>)
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001f36:	bf00      	nop
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	40010000 	.word	0x40010000
 8001f48:	40023800 	.word	0x40023800

08001f4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b08c      	sub	sp, #48	; 0x30
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f54:	f107 031c 	add.w	r3, r7, #28
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	60da      	str	r2, [r3, #12]
 8001f62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a32      	ldr	r2, [pc, #200]	; (8002034 <HAL_UART_MspInit+0xe8>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d12c      	bne.n	8001fc8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61bb      	str	r3, [r7, #24]
 8001f72:	4b31      	ldr	r3, [pc, #196]	; (8002038 <HAL_UART_MspInit+0xec>)
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	4a30      	ldr	r2, [pc, #192]	; (8002038 <HAL_UART_MspInit+0xec>)
 8001f78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f7e:	4b2e      	ldr	r3, [pc, #184]	; (8002038 <HAL_UART_MspInit+0xec>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f86:	61bb      	str	r3, [r7, #24]
 8001f88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	617b      	str	r3, [r7, #20]
 8001f8e:	4b2a      	ldr	r3, [pc, #168]	; (8002038 <HAL_UART_MspInit+0xec>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	4a29      	ldr	r2, [pc, #164]	; (8002038 <HAL_UART_MspInit+0xec>)
 8001f94:	f043 0301 	orr.w	r3, r3, #1
 8001f98:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9a:	4b27      	ldr	r3, [pc, #156]	; (8002038 <HAL_UART_MspInit+0xec>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	617b      	str	r3, [r7, #20]
 8001fa4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001fa6:	230c      	movs	r3, #12
 8001fa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001faa:	2302      	movs	r3, #2
 8001fac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fb6:	2307      	movs	r3, #7
 8001fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fba:	f107 031c 	add.w	r3, r7, #28
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	481e      	ldr	r0, [pc, #120]	; (800203c <HAL_UART_MspInit+0xf0>)
 8001fc2:	f000 fcc5 	bl	8002950 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001fc6:	e030      	b.n	800202a <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a1c      	ldr	r2, [pc, #112]	; (8002040 <HAL_UART_MspInit+0xf4>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d12b      	bne.n	800202a <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	613b      	str	r3, [r7, #16]
 8001fd6:	4b18      	ldr	r3, [pc, #96]	; (8002038 <HAL_UART_MspInit+0xec>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fda:	4a17      	ldr	r2, [pc, #92]	; (8002038 <HAL_UART_MspInit+0xec>)
 8001fdc:	f043 0320 	orr.w	r3, r3, #32
 8001fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fe2:	4b15      	ldr	r3, [pc, #84]	; (8002038 <HAL_UART_MspInit+0xec>)
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe6:	f003 0320 	and.w	r3, r3, #32
 8001fea:	613b      	str	r3, [r7, #16]
 8001fec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	4b11      	ldr	r3, [pc, #68]	; (8002038 <HAL_UART_MspInit+0xec>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	4a10      	ldr	r2, [pc, #64]	; (8002038 <HAL_UART_MspInit+0xec>)
 8001ff8:	f043 0304 	orr.w	r3, r3, #4
 8001ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffe:	4b0e      	ldr	r3, [pc, #56]	; (8002038 <HAL_UART_MspInit+0xec>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	f003 0304 	and.w	r3, r3, #4
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800200a:	23c0      	movs	r3, #192	; 0xc0
 800200c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200e:	2302      	movs	r3, #2
 8002010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002012:	2300      	movs	r3, #0
 8002014:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002016:	2303      	movs	r3, #3
 8002018:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800201a:	2308      	movs	r3, #8
 800201c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800201e:	f107 031c 	add.w	r3, r7, #28
 8002022:	4619      	mov	r1, r3
 8002024:	4807      	ldr	r0, [pc, #28]	; (8002044 <HAL_UART_MspInit+0xf8>)
 8002026:	f000 fc93 	bl	8002950 <HAL_GPIO_Init>
}
 800202a:	bf00      	nop
 800202c:	3730      	adds	r7, #48	; 0x30
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40004400 	.word	0x40004400
 8002038:	40023800 	.word	0x40023800
 800203c:	40020000 	.word	0x40020000
 8002040:	40011400 	.word	0x40011400
 8002044:	40020800 	.word	0x40020800

08002048 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800204c:	e7fe      	b.n	800204c <NMI_Handler+0x4>

0800204e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800204e:	b480      	push	{r7}
 8002050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002052:	e7fe      	b.n	8002052 <HardFault_Handler+0x4>

08002054 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002058:	e7fe      	b.n	8002058 <MemManage_Handler+0x4>

0800205a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800205a:	b480      	push	{r7}
 800205c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800205e:	e7fe      	b.n	800205e <BusFault_Handler+0x4>

08002060 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002064:	e7fe      	b.n	8002064 <UsageFault_Handler+0x4>

08002066 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002078:	bf00      	nop
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002082:	b480      	push	{r7}
 8002084:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002094:	f000 fa74 	bl	8002580 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002098:	bf00      	nop
 800209a:	bd80      	pop	{r7, pc}

0800209c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020a0:	4802      	ldr	r0, [pc, #8]	; (80020ac <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80020a2:	f001 faf2 	bl	800368a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000230 	.word	0x20000230

080020b0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020b4:	4802      	ldr	r0, [pc, #8]	; (80020c0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80020b6:	f001 fae8 	bl	800368a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20000230 	.word	0x20000230

080020c4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020c8:	4802      	ldr	r0, [pc, #8]	; (80020d4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80020ca:	f001 fade 	bl	800368a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20000230 	.word	0x20000230

080020d8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020dc:	4802      	ldr	r0, [pc, #8]	; (80020e8 <TIM1_CC_IRQHandler+0x10>)
 80020de:	f001 fad4 	bl	800368a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	20000230 	.word	0x20000230

080020ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020f0:	4802      	ldr	r0, [pc, #8]	; (80020fc <USART2_IRQHandler+0x10>)
 80020f2:	f001 ff6d 	bl	8003fd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000278 	.word	0x20000278

08002100 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002104:	4802      	ldr	r0, [pc, #8]	; (8002110 <USART6_IRQHandler+0x10>)
 8002106:	f001 ff63 	bl	8003fd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	200002bc 	.word	0x200002bc

08002114 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
	return 1;
 8002118:	2301      	movs	r3, #1
}
 800211a:	4618      	mov	r0, r3
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <_kill>:

int _kill(int pid, int sig)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800212e:	f002 feb3 	bl	8004e98 <__errno>
 8002132:	4603      	mov	r3, r0
 8002134:	2216      	movs	r2, #22
 8002136:	601a      	str	r2, [r3, #0]
	return -1;
 8002138:	f04f 33ff 	mov.w	r3, #4294967295
}
 800213c:	4618      	mov	r0, r3
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <_exit>:

void _exit (int status)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800214c:	f04f 31ff 	mov.w	r1, #4294967295
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7ff ffe7 	bl	8002124 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002156:	e7fe      	b.n	8002156 <_exit+0x12>

08002158 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002164:	2300      	movs	r3, #0
 8002166:	617b      	str	r3, [r7, #20]
 8002168:	e00a      	b.n	8002180 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800216a:	f3af 8000 	nop.w
 800216e:	4601      	mov	r1, r0
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	1c5a      	adds	r2, r3, #1
 8002174:	60ba      	str	r2, [r7, #8]
 8002176:	b2ca      	uxtb	r2, r1
 8002178:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	3301      	adds	r3, #1
 800217e:	617b      	str	r3, [r7, #20]
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	429a      	cmp	r2, r3
 8002186:	dbf0      	blt.n	800216a <_read+0x12>
	}

return len;
 8002188:	687b      	ldr	r3, [r7, #4]
}
 800218a:	4618      	mov	r0, r3
 800218c:	3718      	adds	r7, #24
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b086      	sub	sp, #24
 8002196:	af00      	add	r7, sp, #0
 8002198:	60f8      	str	r0, [r7, #12]
 800219a:	60b9      	str	r1, [r7, #8]
 800219c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]
 80021a2:	e009      	b.n	80021b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	1c5a      	adds	r2, r3, #1
 80021a8:	60ba      	str	r2, [r7, #8]
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff faf9 	bl	80017a4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	3301      	adds	r3, #1
 80021b6:	617b      	str	r3, [r7, #20]
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	429a      	cmp	r2, r3
 80021be:	dbf1      	blt.n	80021a4 <_write+0x12>
	}
	return len;
 80021c0:	687b      	ldr	r3, [r7, #4]
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3718      	adds	r7, #24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <_close>:

int _close(int file)
{
 80021ca:	b480      	push	{r7}
 80021cc:	b083      	sub	sp, #12
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
	return -1;
 80021d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
 80021ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021f2:	605a      	str	r2, [r3, #4]
	return 0;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <_isatty>:

int _isatty(int file)
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
	return 1;
 800220a:	2301      	movs	r3, #1
}
 800220c:	4618      	mov	r0, r3
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
	return 0;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
	...

08002234 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800223c:	4a14      	ldr	r2, [pc, #80]	; (8002290 <_sbrk+0x5c>)
 800223e:	4b15      	ldr	r3, [pc, #84]	; (8002294 <_sbrk+0x60>)
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002248:	4b13      	ldr	r3, [pc, #76]	; (8002298 <_sbrk+0x64>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d102      	bne.n	8002256 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002250:	4b11      	ldr	r3, [pc, #68]	; (8002298 <_sbrk+0x64>)
 8002252:	4a12      	ldr	r2, [pc, #72]	; (800229c <_sbrk+0x68>)
 8002254:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002256:	4b10      	ldr	r3, [pc, #64]	; (8002298 <_sbrk+0x64>)
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4413      	add	r3, r2
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	429a      	cmp	r2, r3
 8002262:	d207      	bcs.n	8002274 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002264:	f002 fe18 	bl	8004e98 <__errno>
 8002268:	4603      	mov	r3, r0
 800226a:	220c      	movs	r2, #12
 800226c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800226e:	f04f 33ff 	mov.w	r3, #4294967295
 8002272:	e009      	b.n	8002288 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002274:	4b08      	ldr	r3, [pc, #32]	; (8002298 <_sbrk+0x64>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800227a:	4b07      	ldr	r3, [pc, #28]	; (8002298 <_sbrk+0x64>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4413      	add	r3, r2
 8002282:	4a05      	ldr	r2, [pc, #20]	; (8002298 <_sbrk+0x64>)
 8002284:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002286:	68fb      	ldr	r3, [r7, #12]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	20020000 	.word	0x20020000
 8002294:	00000400 	.word	0x00000400
 8002298:	20000304 	.word	0x20000304
 800229c:	20000380 	.word	0x20000380

080022a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022a4:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <SystemInit+0x20>)
 80022a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022aa:	4a05      	ldr	r2, [pc, #20]	; (80022c0 <SystemInit+0x20>)
 80022ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <HAL_UART_RxCpltCallback>:
extern uint8_t RxTimerFlag;

extern UART_HandleTypeDef huart2;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
	if(huart == &huart2) // Modbus Slave TX
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a0f      	ldr	r2, [pc, #60]	; (800230c <HAL_UART_RxCpltCallback+0x48>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d117      	bne.n	8002304 <HAL_UART_RxCpltCallback+0x40>
	{
		RxTimerFlag = ON;
 80022d4:	4b0e      	ldr	r3, [pc, #56]	; (8002310 <HAL_UART_RxCpltCallback+0x4c>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	701a      	strb	r2, [r3, #0]

		if(RxTimerFlag)
 80022da:	4b0d      	ldr	r3, [pc, #52]	; (8002310 <HAL_UART_RxCpltCallback+0x4c>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00b      	beq.n	80022fa <HAL_UART_RxCpltCallback+0x36>
		{
			MB_RxBuf[RX_DataCnt++] = RX_Data;
 80022e2:	4b0c      	ldr	r3, [pc, #48]	; (8002314 <HAL_UART_RxCpltCallback+0x50>)
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	1c5a      	adds	r2, r3, #1
 80022ea:	b291      	uxth	r1, r2
 80022ec:	4a09      	ldr	r2, [pc, #36]	; (8002314 <HAL_UART_RxCpltCallback+0x50>)
 80022ee:	8011      	strh	r1, [r2, #0]
 80022f0:	461a      	mov	r2, r3
 80022f2:	4b09      	ldr	r3, [pc, #36]	; (8002318 <HAL_UART_RxCpltCallback+0x54>)
 80022f4:	7819      	ldrb	r1, [r3, #0]
 80022f6:	4b09      	ldr	r3, [pc, #36]	; (800231c <HAL_UART_RxCpltCallback+0x58>)
 80022f8:	5499      	strb	r1, [r3, r2]
		}

		HAL_UART_Receive_IT(&huart2, &RX_Data, 1);
 80022fa:	2201      	movs	r2, #1
 80022fc:	4906      	ldr	r1, [pc, #24]	; (8002318 <HAL_UART_RxCpltCallback+0x54>)
 80022fe:	4803      	ldr	r0, [pc, #12]	; (800230c <HAL_UART_RxCpltCallback+0x48>)
 8002300:	f001 fe35 	bl	8003f6e <HAL_UART_Receive_IT>
	}

}
 8002304:	bf00      	nop
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	20000278 	.word	0x20000278
 8002310:	2000022d 	.word	0x2000022d
 8002314:	20000214 	.word	0x20000214
 8002318:	2000022c 	.word	0x2000022c
 800231c:	20000218 	.word	0x20000218

08002320 <ss_Kalman>:
float g_P_MPU[6] = {1,1,1,1,1,1};
float g_K_MPU[6] = {0,0,0,0,0,0};
float g_z_MPU[6] = {0,0,0,0,0,0};

short ss_Kalman(short fval, unsigned char portnum)
{
 8002320:	b5b0      	push	{r4, r5, r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	460a      	mov	r2, r1
 800232a:	80fb      	strh	r3, [r7, #6]
 800232c:	4613      	mov	r3, r2
 800232e:	717b      	strb	r3, [r7, #5]
    float l_z ;

    // predict..
    g_xPredict_MPU[portnum]=g_x_MPU[portnum];
 8002330:	797a      	ldrb	r2, [r7, #5]
 8002332:	797b      	ldrb	r3, [r7, #5]
 8002334:	494e      	ldr	r1, [pc, #312]	; (8002470 <ss_Kalman+0x150>)
 8002336:	0092      	lsls	r2, r2, #2
 8002338:	440a      	add	r2, r1
 800233a:	6812      	ldr	r2, [r2, #0]
 800233c:	494d      	ldr	r1, [pc, #308]	; (8002474 <ss_Kalman+0x154>)
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	601a      	str	r2, [r3, #0]
    g_PPredict_MPU[portnum]=g_P_MPU[portnum] + kal_Q;
 8002344:	797b      	ldrb	r3, [r7, #5]
 8002346:	4a4c      	ldr	r2, [pc, #304]	; (8002478 <ss_Kalman+0x158>)
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f7fe f902 	bl	8000558 <__aeabi_f2d>
 8002354:	a344      	add	r3, pc, #272	; (adr r3, 8002468 <ss_Kalman+0x148>)
 8002356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800235a:	f7fd ff9f 	bl	800029c <__adddf3>
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	797c      	ldrb	r4, [r7, #5]
 8002364:	4610      	mov	r0, r2
 8002366:	4619      	mov	r1, r3
 8002368:	f7fe fc46 	bl	8000bf8 <__aeabi_d2f>
 800236c:	4602      	mov	r2, r0
 800236e:	4943      	ldr	r1, [pc, #268]	; (800247c <ss_Kalman+0x15c>)
 8002370:	00a3      	lsls	r3, r4, #2
 8002372:	440b      	add	r3, r1
 8002374:	601a      	str	r2, [r3, #0]

    // Correct..
    g_K_MPU[portnum]=g_PPredict_MPU[portnum]/(g_PPredict_MPU[portnum] + kal_R);
 8002376:	797b      	ldrb	r3, [r7, #5]
 8002378:	4a40      	ldr	r2, [pc, #256]	; (800247c <ss_Kalman+0x15c>)
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f7fe f8e9 	bl	8000558 <__aeabi_f2d>
 8002386:	4604      	mov	r4, r0
 8002388:	460d      	mov	r5, r1
 800238a:	797b      	ldrb	r3, [r7, #5]
 800238c:	4a3b      	ldr	r2, [pc, #236]	; (800247c <ss_Kalman+0x15c>)
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4413      	add	r3, r2
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f7fe f8df 	bl	8000558 <__aeabi_f2d>
 800239a:	f04f 0200 	mov.w	r2, #0
 800239e:	4b38      	ldr	r3, [pc, #224]	; (8002480 <ss_Kalman+0x160>)
 80023a0:	f7fd ff7c 	bl	800029c <__adddf3>
 80023a4:	4602      	mov	r2, r0
 80023a6:	460b      	mov	r3, r1
 80023a8:	4620      	mov	r0, r4
 80023aa:	4629      	mov	r1, r5
 80023ac:	f7fe fa56 	bl	800085c <__aeabi_ddiv>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	797c      	ldrb	r4, [r7, #5]
 80023b6:	4610      	mov	r0, r2
 80023b8:	4619      	mov	r1, r3
 80023ba:	f7fe fc1d 	bl	8000bf8 <__aeabi_d2f>
 80023be:	4602      	mov	r2, r0
 80023c0:	4930      	ldr	r1, [pc, #192]	; (8002484 <ss_Kalman+0x164>)
 80023c2:	00a3      	lsls	r3, r4, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	601a      	str	r2, [r3, #0]
    l_z=(float)fval;
 80023c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023cc:	ee07 3a90 	vmov	s15, r3
 80023d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023d4:	edc7 7a03 	vstr	s15, [r7, #12]
    g_x_MPU[portnum]=g_xPredict_MPU[portnum]+g_K_MPU[portnum]*(l_z-g_xPredict_MPU[portnum]);
 80023d8:	797b      	ldrb	r3, [r7, #5]
 80023da:	4a26      	ldr	r2, [pc, #152]	; (8002474 <ss_Kalman+0x154>)
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	ed93 7a00 	vldr	s14, [r3]
 80023e4:	797b      	ldrb	r3, [r7, #5]
 80023e6:	4a27      	ldr	r2, [pc, #156]	; (8002484 <ss_Kalman+0x164>)
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	edd3 6a00 	vldr	s13, [r3]
 80023f0:	797b      	ldrb	r3, [r7, #5]
 80023f2:	4a20      	ldr	r2, [pc, #128]	; (8002474 <ss_Kalman+0x154>)
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	edd3 7a00 	vldr	s15, [r3]
 80023fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8002400:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002404:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002408:	797b      	ldrb	r3, [r7, #5]
 800240a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800240e:	4a18      	ldr	r2, [pc, #96]	; (8002470 <ss_Kalman+0x150>)
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4413      	add	r3, r2
 8002414:	edc3 7a00 	vstr	s15, [r3]
    g_P_MPU[portnum]=(1 - g_K_MPU[portnum])*g_PPredict_MPU[portnum];
 8002418:	797b      	ldrb	r3, [r7, #5]
 800241a:	4a1a      	ldr	r2, [pc, #104]	; (8002484 <ss_Kalman+0x164>)
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	edd3 7a00 	vldr	s15, [r3]
 8002424:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002428:	ee37 7a67 	vsub.f32	s14, s14, s15
 800242c:	797b      	ldrb	r3, [r7, #5]
 800242e:	4a13      	ldr	r2, [pc, #76]	; (800247c <ss_Kalman+0x15c>)
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	edd3 7a00 	vldr	s15, [r3]
 8002438:	797b      	ldrb	r3, [r7, #5]
 800243a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800243e:	4a0e      	ldr	r2, [pc, #56]	; (8002478 <ss_Kalman+0x158>)
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	4413      	add	r3, r2
 8002444:	edc3 7a00 	vstr	s15, [r3]

    return (short)g_x_MPU[portnum];
 8002448:	797b      	ldrb	r3, [r7, #5]
 800244a:	4a09      	ldr	r2, [pc, #36]	; (8002470 <ss_Kalman+0x150>)
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	edd3 7a00 	vldr	s15, [r3]
 8002454:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002458:	ee17 3a90 	vmov	r3, s15
 800245c:	b21b      	sxth	r3, r3
}
 800245e:	4618      	mov	r0, r3
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bdb0      	pop	{r4, r5, r7, pc}
 8002466:	bf00      	nop
 8002468:	47ae147b 	.word	0x47ae147b
 800246c:	3f847ae1 	.word	0x3f847ae1
 8002470:	20000320 	.word	0x20000320
 8002474:	20000308 	.word	0x20000308
 8002478:	20000004 	.word	0x20000004
 800247c:	20000338 	.word	0x20000338
 8002480:	3fd00000 	.word	0x3fd00000
 8002484:	20000350 	.word	0x20000350

08002488 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002488:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800248c:	480d      	ldr	r0, [pc, #52]	; (80024c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800248e:	490e      	ldr	r1, [pc, #56]	; (80024c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002490:	4a0e      	ldr	r2, [pc, #56]	; (80024cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002492:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002494:	e002      	b.n	800249c <LoopCopyDataInit>

08002496 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002496:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002498:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800249a:	3304      	adds	r3, #4

0800249c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800249c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800249e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024a0:	d3f9      	bcc.n	8002496 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024a2:	4a0b      	ldr	r2, [pc, #44]	; (80024d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024a4:	4c0b      	ldr	r4, [pc, #44]	; (80024d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80024a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024a8:	e001      	b.n	80024ae <LoopFillZerobss>

080024aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024ac:	3204      	adds	r2, #4

080024ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024b0:	d3fb      	bcc.n	80024aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80024b2:	f7ff fef5 	bl	80022a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024b6:	f002 fcf5 	bl	8004ea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024ba:	f7ff f985 	bl	80017c8 <main>
  bx  lr    
 80024be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80024c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024c8:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80024cc:	08009f34 	.word	0x08009f34
  ldr r2, =_sbss
 80024d0:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80024d4:	2000037c 	.word	0x2000037c

080024d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024d8:	e7fe      	b.n	80024d8 <ADC_IRQHandler>
	...

080024dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024e0:	4b0e      	ldr	r3, [pc, #56]	; (800251c <HAL_Init+0x40>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a0d      	ldr	r2, [pc, #52]	; (800251c <HAL_Init+0x40>)
 80024e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024ec:	4b0b      	ldr	r3, [pc, #44]	; (800251c <HAL_Init+0x40>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a0a      	ldr	r2, [pc, #40]	; (800251c <HAL_Init+0x40>)
 80024f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024f8:	4b08      	ldr	r3, [pc, #32]	; (800251c <HAL_Init+0x40>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a07      	ldr	r2, [pc, #28]	; (800251c <HAL_Init+0x40>)
 80024fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002502:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002504:	2003      	movs	r0, #3
 8002506:	f000 f94f 	bl	80027a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800250a:	2000      	movs	r0, #0
 800250c:	f000 f808 	bl	8002520 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002510:	f7ff fcd2 	bl	8001eb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40023c00 	.word	0x40023c00

08002520 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002528:	4b12      	ldr	r3, [pc, #72]	; (8002574 <HAL_InitTick+0x54>)
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	4b12      	ldr	r3, [pc, #72]	; (8002578 <HAL_InitTick+0x58>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	4619      	mov	r1, r3
 8002532:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002536:	fbb3 f3f1 	udiv	r3, r3, r1
 800253a:	fbb2 f3f3 	udiv	r3, r2, r3
 800253e:	4618      	mov	r0, r3
 8002540:	f000 f967 	bl	8002812 <HAL_SYSTICK_Config>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e00e      	b.n	800256c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b0f      	cmp	r3, #15
 8002552:	d80a      	bhi.n	800256a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002554:	2200      	movs	r2, #0
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	f04f 30ff 	mov.w	r0, #4294967295
 800255c:	f000 f92f 	bl	80027be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002560:	4a06      	ldr	r2, [pc, #24]	; (800257c <HAL_InitTick+0x5c>)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	e000      	b.n	800256c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
}
 800256c:	4618      	mov	r0, r3
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	20000000 	.word	0x20000000
 8002578:	20000020 	.word	0x20000020
 800257c:	2000001c 	.word	0x2000001c

08002580 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002584:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <HAL_IncTick+0x20>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	461a      	mov	r2, r3
 800258a:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <HAL_IncTick+0x24>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4413      	add	r3, r2
 8002590:	4a04      	ldr	r2, [pc, #16]	; (80025a4 <HAL_IncTick+0x24>)
 8002592:	6013      	str	r3, [r2, #0]
}
 8002594:	bf00      	nop
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	20000020 	.word	0x20000020
 80025a4:	20000368 	.word	0x20000368

080025a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  return uwTick;
 80025ac:	4b03      	ldr	r3, [pc, #12]	; (80025bc <HAL_GetTick+0x14>)
 80025ae:	681b      	ldr	r3, [r3, #0]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	20000368 	.word	0x20000368

080025c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025c8:	f7ff ffee 	bl	80025a8 <HAL_GetTick>
 80025cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d8:	d005      	beq.n	80025e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025da:	4b0a      	ldr	r3, [pc, #40]	; (8002604 <HAL_Delay+0x44>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	461a      	mov	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	4413      	add	r3, r2
 80025e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025e6:	bf00      	nop
 80025e8:	f7ff ffde 	bl	80025a8 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d8f7      	bhi.n	80025e8 <HAL_Delay+0x28>
  {
  }
}
 80025f8:	bf00      	nop
 80025fa:	bf00      	nop
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	20000020 	.word	0x20000020

08002608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002618:	4b0c      	ldr	r3, [pc, #48]	; (800264c <__NVIC_SetPriorityGrouping+0x44>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002624:	4013      	ands	r3, r2
 8002626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002630:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800263a:	4a04      	ldr	r2, [pc, #16]	; (800264c <__NVIC_SetPriorityGrouping+0x44>)
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	60d3      	str	r3, [r2, #12]
}
 8002640:	bf00      	nop
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002654:	4b04      	ldr	r3, [pc, #16]	; (8002668 <__NVIC_GetPriorityGrouping+0x18>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	0a1b      	lsrs	r3, r3, #8
 800265a:	f003 0307 	and.w	r3, r3, #7
}
 800265e:	4618      	mov	r0, r3
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	e000ed00 	.word	0xe000ed00

0800266c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267a:	2b00      	cmp	r3, #0
 800267c:	db0b      	blt.n	8002696 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800267e:	79fb      	ldrb	r3, [r7, #7]
 8002680:	f003 021f 	and.w	r2, r3, #31
 8002684:	4907      	ldr	r1, [pc, #28]	; (80026a4 <__NVIC_EnableIRQ+0x38>)
 8002686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268a:	095b      	lsrs	r3, r3, #5
 800268c:	2001      	movs	r0, #1
 800268e:	fa00 f202 	lsl.w	r2, r0, r2
 8002692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	e000e100 	.word	0xe000e100

080026a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	6039      	str	r1, [r7, #0]
 80026b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	db0a      	blt.n	80026d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	490c      	ldr	r1, [pc, #48]	; (80026f4 <__NVIC_SetPriority+0x4c>)
 80026c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c6:	0112      	lsls	r2, r2, #4
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	440b      	add	r3, r1
 80026cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026d0:	e00a      	b.n	80026e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	4908      	ldr	r1, [pc, #32]	; (80026f8 <__NVIC_SetPriority+0x50>)
 80026d8:	79fb      	ldrb	r3, [r7, #7]
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	3b04      	subs	r3, #4
 80026e0:	0112      	lsls	r2, r2, #4
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	440b      	add	r3, r1
 80026e6:	761a      	strb	r2, [r3, #24]
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	e000e100 	.word	0xe000e100
 80026f8:	e000ed00 	.word	0xe000ed00

080026fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b089      	sub	sp, #36	; 0x24
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	f1c3 0307 	rsb	r3, r3, #7
 8002716:	2b04      	cmp	r3, #4
 8002718:	bf28      	it	cs
 800271a:	2304      	movcs	r3, #4
 800271c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	3304      	adds	r3, #4
 8002722:	2b06      	cmp	r3, #6
 8002724:	d902      	bls.n	800272c <NVIC_EncodePriority+0x30>
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	3b03      	subs	r3, #3
 800272a:	e000      	b.n	800272e <NVIC_EncodePriority+0x32>
 800272c:	2300      	movs	r3, #0
 800272e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002730:	f04f 32ff 	mov.w	r2, #4294967295
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	43da      	mvns	r2, r3
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	401a      	ands	r2, r3
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002744:	f04f 31ff 	mov.w	r1, #4294967295
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	fa01 f303 	lsl.w	r3, r1, r3
 800274e:	43d9      	mvns	r1, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002754:	4313      	orrs	r3, r2
         );
}
 8002756:	4618      	mov	r0, r3
 8002758:	3724      	adds	r7, #36	; 0x24
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
	...

08002764 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3b01      	subs	r3, #1
 8002770:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002774:	d301      	bcc.n	800277a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002776:	2301      	movs	r3, #1
 8002778:	e00f      	b.n	800279a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800277a:	4a0a      	ldr	r2, [pc, #40]	; (80027a4 <SysTick_Config+0x40>)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3b01      	subs	r3, #1
 8002780:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002782:	210f      	movs	r1, #15
 8002784:	f04f 30ff 	mov.w	r0, #4294967295
 8002788:	f7ff ff8e 	bl	80026a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800278c:	4b05      	ldr	r3, [pc, #20]	; (80027a4 <SysTick_Config+0x40>)
 800278e:	2200      	movs	r2, #0
 8002790:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002792:	4b04      	ldr	r3, [pc, #16]	; (80027a4 <SysTick_Config+0x40>)
 8002794:	2207      	movs	r2, #7
 8002796:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	e000e010 	.word	0xe000e010

080027a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f7ff ff29 	bl	8002608 <__NVIC_SetPriorityGrouping>
}
 80027b6:	bf00      	nop
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027be:	b580      	push	{r7, lr}
 80027c0:	b086      	sub	sp, #24
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	4603      	mov	r3, r0
 80027c6:	60b9      	str	r1, [r7, #8]
 80027c8:	607a      	str	r2, [r7, #4]
 80027ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027d0:	f7ff ff3e 	bl	8002650 <__NVIC_GetPriorityGrouping>
 80027d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	68b9      	ldr	r1, [r7, #8]
 80027da:	6978      	ldr	r0, [r7, #20]
 80027dc:	f7ff ff8e 	bl	80026fc <NVIC_EncodePriority>
 80027e0:	4602      	mov	r2, r0
 80027e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027e6:	4611      	mov	r1, r2
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff ff5d 	bl	80026a8 <__NVIC_SetPriority>
}
 80027ee:	bf00      	nop
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	4603      	mov	r3, r0
 80027fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff ff31 	bl	800266c <__NVIC_EnableIRQ>
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b082      	sub	sp, #8
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7ff ffa2 	bl	8002764 <SysTick_Config>
 8002820:	4603      	mov	r3, r0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b084      	sub	sp, #16
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002836:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002838:	f7ff feb6 	bl	80025a8 <HAL_GetTick>
 800283c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d008      	beq.n	800285c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2280      	movs	r2, #128	; 0x80
 800284e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e052      	b.n	8002902 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0216 	bic.w	r2, r2, #22
 800286a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	695a      	ldr	r2, [r3, #20]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800287a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002880:	2b00      	cmp	r3, #0
 8002882:	d103      	bne.n	800288c <HAL_DMA_Abort+0x62>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002888:	2b00      	cmp	r3, #0
 800288a:	d007      	beq.n	800289c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f022 0208 	bic.w	r2, r2, #8
 800289a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 0201 	bic.w	r2, r2, #1
 80028aa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028ac:	e013      	b.n	80028d6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028ae:	f7ff fe7b 	bl	80025a8 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b05      	cmp	r3, #5
 80028ba:	d90c      	bls.n	80028d6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2220      	movs	r2, #32
 80028c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2203      	movs	r2, #3
 80028c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e015      	b.n	8002902 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1e4      	bne.n	80028ae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e8:	223f      	movs	r2, #63	; 0x3f
 80028ea:	409a      	lsls	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d004      	beq.n	8002928 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2280      	movs	r2, #128	; 0x80
 8002922:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e00c      	b.n	8002942 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2205      	movs	r2, #5
 800292c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0201 	bic.w	r2, r2, #1
 800293e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
	...

08002950 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002950:	b480      	push	{r7}
 8002952:	b089      	sub	sp, #36	; 0x24
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800295a:	2300      	movs	r3, #0
 800295c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800295e:	2300      	movs	r3, #0
 8002960:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002962:	2300      	movs	r3, #0
 8002964:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002966:	2300      	movs	r3, #0
 8002968:	61fb      	str	r3, [r7, #28]
 800296a:	e159      	b.n	8002c20 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800296c:	2201      	movs	r2, #1
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	4013      	ands	r3, r2
 800297e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	429a      	cmp	r2, r3
 8002986:	f040 8148 	bne.w	8002c1a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f003 0303 	and.w	r3, r3, #3
 8002992:	2b01      	cmp	r3, #1
 8002994:	d005      	beq.n	80029a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d130      	bne.n	8002a04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	2203      	movs	r2, #3
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	43db      	mvns	r3, r3
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	4013      	ands	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	68da      	ldr	r2, [r3, #12]
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029d8:	2201      	movs	r2, #1
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	43db      	mvns	r3, r3
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	4013      	ands	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	091b      	lsrs	r3, r3, #4
 80029ee:	f003 0201 	and.w	r2, r3, #1
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f003 0303 	and.w	r3, r3, #3
 8002a0c:	2b03      	cmp	r3, #3
 8002a0e:	d017      	beq.n	8002a40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	2203      	movs	r2, #3
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	43db      	mvns	r3, r3
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	4013      	ands	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f003 0303 	and.w	r3, r3, #3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d123      	bne.n	8002a94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	08da      	lsrs	r2, r3, #3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3208      	adds	r2, #8
 8002a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	220f      	movs	r2, #15
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	691a      	ldr	r2, [r3, #16]
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	f003 0307 	and.w	r3, r3, #7
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	08da      	lsrs	r2, r3, #3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	3208      	adds	r2, #8
 8002a8e:	69b9      	ldr	r1, [r7, #24]
 8002a90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	2203      	movs	r2, #3
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f003 0203 	and.w	r2, r3, #3
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 80a2 	beq.w	8002c1a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	4b57      	ldr	r3, [pc, #348]	; (8002c38 <HAL_GPIO_Init+0x2e8>)
 8002adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ade:	4a56      	ldr	r2, [pc, #344]	; (8002c38 <HAL_GPIO_Init+0x2e8>)
 8002ae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ae6:	4b54      	ldr	r3, [pc, #336]	; (8002c38 <HAL_GPIO_Init+0x2e8>)
 8002ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002af2:	4a52      	ldr	r2, [pc, #328]	; (8002c3c <HAL_GPIO_Init+0x2ec>)
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	089b      	lsrs	r3, r3, #2
 8002af8:	3302      	adds	r3, #2
 8002afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	f003 0303 	and.w	r3, r3, #3
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	220f      	movs	r2, #15
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	4013      	ands	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a49      	ldr	r2, [pc, #292]	; (8002c40 <HAL_GPIO_Init+0x2f0>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d019      	beq.n	8002b52 <HAL_GPIO_Init+0x202>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a48      	ldr	r2, [pc, #288]	; (8002c44 <HAL_GPIO_Init+0x2f4>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d013      	beq.n	8002b4e <HAL_GPIO_Init+0x1fe>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a47      	ldr	r2, [pc, #284]	; (8002c48 <HAL_GPIO_Init+0x2f8>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d00d      	beq.n	8002b4a <HAL_GPIO_Init+0x1fa>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a46      	ldr	r2, [pc, #280]	; (8002c4c <HAL_GPIO_Init+0x2fc>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d007      	beq.n	8002b46 <HAL_GPIO_Init+0x1f6>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a45      	ldr	r2, [pc, #276]	; (8002c50 <HAL_GPIO_Init+0x300>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d101      	bne.n	8002b42 <HAL_GPIO_Init+0x1f2>
 8002b3e:	2304      	movs	r3, #4
 8002b40:	e008      	b.n	8002b54 <HAL_GPIO_Init+0x204>
 8002b42:	2307      	movs	r3, #7
 8002b44:	e006      	b.n	8002b54 <HAL_GPIO_Init+0x204>
 8002b46:	2303      	movs	r3, #3
 8002b48:	e004      	b.n	8002b54 <HAL_GPIO_Init+0x204>
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	e002      	b.n	8002b54 <HAL_GPIO_Init+0x204>
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e000      	b.n	8002b54 <HAL_GPIO_Init+0x204>
 8002b52:	2300      	movs	r3, #0
 8002b54:	69fa      	ldr	r2, [r7, #28]
 8002b56:	f002 0203 	and.w	r2, r2, #3
 8002b5a:	0092      	lsls	r2, r2, #2
 8002b5c:	4093      	lsls	r3, r2
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b64:	4935      	ldr	r1, [pc, #212]	; (8002c3c <HAL_GPIO_Init+0x2ec>)
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	089b      	lsrs	r3, r3, #2
 8002b6a:	3302      	adds	r3, #2
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b72:	4b38      	ldr	r3, [pc, #224]	; (8002c54 <HAL_GPIO_Init+0x304>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b96:	4a2f      	ldr	r2, [pc, #188]	; (8002c54 <HAL_GPIO_Init+0x304>)
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b9c:	4b2d      	ldr	r3, [pc, #180]	; (8002c54 <HAL_GPIO_Init+0x304>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bc0:	4a24      	ldr	r2, [pc, #144]	; (8002c54 <HAL_GPIO_Init+0x304>)
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bc6:	4b23      	ldr	r3, [pc, #140]	; (8002c54 <HAL_GPIO_Init+0x304>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bea:	4a1a      	ldr	r2, [pc, #104]	; (8002c54 <HAL_GPIO_Init+0x304>)
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bf0:	4b18      	ldr	r3, [pc, #96]	; (8002c54 <HAL_GPIO_Init+0x304>)
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d003      	beq.n	8002c14 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c14:	4a0f      	ldr	r2, [pc, #60]	; (8002c54 <HAL_GPIO_Init+0x304>)
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	61fb      	str	r3, [r7, #28]
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	2b0f      	cmp	r3, #15
 8002c24:	f67f aea2 	bls.w	800296c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c28:	bf00      	nop
 8002c2a:	bf00      	nop
 8002c2c:	3724      	adds	r7, #36	; 0x24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	40013800 	.word	0x40013800
 8002c40:	40020000 	.word	0x40020000
 8002c44:	40020400 	.word	0x40020400
 8002c48:	40020800 	.word	0x40020800
 8002c4c:	40020c00 	.word	0x40020c00
 8002c50:	40021000 	.word	0x40021000
 8002c54:	40013c00 	.word	0x40013c00

08002c58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	460b      	mov	r3, r1
 8002c62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	691a      	ldr	r2, [r3, #16]
 8002c68:	887b      	ldrh	r3, [r7, #2]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d002      	beq.n	8002c76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c70:	2301      	movs	r3, #1
 8002c72:	73fb      	strb	r3, [r7, #15]
 8002c74:	e001      	b.n	8002c7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c76:	2300      	movs	r3, #0
 8002c78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3714      	adds	r7, #20
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	460b      	mov	r3, r1
 8002c92:	807b      	strh	r3, [r7, #2]
 8002c94:	4613      	mov	r3, r2
 8002c96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c98:	787b      	ldrb	r3, [r7, #1]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c9e:	887a      	ldrh	r2, [r7, #2]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ca4:	e003      	b.n	8002cae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ca6:	887b      	ldrh	r3, [r7, #2]
 8002ca8:	041a      	lsls	r2, r3, #16
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	619a      	str	r2, [r3, #24]
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
	...

08002cbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e267      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d075      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cda:	4b88      	ldr	r3, [pc, #544]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 030c 	and.w	r3, r3, #12
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d00c      	beq.n	8002d00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ce6:	4b85      	ldr	r3, [pc, #532]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cee:	2b08      	cmp	r3, #8
 8002cf0:	d112      	bne.n	8002d18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cf2:	4b82      	ldr	r3, [pc, #520]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cfe:	d10b      	bne.n	8002d18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d00:	4b7e      	ldr	r3, [pc, #504]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d05b      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x108>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d157      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e242      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d20:	d106      	bne.n	8002d30 <HAL_RCC_OscConfig+0x74>
 8002d22:	4b76      	ldr	r3, [pc, #472]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a75      	ldr	r2, [pc, #468]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	e01d      	b.n	8002d6c <HAL_RCC_OscConfig+0xb0>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d38:	d10c      	bne.n	8002d54 <HAL_RCC_OscConfig+0x98>
 8002d3a:	4b70      	ldr	r3, [pc, #448]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a6f      	ldr	r2, [pc, #444]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	4b6d      	ldr	r3, [pc, #436]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a6c      	ldr	r2, [pc, #432]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	e00b      	b.n	8002d6c <HAL_RCC_OscConfig+0xb0>
 8002d54:	4b69      	ldr	r3, [pc, #420]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a68      	ldr	r2, [pc, #416]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d5e:	6013      	str	r3, [r2, #0]
 8002d60:	4b66      	ldr	r3, [pc, #408]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a65      	ldr	r2, [pc, #404]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d013      	beq.n	8002d9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d74:	f7ff fc18 	bl	80025a8 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d7c:	f7ff fc14 	bl	80025a8 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b64      	cmp	r3, #100	; 0x64
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e207      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d8e:	4b5b      	ldr	r3, [pc, #364]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d0f0      	beq.n	8002d7c <HAL_RCC_OscConfig+0xc0>
 8002d9a:	e014      	b.n	8002dc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9c:	f7ff fc04 	bl	80025a8 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002da4:	f7ff fc00 	bl	80025a8 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b64      	cmp	r3, #100	; 0x64
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e1f3      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002db6:	4b51      	ldr	r3, [pc, #324]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1f0      	bne.n	8002da4 <HAL_RCC_OscConfig+0xe8>
 8002dc2:	e000      	b.n	8002dc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d063      	beq.n	8002e9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dd2:	4b4a      	ldr	r3, [pc, #296]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 030c 	and.w	r3, r3, #12
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00b      	beq.n	8002df6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dde:	4b47      	ldr	r3, [pc, #284]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002de6:	2b08      	cmp	r3, #8
 8002de8:	d11c      	bne.n	8002e24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dea:	4b44      	ldr	r3, [pc, #272]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d116      	bne.n	8002e24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002df6:	4b41      	ldr	r3, [pc, #260]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d005      	beq.n	8002e0e <HAL_RCC_OscConfig+0x152>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d001      	beq.n	8002e0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e1c7      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e0e:	4b3b      	ldr	r3, [pc, #236]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	4937      	ldr	r1, [pc, #220]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e22:	e03a      	b.n	8002e9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d020      	beq.n	8002e6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e2c:	4b34      	ldr	r3, [pc, #208]	; (8002f00 <HAL_RCC_OscConfig+0x244>)
 8002e2e:	2201      	movs	r2, #1
 8002e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e32:	f7ff fbb9 	bl	80025a8 <HAL_GetTick>
 8002e36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e38:	e008      	b.n	8002e4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e3a:	f7ff fbb5 	bl	80025a8 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e1a8      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e4c:	4b2b      	ldr	r3, [pc, #172]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0f0      	beq.n	8002e3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e58:	4b28      	ldr	r3, [pc, #160]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	4925      	ldr	r1, [pc, #148]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	600b      	str	r3, [r1, #0]
 8002e6c:	e015      	b.n	8002e9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e6e:	4b24      	ldr	r3, [pc, #144]	; (8002f00 <HAL_RCC_OscConfig+0x244>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e74:	f7ff fb98 	bl	80025a8 <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e7c:	f7ff fb94 	bl	80025a8 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e187      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e8e:	4b1b      	ldr	r3, [pc, #108]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1f0      	bne.n	8002e7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0308 	and.w	r3, r3, #8
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d036      	beq.n	8002f14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d016      	beq.n	8002edc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eae:	4b15      	ldr	r3, [pc, #84]	; (8002f04 <HAL_RCC_OscConfig+0x248>)
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb4:	f7ff fb78 	bl	80025a8 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ebc:	f7ff fb74 	bl	80025a8 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e167      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ece:	4b0b      	ldr	r3, [pc, #44]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002ed0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d0f0      	beq.n	8002ebc <HAL_RCC_OscConfig+0x200>
 8002eda:	e01b      	b.n	8002f14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002edc:	4b09      	ldr	r3, [pc, #36]	; (8002f04 <HAL_RCC_OscConfig+0x248>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee2:	f7ff fb61 	bl	80025a8 <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ee8:	e00e      	b.n	8002f08 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eea:	f7ff fb5d 	bl	80025a8 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d907      	bls.n	8002f08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e150      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
 8002efc:	40023800 	.word	0x40023800
 8002f00:	42470000 	.word	0x42470000
 8002f04:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f08:	4b88      	ldr	r3, [pc, #544]	; (800312c <HAL_RCC_OscConfig+0x470>)
 8002f0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1ea      	bne.n	8002eea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f000 8097 	beq.w	8003050 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f22:	2300      	movs	r3, #0
 8002f24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f26:	4b81      	ldr	r3, [pc, #516]	; (800312c <HAL_RCC_OscConfig+0x470>)
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10f      	bne.n	8002f52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f32:	2300      	movs	r3, #0
 8002f34:	60bb      	str	r3, [r7, #8]
 8002f36:	4b7d      	ldr	r3, [pc, #500]	; (800312c <HAL_RCC_OscConfig+0x470>)
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	4a7c      	ldr	r2, [pc, #496]	; (800312c <HAL_RCC_OscConfig+0x470>)
 8002f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f40:	6413      	str	r3, [r2, #64]	; 0x40
 8002f42:	4b7a      	ldr	r3, [pc, #488]	; (800312c <HAL_RCC_OscConfig+0x470>)
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f4a:	60bb      	str	r3, [r7, #8]
 8002f4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f52:	4b77      	ldr	r3, [pc, #476]	; (8003130 <HAL_RCC_OscConfig+0x474>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d118      	bne.n	8002f90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f5e:	4b74      	ldr	r3, [pc, #464]	; (8003130 <HAL_RCC_OscConfig+0x474>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a73      	ldr	r2, [pc, #460]	; (8003130 <HAL_RCC_OscConfig+0x474>)
 8002f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f6a:	f7ff fb1d 	bl	80025a8 <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f72:	f7ff fb19 	bl	80025a8 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e10c      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f84:	4b6a      	ldr	r3, [pc, #424]	; (8003130 <HAL_RCC_OscConfig+0x474>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d0f0      	beq.n	8002f72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d106      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x2ea>
 8002f98:	4b64      	ldr	r3, [pc, #400]	; (800312c <HAL_RCC_OscConfig+0x470>)
 8002f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9c:	4a63      	ldr	r2, [pc, #396]	; (800312c <HAL_RCC_OscConfig+0x470>)
 8002f9e:	f043 0301 	orr.w	r3, r3, #1
 8002fa2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fa4:	e01c      	b.n	8002fe0 <HAL_RCC_OscConfig+0x324>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	2b05      	cmp	r3, #5
 8002fac:	d10c      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x30c>
 8002fae:	4b5f      	ldr	r3, [pc, #380]	; (800312c <HAL_RCC_OscConfig+0x470>)
 8002fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb2:	4a5e      	ldr	r2, [pc, #376]	; (800312c <HAL_RCC_OscConfig+0x470>)
 8002fb4:	f043 0304 	orr.w	r3, r3, #4
 8002fb8:	6713      	str	r3, [r2, #112]	; 0x70
 8002fba:	4b5c      	ldr	r3, [pc, #368]	; (800312c <HAL_RCC_OscConfig+0x470>)
 8002fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fbe:	4a5b      	ldr	r2, [pc, #364]	; (800312c <HAL_RCC_OscConfig+0x470>)
 8002fc0:	f043 0301 	orr.w	r3, r3, #1
 8002fc4:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc6:	e00b      	b.n	8002fe0 <HAL_RCC_OscConfig+0x324>
 8002fc8:	4b58      	ldr	r3, [pc, #352]	; (800312c <HAL_RCC_OscConfig+0x470>)
 8002fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fcc:	4a57      	ldr	r2, [pc, #348]	; (800312c <HAL_RCC_OscConfig+0x470>)
 8002fce:	f023 0301 	bic.w	r3, r3, #1
 8002fd2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd4:	4b55      	ldr	r3, [pc, #340]	; (800312c <HAL_RCC_OscConfig+0x470>)
 8002fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd8:	4a54      	ldr	r2, [pc, #336]	; (800312c <HAL_RCC_OscConfig+0x470>)
 8002fda:	f023 0304 	bic.w	r3, r3, #4
 8002fde:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d015      	beq.n	8003014 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe8:	f7ff fade 	bl	80025a8 <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fee:	e00a      	b.n	8003006 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ff0:	f7ff fada 	bl	80025a8 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e0cb      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003006:	4b49      	ldr	r3, [pc, #292]	; (800312c <HAL_RCC_OscConfig+0x470>)
 8003008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0ee      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x334>
 8003012:	e014      	b.n	800303e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003014:	f7ff fac8 	bl	80025a8 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800301a:	e00a      	b.n	8003032 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800301c:	f7ff fac4 	bl	80025a8 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	f241 3288 	movw	r2, #5000	; 0x1388
 800302a:	4293      	cmp	r3, r2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e0b5      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003032:	4b3e      	ldr	r3, [pc, #248]	; (800312c <HAL_RCC_OscConfig+0x470>)
 8003034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1ee      	bne.n	800301c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800303e:	7dfb      	ldrb	r3, [r7, #23]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d105      	bne.n	8003050 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003044:	4b39      	ldr	r3, [pc, #228]	; (800312c <HAL_RCC_OscConfig+0x470>)
 8003046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003048:	4a38      	ldr	r2, [pc, #224]	; (800312c <HAL_RCC_OscConfig+0x470>)
 800304a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800304e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	2b00      	cmp	r3, #0
 8003056:	f000 80a1 	beq.w	800319c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800305a:	4b34      	ldr	r3, [pc, #208]	; (800312c <HAL_RCC_OscConfig+0x470>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 030c 	and.w	r3, r3, #12
 8003062:	2b08      	cmp	r3, #8
 8003064:	d05c      	beq.n	8003120 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	2b02      	cmp	r3, #2
 800306c:	d141      	bne.n	80030f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800306e:	4b31      	ldr	r3, [pc, #196]	; (8003134 <HAL_RCC_OscConfig+0x478>)
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003074:	f7ff fa98 	bl	80025a8 <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800307c:	f7ff fa94 	bl	80025a8 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e087      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800308e:	4b27      	ldr	r3, [pc, #156]	; (800312c <HAL_RCC_OscConfig+0x470>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1f0      	bne.n	800307c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69da      	ldr	r2, [r3, #28]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	019b      	lsls	r3, r3, #6
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b0:	085b      	lsrs	r3, r3, #1
 80030b2:	3b01      	subs	r3, #1
 80030b4:	041b      	lsls	r3, r3, #16
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030bc:	061b      	lsls	r3, r3, #24
 80030be:	491b      	ldr	r1, [pc, #108]	; (800312c <HAL_RCC_OscConfig+0x470>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030c4:	4b1b      	ldr	r3, [pc, #108]	; (8003134 <HAL_RCC_OscConfig+0x478>)
 80030c6:	2201      	movs	r2, #1
 80030c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ca:	f7ff fa6d 	bl	80025a8 <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030d2:	f7ff fa69 	bl	80025a8 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e05c      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030e4:	4b11      	ldr	r3, [pc, #68]	; (800312c <HAL_RCC_OscConfig+0x470>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d0f0      	beq.n	80030d2 <HAL_RCC_OscConfig+0x416>
 80030f0:	e054      	b.n	800319c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f2:	4b10      	ldr	r3, [pc, #64]	; (8003134 <HAL_RCC_OscConfig+0x478>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f8:	f7ff fa56 	bl	80025a8 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003100:	f7ff fa52 	bl	80025a8 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e045      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003112:	4b06      	ldr	r3, [pc, #24]	; (800312c <HAL_RCC_OscConfig+0x470>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1f0      	bne.n	8003100 <HAL_RCC_OscConfig+0x444>
 800311e:	e03d      	b.n	800319c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d107      	bne.n	8003138 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e038      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
 800312c:	40023800 	.word	0x40023800
 8003130:	40007000 	.word	0x40007000
 8003134:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003138:	4b1b      	ldr	r3, [pc, #108]	; (80031a8 <HAL_RCC_OscConfig+0x4ec>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d028      	beq.n	8003198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003150:	429a      	cmp	r2, r3
 8003152:	d121      	bne.n	8003198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800315e:	429a      	cmp	r2, r3
 8003160:	d11a      	bne.n	8003198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003168:	4013      	ands	r3, r2
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800316e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003170:	4293      	cmp	r3, r2
 8003172:	d111      	bne.n	8003198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317e:	085b      	lsrs	r3, r3, #1
 8003180:	3b01      	subs	r3, #1
 8003182:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003184:	429a      	cmp	r2, r3
 8003186:	d107      	bne.n	8003198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003192:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003194:	429a      	cmp	r2, r3
 8003196:	d001      	beq.n	800319c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e000      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40023800 	.word	0x40023800

080031ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d101      	bne.n	80031c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e0cc      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031c0:	4b68      	ldr	r3, [pc, #416]	; (8003364 <HAL_RCC_ClockConfig+0x1b8>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d90c      	bls.n	80031e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ce:	4b65      	ldr	r3, [pc, #404]	; (8003364 <HAL_RCC_ClockConfig+0x1b8>)
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d6:	4b63      	ldr	r3, [pc, #396]	; (8003364 <HAL_RCC_ClockConfig+0x1b8>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d001      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0b8      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d020      	beq.n	8003236 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0304 	and.w	r3, r3, #4
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d005      	beq.n	800320c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003200:	4b59      	ldr	r3, [pc, #356]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	4a58      	ldr	r2, [pc, #352]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800320a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0308 	and.w	r3, r3, #8
 8003214:	2b00      	cmp	r3, #0
 8003216:	d005      	beq.n	8003224 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003218:	4b53      	ldr	r3, [pc, #332]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	4a52      	ldr	r2, [pc, #328]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800321e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003222:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003224:	4b50      	ldr	r3, [pc, #320]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	494d      	ldr	r1, [pc, #308]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003232:	4313      	orrs	r3, r2
 8003234:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d044      	beq.n	80032cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d107      	bne.n	800325a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324a:	4b47      	ldr	r3, [pc, #284]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d119      	bne.n	800328a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e07f      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b02      	cmp	r3, #2
 8003260:	d003      	beq.n	800326a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003266:	2b03      	cmp	r3, #3
 8003268:	d107      	bne.n	800327a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800326a:	4b3f      	ldr	r3, [pc, #252]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d109      	bne.n	800328a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e06f      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800327a:	4b3b      	ldr	r3, [pc, #236]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e067      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800328a:	4b37      	ldr	r3, [pc, #220]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f023 0203 	bic.w	r2, r3, #3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	4934      	ldr	r1, [pc, #208]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003298:	4313      	orrs	r3, r2
 800329a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800329c:	f7ff f984 	bl	80025a8 <HAL_GetTick>
 80032a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a2:	e00a      	b.n	80032ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032a4:	f7ff f980 	bl	80025a8 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e04f      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ba:	4b2b      	ldr	r3, [pc, #172]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 020c 	and.w	r2, r3, #12
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d1eb      	bne.n	80032a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032cc:	4b25      	ldr	r3, [pc, #148]	; (8003364 <HAL_RCC_ClockConfig+0x1b8>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d20c      	bcs.n	80032f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032da:	4b22      	ldr	r3, [pc, #136]	; (8003364 <HAL_RCC_ClockConfig+0x1b8>)
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	b2d2      	uxtb	r2, r2
 80032e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e2:	4b20      	ldr	r3, [pc, #128]	; (8003364 <HAL_RCC_ClockConfig+0x1b8>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0307 	and.w	r3, r3, #7
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d001      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e032      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d008      	beq.n	8003312 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003300:	4b19      	ldr	r3, [pc, #100]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	4916      	ldr	r1, [pc, #88]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800330e:	4313      	orrs	r3, r2
 8003310:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0308 	and.w	r3, r3, #8
 800331a:	2b00      	cmp	r3, #0
 800331c:	d009      	beq.n	8003332 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800331e:	4b12      	ldr	r3, [pc, #72]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	490e      	ldr	r1, [pc, #56]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800332e:	4313      	orrs	r3, r2
 8003330:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003332:	f000 f821 	bl	8003378 <HAL_RCC_GetSysClockFreq>
 8003336:	4602      	mov	r2, r0
 8003338:	4b0b      	ldr	r3, [pc, #44]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	091b      	lsrs	r3, r3, #4
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	490a      	ldr	r1, [pc, #40]	; (800336c <HAL_RCC_ClockConfig+0x1c0>)
 8003344:	5ccb      	ldrb	r3, [r1, r3]
 8003346:	fa22 f303 	lsr.w	r3, r2, r3
 800334a:	4a09      	ldr	r2, [pc, #36]	; (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 800334c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800334e:	4b09      	ldr	r3, [pc, #36]	; (8003374 <HAL_RCC_ClockConfig+0x1c8>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f7ff f8e4 	bl	8002520 <HAL_InitTick>

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40023c00 	.word	0x40023c00
 8003368:	40023800 	.word	0x40023800
 800336c:	08009a5c 	.word	0x08009a5c
 8003370:	20000000 	.word	0x20000000
 8003374:	2000001c 	.word	0x2000001c

08003378 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800337c:	b094      	sub	sp, #80	; 0x50
 800337e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003380:	2300      	movs	r3, #0
 8003382:	647b      	str	r3, [r7, #68]	; 0x44
 8003384:	2300      	movs	r3, #0
 8003386:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003388:	2300      	movs	r3, #0
 800338a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800338c:	2300      	movs	r3, #0
 800338e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003390:	4b79      	ldr	r3, [pc, #484]	; (8003578 <HAL_RCC_GetSysClockFreq+0x200>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f003 030c 	and.w	r3, r3, #12
 8003398:	2b08      	cmp	r3, #8
 800339a:	d00d      	beq.n	80033b8 <HAL_RCC_GetSysClockFreq+0x40>
 800339c:	2b08      	cmp	r3, #8
 800339e:	f200 80e1 	bhi.w	8003564 <HAL_RCC_GetSysClockFreq+0x1ec>
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d002      	beq.n	80033ac <HAL_RCC_GetSysClockFreq+0x34>
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	d003      	beq.n	80033b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80033aa:	e0db      	b.n	8003564 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033ac:	4b73      	ldr	r3, [pc, #460]	; (800357c <HAL_RCC_GetSysClockFreq+0x204>)
 80033ae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80033b0:	e0db      	b.n	800356a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033b2:	4b73      	ldr	r3, [pc, #460]	; (8003580 <HAL_RCC_GetSysClockFreq+0x208>)
 80033b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033b6:	e0d8      	b.n	800356a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033b8:	4b6f      	ldr	r3, [pc, #444]	; (8003578 <HAL_RCC_GetSysClockFreq+0x200>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033c0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033c2:	4b6d      	ldr	r3, [pc, #436]	; (8003578 <HAL_RCC_GetSysClockFreq+0x200>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d063      	beq.n	8003496 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ce:	4b6a      	ldr	r3, [pc, #424]	; (8003578 <HAL_RCC_GetSysClockFreq+0x200>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	099b      	lsrs	r3, r3, #6
 80033d4:	2200      	movs	r2, #0
 80033d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80033d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80033da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033e0:	633b      	str	r3, [r7, #48]	; 0x30
 80033e2:	2300      	movs	r3, #0
 80033e4:	637b      	str	r3, [r7, #52]	; 0x34
 80033e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80033ea:	4622      	mov	r2, r4
 80033ec:	462b      	mov	r3, r5
 80033ee:	f04f 0000 	mov.w	r0, #0
 80033f2:	f04f 0100 	mov.w	r1, #0
 80033f6:	0159      	lsls	r1, r3, #5
 80033f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033fc:	0150      	lsls	r0, r2, #5
 80033fe:	4602      	mov	r2, r0
 8003400:	460b      	mov	r3, r1
 8003402:	4621      	mov	r1, r4
 8003404:	1a51      	subs	r1, r2, r1
 8003406:	6139      	str	r1, [r7, #16]
 8003408:	4629      	mov	r1, r5
 800340a:	eb63 0301 	sbc.w	r3, r3, r1
 800340e:	617b      	str	r3, [r7, #20]
 8003410:	f04f 0200 	mov.w	r2, #0
 8003414:	f04f 0300 	mov.w	r3, #0
 8003418:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800341c:	4659      	mov	r1, fp
 800341e:	018b      	lsls	r3, r1, #6
 8003420:	4651      	mov	r1, sl
 8003422:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003426:	4651      	mov	r1, sl
 8003428:	018a      	lsls	r2, r1, #6
 800342a:	4651      	mov	r1, sl
 800342c:	ebb2 0801 	subs.w	r8, r2, r1
 8003430:	4659      	mov	r1, fp
 8003432:	eb63 0901 	sbc.w	r9, r3, r1
 8003436:	f04f 0200 	mov.w	r2, #0
 800343a:	f04f 0300 	mov.w	r3, #0
 800343e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003442:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003446:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800344a:	4690      	mov	r8, r2
 800344c:	4699      	mov	r9, r3
 800344e:	4623      	mov	r3, r4
 8003450:	eb18 0303 	adds.w	r3, r8, r3
 8003454:	60bb      	str	r3, [r7, #8]
 8003456:	462b      	mov	r3, r5
 8003458:	eb49 0303 	adc.w	r3, r9, r3
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	f04f 0200 	mov.w	r2, #0
 8003462:	f04f 0300 	mov.w	r3, #0
 8003466:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800346a:	4629      	mov	r1, r5
 800346c:	024b      	lsls	r3, r1, #9
 800346e:	4621      	mov	r1, r4
 8003470:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003474:	4621      	mov	r1, r4
 8003476:	024a      	lsls	r2, r1, #9
 8003478:	4610      	mov	r0, r2
 800347a:	4619      	mov	r1, r3
 800347c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800347e:	2200      	movs	r2, #0
 8003480:	62bb      	str	r3, [r7, #40]	; 0x28
 8003482:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003484:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003488:	f7fd fc06 	bl	8000c98 <__aeabi_uldivmod>
 800348c:	4602      	mov	r2, r0
 800348e:	460b      	mov	r3, r1
 8003490:	4613      	mov	r3, r2
 8003492:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003494:	e058      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003496:	4b38      	ldr	r3, [pc, #224]	; (8003578 <HAL_RCC_GetSysClockFreq+0x200>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	099b      	lsrs	r3, r3, #6
 800349c:	2200      	movs	r2, #0
 800349e:	4618      	mov	r0, r3
 80034a0:	4611      	mov	r1, r2
 80034a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034a6:	623b      	str	r3, [r7, #32]
 80034a8:	2300      	movs	r3, #0
 80034aa:	627b      	str	r3, [r7, #36]	; 0x24
 80034ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034b0:	4642      	mov	r2, r8
 80034b2:	464b      	mov	r3, r9
 80034b4:	f04f 0000 	mov.w	r0, #0
 80034b8:	f04f 0100 	mov.w	r1, #0
 80034bc:	0159      	lsls	r1, r3, #5
 80034be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034c2:	0150      	lsls	r0, r2, #5
 80034c4:	4602      	mov	r2, r0
 80034c6:	460b      	mov	r3, r1
 80034c8:	4641      	mov	r1, r8
 80034ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80034ce:	4649      	mov	r1, r9
 80034d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80034d4:	f04f 0200 	mov.w	r2, #0
 80034d8:	f04f 0300 	mov.w	r3, #0
 80034dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80034e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80034e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80034e8:	ebb2 040a 	subs.w	r4, r2, sl
 80034ec:	eb63 050b 	sbc.w	r5, r3, fp
 80034f0:	f04f 0200 	mov.w	r2, #0
 80034f4:	f04f 0300 	mov.w	r3, #0
 80034f8:	00eb      	lsls	r3, r5, #3
 80034fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034fe:	00e2      	lsls	r2, r4, #3
 8003500:	4614      	mov	r4, r2
 8003502:	461d      	mov	r5, r3
 8003504:	4643      	mov	r3, r8
 8003506:	18e3      	adds	r3, r4, r3
 8003508:	603b      	str	r3, [r7, #0]
 800350a:	464b      	mov	r3, r9
 800350c:	eb45 0303 	adc.w	r3, r5, r3
 8003510:	607b      	str	r3, [r7, #4]
 8003512:	f04f 0200 	mov.w	r2, #0
 8003516:	f04f 0300 	mov.w	r3, #0
 800351a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800351e:	4629      	mov	r1, r5
 8003520:	028b      	lsls	r3, r1, #10
 8003522:	4621      	mov	r1, r4
 8003524:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003528:	4621      	mov	r1, r4
 800352a:	028a      	lsls	r2, r1, #10
 800352c:	4610      	mov	r0, r2
 800352e:	4619      	mov	r1, r3
 8003530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003532:	2200      	movs	r2, #0
 8003534:	61bb      	str	r3, [r7, #24]
 8003536:	61fa      	str	r2, [r7, #28]
 8003538:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800353c:	f7fd fbac 	bl	8000c98 <__aeabi_uldivmod>
 8003540:	4602      	mov	r2, r0
 8003542:	460b      	mov	r3, r1
 8003544:	4613      	mov	r3, r2
 8003546:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003548:	4b0b      	ldr	r3, [pc, #44]	; (8003578 <HAL_RCC_GetSysClockFreq+0x200>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	0c1b      	lsrs	r3, r3, #16
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	3301      	adds	r3, #1
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003558:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800355a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800355c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003560:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003562:	e002      	b.n	800356a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003564:	4b05      	ldr	r3, [pc, #20]	; (800357c <HAL_RCC_GetSysClockFreq+0x204>)
 8003566:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003568:	bf00      	nop
    }
  }
  return sysclockfreq;
 800356a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800356c:	4618      	mov	r0, r3
 800356e:	3750      	adds	r7, #80	; 0x50
 8003570:	46bd      	mov	sp, r7
 8003572:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003576:	bf00      	nop
 8003578:	40023800 	.word	0x40023800
 800357c:	00f42400 	.word	0x00f42400
 8003580:	007a1200 	.word	0x007a1200

08003584 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003588:	4b03      	ldr	r3, [pc, #12]	; (8003598 <HAL_RCC_GetHCLKFreq+0x14>)
 800358a:	681b      	ldr	r3, [r3, #0]
}
 800358c:	4618      	mov	r0, r3
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	20000000 	.word	0x20000000

0800359c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035a0:	f7ff fff0 	bl	8003584 <HAL_RCC_GetHCLKFreq>
 80035a4:	4602      	mov	r2, r0
 80035a6:	4b05      	ldr	r3, [pc, #20]	; (80035bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	0a9b      	lsrs	r3, r3, #10
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	4903      	ldr	r1, [pc, #12]	; (80035c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035b2:	5ccb      	ldrb	r3, [r1, r3]
 80035b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	40023800 	.word	0x40023800
 80035c0:	08009a6c 	.word	0x08009a6c

080035c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035c8:	f7ff ffdc 	bl	8003584 <HAL_RCC_GetHCLKFreq>
 80035cc:	4602      	mov	r2, r0
 80035ce:	4b05      	ldr	r3, [pc, #20]	; (80035e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	0b5b      	lsrs	r3, r3, #13
 80035d4:	f003 0307 	and.w	r3, r3, #7
 80035d8:	4903      	ldr	r1, [pc, #12]	; (80035e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035da:	5ccb      	ldrb	r3, [r1, r3]
 80035dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	40023800 	.word	0x40023800
 80035e8:	08009a6c 	.word	0x08009a6c

080035ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e041      	b.n	8003682 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d106      	bne.n	8003618 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7fe fc78 	bl	8001f08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2202      	movs	r2, #2
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	3304      	adds	r3, #4
 8003628:	4619      	mov	r1, r3
 800362a:	4610      	mov	r0, r2
 800362c:	f000 fa24 	bl	8003a78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b082      	sub	sp, #8
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b02      	cmp	r3, #2
 800369e:	d122      	bne.n	80036e6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d11b      	bne.n	80036e6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f06f 0202 	mvn.w	r2, #2
 80036b6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	f003 0303 	and.w	r3, r3, #3
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d003      	beq.n	80036d4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 f9b5 	bl	8003a3c <HAL_TIM_IC_CaptureCallback>
 80036d2:	e005      	b.n	80036e0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 f9a7 	bl	8003a28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f9b8 	bl	8003a50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	f003 0304 	and.w	r3, r3, #4
 80036f0:	2b04      	cmp	r3, #4
 80036f2:	d122      	bne.n	800373a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	f003 0304 	and.w	r3, r3, #4
 80036fe:	2b04      	cmp	r3, #4
 8003700:	d11b      	bne.n	800373a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f06f 0204 	mvn.w	r2, #4
 800370a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800371c:	2b00      	cmp	r3, #0
 800371e:	d003      	beq.n	8003728 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 f98b 	bl	8003a3c <HAL_TIM_IC_CaptureCallback>
 8003726:	e005      	b.n	8003734 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 f97d 	bl	8003a28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f98e 	bl	8003a50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	f003 0308 	and.w	r3, r3, #8
 8003744:	2b08      	cmp	r3, #8
 8003746:	d122      	bne.n	800378e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	f003 0308 	and.w	r3, r3, #8
 8003752:	2b08      	cmp	r3, #8
 8003754:	d11b      	bne.n	800378e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f06f 0208 	mvn.w	r2, #8
 800375e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2204      	movs	r2, #4
 8003764:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	f003 0303 	and.w	r3, r3, #3
 8003770:	2b00      	cmp	r3, #0
 8003772:	d003      	beq.n	800377c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 f961 	bl	8003a3c <HAL_TIM_IC_CaptureCallback>
 800377a:	e005      	b.n	8003788 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 f953 	bl	8003a28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f964 	bl	8003a50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	f003 0310 	and.w	r3, r3, #16
 8003798:	2b10      	cmp	r3, #16
 800379a:	d122      	bne.n	80037e2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	f003 0310 	and.w	r3, r3, #16
 80037a6:	2b10      	cmp	r3, #16
 80037a8:	d11b      	bne.n	80037e2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f06f 0210 	mvn.w	r2, #16
 80037b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2208      	movs	r2, #8
 80037b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	69db      	ldr	r3, [r3, #28]
 80037c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d003      	beq.n	80037d0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f937 	bl	8003a3c <HAL_TIM_IC_CaptureCallback>
 80037ce:	e005      	b.n	80037dc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 f929 	bl	8003a28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f93a 	bl	8003a50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d10e      	bne.n	800380e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d107      	bne.n	800380e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f06f 0201 	mvn.w	r2, #1
 8003806:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f7fd fbfd 	bl	8001008 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003818:	2b80      	cmp	r3, #128	; 0x80
 800381a:	d10e      	bne.n	800383a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003826:	2b80      	cmp	r3, #128	; 0x80
 8003828:	d107      	bne.n	800383a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003832:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 fab1 	bl	8003d9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003844:	2b40      	cmp	r3, #64	; 0x40
 8003846:	d10e      	bne.n	8003866 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003852:	2b40      	cmp	r3, #64	; 0x40
 8003854:	d107      	bne.n	8003866 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800385e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f8ff 	bl	8003a64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	f003 0320 	and.w	r3, r3, #32
 8003870:	2b20      	cmp	r3, #32
 8003872:	d10e      	bne.n	8003892 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	f003 0320 	and.w	r3, r3, #32
 800387e:	2b20      	cmp	r3, #32
 8003880:	d107      	bne.n	8003892 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f06f 0220 	mvn.w	r2, #32
 800388a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 fa7b 	bl	8003d88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003892:	bf00      	nop
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b084      	sub	sp, #16
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
 80038a2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038a4:	2300      	movs	r3, #0
 80038a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d101      	bne.n	80038b6 <HAL_TIM_ConfigClockSource+0x1c>
 80038b2:	2302      	movs	r3, #2
 80038b4:	e0b4      	b.n	8003a20 <HAL_TIM_ConfigClockSource+0x186>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2202      	movs	r2, #2
 80038c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038d4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038dc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ee:	d03e      	beq.n	800396e <HAL_TIM_ConfigClockSource+0xd4>
 80038f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038f4:	f200 8087 	bhi.w	8003a06 <HAL_TIM_ConfigClockSource+0x16c>
 80038f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038fc:	f000 8086 	beq.w	8003a0c <HAL_TIM_ConfigClockSource+0x172>
 8003900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003904:	d87f      	bhi.n	8003a06 <HAL_TIM_ConfigClockSource+0x16c>
 8003906:	2b70      	cmp	r3, #112	; 0x70
 8003908:	d01a      	beq.n	8003940 <HAL_TIM_ConfigClockSource+0xa6>
 800390a:	2b70      	cmp	r3, #112	; 0x70
 800390c:	d87b      	bhi.n	8003a06 <HAL_TIM_ConfigClockSource+0x16c>
 800390e:	2b60      	cmp	r3, #96	; 0x60
 8003910:	d050      	beq.n	80039b4 <HAL_TIM_ConfigClockSource+0x11a>
 8003912:	2b60      	cmp	r3, #96	; 0x60
 8003914:	d877      	bhi.n	8003a06 <HAL_TIM_ConfigClockSource+0x16c>
 8003916:	2b50      	cmp	r3, #80	; 0x50
 8003918:	d03c      	beq.n	8003994 <HAL_TIM_ConfigClockSource+0xfa>
 800391a:	2b50      	cmp	r3, #80	; 0x50
 800391c:	d873      	bhi.n	8003a06 <HAL_TIM_ConfigClockSource+0x16c>
 800391e:	2b40      	cmp	r3, #64	; 0x40
 8003920:	d058      	beq.n	80039d4 <HAL_TIM_ConfigClockSource+0x13a>
 8003922:	2b40      	cmp	r3, #64	; 0x40
 8003924:	d86f      	bhi.n	8003a06 <HAL_TIM_ConfigClockSource+0x16c>
 8003926:	2b30      	cmp	r3, #48	; 0x30
 8003928:	d064      	beq.n	80039f4 <HAL_TIM_ConfigClockSource+0x15a>
 800392a:	2b30      	cmp	r3, #48	; 0x30
 800392c:	d86b      	bhi.n	8003a06 <HAL_TIM_ConfigClockSource+0x16c>
 800392e:	2b20      	cmp	r3, #32
 8003930:	d060      	beq.n	80039f4 <HAL_TIM_ConfigClockSource+0x15a>
 8003932:	2b20      	cmp	r3, #32
 8003934:	d867      	bhi.n	8003a06 <HAL_TIM_ConfigClockSource+0x16c>
 8003936:	2b00      	cmp	r3, #0
 8003938:	d05c      	beq.n	80039f4 <HAL_TIM_ConfigClockSource+0x15a>
 800393a:	2b10      	cmp	r3, #16
 800393c:	d05a      	beq.n	80039f4 <HAL_TIM_ConfigClockSource+0x15a>
 800393e:	e062      	b.n	8003a06 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6818      	ldr	r0, [r3, #0]
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	6899      	ldr	r1, [r3, #8]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	f000 f98c 	bl	8003c6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003962:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	609a      	str	r2, [r3, #8]
      break;
 800396c:	e04f      	b.n	8003a0e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6818      	ldr	r0, [r3, #0]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	6899      	ldr	r1, [r3, #8]
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f000 f975 	bl	8003c6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003990:	609a      	str	r2, [r3, #8]
      break;
 8003992:	e03c      	b.n	8003a0e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6818      	ldr	r0, [r3, #0]
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	6859      	ldr	r1, [r3, #4]
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	461a      	mov	r2, r3
 80039a2:	f000 f8e9 	bl	8003b78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2150      	movs	r1, #80	; 0x50
 80039ac:	4618      	mov	r0, r3
 80039ae:	f000 f942 	bl	8003c36 <TIM_ITRx_SetConfig>
      break;
 80039b2:	e02c      	b.n	8003a0e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6818      	ldr	r0, [r3, #0]
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	6859      	ldr	r1, [r3, #4]
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	461a      	mov	r2, r3
 80039c2:	f000 f908 	bl	8003bd6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2160      	movs	r1, #96	; 0x60
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 f932 	bl	8003c36 <TIM_ITRx_SetConfig>
      break;
 80039d2:	e01c      	b.n	8003a0e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6818      	ldr	r0, [r3, #0]
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	6859      	ldr	r1, [r3, #4]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	461a      	mov	r2, r3
 80039e2:	f000 f8c9 	bl	8003b78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2140      	movs	r1, #64	; 0x40
 80039ec:	4618      	mov	r0, r3
 80039ee:	f000 f922 	bl	8003c36 <TIM_ITRx_SetConfig>
      break;
 80039f2:	e00c      	b.n	8003a0e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4619      	mov	r1, r3
 80039fe:	4610      	mov	r0, r2
 8003a00:	f000 f919 	bl	8003c36 <TIM_ITRx_SetConfig>
      break;
 8003a04:	e003      	b.n	8003a0e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	73fb      	strb	r3, [r7, #15]
      break;
 8003a0a:	e000      	b.n	8003a0e <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a0c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a34      	ldr	r2, [pc, #208]	; (8003b5c <TIM_Base_SetConfig+0xe4>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d00f      	beq.n	8003ab0 <TIM_Base_SetConfig+0x38>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a96:	d00b      	beq.n	8003ab0 <TIM_Base_SetConfig+0x38>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a31      	ldr	r2, [pc, #196]	; (8003b60 <TIM_Base_SetConfig+0xe8>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d007      	beq.n	8003ab0 <TIM_Base_SetConfig+0x38>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a30      	ldr	r2, [pc, #192]	; (8003b64 <TIM_Base_SetConfig+0xec>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d003      	beq.n	8003ab0 <TIM_Base_SetConfig+0x38>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a2f      	ldr	r2, [pc, #188]	; (8003b68 <TIM_Base_SetConfig+0xf0>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d108      	bne.n	8003ac2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a25      	ldr	r2, [pc, #148]	; (8003b5c <TIM_Base_SetConfig+0xe4>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d01b      	beq.n	8003b02 <TIM_Base_SetConfig+0x8a>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ad0:	d017      	beq.n	8003b02 <TIM_Base_SetConfig+0x8a>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a22      	ldr	r2, [pc, #136]	; (8003b60 <TIM_Base_SetConfig+0xe8>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d013      	beq.n	8003b02 <TIM_Base_SetConfig+0x8a>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a21      	ldr	r2, [pc, #132]	; (8003b64 <TIM_Base_SetConfig+0xec>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d00f      	beq.n	8003b02 <TIM_Base_SetConfig+0x8a>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a20      	ldr	r2, [pc, #128]	; (8003b68 <TIM_Base_SetConfig+0xf0>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d00b      	beq.n	8003b02 <TIM_Base_SetConfig+0x8a>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a1f      	ldr	r2, [pc, #124]	; (8003b6c <TIM_Base_SetConfig+0xf4>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d007      	beq.n	8003b02 <TIM_Base_SetConfig+0x8a>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a1e      	ldr	r2, [pc, #120]	; (8003b70 <TIM_Base_SetConfig+0xf8>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d003      	beq.n	8003b02 <TIM_Base_SetConfig+0x8a>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a1d      	ldr	r2, [pc, #116]	; (8003b74 <TIM_Base_SetConfig+0xfc>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d108      	bne.n	8003b14 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a08      	ldr	r2, [pc, #32]	; (8003b5c <TIM_Base_SetConfig+0xe4>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d103      	bne.n	8003b48 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	691a      	ldr	r2, [r3, #16]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	615a      	str	r2, [r3, #20]
}
 8003b4e:	bf00      	nop
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	40010000 	.word	0x40010000
 8003b60:	40000400 	.word	0x40000400
 8003b64:	40000800 	.word	0x40000800
 8003b68:	40000c00 	.word	0x40000c00
 8003b6c:	40014000 	.word	0x40014000
 8003b70:	40014400 	.word	0x40014400
 8003b74:	40014800 	.word	0x40014800

08003b78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b087      	sub	sp, #28
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	f023 0201 	bic.w	r2, r3, #1
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ba2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	011b      	lsls	r3, r3, #4
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f023 030a 	bic.w	r3, r3, #10
 8003bb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	621a      	str	r2, [r3, #32]
}
 8003bca:	bf00      	nop
 8003bcc:	371c      	adds	r7, #28
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b087      	sub	sp, #28
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	60f8      	str	r0, [r7, #12]
 8003bde:	60b9      	str	r1, [r7, #8]
 8003be0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	f023 0210 	bic.w	r2, r3, #16
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6a1b      	ldr	r3, [r3, #32]
 8003bf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	031b      	lsls	r3, r3, #12
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	011b      	lsls	r3, r3, #4
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	621a      	str	r2, [r3, #32]
}
 8003c2a:	bf00      	nop
 8003c2c:	371c      	adds	r7, #28
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b085      	sub	sp, #20
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
 8003c3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	f043 0307 	orr.w	r3, r3, #7
 8003c58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	609a      	str	r2, [r3, #8]
}
 8003c60:	bf00      	nop
 8003c62:	3714      	adds	r7, #20
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b087      	sub	sp, #28
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
 8003c78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	021a      	lsls	r2, r3, #8
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	609a      	str	r2, [r3, #8]
}
 8003ca0:	bf00      	nop
 8003ca2:	371c      	adds	r7, #28
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d101      	bne.n	8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	e050      	b.n	8003d66 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2202      	movs	r2, #2
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a1c      	ldr	r2, [pc, #112]	; (8003d74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d018      	beq.n	8003d3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d10:	d013      	beq.n	8003d3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a18      	ldr	r2, [pc, #96]	; (8003d78 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d00e      	beq.n	8003d3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a16      	ldr	r2, [pc, #88]	; (8003d7c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d009      	beq.n	8003d3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a15      	ldr	r2, [pc, #84]	; (8003d80 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d004      	beq.n	8003d3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a13      	ldr	r2, [pc, #76]	; (8003d84 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d10c      	bne.n	8003d54 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68ba      	ldr	r2, [r7, #8]
 8003d52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3714      	adds	r7, #20
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	40010000 	.word	0x40010000
 8003d78:	40000400 	.word	0x40000400
 8003d7c:	40000800 	.word	0x40000800
 8003d80:	40000c00 	.word	0x40000c00
 8003d84:	40014000 	.word	0x40014000

08003d88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e03f      	b.n	8003e42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d106      	bne.n	8003ddc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7fe f8b8 	bl	8001f4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2224      	movs	r2, #36	; 0x24
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68da      	ldr	r2, [r3, #12]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003df2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 fddb 	bl	80049b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	691a      	ldr	r2, [r3, #16]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	695a      	ldr	r2, [r3, #20]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68da      	ldr	r2, [r3, #12]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2220      	movs	r2, #32
 8003e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b08a      	sub	sp, #40	; 0x28
 8003e4e:	af02      	add	r7, sp, #8
 8003e50:	60f8      	str	r0, [r7, #12]
 8003e52:	60b9      	str	r1, [r7, #8]
 8003e54:	603b      	str	r3, [r7, #0]
 8003e56:	4613      	mov	r3, r2
 8003e58:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b20      	cmp	r3, #32
 8003e68:	d17c      	bne.n	8003f64 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d002      	beq.n	8003e76 <HAL_UART_Transmit+0x2c>
 8003e70:	88fb      	ldrh	r3, [r7, #6]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e075      	b.n	8003f66 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d101      	bne.n	8003e88 <HAL_UART_Transmit+0x3e>
 8003e84:	2302      	movs	r3, #2
 8003e86:	e06e      	b.n	8003f66 <HAL_UART_Transmit+0x11c>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2221      	movs	r2, #33	; 0x21
 8003e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e9e:	f7fe fb83 	bl	80025a8 <HAL_GetTick>
 8003ea2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	88fa      	ldrh	r2, [r7, #6]
 8003ea8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	88fa      	ldrh	r2, [r7, #6]
 8003eae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eb8:	d108      	bne.n	8003ecc <HAL_UART_Transmit+0x82>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d104      	bne.n	8003ecc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	61bb      	str	r3, [r7, #24]
 8003eca:	e003      	b.n	8003ed4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003edc:	e02a      	b.n	8003f34 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	2180      	movs	r1, #128	; 0x80
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 fb1f 	bl	800452c <UART_WaitOnFlagUntilTimeout>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e036      	b.n	8003f66 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10b      	bne.n	8003f16 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	881b      	ldrh	r3, [r3, #0]
 8003f02:	461a      	mov	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	3302      	adds	r3, #2
 8003f12:	61bb      	str	r3, [r7, #24]
 8003f14:	e007      	b.n	8003f26 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	781a      	ldrb	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	3301      	adds	r3, #1
 8003f24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1cf      	bne.n	8003ede <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	2200      	movs	r2, #0
 8003f46:	2140      	movs	r1, #64	; 0x40
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f000 faef 	bl	800452c <UART_WaitOnFlagUntilTimeout>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d001      	beq.n	8003f58 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e006      	b.n	8003f66 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f60:	2300      	movs	r3, #0
 8003f62:	e000      	b.n	8003f66 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003f64:	2302      	movs	r3, #2
  }
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3720      	adds	r7, #32
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b084      	sub	sp, #16
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	60f8      	str	r0, [r7, #12]
 8003f76:	60b9      	str	r1, [r7, #8]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b20      	cmp	r3, #32
 8003f86:	d11d      	bne.n	8003fc4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d002      	beq.n	8003f94 <HAL_UART_Receive_IT+0x26>
 8003f8e:	88fb      	ldrh	r3, [r7, #6]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d101      	bne.n	8003f98 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e016      	b.n	8003fc6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d101      	bne.n	8003fa6 <HAL_UART_Receive_IT+0x38>
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	e00f      	b.n	8003fc6 <HAL_UART_Receive_IT+0x58>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003fb4:	88fb      	ldrh	r3, [r7, #6]
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	68b9      	ldr	r1, [r7, #8]
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f000 fb24 	bl	8004608 <UART_Start_Receive_IT>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	e000      	b.n	8003fc6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003fc4:	2302      	movs	r3, #2
  }
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
	...

08003fd0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b0ba      	sub	sp, #232	; 0xe8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004006:	f003 030f 	and.w	r3, r3, #15
 800400a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800400e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10f      	bne.n	8004036 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800401a:	f003 0320 	and.w	r3, r3, #32
 800401e:	2b00      	cmp	r3, #0
 8004020:	d009      	beq.n	8004036 <HAL_UART_IRQHandler+0x66>
 8004022:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004026:	f003 0320 	and.w	r3, r3, #32
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 fc03 	bl	800483a <UART_Receive_IT>
      return;
 8004034:	e256      	b.n	80044e4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004036:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800403a:	2b00      	cmp	r3, #0
 800403c:	f000 80de 	beq.w	80041fc <HAL_UART_IRQHandler+0x22c>
 8004040:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	2b00      	cmp	r3, #0
 800404a:	d106      	bne.n	800405a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800404c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004050:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004054:	2b00      	cmp	r3, #0
 8004056:	f000 80d1 	beq.w	80041fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800405a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00b      	beq.n	800407e <HAL_UART_IRQHandler+0xae>
 8004066:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800406a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800406e:	2b00      	cmp	r3, #0
 8004070:	d005      	beq.n	800407e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004076:	f043 0201 	orr.w	r2, r3, #1
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800407e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004082:	f003 0304 	and.w	r3, r3, #4
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00b      	beq.n	80040a2 <HAL_UART_IRQHandler+0xd2>
 800408a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d005      	beq.n	80040a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409a:	f043 0202 	orr.w	r2, r3, #2
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00b      	beq.n	80040c6 <HAL_UART_IRQHandler+0xf6>
 80040ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d005      	beq.n	80040c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	f043 0204 	orr.w	r2, r3, #4
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80040c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ca:	f003 0308 	and.w	r3, r3, #8
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d011      	beq.n	80040f6 <HAL_UART_IRQHandler+0x126>
 80040d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040d6:	f003 0320 	and.w	r3, r3, #32
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d105      	bne.n	80040ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80040de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d005      	beq.n	80040f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	f043 0208 	orr.w	r2, r3, #8
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f000 81ed 	beq.w	80044da <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004104:	f003 0320 	and.w	r3, r3, #32
 8004108:	2b00      	cmp	r3, #0
 800410a:	d008      	beq.n	800411e <HAL_UART_IRQHandler+0x14e>
 800410c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004110:	f003 0320 	and.w	r3, r3, #32
 8004114:	2b00      	cmp	r3, #0
 8004116:	d002      	beq.n	800411e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 fb8e 	bl	800483a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004128:	2b40      	cmp	r3, #64	; 0x40
 800412a:	bf0c      	ite	eq
 800412c:	2301      	moveq	r3, #1
 800412e:	2300      	movne	r3, #0
 8004130:	b2db      	uxtb	r3, r3
 8004132:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413a:	f003 0308 	and.w	r3, r3, #8
 800413e:	2b00      	cmp	r3, #0
 8004140:	d103      	bne.n	800414a <HAL_UART_IRQHandler+0x17a>
 8004142:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004146:	2b00      	cmp	r3, #0
 8004148:	d04f      	beq.n	80041ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 fa96 	bl	800467c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800415a:	2b40      	cmp	r3, #64	; 0x40
 800415c:	d141      	bne.n	80041e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	3314      	adds	r3, #20
 8004164:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004168:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800416c:	e853 3f00 	ldrex	r3, [r3]
 8004170:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004174:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004178:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800417c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	3314      	adds	r3, #20
 8004186:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800418a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800418e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004192:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004196:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800419a:	e841 2300 	strex	r3, r2, [r1]
 800419e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80041a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1d9      	bne.n	800415e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d013      	beq.n	80041da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b6:	4a7d      	ldr	r2, [pc, #500]	; (80043ac <HAL_UART_IRQHandler+0x3dc>)
 80041b8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041be:	4618      	mov	r0, r3
 80041c0:	f7fe fba3 	bl	800290a <HAL_DMA_Abort_IT>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d016      	beq.n	80041f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041d4:	4610      	mov	r0, r2
 80041d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041d8:	e00e      	b.n	80041f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f990 	bl	8004500 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041e0:	e00a      	b.n	80041f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f98c 	bl	8004500 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041e8:	e006      	b.n	80041f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f988 	bl	8004500 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80041f6:	e170      	b.n	80044da <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041f8:	bf00      	nop
    return;
 80041fa:	e16e      	b.n	80044da <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004200:	2b01      	cmp	r3, #1
 8004202:	f040 814a 	bne.w	800449a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800420a:	f003 0310 	and.w	r3, r3, #16
 800420e:	2b00      	cmp	r3, #0
 8004210:	f000 8143 	beq.w	800449a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004218:	f003 0310 	and.w	r3, r3, #16
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 813c 	beq.w	800449a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004222:	2300      	movs	r3, #0
 8004224:	60bb      	str	r3, [r7, #8]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	60bb      	str	r3, [r7, #8]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	60bb      	str	r3, [r7, #8]
 8004236:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004242:	2b40      	cmp	r3, #64	; 0x40
 8004244:	f040 80b4 	bne.w	80043b0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004254:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004258:	2b00      	cmp	r3, #0
 800425a:	f000 8140 	beq.w	80044de <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004262:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004266:	429a      	cmp	r2, r3
 8004268:	f080 8139 	bcs.w	80044de <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004272:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004278:	69db      	ldr	r3, [r3, #28]
 800427a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800427e:	f000 8088 	beq.w	8004392 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	330c      	adds	r3, #12
 8004288:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004290:	e853 3f00 	ldrex	r3, [r3]
 8004294:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004298:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800429c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	330c      	adds	r3, #12
 80042aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80042ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80042b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80042ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80042be:	e841 2300 	strex	r3, r2, [r1]
 80042c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80042c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1d9      	bne.n	8004282 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	3314      	adds	r3, #20
 80042d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042d8:	e853 3f00 	ldrex	r3, [r3]
 80042dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80042de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042e0:	f023 0301 	bic.w	r3, r3, #1
 80042e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	3314      	adds	r3, #20
 80042ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80042f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80042f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80042fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80042fe:	e841 2300 	strex	r3, r2, [r1]
 8004302:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004304:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1e1      	bne.n	80042ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	3314      	adds	r3, #20
 8004310:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004312:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004314:	e853 3f00 	ldrex	r3, [r3]
 8004318:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800431a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800431c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004320:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	3314      	adds	r3, #20
 800432a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800432e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004330:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004332:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004334:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004336:	e841 2300 	strex	r3, r2, [r1]
 800433a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800433c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1e3      	bne.n	800430a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2220      	movs	r2, #32
 8004346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	330c      	adds	r3, #12
 8004356:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800435a:	e853 3f00 	ldrex	r3, [r3]
 800435e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004360:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004362:	f023 0310 	bic.w	r3, r3, #16
 8004366:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	330c      	adds	r3, #12
 8004370:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004374:	65ba      	str	r2, [r7, #88]	; 0x58
 8004376:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004378:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800437a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800437c:	e841 2300 	strex	r3, r2, [r1]
 8004380:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1e3      	bne.n	8004350 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438c:	4618      	mov	r0, r3
 800438e:	f7fe fa4c 	bl	800282a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800439a:	b29b      	uxth	r3, r3
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	b29b      	uxth	r3, r3
 80043a0:	4619      	mov	r1, r3
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f8b6 	bl	8004514 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043a8:	e099      	b.n	80044de <HAL_UART_IRQHandler+0x50e>
 80043aa:	bf00      	nop
 80043ac:	08004743 	.word	0x08004743
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f000 808b 	beq.w	80044e2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80043cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f000 8086 	beq.w	80044e2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	330c      	adds	r3, #12
 80043dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e0:	e853 3f00 	ldrex	r3, [r3]
 80043e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80043e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	330c      	adds	r3, #12
 80043f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80043fa:	647a      	str	r2, [r7, #68]	; 0x44
 80043fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004400:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004402:	e841 2300 	strex	r3, r2, [r1]
 8004406:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1e3      	bne.n	80043d6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	3314      	adds	r3, #20
 8004414:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	e853 3f00 	ldrex	r3, [r3]
 800441c:	623b      	str	r3, [r7, #32]
   return(result);
 800441e:	6a3b      	ldr	r3, [r7, #32]
 8004420:	f023 0301 	bic.w	r3, r3, #1
 8004424:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	3314      	adds	r3, #20
 800442e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004432:	633a      	str	r2, [r7, #48]	; 0x30
 8004434:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004436:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800443a:	e841 2300 	strex	r3, r2, [r1]
 800443e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1e3      	bne.n	800440e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2220      	movs	r2, #32
 800444a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	330c      	adds	r3, #12
 800445a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	e853 3f00 	ldrex	r3, [r3]
 8004462:	60fb      	str	r3, [r7, #12]
   return(result);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f023 0310 	bic.w	r3, r3, #16
 800446a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	330c      	adds	r3, #12
 8004474:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004478:	61fa      	str	r2, [r7, #28]
 800447a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447c:	69b9      	ldr	r1, [r7, #24]
 800447e:	69fa      	ldr	r2, [r7, #28]
 8004480:	e841 2300 	strex	r3, r2, [r1]
 8004484:	617b      	str	r3, [r7, #20]
   return(result);
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1e3      	bne.n	8004454 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800448c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004490:	4619      	mov	r1, r3
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f83e 	bl	8004514 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004498:	e023      	b.n	80044e2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800449a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800449e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d009      	beq.n	80044ba <HAL_UART_IRQHandler+0x4ea>
 80044a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d003      	beq.n	80044ba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 f959 	bl	800476a <UART_Transmit_IT>
    return;
 80044b8:	e014      	b.n	80044e4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80044ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00e      	beq.n	80044e4 <HAL_UART_IRQHandler+0x514>
 80044c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d008      	beq.n	80044e4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f999 	bl	800480a <UART_EndTransmit_IT>
    return;
 80044d8:	e004      	b.n	80044e4 <HAL_UART_IRQHandler+0x514>
    return;
 80044da:	bf00      	nop
 80044dc:	e002      	b.n	80044e4 <HAL_UART_IRQHandler+0x514>
      return;
 80044de:	bf00      	nop
 80044e0:	e000      	b.n	80044e4 <HAL_UART_IRQHandler+0x514>
      return;
 80044e2:	bf00      	nop
  }
}
 80044e4:	37e8      	adds	r7, #232	; 0xe8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop

080044ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	460b      	mov	r3, r1
 800451e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b090      	sub	sp, #64	; 0x40
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	603b      	str	r3, [r7, #0]
 8004538:	4613      	mov	r3, r2
 800453a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800453c:	e050      	b.n	80045e0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800453e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004544:	d04c      	beq.n	80045e0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004546:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004548:	2b00      	cmp	r3, #0
 800454a:	d007      	beq.n	800455c <UART_WaitOnFlagUntilTimeout+0x30>
 800454c:	f7fe f82c 	bl	80025a8 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004558:	429a      	cmp	r2, r3
 800455a:	d241      	bcs.n	80045e0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	330c      	adds	r3, #12
 8004562:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004566:	e853 3f00 	ldrex	r3, [r3]
 800456a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004572:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	330c      	adds	r3, #12
 800457a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800457c:	637a      	str	r2, [r7, #52]	; 0x34
 800457e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004580:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004582:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004584:	e841 2300 	strex	r3, r2, [r1]
 8004588:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800458a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1e5      	bne.n	800455c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	3314      	adds	r3, #20
 8004596:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	e853 3f00 	ldrex	r3, [r3]
 800459e:	613b      	str	r3, [r7, #16]
   return(result);
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	f023 0301 	bic.w	r3, r3, #1
 80045a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	3314      	adds	r3, #20
 80045ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045b0:	623a      	str	r2, [r7, #32]
 80045b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b4:	69f9      	ldr	r1, [r7, #28]
 80045b6:	6a3a      	ldr	r2, [r7, #32]
 80045b8:	e841 2300 	strex	r3, r2, [r1]
 80045bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1e5      	bne.n	8004590 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2220      	movs	r2, #32
 80045c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2220      	movs	r2, #32
 80045d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e00f      	b.n	8004600 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	4013      	ands	r3, r2
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	bf0c      	ite	eq
 80045f0:	2301      	moveq	r3, #1
 80045f2:	2300      	movne	r3, #0
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	461a      	mov	r2, r3
 80045f8:	79fb      	ldrb	r3, [r7, #7]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d09f      	beq.n	800453e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3740      	adds	r7, #64	; 0x40
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	4613      	mov	r3, r2
 8004614:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	88fa      	ldrh	r2, [r7, #6]
 8004620:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	88fa      	ldrh	r2, [r7, #6]
 8004626:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2222      	movs	r2, #34	; 0x22
 8004632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68da      	ldr	r2, [r3, #12]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800464c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	695a      	ldr	r2, [r3, #20]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f042 0201 	orr.w	r2, r2, #1
 800465c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68da      	ldr	r2, [r3, #12]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f042 0220 	orr.w	r2, r2, #32
 800466c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3714      	adds	r7, #20
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800467c:	b480      	push	{r7}
 800467e:	b095      	sub	sp, #84	; 0x54
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	330c      	adds	r3, #12
 800468a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800468e:	e853 3f00 	ldrex	r3, [r3]
 8004692:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004696:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800469a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	330c      	adds	r3, #12
 80046a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046a4:	643a      	str	r2, [r7, #64]	; 0x40
 80046a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80046aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046ac:	e841 2300 	strex	r3, r2, [r1]
 80046b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1e5      	bne.n	8004684 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	3314      	adds	r3, #20
 80046be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c0:	6a3b      	ldr	r3, [r7, #32]
 80046c2:	e853 3f00 	ldrex	r3, [r3]
 80046c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	f023 0301 	bic.w	r3, r3, #1
 80046ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	3314      	adds	r3, #20
 80046d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046e0:	e841 2300 	strex	r3, r2, [r1]
 80046e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1e5      	bne.n	80046b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d119      	bne.n	8004728 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	330c      	adds	r3, #12
 80046fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	e853 3f00 	ldrex	r3, [r3]
 8004702:	60bb      	str	r3, [r7, #8]
   return(result);
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	f023 0310 	bic.w	r3, r3, #16
 800470a:	647b      	str	r3, [r7, #68]	; 0x44
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	330c      	adds	r3, #12
 8004712:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004714:	61ba      	str	r2, [r7, #24]
 8004716:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004718:	6979      	ldr	r1, [r7, #20]
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	e841 2300 	strex	r3, r2, [r1]
 8004720:	613b      	str	r3, [r7, #16]
   return(result);
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1e5      	bne.n	80046f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2220      	movs	r2, #32
 800472c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004736:	bf00      	nop
 8004738:	3754      	adds	r7, #84	; 0x54
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b084      	sub	sp, #16
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2200      	movs	r2, #0
 8004754:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f7ff fecf 	bl	8004500 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004762:	bf00      	nop
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800476a:	b480      	push	{r7}
 800476c:	b085      	sub	sp, #20
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b21      	cmp	r3, #33	; 0x21
 800477c:	d13e      	bne.n	80047fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004786:	d114      	bne.n	80047b2 <UART_Transmit_IT+0x48>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d110      	bne.n	80047b2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	881b      	ldrh	r3, [r3, #0]
 800479a:	461a      	mov	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	1c9a      	adds	r2, r3, #2
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	621a      	str	r2, [r3, #32]
 80047b0:	e008      	b.n	80047c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	1c59      	adds	r1, r3, #1
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	6211      	str	r1, [r2, #32]
 80047bc:	781a      	ldrb	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	3b01      	subs	r3, #1
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	4619      	mov	r1, r3
 80047d2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10f      	bne.n	80047f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68da      	ldr	r2, [r3, #12]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68da      	ldr	r2, [r3, #12]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80047f8:	2300      	movs	r3, #0
 80047fa:	e000      	b.n	80047fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80047fc:	2302      	movs	r3, #2
  }
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b082      	sub	sp, #8
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68da      	ldr	r2, [r3, #12]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004820:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2220      	movs	r2, #32
 8004826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f7ff fe5e 	bl	80044ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b08c      	sub	sp, #48	; 0x30
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b22      	cmp	r3, #34	; 0x22
 800484c:	f040 80ab 	bne.w	80049a6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004858:	d117      	bne.n	800488a <UART_Receive_IT+0x50>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d113      	bne.n	800488a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004862:	2300      	movs	r3, #0
 8004864:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	b29b      	uxth	r3, r3
 8004874:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004878:	b29a      	uxth	r2, r3
 800487a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004882:	1c9a      	adds	r2, r3, #2
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	629a      	str	r2, [r3, #40]	; 0x28
 8004888:	e026      	b.n	80048d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004890:	2300      	movs	r3, #0
 8004892:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800489c:	d007      	beq.n	80048ae <UART_Receive_IT+0x74>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10a      	bne.n	80048bc <UART_Receive_IT+0x82>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d106      	bne.n	80048bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	b2da      	uxtb	r2, r3
 80048b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b8:	701a      	strb	r2, [r3, #0]
 80048ba:	e008      	b.n	80048ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048c8:	b2da      	uxtb	r2, r3
 80048ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d2:	1c5a      	adds	r2, r3, #1
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048dc:	b29b      	uxth	r3, r3
 80048de:	3b01      	subs	r3, #1
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	4619      	mov	r1, r3
 80048e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d15a      	bne.n	80049a2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68da      	ldr	r2, [r3, #12]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f022 0220 	bic.w	r2, r2, #32
 80048fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68da      	ldr	r2, [r3, #12]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800490a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	695a      	ldr	r2, [r3, #20]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f022 0201 	bic.w	r2, r2, #1
 800491a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2220      	movs	r2, #32
 8004920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004928:	2b01      	cmp	r3, #1
 800492a:	d135      	bne.n	8004998 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	330c      	adds	r3, #12
 8004938:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	e853 3f00 	ldrex	r3, [r3]
 8004940:	613b      	str	r3, [r7, #16]
   return(result);
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	f023 0310 	bic.w	r3, r3, #16
 8004948:	627b      	str	r3, [r7, #36]	; 0x24
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	330c      	adds	r3, #12
 8004950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004952:	623a      	str	r2, [r7, #32]
 8004954:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004956:	69f9      	ldr	r1, [r7, #28]
 8004958:	6a3a      	ldr	r2, [r7, #32]
 800495a:	e841 2300 	strex	r3, r2, [r1]
 800495e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1e5      	bne.n	8004932 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0310 	and.w	r3, r3, #16
 8004970:	2b10      	cmp	r3, #16
 8004972:	d10a      	bne.n	800498a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004974:	2300      	movs	r3, #0
 8004976:	60fb      	str	r3, [r7, #12]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	60fb      	str	r3, [r7, #12]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	60fb      	str	r3, [r7, #12]
 8004988:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800498e:	4619      	mov	r1, r3
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f7ff fdbf 	bl	8004514 <HAL_UARTEx_RxEventCallback>
 8004996:	e002      	b.n	800499e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f7fd fc93 	bl	80022c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800499e:	2300      	movs	r3, #0
 80049a0:	e002      	b.n	80049a8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80049a2:	2300      	movs	r3, #0
 80049a4:	e000      	b.n	80049a8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80049a6:	2302      	movs	r3, #2
  }
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3730      	adds	r7, #48	; 0x30
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049b4:	b0c0      	sub	sp, #256	; 0x100
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80049c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049cc:	68d9      	ldr	r1, [r3, #12]
 80049ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	ea40 0301 	orr.w	r3, r0, r1
 80049d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049de:	689a      	ldr	r2, [r3, #8]
 80049e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	431a      	orrs	r2, r3
 80049e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	431a      	orrs	r2, r3
 80049f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f4:	69db      	ldr	r3, [r3, #28]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80049fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a08:	f021 010c 	bic.w	r1, r1, #12
 8004a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a16:	430b      	orrs	r3, r1
 8004a18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a2a:	6999      	ldr	r1, [r3, #24]
 8004a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	ea40 0301 	orr.w	r3, r0, r1
 8004a36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	4b8f      	ldr	r3, [pc, #572]	; (8004c7c <UART_SetConfig+0x2cc>)
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d005      	beq.n	8004a50 <UART_SetConfig+0xa0>
 8004a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	4b8d      	ldr	r3, [pc, #564]	; (8004c80 <UART_SetConfig+0x2d0>)
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d104      	bne.n	8004a5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a50:	f7fe fdb8 	bl	80035c4 <HAL_RCC_GetPCLK2Freq>
 8004a54:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004a58:	e003      	b.n	8004a62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a5a:	f7fe fd9f 	bl	800359c <HAL_RCC_GetPCLK1Freq>
 8004a5e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a66:	69db      	ldr	r3, [r3, #28]
 8004a68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a6c:	f040 810c 	bne.w	8004c88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a74:	2200      	movs	r2, #0
 8004a76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a7a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004a7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004a82:	4622      	mov	r2, r4
 8004a84:	462b      	mov	r3, r5
 8004a86:	1891      	adds	r1, r2, r2
 8004a88:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a8a:	415b      	adcs	r3, r3
 8004a8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a92:	4621      	mov	r1, r4
 8004a94:	eb12 0801 	adds.w	r8, r2, r1
 8004a98:	4629      	mov	r1, r5
 8004a9a:	eb43 0901 	adc.w	r9, r3, r1
 8004a9e:	f04f 0200 	mov.w	r2, #0
 8004aa2:	f04f 0300 	mov.w	r3, #0
 8004aa6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004aaa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004aae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ab2:	4690      	mov	r8, r2
 8004ab4:	4699      	mov	r9, r3
 8004ab6:	4623      	mov	r3, r4
 8004ab8:	eb18 0303 	adds.w	r3, r8, r3
 8004abc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ac0:	462b      	mov	r3, r5
 8004ac2:	eb49 0303 	adc.w	r3, r9, r3
 8004ac6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004ad6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004ada:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004ade:	460b      	mov	r3, r1
 8004ae0:	18db      	adds	r3, r3, r3
 8004ae2:	653b      	str	r3, [r7, #80]	; 0x50
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	eb42 0303 	adc.w	r3, r2, r3
 8004aea:	657b      	str	r3, [r7, #84]	; 0x54
 8004aec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004af0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004af4:	f7fc f8d0 	bl	8000c98 <__aeabi_uldivmod>
 8004af8:	4602      	mov	r2, r0
 8004afa:	460b      	mov	r3, r1
 8004afc:	4b61      	ldr	r3, [pc, #388]	; (8004c84 <UART_SetConfig+0x2d4>)
 8004afe:	fba3 2302 	umull	r2, r3, r3, r2
 8004b02:	095b      	lsrs	r3, r3, #5
 8004b04:	011c      	lsls	r4, r3, #4
 8004b06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b10:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004b14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004b18:	4642      	mov	r2, r8
 8004b1a:	464b      	mov	r3, r9
 8004b1c:	1891      	adds	r1, r2, r2
 8004b1e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004b20:	415b      	adcs	r3, r3
 8004b22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b28:	4641      	mov	r1, r8
 8004b2a:	eb12 0a01 	adds.w	sl, r2, r1
 8004b2e:	4649      	mov	r1, r9
 8004b30:	eb43 0b01 	adc.w	fp, r3, r1
 8004b34:	f04f 0200 	mov.w	r2, #0
 8004b38:	f04f 0300 	mov.w	r3, #0
 8004b3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b48:	4692      	mov	sl, r2
 8004b4a:	469b      	mov	fp, r3
 8004b4c:	4643      	mov	r3, r8
 8004b4e:	eb1a 0303 	adds.w	r3, sl, r3
 8004b52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b56:	464b      	mov	r3, r9
 8004b58:	eb4b 0303 	adc.w	r3, fp, r3
 8004b5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b6c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004b70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004b74:	460b      	mov	r3, r1
 8004b76:	18db      	adds	r3, r3, r3
 8004b78:	643b      	str	r3, [r7, #64]	; 0x40
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	eb42 0303 	adc.w	r3, r2, r3
 8004b80:	647b      	str	r3, [r7, #68]	; 0x44
 8004b82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004b8a:	f7fc f885 	bl	8000c98 <__aeabi_uldivmod>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	460b      	mov	r3, r1
 8004b92:	4611      	mov	r1, r2
 8004b94:	4b3b      	ldr	r3, [pc, #236]	; (8004c84 <UART_SetConfig+0x2d4>)
 8004b96:	fba3 2301 	umull	r2, r3, r3, r1
 8004b9a:	095b      	lsrs	r3, r3, #5
 8004b9c:	2264      	movs	r2, #100	; 0x64
 8004b9e:	fb02 f303 	mul.w	r3, r2, r3
 8004ba2:	1acb      	subs	r3, r1, r3
 8004ba4:	00db      	lsls	r3, r3, #3
 8004ba6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004baa:	4b36      	ldr	r3, [pc, #216]	; (8004c84 <UART_SetConfig+0x2d4>)
 8004bac:	fba3 2302 	umull	r2, r3, r3, r2
 8004bb0:	095b      	lsrs	r3, r3, #5
 8004bb2:	005b      	lsls	r3, r3, #1
 8004bb4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004bb8:	441c      	add	r4, r3
 8004bba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004bc4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004bc8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004bcc:	4642      	mov	r2, r8
 8004bce:	464b      	mov	r3, r9
 8004bd0:	1891      	adds	r1, r2, r2
 8004bd2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004bd4:	415b      	adcs	r3, r3
 8004bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004bdc:	4641      	mov	r1, r8
 8004bde:	1851      	adds	r1, r2, r1
 8004be0:	6339      	str	r1, [r7, #48]	; 0x30
 8004be2:	4649      	mov	r1, r9
 8004be4:	414b      	adcs	r3, r1
 8004be6:	637b      	str	r3, [r7, #52]	; 0x34
 8004be8:	f04f 0200 	mov.w	r2, #0
 8004bec:	f04f 0300 	mov.w	r3, #0
 8004bf0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004bf4:	4659      	mov	r1, fp
 8004bf6:	00cb      	lsls	r3, r1, #3
 8004bf8:	4651      	mov	r1, sl
 8004bfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bfe:	4651      	mov	r1, sl
 8004c00:	00ca      	lsls	r2, r1, #3
 8004c02:	4610      	mov	r0, r2
 8004c04:	4619      	mov	r1, r3
 8004c06:	4603      	mov	r3, r0
 8004c08:	4642      	mov	r2, r8
 8004c0a:	189b      	adds	r3, r3, r2
 8004c0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c10:	464b      	mov	r3, r9
 8004c12:	460a      	mov	r2, r1
 8004c14:	eb42 0303 	adc.w	r3, r2, r3
 8004c18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c28:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004c2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c30:	460b      	mov	r3, r1
 8004c32:	18db      	adds	r3, r3, r3
 8004c34:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c36:	4613      	mov	r3, r2
 8004c38:	eb42 0303 	adc.w	r3, r2, r3
 8004c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004c46:	f7fc f827 	bl	8000c98 <__aeabi_uldivmod>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	4b0d      	ldr	r3, [pc, #52]	; (8004c84 <UART_SetConfig+0x2d4>)
 8004c50:	fba3 1302 	umull	r1, r3, r3, r2
 8004c54:	095b      	lsrs	r3, r3, #5
 8004c56:	2164      	movs	r1, #100	; 0x64
 8004c58:	fb01 f303 	mul.w	r3, r1, r3
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	3332      	adds	r3, #50	; 0x32
 8004c62:	4a08      	ldr	r2, [pc, #32]	; (8004c84 <UART_SetConfig+0x2d4>)
 8004c64:	fba2 2303 	umull	r2, r3, r2, r3
 8004c68:	095b      	lsrs	r3, r3, #5
 8004c6a:	f003 0207 	and.w	r2, r3, #7
 8004c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4422      	add	r2, r4
 8004c76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c78:	e105      	b.n	8004e86 <UART_SetConfig+0x4d6>
 8004c7a:	bf00      	nop
 8004c7c:	40011000 	.word	0x40011000
 8004c80:	40011400 	.word	0x40011400
 8004c84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c92:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004c96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004c9a:	4642      	mov	r2, r8
 8004c9c:	464b      	mov	r3, r9
 8004c9e:	1891      	adds	r1, r2, r2
 8004ca0:	6239      	str	r1, [r7, #32]
 8004ca2:	415b      	adcs	r3, r3
 8004ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ca6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004caa:	4641      	mov	r1, r8
 8004cac:	1854      	adds	r4, r2, r1
 8004cae:	4649      	mov	r1, r9
 8004cb0:	eb43 0501 	adc.w	r5, r3, r1
 8004cb4:	f04f 0200 	mov.w	r2, #0
 8004cb8:	f04f 0300 	mov.w	r3, #0
 8004cbc:	00eb      	lsls	r3, r5, #3
 8004cbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cc2:	00e2      	lsls	r2, r4, #3
 8004cc4:	4614      	mov	r4, r2
 8004cc6:	461d      	mov	r5, r3
 8004cc8:	4643      	mov	r3, r8
 8004cca:	18e3      	adds	r3, r4, r3
 8004ccc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004cd0:	464b      	mov	r3, r9
 8004cd2:	eb45 0303 	adc.w	r3, r5, r3
 8004cd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ce6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004cea:	f04f 0200 	mov.w	r2, #0
 8004cee:	f04f 0300 	mov.w	r3, #0
 8004cf2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004cf6:	4629      	mov	r1, r5
 8004cf8:	008b      	lsls	r3, r1, #2
 8004cfa:	4621      	mov	r1, r4
 8004cfc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d00:	4621      	mov	r1, r4
 8004d02:	008a      	lsls	r2, r1, #2
 8004d04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d08:	f7fb ffc6 	bl	8000c98 <__aeabi_uldivmod>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	460b      	mov	r3, r1
 8004d10:	4b60      	ldr	r3, [pc, #384]	; (8004e94 <UART_SetConfig+0x4e4>)
 8004d12:	fba3 2302 	umull	r2, r3, r3, r2
 8004d16:	095b      	lsrs	r3, r3, #5
 8004d18:	011c      	lsls	r4, r3, #4
 8004d1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d24:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004d2c:	4642      	mov	r2, r8
 8004d2e:	464b      	mov	r3, r9
 8004d30:	1891      	adds	r1, r2, r2
 8004d32:	61b9      	str	r1, [r7, #24]
 8004d34:	415b      	adcs	r3, r3
 8004d36:	61fb      	str	r3, [r7, #28]
 8004d38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d3c:	4641      	mov	r1, r8
 8004d3e:	1851      	adds	r1, r2, r1
 8004d40:	6139      	str	r1, [r7, #16]
 8004d42:	4649      	mov	r1, r9
 8004d44:	414b      	adcs	r3, r1
 8004d46:	617b      	str	r3, [r7, #20]
 8004d48:	f04f 0200 	mov.w	r2, #0
 8004d4c:	f04f 0300 	mov.w	r3, #0
 8004d50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d54:	4659      	mov	r1, fp
 8004d56:	00cb      	lsls	r3, r1, #3
 8004d58:	4651      	mov	r1, sl
 8004d5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d5e:	4651      	mov	r1, sl
 8004d60:	00ca      	lsls	r2, r1, #3
 8004d62:	4610      	mov	r0, r2
 8004d64:	4619      	mov	r1, r3
 8004d66:	4603      	mov	r3, r0
 8004d68:	4642      	mov	r2, r8
 8004d6a:	189b      	adds	r3, r3, r2
 8004d6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d70:	464b      	mov	r3, r9
 8004d72:	460a      	mov	r2, r1
 8004d74:	eb42 0303 	adc.w	r3, r2, r3
 8004d78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d86:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004d88:	f04f 0200 	mov.w	r2, #0
 8004d8c:	f04f 0300 	mov.w	r3, #0
 8004d90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004d94:	4649      	mov	r1, r9
 8004d96:	008b      	lsls	r3, r1, #2
 8004d98:	4641      	mov	r1, r8
 8004d9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d9e:	4641      	mov	r1, r8
 8004da0:	008a      	lsls	r2, r1, #2
 8004da2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004da6:	f7fb ff77 	bl	8000c98 <__aeabi_uldivmod>
 8004daa:	4602      	mov	r2, r0
 8004dac:	460b      	mov	r3, r1
 8004dae:	4b39      	ldr	r3, [pc, #228]	; (8004e94 <UART_SetConfig+0x4e4>)
 8004db0:	fba3 1302 	umull	r1, r3, r3, r2
 8004db4:	095b      	lsrs	r3, r3, #5
 8004db6:	2164      	movs	r1, #100	; 0x64
 8004db8:	fb01 f303 	mul.w	r3, r1, r3
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	011b      	lsls	r3, r3, #4
 8004dc0:	3332      	adds	r3, #50	; 0x32
 8004dc2:	4a34      	ldr	r2, [pc, #208]	; (8004e94 <UART_SetConfig+0x4e4>)
 8004dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc8:	095b      	lsrs	r3, r3, #5
 8004dca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dce:	441c      	add	r4, r3
 8004dd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	673b      	str	r3, [r7, #112]	; 0x70
 8004dd8:	677a      	str	r2, [r7, #116]	; 0x74
 8004dda:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004dde:	4642      	mov	r2, r8
 8004de0:	464b      	mov	r3, r9
 8004de2:	1891      	adds	r1, r2, r2
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	415b      	adcs	r3, r3
 8004de8:	60fb      	str	r3, [r7, #12]
 8004dea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004dee:	4641      	mov	r1, r8
 8004df0:	1851      	adds	r1, r2, r1
 8004df2:	6039      	str	r1, [r7, #0]
 8004df4:	4649      	mov	r1, r9
 8004df6:	414b      	adcs	r3, r1
 8004df8:	607b      	str	r3, [r7, #4]
 8004dfa:	f04f 0200 	mov.w	r2, #0
 8004dfe:	f04f 0300 	mov.w	r3, #0
 8004e02:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e06:	4659      	mov	r1, fp
 8004e08:	00cb      	lsls	r3, r1, #3
 8004e0a:	4651      	mov	r1, sl
 8004e0c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e10:	4651      	mov	r1, sl
 8004e12:	00ca      	lsls	r2, r1, #3
 8004e14:	4610      	mov	r0, r2
 8004e16:	4619      	mov	r1, r3
 8004e18:	4603      	mov	r3, r0
 8004e1a:	4642      	mov	r2, r8
 8004e1c:	189b      	adds	r3, r3, r2
 8004e1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e20:	464b      	mov	r3, r9
 8004e22:	460a      	mov	r2, r1
 8004e24:	eb42 0303 	adc.w	r3, r2, r3
 8004e28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	663b      	str	r3, [r7, #96]	; 0x60
 8004e34:	667a      	str	r2, [r7, #100]	; 0x64
 8004e36:	f04f 0200 	mov.w	r2, #0
 8004e3a:	f04f 0300 	mov.w	r3, #0
 8004e3e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004e42:	4649      	mov	r1, r9
 8004e44:	008b      	lsls	r3, r1, #2
 8004e46:	4641      	mov	r1, r8
 8004e48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e4c:	4641      	mov	r1, r8
 8004e4e:	008a      	lsls	r2, r1, #2
 8004e50:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004e54:	f7fb ff20 	bl	8000c98 <__aeabi_uldivmod>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	4b0d      	ldr	r3, [pc, #52]	; (8004e94 <UART_SetConfig+0x4e4>)
 8004e5e:	fba3 1302 	umull	r1, r3, r3, r2
 8004e62:	095b      	lsrs	r3, r3, #5
 8004e64:	2164      	movs	r1, #100	; 0x64
 8004e66:	fb01 f303 	mul.w	r3, r1, r3
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	011b      	lsls	r3, r3, #4
 8004e6e:	3332      	adds	r3, #50	; 0x32
 8004e70:	4a08      	ldr	r2, [pc, #32]	; (8004e94 <UART_SetConfig+0x4e4>)
 8004e72:	fba2 2303 	umull	r2, r3, r2, r3
 8004e76:	095b      	lsrs	r3, r3, #5
 8004e78:	f003 020f 	and.w	r2, r3, #15
 8004e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4422      	add	r2, r4
 8004e84:	609a      	str	r2, [r3, #8]
}
 8004e86:	bf00      	nop
 8004e88:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e92:	bf00      	nop
 8004e94:	51eb851f 	.word	0x51eb851f

08004e98 <__errno>:
 8004e98:	4b01      	ldr	r3, [pc, #4]	; (8004ea0 <__errno+0x8>)
 8004e9a:	6818      	ldr	r0, [r3, #0]
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	20000024 	.word	0x20000024

08004ea4 <__libc_init_array>:
 8004ea4:	b570      	push	{r4, r5, r6, lr}
 8004ea6:	4d0d      	ldr	r5, [pc, #52]	; (8004edc <__libc_init_array+0x38>)
 8004ea8:	4c0d      	ldr	r4, [pc, #52]	; (8004ee0 <__libc_init_array+0x3c>)
 8004eaa:	1b64      	subs	r4, r4, r5
 8004eac:	10a4      	asrs	r4, r4, #2
 8004eae:	2600      	movs	r6, #0
 8004eb0:	42a6      	cmp	r6, r4
 8004eb2:	d109      	bne.n	8004ec8 <__libc_init_array+0x24>
 8004eb4:	4d0b      	ldr	r5, [pc, #44]	; (8004ee4 <__libc_init_array+0x40>)
 8004eb6:	4c0c      	ldr	r4, [pc, #48]	; (8004ee8 <__libc_init_array+0x44>)
 8004eb8:	f004 fd78 	bl	80099ac <_init>
 8004ebc:	1b64      	subs	r4, r4, r5
 8004ebe:	10a4      	asrs	r4, r4, #2
 8004ec0:	2600      	movs	r6, #0
 8004ec2:	42a6      	cmp	r6, r4
 8004ec4:	d105      	bne.n	8004ed2 <__libc_init_array+0x2e>
 8004ec6:	bd70      	pop	{r4, r5, r6, pc}
 8004ec8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ecc:	4798      	blx	r3
 8004ece:	3601      	adds	r6, #1
 8004ed0:	e7ee      	b.n	8004eb0 <__libc_init_array+0xc>
 8004ed2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ed6:	4798      	blx	r3
 8004ed8:	3601      	adds	r6, #1
 8004eda:	e7f2      	b.n	8004ec2 <__libc_init_array+0x1e>
 8004edc:	08009f2c 	.word	0x08009f2c
 8004ee0:	08009f2c 	.word	0x08009f2c
 8004ee4:	08009f2c 	.word	0x08009f2c
 8004ee8:	08009f30 	.word	0x08009f30

08004eec <memcpy>:
 8004eec:	440a      	add	r2, r1
 8004eee:	4291      	cmp	r1, r2
 8004ef0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ef4:	d100      	bne.n	8004ef8 <memcpy+0xc>
 8004ef6:	4770      	bx	lr
 8004ef8:	b510      	push	{r4, lr}
 8004efa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004efe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f02:	4291      	cmp	r1, r2
 8004f04:	d1f9      	bne.n	8004efa <memcpy+0xe>
 8004f06:	bd10      	pop	{r4, pc}

08004f08 <memset>:
 8004f08:	4402      	add	r2, r0
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d100      	bne.n	8004f12 <memset+0xa>
 8004f10:	4770      	bx	lr
 8004f12:	f803 1b01 	strb.w	r1, [r3], #1
 8004f16:	e7f9      	b.n	8004f0c <memset+0x4>

08004f18 <__cvt>:
 8004f18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f1c:	ec55 4b10 	vmov	r4, r5, d0
 8004f20:	2d00      	cmp	r5, #0
 8004f22:	460e      	mov	r6, r1
 8004f24:	4619      	mov	r1, r3
 8004f26:	462b      	mov	r3, r5
 8004f28:	bfbb      	ittet	lt
 8004f2a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004f2e:	461d      	movlt	r5, r3
 8004f30:	2300      	movge	r3, #0
 8004f32:	232d      	movlt	r3, #45	; 0x2d
 8004f34:	700b      	strb	r3, [r1, #0]
 8004f36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f38:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004f3c:	4691      	mov	r9, r2
 8004f3e:	f023 0820 	bic.w	r8, r3, #32
 8004f42:	bfbc      	itt	lt
 8004f44:	4622      	movlt	r2, r4
 8004f46:	4614      	movlt	r4, r2
 8004f48:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004f4c:	d005      	beq.n	8004f5a <__cvt+0x42>
 8004f4e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004f52:	d100      	bne.n	8004f56 <__cvt+0x3e>
 8004f54:	3601      	adds	r6, #1
 8004f56:	2102      	movs	r1, #2
 8004f58:	e000      	b.n	8004f5c <__cvt+0x44>
 8004f5a:	2103      	movs	r1, #3
 8004f5c:	ab03      	add	r3, sp, #12
 8004f5e:	9301      	str	r3, [sp, #4]
 8004f60:	ab02      	add	r3, sp, #8
 8004f62:	9300      	str	r3, [sp, #0]
 8004f64:	ec45 4b10 	vmov	d0, r4, r5
 8004f68:	4653      	mov	r3, sl
 8004f6a:	4632      	mov	r2, r6
 8004f6c:	f001 ff10 	bl	8006d90 <_dtoa_r>
 8004f70:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004f74:	4607      	mov	r7, r0
 8004f76:	d102      	bne.n	8004f7e <__cvt+0x66>
 8004f78:	f019 0f01 	tst.w	r9, #1
 8004f7c:	d022      	beq.n	8004fc4 <__cvt+0xac>
 8004f7e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004f82:	eb07 0906 	add.w	r9, r7, r6
 8004f86:	d110      	bne.n	8004faa <__cvt+0x92>
 8004f88:	783b      	ldrb	r3, [r7, #0]
 8004f8a:	2b30      	cmp	r3, #48	; 0x30
 8004f8c:	d10a      	bne.n	8004fa4 <__cvt+0x8c>
 8004f8e:	2200      	movs	r2, #0
 8004f90:	2300      	movs	r3, #0
 8004f92:	4620      	mov	r0, r4
 8004f94:	4629      	mov	r1, r5
 8004f96:	f7fb fd9f 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f9a:	b918      	cbnz	r0, 8004fa4 <__cvt+0x8c>
 8004f9c:	f1c6 0601 	rsb	r6, r6, #1
 8004fa0:	f8ca 6000 	str.w	r6, [sl]
 8004fa4:	f8da 3000 	ldr.w	r3, [sl]
 8004fa8:	4499      	add	r9, r3
 8004faa:	2200      	movs	r2, #0
 8004fac:	2300      	movs	r3, #0
 8004fae:	4620      	mov	r0, r4
 8004fb0:	4629      	mov	r1, r5
 8004fb2:	f7fb fd91 	bl	8000ad8 <__aeabi_dcmpeq>
 8004fb6:	b108      	cbz	r0, 8004fbc <__cvt+0xa4>
 8004fb8:	f8cd 900c 	str.w	r9, [sp, #12]
 8004fbc:	2230      	movs	r2, #48	; 0x30
 8004fbe:	9b03      	ldr	r3, [sp, #12]
 8004fc0:	454b      	cmp	r3, r9
 8004fc2:	d307      	bcc.n	8004fd4 <__cvt+0xbc>
 8004fc4:	9b03      	ldr	r3, [sp, #12]
 8004fc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004fc8:	1bdb      	subs	r3, r3, r7
 8004fca:	4638      	mov	r0, r7
 8004fcc:	6013      	str	r3, [r2, #0]
 8004fce:	b004      	add	sp, #16
 8004fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fd4:	1c59      	adds	r1, r3, #1
 8004fd6:	9103      	str	r1, [sp, #12]
 8004fd8:	701a      	strb	r2, [r3, #0]
 8004fda:	e7f0      	b.n	8004fbe <__cvt+0xa6>

08004fdc <__exponent>:
 8004fdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2900      	cmp	r1, #0
 8004fe2:	bfb8      	it	lt
 8004fe4:	4249      	neglt	r1, r1
 8004fe6:	f803 2b02 	strb.w	r2, [r3], #2
 8004fea:	bfb4      	ite	lt
 8004fec:	222d      	movlt	r2, #45	; 0x2d
 8004fee:	222b      	movge	r2, #43	; 0x2b
 8004ff0:	2909      	cmp	r1, #9
 8004ff2:	7042      	strb	r2, [r0, #1]
 8004ff4:	dd2a      	ble.n	800504c <__exponent+0x70>
 8004ff6:	f10d 0407 	add.w	r4, sp, #7
 8004ffa:	46a4      	mov	ip, r4
 8004ffc:	270a      	movs	r7, #10
 8004ffe:	46a6      	mov	lr, r4
 8005000:	460a      	mov	r2, r1
 8005002:	fb91 f6f7 	sdiv	r6, r1, r7
 8005006:	fb07 1516 	mls	r5, r7, r6, r1
 800500a:	3530      	adds	r5, #48	; 0x30
 800500c:	2a63      	cmp	r2, #99	; 0x63
 800500e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005012:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005016:	4631      	mov	r1, r6
 8005018:	dcf1      	bgt.n	8004ffe <__exponent+0x22>
 800501a:	3130      	adds	r1, #48	; 0x30
 800501c:	f1ae 0502 	sub.w	r5, lr, #2
 8005020:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005024:	1c44      	adds	r4, r0, #1
 8005026:	4629      	mov	r1, r5
 8005028:	4561      	cmp	r1, ip
 800502a:	d30a      	bcc.n	8005042 <__exponent+0x66>
 800502c:	f10d 0209 	add.w	r2, sp, #9
 8005030:	eba2 020e 	sub.w	r2, r2, lr
 8005034:	4565      	cmp	r5, ip
 8005036:	bf88      	it	hi
 8005038:	2200      	movhi	r2, #0
 800503a:	4413      	add	r3, r2
 800503c:	1a18      	subs	r0, r3, r0
 800503e:	b003      	add	sp, #12
 8005040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005042:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005046:	f804 2f01 	strb.w	r2, [r4, #1]!
 800504a:	e7ed      	b.n	8005028 <__exponent+0x4c>
 800504c:	2330      	movs	r3, #48	; 0x30
 800504e:	3130      	adds	r1, #48	; 0x30
 8005050:	7083      	strb	r3, [r0, #2]
 8005052:	70c1      	strb	r1, [r0, #3]
 8005054:	1d03      	adds	r3, r0, #4
 8005056:	e7f1      	b.n	800503c <__exponent+0x60>

08005058 <_printf_float>:
 8005058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800505c:	ed2d 8b02 	vpush	{d8}
 8005060:	b08d      	sub	sp, #52	; 0x34
 8005062:	460c      	mov	r4, r1
 8005064:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005068:	4616      	mov	r6, r2
 800506a:	461f      	mov	r7, r3
 800506c:	4605      	mov	r5, r0
 800506e:	f003 f9a3 	bl	80083b8 <_localeconv_r>
 8005072:	f8d0 a000 	ldr.w	sl, [r0]
 8005076:	4650      	mov	r0, sl
 8005078:	f7fb f8b2 	bl	80001e0 <strlen>
 800507c:	2300      	movs	r3, #0
 800507e:	930a      	str	r3, [sp, #40]	; 0x28
 8005080:	6823      	ldr	r3, [r4, #0]
 8005082:	9305      	str	r3, [sp, #20]
 8005084:	f8d8 3000 	ldr.w	r3, [r8]
 8005088:	f894 b018 	ldrb.w	fp, [r4, #24]
 800508c:	3307      	adds	r3, #7
 800508e:	f023 0307 	bic.w	r3, r3, #7
 8005092:	f103 0208 	add.w	r2, r3, #8
 8005096:	f8c8 2000 	str.w	r2, [r8]
 800509a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80050a2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80050a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80050aa:	9307      	str	r3, [sp, #28]
 80050ac:	f8cd 8018 	str.w	r8, [sp, #24]
 80050b0:	ee08 0a10 	vmov	s16, r0
 80050b4:	4b9f      	ldr	r3, [pc, #636]	; (8005334 <_printf_float+0x2dc>)
 80050b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050ba:	f04f 32ff 	mov.w	r2, #4294967295
 80050be:	f7fb fd3d 	bl	8000b3c <__aeabi_dcmpun>
 80050c2:	bb88      	cbnz	r0, 8005128 <_printf_float+0xd0>
 80050c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050c8:	4b9a      	ldr	r3, [pc, #616]	; (8005334 <_printf_float+0x2dc>)
 80050ca:	f04f 32ff 	mov.w	r2, #4294967295
 80050ce:	f7fb fd17 	bl	8000b00 <__aeabi_dcmple>
 80050d2:	bb48      	cbnz	r0, 8005128 <_printf_float+0xd0>
 80050d4:	2200      	movs	r2, #0
 80050d6:	2300      	movs	r3, #0
 80050d8:	4640      	mov	r0, r8
 80050da:	4649      	mov	r1, r9
 80050dc:	f7fb fd06 	bl	8000aec <__aeabi_dcmplt>
 80050e0:	b110      	cbz	r0, 80050e8 <_printf_float+0x90>
 80050e2:	232d      	movs	r3, #45	; 0x2d
 80050e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050e8:	4b93      	ldr	r3, [pc, #588]	; (8005338 <_printf_float+0x2e0>)
 80050ea:	4894      	ldr	r0, [pc, #592]	; (800533c <_printf_float+0x2e4>)
 80050ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80050f0:	bf94      	ite	ls
 80050f2:	4698      	movls	r8, r3
 80050f4:	4680      	movhi	r8, r0
 80050f6:	2303      	movs	r3, #3
 80050f8:	6123      	str	r3, [r4, #16]
 80050fa:	9b05      	ldr	r3, [sp, #20]
 80050fc:	f023 0204 	bic.w	r2, r3, #4
 8005100:	6022      	str	r2, [r4, #0]
 8005102:	f04f 0900 	mov.w	r9, #0
 8005106:	9700      	str	r7, [sp, #0]
 8005108:	4633      	mov	r3, r6
 800510a:	aa0b      	add	r2, sp, #44	; 0x2c
 800510c:	4621      	mov	r1, r4
 800510e:	4628      	mov	r0, r5
 8005110:	f000 f9d8 	bl	80054c4 <_printf_common>
 8005114:	3001      	adds	r0, #1
 8005116:	f040 8090 	bne.w	800523a <_printf_float+0x1e2>
 800511a:	f04f 30ff 	mov.w	r0, #4294967295
 800511e:	b00d      	add	sp, #52	; 0x34
 8005120:	ecbd 8b02 	vpop	{d8}
 8005124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005128:	4642      	mov	r2, r8
 800512a:	464b      	mov	r3, r9
 800512c:	4640      	mov	r0, r8
 800512e:	4649      	mov	r1, r9
 8005130:	f7fb fd04 	bl	8000b3c <__aeabi_dcmpun>
 8005134:	b140      	cbz	r0, 8005148 <_printf_float+0xf0>
 8005136:	464b      	mov	r3, r9
 8005138:	2b00      	cmp	r3, #0
 800513a:	bfbc      	itt	lt
 800513c:	232d      	movlt	r3, #45	; 0x2d
 800513e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005142:	487f      	ldr	r0, [pc, #508]	; (8005340 <_printf_float+0x2e8>)
 8005144:	4b7f      	ldr	r3, [pc, #508]	; (8005344 <_printf_float+0x2ec>)
 8005146:	e7d1      	b.n	80050ec <_printf_float+0x94>
 8005148:	6863      	ldr	r3, [r4, #4]
 800514a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800514e:	9206      	str	r2, [sp, #24]
 8005150:	1c5a      	adds	r2, r3, #1
 8005152:	d13f      	bne.n	80051d4 <_printf_float+0x17c>
 8005154:	2306      	movs	r3, #6
 8005156:	6063      	str	r3, [r4, #4]
 8005158:	9b05      	ldr	r3, [sp, #20]
 800515a:	6861      	ldr	r1, [r4, #4]
 800515c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005160:	2300      	movs	r3, #0
 8005162:	9303      	str	r3, [sp, #12]
 8005164:	ab0a      	add	r3, sp, #40	; 0x28
 8005166:	e9cd b301 	strd	fp, r3, [sp, #4]
 800516a:	ab09      	add	r3, sp, #36	; 0x24
 800516c:	ec49 8b10 	vmov	d0, r8, r9
 8005170:	9300      	str	r3, [sp, #0]
 8005172:	6022      	str	r2, [r4, #0]
 8005174:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005178:	4628      	mov	r0, r5
 800517a:	f7ff fecd 	bl	8004f18 <__cvt>
 800517e:	9b06      	ldr	r3, [sp, #24]
 8005180:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005182:	2b47      	cmp	r3, #71	; 0x47
 8005184:	4680      	mov	r8, r0
 8005186:	d108      	bne.n	800519a <_printf_float+0x142>
 8005188:	1cc8      	adds	r0, r1, #3
 800518a:	db02      	blt.n	8005192 <_printf_float+0x13a>
 800518c:	6863      	ldr	r3, [r4, #4]
 800518e:	4299      	cmp	r1, r3
 8005190:	dd41      	ble.n	8005216 <_printf_float+0x1be>
 8005192:	f1ab 0b02 	sub.w	fp, fp, #2
 8005196:	fa5f fb8b 	uxtb.w	fp, fp
 800519a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800519e:	d820      	bhi.n	80051e2 <_printf_float+0x18a>
 80051a0:	3901      	subs	r1, #1
 80051a2:	465a      	mov	r2, fp
 80051a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80051a8:	9109      	str	r1, [sp, #36]	; 0x24
 80051aa:	f7ff ff17 	bl	8004fdc <__exponent>
 80051ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80051b0:	1813      	adds	r3, r2, r0
 80051b2:	2a01      	cmp	r2, #1
 80051b4:	4681      	mov	r9, r0
 80051b6:	6123      	str	r3, [r4, #16]
 80051b8:	dc02      	bgt.n	80051c0 <_printf_float+0x168>
 80051ba:	6822      	ldr	r2, [r4, #0]
 80051bc:	07d2      	lsls	r2, r2, #31
 80051be:	d501      	bpl.n	80051c4 <_printf_float+0x16c>
 80051c0:	3301      	adds	r3, #1
 80051c2:	6123      	str	r3, [r4, #16]
 80051c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d09c      	beq.n	8005106 <_printf_float+0xae>
 80051cc:	232d      	movs	r3, #45	; 0x2d
 80051ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051d2:	e798      	b.n	8005106 <_printf_float+0xae>
 80051d4:	9a06      	ldr	r2, [sp, #24]
 80051d6:	2a47      	cmp	r2, #71	; 0x47
 80051d8:	d1be      	bne.n	8005158 <_printf_float+0x100>
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1bc      	bne.n	8005158 <_printf_float+0x100>
 80051de:	2301      	movs	r3, #1
 80051e0:	e7b9      	b.n	8005156 <_printf_float+0xfe>
 80051e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80051e6:	d118      	bne.n	800521a <_printf_float+0x1c2>
 80051e8:	2900      	cmp	r1, #0
 80051ea:	6863      	ldr	r3, [r4, #4]
 80051ec:	dd0b      	ble.n	8005206 <_printf_float+0x1ae>
 80051ee:	6121      	str	r1, [r4, #16]
 80051f0:	b913      	cbnz	r3, 80051f8 <_printf_float+0x1a0>
 80051f2:	6822      	ldr	r2, [r4, #0]
 80051f4:	07d0      	lsls	r0, r2, #31
 80051f6:	d502      	bpl.n	80051fe <_printf_float+0x1a6>
 80051f8:	3301      	adds	r3, #1
 80051fa:	440b      	add	r3, r1
 80051fc:	6123      	str	r3, [r4, #16]
 80051fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8005200:	f04f 0900 	mov.w	r9, #0
 8005204:	e7de      	b.n	80051c4 <_printf_float+0x16c>
 8005206:	b913      	cbnz	r3, 800520e <_printf_float+0x1b6>
 8005208:	6822      	ldr	r2, [r4, #0]
 800520a:	07d2      	lsls	r2, r2, #31
 800520c:	d501      	bpl.n	8005212 <_printf_float+0x1ba>
 800520e:	3302      	adds	r3, #2
 8005210:	e7f4      	b.n	80051fc <_printf_float+0x1a4>
 8005212:	2301      	movs	r3, #1
 8005214:	e7f2      	b.n	80051fc <_printf_float+0x1a4>
 8005216:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800521a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800521c:	4299      	cmp	r1, r3
 800521e:	db05      	blt.n	800522c <_printf_float+0x1d4>
 8005220:	6823      	ldr	r3, [r4, #0]
 8005222:	6121      	str	r1, [r4, #16]
 8005224:	07d8      	lsls	r0, r3, #31
 8005226:	d5ea      	bpl.n	80051fe <_printf_float+0x1a6>
 8005228:	1c4b      	adds	r3, r1, #1
 800522a:	e7e7      	b.n	80051fc <_printf_float+0x1a4>
 800522c:	2900      	cmp	r1, #0
 800522e:	bfd4      	ite	le
 8005230:	f1c1 0202 	rsble	r2, r1, #2
 8005234:	2201      	movgt	r2, #1
 8005236:	4413      	add	r3, r2
 8005238:	e7e0      	b.n	80051fc <_printf_float+0x1a4>
 800523a:	6823      	ldr	r3, [r4, #0]
 800523c:	055a      	lsls	r2, r3, #21
 800523e:	d407      	bmi.n	8005250 <_printf_float+0x1f8>
 8005240:	6923      	ldr	r3, [r4, #16]
 8005242:	4642      	mov	r2, r8
 8005244:	4631      	mov	r1, r6
 8005246:	4628      	mov	r0, r5
 8005248:	47b8      	blx	r7
 800524a:	3001      	adds	r0, #1
 800524c:	d12c      	bne.n	80052a8 <_printf_float+0x250>
 800524e:	e764      	b.n	800511a <_printf_float+0xc2>
 8005250:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005254:	f240 80e0 	bls.w	8005418 <_printf_float+0x3c0>
 8005258:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800525c:	2200      	movs	r2, #0
 800525e:	2300      	movs	r3, #0
 8005260:	f7fb fc3a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005264:	2800      	cmp	r0, #0
 8005266:	d034      	beq.n	80052d2 <_printf_float+0x27a>
 8005268:	4a37      	ldr	r2, [pc, #220]	; (8005348 <_printf_float+0x2f0>)
 800526a:	2301      	movs	r3, #1
 800526c:	4631      	mov	r1, r6
 800526e:	4628      	mov	r0, r5
 8005270:	47b8      	blx	r7
 8005272:	3001      	adds	r0, #1
 8005274:	f43f af51 	beq.w	800511a <_printf_float+0xc2>
 8005278:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800527c:	429a      	cmp	r2, r3
 800527e:	db02      	blt.n	8005286 <_printf_float+0x22e>
 8005280:	6823      	ldr	r3, [r4, #0]
 8005282:	07d8      	lsls	r0, r3, #31
 8005284:	d510      	bpl.n	80052a8 <_printf_float+0x250>
 8005286:	ee18 3a10 	vmov	r3, s16
 800528a:	4652      	mov	r2, sl
 800528c:	4631      	mov	r1, r6
 800528e:	4628      	mov	r0, r5
 8005290:	47b8      	blx	r7
 8005292:	3001      	adds	r0, #1
 8005294:	f43f af41 	beq.w	800511a <_printf_float+0xc2>
 8005298:	f04f 0800 	mov.w	r8, #0
 800529c:	f104 091a 	add.w	r9, r4, #26
 80052a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052a2:	3b01      	subs	r3, #1
 80052a4:	4543      	cmp	r3, r8
 80052a6:	dc09      	bgt.n	80052bc <_printf_float+0x264>
 80052a8:	6823      	ldr	r3, [r4, #0]
 80052aa:	079b      	lsls	r3, r3, #30
 80052ac:	f100 8105 	bmi.w	80054ba <_printf_float+0x462>
 80052b0:	68e0      	ldr	r0, [r4, #12]
 80052b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052b4:	4298      	cmp	r0, r3
 80052b6:	bfb8      	it	lt
 80052b8:	4618      	movlt	r0, r3
 80052ba:	e730      	b.n	800511e <_printf_float+0xc6>
 80052bc:	2301      	movs	r3, #1
 80052be:	464a      	mov	r2, r9
 80052c0:	4631      	mov	r1, r6
 80052c2:	4628      	mov	r0, r5
 80052c4:	47b8      	blx	r7
 80052c6:	3001      	adds	r0, #1
 80052c8:	f43f af27 	beq.w	800511a <_printf_float+0xc2>
 80052cc:	f108 0801 	add.w	r8, r8, #1
 80052d0:	e7e6      	b.n	80052a0 <_printf_float+0x248>
 80052d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	dc39      	bgt.n	800534c <_printf_float+0x2f4>
 80052d8:	4a1b      	ldr	r2, [pc, #108]	; (8005348 <_printf_float+0x2f0>)
 80052da:	2301      	movs	r3, #1
 80052dc:	4631      	mov	r1, r6
 80052de:	4628      	mov	r0, r5
 80052e0:	47b8      	blx	r7
 80052e2:	3001      	adds	r0, #1
 80052e4:	f43f af19 	beq.w	800511a <_printf_float+0xc2>
 80052e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052ec:	4313      	orrs	r3, r2
 80052ee:	d102      	bne.n	80052f6 <_printf_float+0x29e>
 80052f0:	6823      	ldr	r3, [r4, #0]
 80052f2:	07d9      	lsls	r1, r3, #31
 80052f4:	d5d8      	bpl.n	80052a8 <_printf_float+0x250>
 80052f6:	ee18 3a10 	vmov	r3, s16
 80052fa:	4652      	mov	r2, sl
 80052fc:	4631      	mov	r1, r6
 80052fe:	4628      	mov	r0, r5
 8005300:	47b8      	blx	r7
 8005302:	3001      	adds	r0, #1
 8005304:	f43f af09 	beq.w	800511a <_printf_float+0xc2>
 8005308:	f04f 0900 	mov.w	r9, #0
 800530c:	f104 0a1a 	add.w	sl, r4, #26
 8005310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005312:	425b      	negs	r3, r3
 8005314:	454b      	cmp	r3, r9
 8005316:	dc01      	bgt.n	800531c <_printf_float+0x2c4>
 8005318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800531a:	e792      	b.n	8005242 <_printf_float+0x1ea>
 800531c:	2301      	movs	r3, #1
 800531e:	4652      	mov	r2, sl
 8005320:	4631      	mov	r1, r6
 8005322:	4628      	mov	r0, r5
 8005324:	47b8      	blx	r7
 8005326:	3001      	adds	r0, #1
 8005328:	f43f aef7 	beq.w	800511a <_printf_float+0xc2>
 800532c:	f109 0901 	add.w	r9, r9, #1
 8005330:	e7ee      	b.n	8005310 <_printf_float+0x2b8>
 8005332:	bf00      	nop
 8005334:	7fefffff 	.word	0x7fefffff
 8005338:	08009a78 	.word	0x08009a78
 800533c:	08009a7c 	.word	0x08009a7c
 8005340:	08009a84 	.word	0x08009a84
 8005344:	08009a80 	.word	0x08009a80
 8005348:	08009a88 	.word	0x08009a88
 800534c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800534e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005350:	429a      	cmp	r2, r3
 8005352:	bfa8      	it	ge
 8005354:	461a      	movge	r2, r3
 8005356:	2a00      	cmp	r2, #0
 8005358:	4691      	mov	r9, r2
 800535a:	dc37      	bgt.n	80053cc <_printf_float+0x374>
 800535c:	f04f 0b00 	mov.w	fp, #0
 8005360:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005364:	f104 021a 	add.w	r2, r4, #26
 8005368:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800536a:	9305      	str	r3, [sp, #20]
 800536c:	eba3 0309 	sub.w	r3, r3, r9
 8005370:	455b      	cmp	r3, fp
 8005372:	dc33      	bgt.n	80053dc <_printf_float+0x384>
 8005374:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005378:	429a      	cmp	r2, r3
 800537a:	db3b      	blt.n	80053f4 <_printf_float+0x39c>
 800537c:	6823      	ldr	r3, [r4, #0]
 800537e:	07da      	lsls	r2, r3, #31
 8005380:	d438      	bmi.n	80053f4 <_printf_float+0x39c>
 8005382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005384:	9a05      	ldr	r2, [sp, #20]
 8005386:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005388:	1a9a      	subs	r2, r3, r2
 800538a:	eba3 0901 	sub.w	r9, r3, r1
 800538e:	4591      	cmp	r9, r2
 8005390:	bfa8      	it	ge
 8005392:	4691      	movge	r9, r2
 8005394:	f1b9 0f00 	cmp.w	r9, #0
 8005398:	dc35      	bgt.n	8005406 <_printf_float+0x3ae>
 800539a:	f04f 0800 	mov.w	r8, #0
 800539e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80053a2:	f104 0a1a 	add.w	sl, r4, #26
 80053a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053aa:	1a9b      	subs	r3, r3, r2
 80053ac:	eba3 0309 	sub.w	r3, r3, r9
 80053b0:	4543      	cmp	r3, r8
 80053b2:	f77f af79 	ble.w	80052a8 <_printf_float+0x250>
 80053b6:	2301      	movs	r3, #1
 80053b8:	4652      	mov	r2, sl
 80053ba:	4631      	mov	r1, r6
 80053bc:	4628      	mov	r0, r5
 80053be:	47b8      	blx	r7
 80053c0:	3001      	adds	r0, #1
 80053c2:	f43f aeaa 	beq.w	800511a <_printf_float+0xc2>
 80053c6:	f108 0801 	add.w	r8, r8, #1
 80053ca:	e7ec      	b.n	80053a6 <_printf_float+0x34e>
 80053cc:	4613      	mov	r3, r2
 80053ce:	4631      	mov	r1, r6
 80053d0:	4642      	mov	r2, r8
 80053d2:	4628      	mov	r0, r5
 80053d4:	47b8      	blx	r7
 80053d6:	3001      	adds	r0, #1
 80053d8:	d1c0      	bne.n	800535c <_printf_float+0x304>
 80053da:	e69e      	b.n	800511a <_printf_float+0xc2>
 80053dc:	2301      	movs	r3, #1
 80053de:	4631      	mov	r1, r6
 80053e0:	4628      	mov	r0, r5
 80053e2:	9205      	str	r2, [sp, #20]
 80053e4:	47b8      	blx	r7
 80053e6:	3001      	adds	r0, #1
 80053e8:	f43f ae97 	beq.w	800511a <_printf_float+0xc2>
 80053ec:	9a05      	ldr	r2, [sp, #20]
 80053ee:	f10b 0b01 	add.w	fp, fp, #1
 80053f2:	e7b9      	b.n	8005368 <_printf_float+0x310>
 80053f4:	ee18 3a10 	vmov	r3, s16
 80053f8:	4652      	mov	r2, sl
 80053fa:	4631      	mov	r1, r6
 80053fc:	4628      	mov	r0, r5
 80053fe:	47b8      	blx	r7
 8005400:	3001      	adds	r0, #1
 8005402:	d1be      	bne.n	8005382 <_printf_float+0x32a>
 8005404:	e689      	b.n	800511a <_printf_float+0xc2>
 8005406:	9a05      	ldr	r2, [sp, #20]
 8005408:	464b      	mov	r3, r9
 800540a:	4442      	add	r2, r8
 800540c:	4631      	mov	r1, r6
 800540e:	4628      	mov	r0, r5
 8005410:	47b8      	blx	r7
 8005412:	3001      	adds	r0, #1
 8005414:	d1c1      	bne.n	800539a <_printf_float+0x342>
 8005416:	e680      	b.n	800511a <_printf_float+0xc2>
 8005418:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800541a:	2a01      	cmp	r2, #1
 800541c:	dc01      	bgt.n	8005422 <_printf_float+0x3ca>
 800541e:	07db      	lsls	r3, r3, #31
 8005420:	d538      	bpl.n	8005494 <_printf_float+0x43c>
 8005422:	2301      	movs	r3, #1
 8005424:	4642      	mov	r2, r8
 8005426:	4631      	mov	r1, r6
 8005428:	4628      	mov	r0, r5
 800542a:	47b8      	blx	r7
 800542c:	3001      	adds	r0, #1
 800542e:	f43f ae74 	beq.w	800511a <_printf_float+0xc2>
 8005432:	ee18 3a10 	vmov	r3, s16
 8005436:	4652      	mov	r2, sl
 8005438:	4631      	mov	r1, r6
 800543a:	4628      	mov	r0, r5
 800543c:	47b8      	blx	r7
 800543e:	3001      	adds	r0, #1
 8005440:	f43f ae6b 	beq.w	800511a <_printf_float+0xc2>
 8005444:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005448:	2200      	movs	r2, #0
 800544a:	2300      	movs	r3, #0
 800544c:	f7fb fb44 	bl	8000ad8 <__aeabi_dcmpeq>
 8005450:	b9d8      	cbnz	r0, 800548a <_printf_float+0x432>
 8005452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005454:	f108 0201 	add.w	r2, r8, #1
 8005458:	3b01      	subs	r3, #1
 800545a:	4631      	mov	r1, r6
 800545c:	4628      	mov	r0, r5
 800545e:	47b8      	blx	r7
 8005460:	3001      	adds	r0, #1
 8005462:	d10e      	bne.n	8005482 <_printf_float+0x42a>
 8005464:	e659      	b.n	800511a <_printf_float+0xc2>
 8005466:	2301      	movs	r3, #1
 8005468:	4652      	mov	r2, sl
 800546a:	4631      	mov	r1, r6
 800546c:	4628      	mov	r0, r5
 800546e:	47b8      	blx	r7
 8005470:	3001      	adds	r0, #1
 8005472:	f43f ae52 	beq.w	800511a <_printf_float+0xc2>
 8005476:	f108 0801 	add.w	r8, r8, #1
 800547a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800547c:	3b01      	subs	r3, #1
 800547e:	4543      	cmp	r3, r8
 8005480:	dcf1      	bgt.n	8005466 <_printf_float+0x40e>
 8005482:	464b      	mov	r3, r9
 8005484:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005488:	e6dc      	b.n	8005244 <_printf_float+0x1ec>
 800548a:	f04f 0800 	mov.w	r8, #0
 800548e:	f104 0a1a 	add.w	sl, r4, #26
 8005492:	e7f2      	b.n	800547a <_printf_float+0x422>
 8005494:	2301      	movs	r3, #1
 8005496:	4642      	mov	r2, r8
 8005498:	e7df      	b.n	800545a <_printf_float+0x402>
 800549a:	2301      	movs	r3, #1
 800549c:	464a      	mov	r2, r9
 800549e:	4631      	mov	r1, r6
 80054a0:	4628      	mov	r0, r5
 80054a2:	47b8      	blx	r7
 80054a4:	3001      	adds	r0, #1
 80054a6:	f43f ae38 	beq.w	800511a <_printf_float+0xc2>
 80054aa:	f108 0801 	add.w	r8, r8, #1
 80054ae:	68e3      	ldr	r3, [r4, #12]
 80054b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80054b2:	1a5b      	subs	r3, r3, r1
 80054b4:	4543      	cmp	r3, r8
 80054b6:	dcf0      	bgt.n	800549a <_printf_float+0x442>
 80054b8:	e6fa      	b.n	80052b0 <_printf_float+0x258>
 80054ba:	f04f 0800 	mov.w	r8, #0
 80054be:	f104 0919 	add.w	r9, r4, #25
 80054c2:	e7f4      	b.n	80054ae <_printf_float+0x456>

080054c4 <_printf_common>:
 80054c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054c8:	4616      	mov	r6, r2
 80054ca:	4699      	mov	r9, r3
 80054cc:	688a      	ldr	r2, [r1, #8]
 80054ce:	690b      	ldr	r3, [r1, #16]
 80054d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80054d4:	4293      	cmp	r3, r2
 80054d6:	bfb8      	it	lt
 80054d8:	4613      	movlt	r3, r2
 80054da:	6033      	str	r3, [r6, #0]
 80054dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80054e0:	4607      	mov	r7, r0
 80054e2:	460c      	mov	r4, r1
 80054e4:	b10a      	cbz	r2, 80054ea <_printf_common+0x26>
 80054e6:	3301      	adds	r3, #1
 80054e8:	6033      	str	r3, [r6, #0]
 80054ea:	6823      	ldr	r3, [r4, #0]
 80054ec:	0699      	lsls	r1, r3, #26
 80054ee:	bf42      	ittt	mi
 80054f0:	6833      	ldrmi	r3, [r6, #0]
 80054f2:	3302      	addmi	r3, #2
 80054f4:	6033      	strmi	r3, [r6, #0]
 80054f6:	6825      	ldr	r5, [r4, #0]
 80054f8:	f015 0506 	ands.w	r5, r5, #6
 80054fc:	d106      	bne.n	800550c <_printf_common+0x48>
 80054fe:	f104 0a19 	add.w	sl, r4, #25
 8005502:	68e3      	ldr	r3, [r4, #12]
 8005504:	6832      	ldr	r2, [r6, #0]
 8005506:	1a9b      	subs	r3, r3, r2
 8005508:	42ab      	cmp	r3, r5
 800550a:	dc26      	bgt.n	800555a <_printf_common+0x96>
 800550c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005510:	1e13      	subs	r3, r2, #0
 8005512:	6822      	ldr	r2, [r4, #0]
 8005514:	bf18      	it	ne
 8005516:	2301      	movne	r3, #1
 8005518:	0692      	lsls	r2, r2, #26
 800551a:	d42b      	bmi.n	8005574 <_printf_common+0xb0>
 800551c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005520:	4649      	mov	r1, r9
 8005522:	4638      	mov	r0, r7
 8005524:	47c0      	blx	r8
 8005526:	3001      	adds	r0, #1
 8005528:	d01e      	beq.n	8005568 <_printf_common+0xa4>
 800552a:	6823      	ldr	r3, [r4, #0]
 800552c:	68e5      	ldr	r5, [r4, #12]
 800552e:	6832      	ldr	r2, [r6, #0]
 8005530:	f003 0306 	and.w	r3, r3, #6
 8005534:	2b04      	cmp	r3, #4
 8005536:	bf08      	it	eq
 8005538:	1aad      	subeq	r5, r5, r2
 800553a:	68a3      	ldr	r3, [r4, #8]
 800553c:	6922      	ldr	r2, [r4, #16]
 800553e:	bf0c      	ite	eq
 8005540:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005544:	2500      	movne	r5, #0
 8005546:	4293      	cmp	r3, r2
 8005548:	bfc4      	itt	gt
 800554a:	1a9b      	subgt	r3, r3, r2
 800554c:	18ed      	addgt	r5, r5, r3
 800554e:	2600      	movs	r6, #0
 8005550:	341a      	adds	r4, #26
 8005552:	42b5      	cmp	r5, r6
 8005554:	d11a      	bne.n	800558c <_printf_common+0xc8>
 8005556:	2000      	movs	r0, #0
 8005558:	e008      	b.n	800556c <_printf_common+0xa8>
 800555a:	2301      	movs	r3, #1
 800555c:	4652      	mov	r2, sl
 800555e:	4649      	mov	r1, r9
 8005560:	4638      	mov	r0, r7
 8005562:	47c0      	blx	r8
 8005564:	3001      	adds	r0, #1
 8005566:	d103      	bne.n	8005570 <_printf_common+0xac>
 8005568:	f04f 30ff 	mov.w	r0, #4294967295
 800556c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005570:	3501      	adds	r5, #1
 8005572:	e7c6      	b.n	8005502 <_printf_common+0x3e>
 8005574:	18e1      	adds	r1, r4, r3
 8005576:	1c5a      	adds	r2, r3, #1
 8005578:	2030      	movs	r0, #48	; 0x30
 800557a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800557e:	4422      	add	r2, r4
 8005580:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005584:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005588:	3302      	adds	r3, #2
 800558a:	e7c7      	b.n	800551c <_printf_common+0x58>
 800558c:	2301      	movs	r3, #1
 800558e:	4622      	mov	r2, r4
 8005590:	4649      	mov	r1, r9
 8005592:	4638      	mov	r0, r7
 8005594:	47c0      	blx	r8
 8005596:	3001      	adds	r0, #1
 8005598:	d0e6      	beq.n	8005568 <_printf_common+0xa4>
 800559a:	3601      	adds	r6, #1
 800559c:	e7d9      	b.n	8005552 <_printf_common+0x8e>
	...

080055a0 <_printf_i>:
 80055a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055a4:	7e0f      	ldrb	r7, [r1, #24]
 80055a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80055a8:	2f78      	cmp	r7, #120	; 0x78
 80055aa:	4691      	mov	r9, r2
 80055ac:	4680      	mov	r8, r0
 80055ae:	460c      	mov	r4, r1
 80055b0:	469a      	mov	sl, r3
 80055b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80055b6:	d807      	bhi.n	80055c8 <_printf_i+0x28>
 80055b8:	2f62      	cmp	r7, #98	; 0x62
 80055ba:	d80a      	bhi.n	80055d2 <_printf_i+0x32>
 80055bc:	2f00      	cmp	r7, #0
 80055be:	f000 80d8 	beq.w	8005772 <_printf_i+0x1d2>
 80055c2:	2f58      	cmp	r7, #88	; 0x58
 80055c4:	f000 80a3 	beq.w	800570e <_printf_i+0x16e>
 80055c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80055d0:	e03a      	b.n	8005648 <_printf_i+0xa8>
 80055d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80055d6:	2b15      	cmp	r3, #21
 80055d8:	d8f6      	bhi.n	80055c8 <_printf_i+0x28>
 80055da:	a101      	add	r1, pc, #4	; (adr r1, 80055e0 <_printf_i+0x40>)
 80055dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055e0:	08005639 	.word	0x08005639
 80055e4:	0800564d 	.word	0x0800564d
 80055e8:	080055c9 	.word	0x080055c9
 80055ec:	080055c9 	.word	0x080055c9
 80055f0:	080055c9 	.word	0x080055c9
 80055f4:	080055c9 	.word	0x080055c9
 80055f8:	0800564d 	.word	0x0800564d
 80055fc:	080055c9 	.word	0x080055c9
 8005600:	080055c9 	.word	0x080055c9
 8005604:	080055c9 	.word	0x080055c9
 8005608:	080055c9 	.word	0x080055c9
 800560c:	08005759 	.word	0x08005759
 8005610:	0800567d 	.word	0x0800567d
 8005614:	0800573b 	.word	0x0800573b
 8005618:	080055c9 	.word	0x080055c9
 800561c:	080055c9 	.word	0x080055c9
 8005620:	0800577b 	.word	0x0800577b
 8005624:	080055c9 	.word	0x080055c9
 8005628:	0800567d 	.word	0x0800567d
 800562c:	080055c9 	.word	0x080055c9
 8005630:	080055c9 	.word	0x080055c9
 8005634:	08005743 	.word	0x08005743
 8005638:	682b      	ldr	r3, [r5, #0]
 800563a:	1d1a      	adds	r2, r3, #4
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	602a      	str	r2, [r5, #0]
 8005640:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005644:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005648:	2301      	movs	r3, #1
 800564a:	e0a3      	b.n	8005794 <_printf_i+0x1f4>
 800564c:	6820      	ldr	r0, [r4, #0]
 800564e:	6829      	ldr	r1, [r5, #0]
 8005650:	0606      	lsls	r6, r0, #24
 8005652:	f101 0304 	add.w	r3, r1, #4
 8005656:	d50a      	bpl.n	800566e <_printf_i+0xce>
 8005658:	680e      	ldr	r6, [r1, #0]
 800565a:	602b      	str	r3, [r5, #0]
 800565c:	2e00      	cmp	r6, #0
 800565e:	da03      	bge.n	8005668 <_printf_i+0xc8>
 8005660:	232d      	movs	r3, #45	; 0x2d
 8005662:	4276      	negs	r6, r6
 8005664:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005668:	485e      	ldr	r0, [pc, #376]	; (80057e4 <_printf_i+0x244>)
 800566a:	230a      	movs	r3, #10
 800566c:	e019      	b.n	80056a2 <_printf_i+0x102>
 800566e:	680e      	ldr	r6, [r1, #0]
 8005670:	602b      	str	r3, [r5, #0]
 8005672:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005676:	bf18      	it	ne
 8005678:	b236      	sxthne	r6, r6
 800567a:	e7ef      	b.n	800565c <_printf_i+0xbc>
 800567c:	682b      	ldr	r3, [r5, #0]
 800567e:	6820      	ldr	r0, [r4, #0]
 8005680:	1d19      	adds	r1, r3, #4
 8005682:	6029      	str	r1, [r5, #0]
 8005684:	0601      	lsls	r1, r0, #24
 8005686:	d501      	bpl.n	800568c <_printf_i+0xec>
 8005688:	681e      	ldr	r6, [r3, #0]
 800568a:	e002      	b.n	8005692 <_printf_i+0xf2>
 800568c:	0646      	lsls	r6, r0, #25
 800568e:	d5fb      	bpl.n	8005688 <_printf_i+0xe8>
 8005690:	881e      	ldrh	r6, [r3, #0]
 8005692:	4854      	ldr	r0, [pc, #336]	; (80057e4 <_printf_i+0x244>)
 8005694:	2f6f      	cmp	r7, #111	; 0x6f
 8005696:	bf0c      	ite	eq
 8005698:	2308      	moveq	r3, #8
 800569a:	230a      	movne	r3, #10
 800569c:	2100      	movs	r1, #0
 800569e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80056a2:	6865      	ldr	r5, [r4, #4]
 80056a4:	60a5      	str	r5, [r4, #8]
 80056a6:	2d00      	cmp	r5, #0
 80056a8:	bfa2      	ittt	ge
 80056aa:	6821      	ldrge	r1, [r4, #0]
 80056ac:	f021 0104 	bicge.w	r1, r1, #4
 80056b0:	6021      	strge	r1, [r4, #0]
 80056b2:	b90e      	cbnz	r6, 80056b8 <_printf_i+0x118>
 80056b4:	2d00      	cmp	r5, #0
 80056b6:	d04d      	beq.n	8005754 <_printf_i+0x1b4>
 80056b8:	4615      	mov	r5, r2
 80056ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80056be:	fb03 6711 	mls	r7, r3, r1, r6
 80056c2:	5dc7      	ldrb	r7, [r0, r7]
 80056c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80056c8:	4637      	mov	r7, r6
 80056ca:	42bb      	cmp	r3, r7
 80056cc:	460e      	mov	r6, r1
 80056ce:	d9f4      	bls.n	80056ba <_printf_i+0x11a>
 80056d0:	2b08      	cmp	r3, #8
 80056d2:	d10b      	bne.n	80056ec <_printf_i+0x14c>
 80056d4:	6823      	ldr	r3, [r4, #0]
 80056d6:	07de      	lsls	r6, r3, #31
 80056d8:	d508      	bpl.n	80056ec <_printf_i+0x14c>
 80056da:	6923      	ldr	r3, [r4, #16]
 80056dc:	6861      	ldr	r1, [r4, #4]
 80056de:	4299      	cmp	r1, r3
 80056e0:	bfde      	ittt	le
 80056e2:	2330      	movle	r3, #48	; 0x30
 80056e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80056e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80056ec:	1b52      	subs	r2, r2, r5
 80056ee:	6122      	str	r2, [r4, #16]
 80056f0:	f8cd a000 	str.w	sl, [sp]
 80056f4:	464b      	mov	r3, r9
 80056f6:	aa03      	add	r2, sp, #12
 80056f8:	4621      	mov	r1, r4
 80056fa:	4640      	mov	r0, r8
 80056fc:	f7ff fee2 	bl	80054c4 <_printf_common>
 8005700:	3001      	adds	r0, #1
 8005702:	d14c      	bne.n	800579e <_printf_i+0x1fe>
 8005704:	f04f 30ff 	mov.w	r0, #4294967295
 8005708:	b004      	add	sp, #16
 800570a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800570e:	4835      	ldr	r0, [pc, #212]	; (80057e4 <_printf_i+0x244>)
 8005710:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005714:	6829      	ldr	r1, [r5, #0]
 8005716:	6823      	ldr	r3, [r4, #0]
 8005718:	f851 6b04 	ldr.w	r6, [r1], #4
 800571c:	6029      	str	r1, [r5, #0]
 800571e:	061d      	lsls	r5, r3, #24
 8005720:	d514      	bpl.n	800574c <_printf_i+0x1ac>
 8005722:	07df      	lsls	r7, r3, #31
 8005724:	bf44      	itt	mi
 8005726:	f043 0320 	orrmi.w	r3, r3, #32
 800572a:	6023      	strmi	r3, [r4, #0]
 800572c:	b91e      	cbnz	r6, 8005736 <_printf_i+0x196>
 800572e:	6823      	ldr	r3, [r4, #0]
 8005730:	f023 0320 	bic.w	r3, r3, #32
 8005734:	6023      	str	r3, [r4, #0]
 8005736:	2310      	movs	r3, #16
 8005738:	e7b0      	b.n	800569c <_printf_i+0xfc>
 800573a:	6823      	ldr	r3, [r4, #0]
 800573c:	f043 0320 	orr.w	r3, r3, #32
 8005740:	6023      	str	r3, [r4, #0]
 8005742:	2378      	movs	r3, #120	; 0x78
 8005744:	4828      	ldr	r0, [pc, #160]	; (80057e8 <_printf_i+0x248>)
 8005746:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800574a:	e7e3      	b.n	8005714 <_printf_i+0x174>
 800574c:	0659      	lsls	r1, r3, #25
 800574e:	bf48      	it	mi
 8005750:	b2b6      	uxthmi	r6, r6
 8005752:	e7e6      	b.n	8005722 <_printf_i+0x182>
 8005754:	4615      	mov	r5, r2
 8005756:	e7bb      	b.n	80056d0 <_printf_i+0x130>
 8005758:	682b      	ldr	r3, [r5, #0]
 800575a:	6826      	ldr	r6, [r4, #0]
 800575c:	6961      	ldr	r1, [r4, #20]
 800575e:	1d18      	adds	r0, r3, #4
 8005760:	6028      	str	r0, [r5, #0]
 8005762:	0635      	lsls	r5, r6, #24
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	d501      	bpl.n	800576c <_printf_i+0x1cc>
 8005768:	6019      	str	r1, [r3, #0]
 800576a:	e002      	b.n	8005772 <_printf_i+0x1d2>
 800576c:	0670      	lsls	r0, r6, #25
 800576e:	d5fb      	bpl.n	8005768 <_printf_i+0x1c8>
 8005770:	8019      	strh	r1, [r3, #0]
 8005772:	2300      	movs	r3, #0
 8005774:	6123      	str	r3, [r4, #16]
 8005776:	4615      	mov	r5, r2
 8005778:	e7ba      	b.n	80056f0 <_printf_i+0x150>
 800577a:	682b      	ldr	r3, [r5, #0]
 800577c:	1d1a      	adds	r2, r3, #4
 800577e:	602a      	str	r2, [r5, #0]
 8005780:	681d      	ldr	r5, [r3, #0]
 8005782:	6862      	ldr	r2, [r4, #4]
 8005784:	2100      	movs	r1, #0
 8005786:	4628      	mov	r0, r5
 8005788:	f7fa fd32 	bl	80001f0 <memchr>
 800578c:	b108      	cbz	r0, 8005792 <_printf_i+0x1f2>
 800578e:	1b40      	subs	r0, r0, r5
 8005790:	6060      	str	r0, [r4, #4]
 8005792:	6863      	ldr	r3, [r4, #4]
 8005794:	6123      	str	r3, [r4, #16]
 8005796:	2300      	movs	r3, #0
 8005798:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800579c:	e7a8      	b.n	80056f0 <_printf_i+0x150>
 800579e:	6923      	ldr	r3, [r4, #16]
 80057a0:	462a      	mov	r2, r5
 80057a2:	4649      	mov	r1, r9
 80057a4:	4640      	mov	r0, r8
 80057a6:	47d0      	blx	sl
 80057a8:	3001      	adds	r0, #1
 80057aa:	d0ab      	beq.n	8005704 <_printf_i+0x164>
 80057ac:	6823      	ldr	r3, [r4, #0]
 80057ae:	079b      	lsls	r3, r3, #30
 80057b0:	d413      	bmi.n	80057da <_printf_i+0x23a>
 80057b2:	68e0      	ldr	r0, [r4, #12]
 80057b4:	9b03      	ldr	r3, [sp, #12]
 80057b6:	4298      	cmp	r0, r3
 80057b8:	bfb8      	it	lt
 80057ba:	4618      	movlt	r0, r3
 80057bc:	e7a4      	b.n	8005708 <_printf_i+0x168>
 80057be:	2301      	movs	r3, #1
 80057c0:	4632      	mov	r2, r6
 80057c2:	4649      	mov	r1, r9
 80057c4:	4640      	mov	r0, r8
 80057c6:	47d0      	blx	sl
 80057c8:	3001      	adds	r0, #1
 80057ca:	d09b      	beq.n	8005704 <_printf_i+0x164>
 80057cc:	3501      	adds	r5, #1
 80057ce:	68e3      	ldr	r3, [r4, #12]
 80057d0:	9903      	ldr	r1, [sp, #12]
 80057d2:	1a5b      	subs	r3, r3, r1
 80057d4:	42ab      	cmp	r3, r5
 80057d6:	dcf2      	bgt.n	80057be <_printf_i+0x21e>
 80057d8:	e7eb      	b.n	80057b2 <_printf_i+0x212>
 80057da:	2500      	movs	r5, #0
 80057dc:	f104 0619 	add.w	r6, r4, #25
 80057e0:	e7f5      	b.n	80057ce <_printf_i+0x22e>
 80057e2:	bf00      	nop
 80057e4:	08009a8a 	.word	0x08009a8a
 80057e8:	08009a9b 	.word	0x08009a9b

080057ec <_scanf_float>:
 80057ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057f0:	b087      	sub	sp, #28
 80057f2:	4617      	mov	r7, r2
 80057f4:	9303      	str	r3, [sp, #12]
 80057f6:	688b      	ldr	r3, [r1, #8]
 80057f8:	1e5a      	subs	r2, r3, #1
 80057fa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80057fe:	bf83      	ittte	hi
 8005800:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005804:	195b      	addhi	r3, r3, r5
 8005806:	9302      	strhi	r3, [sp, #8]
 8005808:	2300      	movls	r3, #0
 800580a:	bf86      	itte	hi
 800580c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005810:	608b      	strhi	r3, [r1, #8]
 8005812:	9302      	strls	r3, [sp, #8]
 8005814:	680b      	ldr	r3, [r1, #0]
 8005816:	468b      	mov	fp, r1
 8005818:	2500      	movs	r5, #0
 800581a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800581e:	f84b 3b1c 	str.w	r3, [fp], #28
 8005822:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005826:	4680      	mov	r8, r0
 8005828:	460c      	mov	r4, r1
 800582a:	465e      	mov	r6, fp
 800582c:	46aa      	mov	sl, r5
 800582e:	46a9      	mov	r9, r5
 8005830:	9501      	str	r5, [sp, #4]
 8005832:	68a2      	ldr	r2, [r4, #8]
 8005834:	b152      	cbz	r2, 800584c <_scanf_float+0x60>
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	2b4e      	cmp	r3, #78	; 0x4e
 800583c:	d864      	bhi.n	8005908 <_scanf_float+0x11c>
 800583e:	2b40      	cmp	r3, #64	; 0x40
 8005840:	d83c      	bhi.n	80058bc <_scanf_float+0xd0>
 8005842:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005846:	b2c8      	uxtb	r0, r1
 8005848:	280e      	cmp	r0, #14
 800584a:	d93a      	bls.n	80058c2 <_scanf_float+0xd6>
 800584c:	f1b9 0f00 	cmp.w	r9, #0
 8005850:	d003      	beq.n	800585a <_scanf_float+0x6e>
 8005852:	6823      	ldr	r3, [r4, #0]
 8005854:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005858:	6023      	str	r3, [r4, #0]
 800585a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800585e:	f1ba 0f01 	cmp.w	sl, #1
 8005862:	f200 8113 	bhi.w	8005a8c <_scanf_float+0x2a0>
 8005866:	455e      	cmp	r6, fp
 8005868:	f200 8105 	bhi.w	8005a76 <_scanf_float+0x28a>
 800586c:	2501      	movs	r5, #1
 800586e:	4628      	mov	r0, r5
 8005870:	b007      	add	sp, #28
 8005872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005876:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800587a:	2a0d      	cmp	r2, #13
 800587c:	d8e6      	bhi.n	800584c <_scanf_float+0x60>
 800587e:	a101      	add	r1, pc, #4	; (adr r1, 8005884 <_scanf_float+0x98>)
 8005880:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005884:	080059c3 	.word	0x080059c3
 8005888:	0800584d 	.word	0x0800584d
 800588c:	0800584d 	.word	0x0800584d
 8005890:	0800584d 	.word	0x0800584d
 8005894:	08005a23 	.word	0x08005a23
 8005898:	080059fb 	.word	0x080059fb
 800589c:	0800584d 	.word	0x0800584d
 80058a0:	0800584d 	.word	0x0800584d
 80058a4:	080059d1 	.word	0x080059d1
 80058a8:	0800584d 	.word	0x0800584d
 80058ac:	0800584d 	.word	0x0800584d
 80058b0:	0800584d 	.word	0x0800584d
 80058b4:	0800584d 	.word	0x0800584d
 80058b8:	08005989 	.word	0x08005989
 80058bc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80058c0:	e7db      	b.n	800587a <_scanf_float+0x8e>
 80058c2:	290e      	cmp	r1, #14
 80058c4:	d8c2      	bhi.n	800584c <_scanf_float+0x60>
 80058c6:	a001      	add	r0, pc, #4	; (adr r0, 80058cc <_scanf_float+0xe0>)
 80058c8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80058cc:	0800597b 	.word	0x0800597b
 80058d0:	0800584d 	.word	0x0800584d
 80058d4:	0800597b 	.word	0x0800597b
 80058d8:	08005a0f 	.word	0x08005a0f
 80058dc:	0800584d 	.word	0x0800584d
 80058e0:	08005929 	.word	0x08005929
 80058e4:	08005965 	.word	0x08005965
 80058e8:	08005965 	.word	0x08005965
 80058ec:	08005965 	.word	0x08005965
 80058f0:	08005965 	.word	0x08005965
 80058f4:	08005965 	.word	0x08005965
 80058f8:	08005965 	.word	0x08005965
 80058fc:	08005965 	.word	0x08005965
 8005900:	08005965 	.word	0x08005965
 8005904:	08005965 	.word	0x08005965
 8005908:	2b6e      	cmp	r3, #110	; 0x6e
 800590a:	d809      	bhi.n	8005920 <_scanf_float+0x134>
 800590c:	2b60      	cmp	r3, #96	; 0x60
 800590e:	d8b2      	bhi.n	8005876 <_scanf_float+0x8a>
 8005910:	2b54      	cmp	r3, #84	; 0x54
 8005912:	d077      	beq.n	8005a04 <_scanf_float+0x218>
 8005914:	2b59      	cmp	r3, #89	; 0x59
 8005916:	d199      	bne.n	800584c <_scanf_float+0x60>
 8005918:	2d07      	cmp	r5, #7
 800591a:	d197      	bne.n	800584c <_scanf_float+0x60>
 800591c:	2508      	movs	r5, #8
 800591e:	e029      	b.n	8005974 <_scanf_float+0x188>
 8005920:	2b74      	cmp	r3, #116	; 0x74
 8005922:	d06f      	beq.n	8005a04 <_scanf_float+0x218>
 8005924:	2b79      	cmp	r3, #121	; 0x79
 8005926:	e7f6      	b.n	8005916 <_scanf_float+0x12a>
 8005928:	6821      	ldr	r1, [r4, #0]
 800592a:	05c8      	lsls	r0, r1, #23
 800592c:	d51a      	bpl.n	8005964 <_scanf_float+0x178>
 800592e:	9b02      	ldr	r3, [sp, #8]
 8005930:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005934:	6021      	str	r1, [r4, #0]
 8005936:	f109 0901 	add.w	r9, r9, #1
 800593a:	b11b      	cbz	r3, 8005944 <_scanf_float+0x158>
 800593c:	3b01      	subs	r3, #1
 800593e:	3201      	adds	r2, #1
 8005940:	9302      	str	r3, [sp, #8]
 8005942:	60a2      	str	r2, [r4, #8]
 8005944:	68a3      	ldr	r3, [r4, #8]
 8005946:	3b01      	subs	r3, #1
 8005948:	60a3      	str	r3, [r4, #8]
 800594a:	6923      	ldr	r3, [r4, #16]
 800594c:	3301      	adds	r3, #1
 800594e:	6123      	str	r3, [r4, #16]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	3b01      	subs	r3, #1
 8005954:	2b00      	cmp	r3, #0
 8005956:	607b      	str	r3, [r7, #4]
 8005958:	f340 8084 	ble.w	8005a64 <_scanf_float+0x278>
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	3301      	adds	r3, #1
 8005960:	603b      	str	r3, [r7, #0]
 8005962:	e766      	b.n	8005832 <_scanf_float+0x46>
 8005964:	eb1a 0f05 	cmn.w	sl, r5
 8005968:	f47f af70 	bne.w	800584c <_scanf_float+0x60>
 800596c:	6822      	ldr	r2, [r4, #0]
 800596e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005972:	6022      	str	r2, [r4, #0]
 8005974:	f806 3b01 	strb.w	r3, [r6], #1
 8005978:	e7e4      	b.n	8005944 <_scanf_float+0x158>
 800597a:	6822      	ldr	r2, [r4, #0]
 800597c:	0610      	lsls	r0, r2, #24
 800597e:	f57f af65 	bpl.w	800584c <_scanf_float+0x60>
 8005982:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005986:	e7f4      	b.n	8005972 <_scanf_float+0x186>
 8005988:	f1ba 0f00 	cmp.w	sl, #0
 800598c:	d10e      	bne.n	80059ac <_scanf_float+0x1c0>
 800598e:	f1b9 0f00 	cmp.w	r9, #0
 8005992:	d10e      	bne.n	80059b2 <_scanf_float+0x1c6>
 8005994:	6822      	ldr	r2, [r4, #0]
 8005996:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800599a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800599e:	d108      	bne.n	80059b2 <_scanf_float+0x1c6>
 80059a0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80059a4:	6022      	str	r2, [r4, #0]
 80059a6:	f04f 0a01 	mov.w	sl, #1
 80059aa:	e7e3      	b.n	8005974 <_scanf_float+0x188>
 80059ac:	f1ba 0f02 	cmp.w	sl, #2
 80059b0:	d055      	beq.n	8005a5e <_scanf_float+0x272>
 80059b2:	2d01      	cmp	r5, #1
 80059b4:	d002      	beq.n	80059bc <_scanf_float+0x1d0>
 80059b6:	2d04      	cmp	r5, #4
 80059b8:	f47f af48 	bne.w	800584c <_scanf_float+0x60>
 80059bc:	3501      	adds	r5, #1
 80059be:	b2ed      	uxtb	r5, r5
 80059c0:	e7d8      	b.n	8005974 <_scanf_float+0x188>
 80059c2:	f1ba 0f01 	cmp.w	sl, #1
 80059c6:	f47f af41 	bne.w	800584c <_scanf_float+0x60>
 80059ca:	f04f 0a02 	mov.w	sl, #2
 80059ce:	e7d1      	b.n	8005974 <_scanf_float+0x188>
 80059d0:	b97d      	cbnz	r5, 80059f2 <_scanf_float+0x206>
 80059d2:	f1b9 0f00 	cmp.w	r9, #0
 80059d6:	f47f af3c 	bne.w	8005852 <_scanf_float+0x66>
 80059da:	6822      	ldr	r2, [r4, #0]
 80059dc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80059e0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80059e4:	f47f af39 	bne.w	800585a <_scanf_float+0x6e>
 80059e8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80059ec:	6022      	str	r2, [r4, #0]
 80059ee:	2501      	movs	r5, #1
 80059f0:	e7c0      	b.n	8005974 <_scanf_float+0x188>
 80059f2:	2d03      	cmp	r5, #3
 80059f4:	d0e2      	beq.n	80059bc <_scanf_float+0x1d0>
 80059f6:	2d05      	cmp	r5, #5
 80059f8:	e7de      	b.n	80059b8 <_scanf_float+0x1cc>
 80059fa:	2d02      	cmp	r5, #2
 80059fc:	f47f af26 	bne.w	800584c <_scanf_float+0x60>
 8005a00:	2503      	movs	r5, #3
 8005a02:	e7b7      	b.n	8005974 <_scanf_float+0x188>
 8005a04:	2d06      	cmp	r5, #6
 8005a06:	f47f af21 	bne.w	800584c <_scanf_float+0x60>
 8005a0a:	2507      	movs	r5, #7
 8005a0c:	e7b2      	b.n	8005974 <_scanf_float+0x188>
 8005a0e:	6822      	ldr	r2, [r4, #0]
 8005a10:	0591      	lsls	r1, r2, #22
 8005a12:	f57f af1b 	bpl.w	800584c <_scanf_float+0x60>
 8005a16:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005a1a:	6022      	str	r2, [r4, #0]
 8005a1c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005a20:	e7a8      	b.n	8005974 <_scanf_float+0x188>
 8005a22:	6822      	ldr	r2, [r4, #0]
 8005a24:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005a28:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005a2c:	d006      	beq.n	8005a3c <_scanf_float+0x250>
 8005a2e:	0550      	lsls	r0, r2, #21
 8005a30:	f57f af0c 	bpl.w	800584c <_scanf_float+0x60>
 8005a34:	f1b9 0f00 	cmp.w	r9, #0
 8005a38:	f43f af0f 	beq.w	800585a <_scanf_float+0x6e>
 8005a3c:	0591      	lsls	r1, r2, #22
 8005a3e:	bf58      	it	pl
 8005a40:	9901      	ldrpl	r1, [sp, #4]
 8005a42:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005a46:	bf58      	it	pl
 8005a48:	eba9 0101 	subpl.w	r1, r9, r1
 8005a4c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005a50:	bf58      	it	pl
 8005a52:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005a56:	6022      	str	r2, [r4, #0]
 8005a58:	f04f 0900 	mov.w	r9, #0
 8005a5c:	e78a      	b.n	8005974 <_scanf_float+0x188>
 8005a5e:	f04f 0a03 	mov.w	sl, #3
 8005a62:	e787      	b.n	8005974 <_scanf_float+0x188>
 8005a64:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005a68:	4639      	mov	r1, r7
 8005a6a:	4640      	mov	r0, r8
 8005a6c:	4798      	blx	r3
 8005a6e:	2800      	cmp	r0, #0
 8005a70:	f43f aedf 	beq.w	8005832 <_scanf_float+0x46>
 8005a74:	e6ea      	b.n	800584c <_scanf_float+0x60>
 8005a76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005a7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005a7e:	463a      	mov	r2, r7
 8005a80:	4640      	mov	r0, r8
 8005a82:	4798      	blx	r3
 8005a84:	6923      	ldr	r3, [r4, #16]
 8005a86:	3b01      	subs	r3, #1
 8005a88:	6123      	str	r3, [r4, #16]
 8005a8a:	e6ec      	b.n	8005866 <_scanf_float+0x7a>
 8005a8c:	1e6b      	subs	r3, r5, #1
 8005a8e:	2b06      	cmp	r3, #6
 8005a90:	d825      	bhi.n	8005ade <_scanf_float+0x2f2>
 8005a92:	2d02      	cmp	r5, #2
 8005a94:	d836      	bhi.n	8005b04 <_scanf_float+0x318>
 8005a96:	455e      	cmp	r6, fp
 8005a98:	f67f aee8 	bls.w	800586c <_scanf_float+0x80>
 8005a9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005aa0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005aa4:	463a      	mov	r2, r7
 8005aa6:	4640      	mov	r0, r8
 8005aa8:	4798      	blx	r3
 8005aaa:	6923      	ldr	r3, [r4, #16]
 8005aac:	3b01      	subs	r3, #1
 8005aae:	6123      	str	r3, [r4, #16]
 8005ab0:	e7f1      	b.n	8005a96 <_scanf_float+0x2aa>
 8005ab2:	9802      	ldr	r0, [sp, #8]
 8005ab4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005ab8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005abc:	9002      	str	r0, [sp, #8]
 8005abe:	463a      	mov	r2, r7
 8005ac0:	4640      	mov	r0, r8
 8005ac2:	4798      	blx	r3
 8005ac4:	6923      	ldr	r3, [r4, #16]
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	6123      	str	r3, [r4, #16]
 8005aca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ace:	fa5f fa8a 	uxtb.w	sl, sl
 8005ad2:	f1ba 0f02 	cmp.w	sl, #2
 8005ad6:	d1ec      	bne.n	8005ab2 <_scanf_float+0x2c6>
 8005ad8:	3d03      	subs	r5, #3
 8005ada:	b2ed      	uxtb	r5, r5
 8005adc:	1b76      	subs	r6, r6, r5
 8005ade:	6823      	ldr	r3, [r4, #0]
 8005ae0:	05da      	lsls	r2, r3, #23
 8005ae2:	d52f      	bpl.n	8005b44 <_scanf_float+0x358>
 8005ae4:	055b      	lsls	r3, r3, #21
 8005ae6:	d510      	bpl.n	8005b0a <_scanf_float+0x31e>
 8005ae8:	455e      	cmp	r6, fp
 8005aea:	f67f aebf 	bls.w	800586c <_scanf_float+0x80>
 8005aee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005af2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005af6:	463a      	mov	r2, r7
 8005af8:	4640      	mov	r0, r8
 8005afa:	4798      	blx	r3
 8005afc:	6923      	ldr	r3, [r4, #16]
 8005afe:	3b01      	subs	r3, #1
 8005b00:	6123      	str	r3, [r4, #16]
 8005b02:	e7f1      	b.n	8005ae8 <_scanf_float+0x2fc>
 8005b04:	46aa      	mov	sl, r5
 8005b06:	9602      	str	r6, [sp, #8]
 8005b08:	e7df      	b.n	8005aca <_scanf_float+0x2de>
 8005b0a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005b0e:	6923      	ldr	r3, [r4, #16]
 8005b10:	2965      	cmp	r1, #101	; 0x65
 8005b12:	f103 33ff 	add.w	r3, r3, #4294967295
 8005b16:	f106 35ff 	add.w	r5, r6, #4294967295
 8005b1a:	6123      	str	r3, [r4, #16]
 8005b1c:	d00c      	beq.n	8005b38 <_scanf_float+0x34c>
 8005b1e:	2945      	cmp	r1, #69	; 0x45
 8005b20:	d00a      	beq.n	8005b38 <_scanf_float+0x34c>
 8005b22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005b26:	463a      	mov	r2, r7
 8005b28:	4640      	mov	r0, r8
 8005b2a:	4798      	blx	r3
 8005b2c:	6923      	ldr	r3, [r4, #16]
 8005b2e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005b32:	3b01      	subs	r3, #1
 8005b34:	1eb5      	subs	r5, r6, #2
 8005b36:	6123      	str	r3, [r4, #16]
 8005b38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005b3c:	463a      	mov	r2, r7
 8005b3e:	4640      	mov	r0, r8
 8005b40:	4798      	blx	r3
 8005b42:	462e      	mov	r6, r5
 8005b44:	6825      	ldr	r5, [r4, #0]
 8005b46:	f015 0510 	ands.w	r5, r5, #16
 8005b4a:	d159      	bne.n	8005c00 <_scanf_float+0x414>
 8005b4c:	7035      	strb	r5, [r6, #0]
 8005b4e:	6823      	ldr	r3, [r4, #0]
 8005b50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b58:	d11b      	bne.n	8005b92 <_scanf_float+0x3a6>
 8005b5a:	9b01      	ldr	r3, [sp, #4]
 8005b5c:	454b      	cmp	r3, r9
 8005b5e:	eba3 0209 	sub.w	r2, r3, r9
 8005b62:	d123      	bne.n	8005bac <_scanf_float+0x3c0>
 8005b64:	2200      	movs	r2, #0
 8005b66:	4659      	mov	r1, fp
 8005b68:	4640      	mov	r0, r8
 8005b6a:	f000 ff3b 	bl	80069e4 <_strtod_r>
 8005b6e:	6822      	ldr	r2, [r4, #0]
 8005b70:	9b03      	ldr	r3, [sp, #12]
 8005b72:	f012 0f02 	tst.w	r2, #2
 8005b76:	ec57 6b10 	vmov	r6, r7, d0
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	d021      	beq.n	8005bc2 <_scanf_float+0x3d6>
 8005b7e:	9903      	ldr	r1, [sp, #12]
 8005b80:	1d1a      	adds	r2, r3, #4
 8005b82:	600a      	str	r2, [r1, #0]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	e9c3 6700 	strd	r6, r7, [r3]
 8005b8a:	68e3      	ldr	r3, [r4, #12]
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	60e3      	str	r3, [r4, #12]
 8005b90:	e66d      	b.n	800586e <_scanf_float+0x82>
 8005b92:	9b04      	ldr	r3, [sp, #16]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d0e5      	beq.n	8005b64 <_scanf_float+0x378>
 8005b98:	9905      	ldr	r1, [sp, #20]
 8005b9a:	230a      	movs	r3, #10
 8005b9c:	462a      	mov	r2, r5
 8005b9e:	3101      	adds	r1, #1
 8005ba0:	4640      	mov	r0, r8
 8005ba2:	f000 ffa7 	bl	8006af4 <_strtol_r>
 8005ba6:	9b04      	ldr	r3, [sp, #16]
 8005ba8:	9e05      	ldr	r6, [sp, #20]
 8005baa:	1ac2      	subs	r2, r0, r3
 8005bac:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005bb0:	429e      	cmp	r6, r3
 8005bb2:	bf28      	it	cs
 8005bb4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005bb8:	4912      	ldr	r1, [pc, #72]	; (8005c04 <_scanf_float+0x418>)
 8005bba:	4630      	mov	r0, r6
 8005bbc:	f000 f8d0 	bl	8005d60 <siprintf>
 8005bc0:	e7d0      	b.n	8005b64 <_scanf_float+0x378>
 8005bc2:	9903      	ldr	r1, [sp, #12]
 8005bc4:	f012 0f04 	tst.w	r2, #4
 8005bc8:	f103 0204 	add.w	r2, r3, #4
 8005bcc:	600a      	str	r2, [r1, #0]
 8005bce:	d1d9      	bne.n	8005b84 <_scanf_float+0x398>
 8005bd0:	f8d3 8000 	ldr.w	r8, [r3]
 8005bd4:	ee10 2a10 	vmov	r2, s0
 8005bd8:	ee10 0a10 	vmov	r0, s0
 8005bdc:	463b      	mov	r3, r7
 8005bde:	4639      	mov	r1, r7
 8005be0:	f7fa ffac 	bl	8000b3c <__aeabi_dcmpun>
 8005be4:	b128      	cbz	r0, 8005bf2 <_scanf_float+0x406>
 8005be6:	4808      	ldr	r0, [pc, #32]	; (8005c08 <_scanf_float+0x41c>)
 8005be8:	f000 f8b4 	bl	8005d54 <nanf>
 8005bec:	ed88 0a00 	vstr	s0, [r8]
 8005bf0:	e7cb      	b.n	8005b8a <_scanf_float+0x39e>
 8005bf2:	4630      	mov	r0, r6
 8005bf4:	4639      	mov	r1, r7
 8005bf6:	f7fa ffff 	bl	8000bf8 <__aeabi_d2f>
 8005bfa:	f8c8 0000 	str.w	r0, [r8]
 8005bfe:	e7c4      	b.n	8005b8a <_scanf_float+0x39e>
 8005c00:	2500      	movs	r5, #0
 8005c02:	e634      	b.n	800586e <_scanf_float+0x82>
 8005c04:	08009aac 	.word	0x08009aac
 8005c08:	08009f20 	.word	0x08009f20

08005c0c <iprintf>:
 8005c0c:	b40f      	push	{r0, r1, r2, r3}
 8005c0e:	4b0a      	ldr	r3, [pc, #40]	; (8005c38 <iprintf+0x2c>)
 8005c10:	b513      	push	{r0, r1, r4, lr}
 8005c12:	681c      	ldr	r4, [r3, #0]
 8005c14:	b124      	cbz	r4, 8005c20 <iprintf+0x14>
 8005c16:	69a3      	ldr	r3, [r4, #24]
 8005c18:	b913      	cbnz	r3, 8005c20 <iprintf+0x14>
 8005c1a:	4620      	mov	r0, r4
 8005c1c:	f001 ffc0 	bl	8007ba0 <__sinit>
 8005c20:	ab05      	add	r3, sp, #20
 8005c22:	9a04      	ldr	r2, [sp, #16]
 8005c24:	68a1      	ldr	r1, [r4, #8]
 8005c26:	9301      	str	r3, [sp, #4]
 8005c28:	4620      	mov	r0, r4
 8005c2a:	f003 fb89 	bl	8009340 <_vfiprintf_r>
 8005c2e:	b002      	add	sp, #8
 8005c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c34:	b004      	add	sp, #16
 8005c36:	4770      	bx	lr
 8005c38:	20000024 	.word	0x20000024

08005c3c <putchar>:
 8005c3c:	4b09      	ldr	r3, [pc, #36]	; (8005c64 <putchar+0x28>)
 8005c3e:	b513      	push	{r0, r1, r4, lr}
 8005c40:	681c      	ldr	r4, [r3, #0]
 8005c42:	4601      	mov	r1, r0
 8005c44:	b134      	cbz	r4, 8005c54 <putchar+0x18>
 8005c46:	69a3      	ldr	r3, [r4, #24]
 8005c48:	b923      	cbnz	r3, 8005c54 <putchar+0x18>
 8005c4a:	9001      	str	r0, [sp, #4]
 8005c4c:	4620      	mov	r0, r4
 8005c4e:	f001 ffa7 	bl	8007ba0 <__sinit>
 8005c52:	9901      	ldr	r1, [sp, #4]
 8005c54:	68a2      	ldr	r2, [r4, #8]
 8005c56:	4620      	mov	r0, r4
 8005c58:	b002      	add	sp, #8
 8005c5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c5e:	f003 bc9f 	b.w	80095a0 <_putc_r>
 8005c62:	bf00      	nop
 8005c64:	20000024 	.word	0x20000024

08005c68 <_puts_r>:
 8005c68:	b570      	push	{r4, r5, r6, lr}
 8005c6a:	460e      	mov	r6, r1
 8005c6c:	4605      	mov	r5, r0
 8005c6e:	b118      	cbz	r0, 8005c78 <_puts_r+0x10>
 8005c70:	6983      	ldr	r3, [r0, #24]
 8005c72:	b90b      	cbnz	r3, 8005c78 <_puts_r+0x10>
 8005c74:	f001 ff94 	bl	8007ba0 <__sinit>
 8005c78:	69ab      	ldr	r3, [r5, #24]
 8005c7a:	68ac      	ldr	r4, [r5, #8]
 8005c7c:	b913      	cbnz	r3, 8005c84 <_puts_r+0x1c>
 8005c7e:	4628      	mov	r0, r5
 8005c80:	f001 ff8e 	bl	8007ba0 <__sinit>
 8005c84:	4b2c      	ldr	r3, [pc, #176]	; (8005d38 <_puts_r+0xd0>)
 8005c86:	429c      	cmp	r4, r3
 8005c88:	d120      	bne.n	8005ccc <_puts_r+0x64>
 8005c8a:	686c      	ldr	r4, [r5, #4]
 8005c8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c8e:	07db      	lsls	r3, r3, #31
 8005c90:	d405      	bmi.n	8005c9e <_puts_r+0x36>
 8005c92:	89a3      	ldrh	r3, [r4, #12]
 8005c94:	0598      	lsls	r0, r3, #22
 8005c96:	d402      	bmi.n	8005c9e <_puts_r+0x36>
 8005c98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c9a:	f002 fb92 	bl	80083c2 <__retarget_lock_acquire_recursive>
 8005c9e:	89a3      	ldrh	r3, [r4, #12]
 8005ca0:	0719      	lsls	r1, r3, #28
 8005ca2:	d51d      	bpl.n	8005ce0 <_puts_r+0x78>
 8005ca4:	6923      	ldr	r3, [r4, #16]
 8005ca6:	b1db      	cbz	r3, 8005ce0 <_puts_r+0x78>
 8005ca8:	3e01      	subs	r6, #1
 8005caa:	68a3      	ldr	r3, [r4, #8]
 8005cac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	60a3      	str	r3, [r4, #8]
 8005cb4:	bb39      	cbnz	r1, 8005d06 <_puts_r+0x9e>
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	da38      	bge.n	8005d2c <_puts_r+0xc4>
 8005cba:	4622      	mov	r2, r4
 8005cbc:	210a      	movs	r1, #10
 8005cbe:	4628      	mov	r0, r5
 8005cc0:	f000 ff1a 	bl	8006af8 <__swbuf_r>
 8005cc4:	3001      	adds	r0, #1
 8005cc6:	d011      	beq.n	8005cec <_puts_r+0x84>
 8005cc8:	250a      	movs	r5, #10
 8005cca:	e011      	b.n	8005cf0 <_puts_r+0x88>
 8005ccc:	4b1b      	ldr	r3, [pc, #108]	; (8005d3c <_puts_r+0xd4>)
 8005cce:	429c      	cmp	r4, r3
 8005cd0:	d101      	bne.n	8005cd6 <_puts_r+0x6e>
 8005cd2:	68ac      	ldr	r4, [r5, #8]
 8005cd4:	e7da      	b.n	8005c8c <_puts_r+0x24>
 8005cd6:	4b1a      	ldr	r3, [pc, #104]	; (8005d40 <_puts_r+0xd8>)
 8005cd8:	429c      	cmp	r4, r3
 8005cda:	bf08      	it	eq
 8005cdc:	68ec      	ldreq	r4, [r5, #12]
 8005cde:	e7d5      	b.n	8005c8c <_puts_r+0x24>
 8005ce0:	4621      	mov	r1, r4
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	f000 ff5a 	bl	8006b9c <__swsetup_r>
 8005ce8:	2800      	cmp	r0, #0
 8005cea:	d0dd      	beq.n	8005ca8 <_puts_r+0x40>
 8005cec:	f04f 35ff 	mov.w	r5, #4294967295
 8005cf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005cf2:	07da      	lsls	r2, r3, #31
 8005cf4:	d405      	bmi.n	8005d02 <_puts_r+0x9a>
 8005cf6:	89a3      	ldrh	r3, [r4, #12]
 8005cf8:	059b      	lsls	r3, r3, #22
 8005cfa:	d402      	bmi.n	8005d02 <_puts_r+0x9a>
 8005cfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cfe:	f002 fb61 	bl	80083c4 <__retarget_lock_release_recursive>
 8005d02:	4628      	mov	r0, r5
 8005d04:	bd70      	pop	{r4, r5, r6, pc}
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	da04      	bge.n	8005d14 <_puts_r+0xac>
 8005d0a:	69a2      	ldr	r2, [r4, #24]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	dc06      	bgt.n	8005d1e <_puts_r+0xb6>
 8005d10:	290a      	cmp	r1, #10
 8005d12:	d004      	beq.n	8005d1e <_puts_r+0xb6>
 8005d14:	6823      	ldr	r3, [r4, #0]
 8005d16:	1c5a      	adds	r2, r3, #1
 8005d18:	6022      	str	r2, [r4, #0]
 8005d1a:	7019      	strb	r1, [r3, #0]
 8005d1c:	e7c5      	b.n	8005caa <_puts_r+0x42>
 8005d1e:	4622      	mov	r2, r4
 8005d20:	4628      	mov	r0, r5
 8005d22:	f000 fee9 	bl	8006af8 <__swbuf_r>
 8005d26:	3001      	adds	r0, #1
 8005d28:	d1bf      	bne.n	8005caa <_puts_r+0x42>
 8005d2a:	e7df      	b.n	8005cec <_puts_r+0x84>
 8005d2c:	6823      	ldr	r3, [r4, #0]
 8005d2e:	250a      	movs	r5, #10
 8005d30:	1c5a      	adds	r2, r3, #1
 8005d32:	6022      	str	r2, [r4, #0]
 8005d34:	701d      	strb	r5, [r3, #0]
 8005d36:	e7db      	b.n	8005cf0 <_puts_r+0x88>
 8005d38:	08009cbc 	.word	0x08009cbc
 8005d3c:	08009cdc 	.word	0x08009cdc
 8005d40:	08009c9c 	.word	0x08009c9c

08005d44 <puts>:
 8005d44:	4b02      	ldr	r3, [pc, #8]	; (8005d50 <puts+0xc>)
 8005d46:	4601      	mov	r1, r0
 8005d48:	6818      	ldr	r0, [r3, #0]
 8005d4a:	f7ff bf8d 	b.w	8005c68 <_puts_r>
 8005d4e:	bf00      	nop
 8005d50:	20000024 	.word	0x20000024

08005d54 <nanf>:
 8005d54:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005d5c <nanf+0x8>
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	7fc00000 	.word	0x7fc00000

08005d60 <siprintf>:
 8005d60:	b40e      	push	{r1, r2, r3}
 8005d62:	b500      	push	{lr}
 8005d64:	b09c      	sub	sp, #112	; 0x70
 8005d66:	ab1d      	add	r3, sp, #116	; 0x74
 8005d68:	9002      	str	r0, [sp, #8]
 8005d6a:	9006      	str	r0, [sp, #24]
 8005d6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d70:	4809      	ldr	r0, [pc, #36]	; (8005d98 <siprintf+0x38>)
 8005d72:	9107      	str	r1, [sp, #28]
 8005d74:	9104      	str	r1, [sp, #16]
 8005d76:	4909      	ldr	r1, [pc, #36]	; (8005d9c <siprintf+0x3c>)
 8005d78:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d7c:	9105      	str	r1, [sp, #20]
 8005d7e:	6800      	ldr	r0, [r0, #0]
 8005d80:	9301      	str	r3, [sp, #4]
 8005d82:	a902      	add	r1, sp, #8
 8005d84:	f003 f9b2 	bl	80090ec <_svfiprintf_r>
 8005d88:	9b02      	ldr	r3, [sp, #8]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	701a      	strb	r2, [r3, #0]
 8005d8e:	b01c      	add	sp, #112	; 0x70
 8005d90:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d94:	b003      	add	sp, #12
 8005d96:	4770      	bx	lr
 8005d98:	20000024 	.word	0x20000024
 8005d9c:	ffff0208 	.word	0xffff0208

08005da0 <sulp>:
 8005da0:	b570      	push	{r4, r5, r6, lr}
 8005da2:	4604      	mov	r4, r0
 8005da4:	460d      	mov	r5, r1
 8005da6:	ec45 4b10 	vmov	d0, r4, r5
 8005daa:	4616      	mov	r6, r2
 8005dac:	f002 fefc 	bl	8008ba8 <__ulp>
 8005db0:	ec51 0b10 	vmov	r0, r1, d0
 8005db4:	b17e      	cbz	r6, 8005dd6 <sulp+0x36>
 8005db6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005dba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	dd09      	ble.n	8005dd6 <sulp+0x36>
 8005dc2:	051b      	lsls	r3, r3, #20
 8005dc4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005dc8:	2400      	movs	r4, #0
 8005dca:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005dce:	4622      	mov	r2, r4
 8005dd0:	462b      	mov	r3, r5
 8005dd2:	f7fa fc19 	bl	8000608 <__aeabi_dmul>
 8005dd6:	bd70      	pop	{r4, r5, r6, pc}

08005dd8 <_strtod_l>:
 8005dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ddc:	ed2d 8b02 	vpush	{d8}
 8005de0:	b09d      	sub	sp, #116	; 0x74
 8005de2:	461f      	mov	r7, r3
 8005de4:	2300      	movs	r3, #0
 8005de6:	9318      	str	r3, [sp, #96]	; 0x60
 8005de8:	4ba2      	ldr	r3, [pc, #648]	; (8006074 <_strtod_l+0x29c>)
 8005dea:	9213      	str	r2, [sp, #76]	; 0x4c
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	9305      	str	r3, [sp, #20]
 8005df0:	4604      	mov	r4, r0
 8005df2:	4618      	mov	r0, r3
 8005df4:	4688      	mov	r8, r1
 8005df6:	f7fa f9f3 	bl	80001e0 <strlen>
 8005dfa:	f04f 0a00 	mov.w	sl, #0
 8005dfe:	4605      	mov	r5, r0
 8005e00:	f04f 0b00 	mov.w	fp, #0
 8005e04:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005e08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e0a:	781a      	ldrb	r2, [r3, #0]
 8005e0c:	2a2b      	cmp	r2, #43	; 0x2b
 8005e0e:	d04e      	beq.n	8005eae <_strtod_l+0xd6>
 8005e10:	d83b      	bhi.n	8005e8a <_strtod_l+0xb2>
 8005e12:	2a0d      	cmp	r2, #13
 8005e14:	d834      	bhi.n	8005e80 <_strtod_l+0xa8>
 8005e16:	2a08      	cmp	r2, #8
 8005e18:	d834      	bhi.n	8005e84 <_strtod_l+0xac>
 8005e1a:	2a00      	cmp	r2, #0
 8005e1c:	d03e      	beq.n	8005e9c <_strtod_l+0xc4>
 8005e1e:	2300      	movs	r3, #0
 8005e20:	930a      	str	r3, [sp, #40]	; 0x28
 8005e22:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8005e24:	7833      	ldrb	r3, [r6, #0]
 8005e26:	2b30      	cmp	r3, #48	; 0x30
 8005e28:	f040 80b0 	bne.w	8005f8c <_strtod_l+0x1b4>
 8005e2c:	7873      	ldrb	r3, [r6, #1]
 8005e2e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005e32:	2b58      	cmp	r3, #88	; 0x58
 8005e34:	d168      	bne.n	8005f08 <_strtod_l+0x130>
 8005e36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e38:	9301      	str	r3, [sp, #4]
 8005e3a:	ab18      	add	r3, sp, #96	; 0x60
 8005e3c:	9702      	str	r7, [sp, #8]
 8005e3e:	9300      	str	r3, [sp, #0]
 8005e40:	4a8d      	ldr	r2, [pc, #564]	; (8006078 <_strtod_l+0x2a0>)
 8005e42:	ab19      	add	r3, sp, #100	; 0x64
 8005e44:	a917      	add	r1, sp, #92	; 0x5c
 8005e46:	4620      	mov	r0, r4
 8005e48:	f001 ffae 	bl	8007da8 <__gethex>
 8005e4c:	f010 0707 	ands.w	r7, r0, #7
 8005e50:	4605      	mov	r5, r0
 8005e52:	d005      	beq.n	8005e60 <_strtod_l+0x88>
 8005e54:	2f06      	cmp	r7, #6
 8005e56:	d12c      	bne.n	8005eb2 <_strtod_l+0xda>
 8005e58:	3601      	adds	r6, #1
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	9617      	str	r6, [sp, #92]	; 0x5c
 8005e5e:	930a      	str	r3, [sp, #40]	; 0x28
 8005e60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	f040 8590 	bne.w	8006988 <_strtod_l+0xbb0>
 8005e68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e6a:	b1eb      	cbz	r3, 8005ea8 <_strtod_l+0xd0>
 8005e6c:	4652      	mov	r2, sl
 8005e6e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005e72:	ec43 2b10 	vmov	d0, r2, r3
 8005e76:	b01d      	add	sp, #116	; 0x74
 8005e78:	ecbd 8b02 	vpop	{d8}
 8005e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e80:	2a20      	cmp	r2, #32
 8005e82:	d1cc      	bne.n	8005e1e <_strtod_l+0x46>
 8005e84:	3301      	adds	r3, #1
 8005e86:	9317      	str	r3, [sp, #92]	; 0x5c
 8005e88:	e7be      	b.n	8005e08 <_strtod_l+0x30>
 8005e8a:	2a2d      	cmp	r2, #45	; 0x2d
 8005e8c:	d1c7      	bne.n	8005e1e <_strtod_l+0x46>
 8005e8e:	2201      	movs	r2, #1
 8005e90:	920a      	str	r2, [sp, #40]	; 0x28
 8005e92:	1c5a      	adds	r2, r3, #1
 8005e94:	9217      	str	r2, [sp, #92]	; 0x5c
 8005e96:	785b      	ldrb	r3, [r3, #1]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d1c2      	bne.n	8005e22 <_strtod_l+0x4a>
 8005e9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005e9e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	f040 856e 	bne.w	8006984 <_strtod_l+0xbac>
 8005ea8:	4652      	mov	r2, sl
 8005eaa:	465b      	mov	r3, fp
 8005eac:	e7e1      	b.n	8005e72 <_strtod_l+0x9a>
 8005eae:	2200      	movs	r2, #0
 8005eb0:	e7ee      	b.n	8005e90 <_strtod_l+0xb8>
 8005eb2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005eb4:	b13a      	cbz	r2, 8005ec6 <_strtod_l+0xee>
 8005eb6:	2135      	movs	r1, #53	; 0x35
 8005eb8:	a81a      	add	r0, sp, #104	; 0x68
 8005eba:	f002 ff80 	bl	8008dbe <__copybits>
 8005ebe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005ec0:	4620      	mov	r0, r4
 8005ec2:	f002 fb3f 	bl	8008544 <_Bfree>
 8005ec6:	3f01      	subs	r7, #1
 8005ec8:	2f04      	cmp	r7, #4
 8005eca:	d806      	bhi.n	8005eda <_strtod_l+0x102>
 8005ecc:	e8df f007 	tbb	[pc, r7]
 8005ed0:	1714030a 	.word	0x1714030a
 8005ed4:	0a          	.byte	0x0a
 8005ed5:	00          	.byte	0x00
 8005ed6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8005eda:	0728      	lsls	r0, r5, #28
 8005edc:	d5c0      	bpl.n	8005e60 <_strtod_l+0x88>
 8005ede:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005ee2:	e7bd      	b.n	8005e60 <_strtod_l+0x88>
 8005ee4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8005ee8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005eea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005eee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005ef2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005ef6:	e7f0      	b.n	8005eda <_strtod_l+0x102>
 8005ef8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800607c <_strtod_l+0x2a4>
 8005efc:	e7ed      	b.n	8005eda <_strtod_l+0x102>
 8005efe:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005f02:	f04f 3aff 	mov.w	sl, #4294967295
 8005f06:	e7e8      	b.n	8005eda <_strtod_l+0x102>
 8005f08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005f0a:	1c5a      	adds	r2, r3, #1
 8005f0c:	9217      	str	r2, [sp, #92]	; 0x5c
 8005f0e:	785b      	ldrb	r3, [r3, #1]
 8005f10:	2b30      	cmp	r3, #48	; 0x30
 8005f12:	d0f9      	beq.n	8005f08 <_strtod_l+0x130>
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d0a3      	beq.n	8005e60 <_strtod_l+0x88>
 8005f18:	2301      	movs	r3, #1
 8005f1a:	f04f 0900 	mov.w	r9, #0
 8005f1e:	9304      	str	r3, [sp, #16]
 8005f20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005f22:	9308      	str	r3, [sp, #32]
 8005f24:	f8cd 901c 	str.w	r9, [sp, #28]
 8005f28:	464f      	mov	r7, r9
 8005f2a:	220a      	movs	r2, #10
 8005f2c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005f2e:	7806      	ldrb	r6, [r0, #0]
 8005f30:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005f34:	b2d9      	uxtb	r1, r3
 8005f36:	2909      	cmp	r1, #9
 8005f38:	d92a      	bls.n	8005f90 <_strtod_l+0x1b8>
 8005f3a:	9905      	ldr	r1, [sp, #20]
 8005f3c:	462a      	mov	r2, r5
 8005f3e:	f003 fbd2 	bl	80096e6 <strncmp>
 8005f42:	b398      	cbz	r0, 8005fac <_strtod_l+0x1d4>
 8005f44:	2000      	movs	r0, #0
 8005f46:	4632      	mov	r2, r6
 8005f48:	463d      	mov	r5, r7
 8005f4a:	9005      	str	r0, [sp, #20]
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2a65      	cmp	r2, #101	; 0x65
 8005f50:	d001      	beq.n	8005f56 <_strtod_l+0x17e>
 8005f52:	2a45      	cmp	r2, #69	; 0x45
 8005f54:	d118      	bne.n	8005f88 <_strtod_l+0x1b0>
 8005f56:	b91d      	cbnz	r5, 8005f60 <_strtod_l+0x188>
 8005f58:	9a04      	ldr	r2, [sp, #16]
 8005f5a:	4302      	orrs	r2, r0
 8005f5c:	d09e      	beq.n	8005e9c <_strtod_l+0xc4>
 8005f5e:	2500      	movs	r5, #0
 8005f60:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8005f64:	f108 0201 	add.w	r2, r8, #1
 8005f68:	9217      	str	r2, [sp, #92]	; 0x5c
 8005f6a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8005f6e:	2a2b      	cmp	r2, #43	; 0x2b
 8005f70:	d075      	beq.n	800605e <_strtod_l+0x286>
 8005f72:	2a2d      	cmp	r2, #45	; 0x2d
 8005f74:	d07b      	beq.n	800606e <_strtod_l+0x296>
 8005f76:	f04f 0c00 	mov.w	ip, #0
 8005f7a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005f7e:	2909      	cmp	r1, #9
 8005f80:	f240 8082 	bls.w	8006088 <_strtod_l+0x2b0>
 8005f84:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005f88:	2600      	movs	r6, #0
 8005f8a:	e09d      	b.n	80060c8 <_strtod_l+0x2f0>
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	e7c4      	b.n	8005f1a <_strtod_l+0x142>
 8005f90:	2f08      	cmp	r7, #8
 8005f92:	bfd8      	it	le
 8005f94:	9907      	ldrle	r1, [sp, #28]
 8005f96:	f100 0001 	add.w	r0, r0, #1
 8005f9a:	bfda      	itte	le
 8005f9c:	fb02 3301 	mlale	r3, r2, r1, r3
 8005fa0:	9307      	strle	r3, [sp, #28]
 8005fa2:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005fa6:	3701      	adds	r7, #1
 8005fa8:	9017      	str	r0, [sp, #92]	; 0x5c
 8005faa:	e7bf      	b.n	8005f2c <_strtod_l+0x154>
 8005fac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005fae:	195a      	adds	r2, r3, r5
 8005fb0:	9217      	str	r2, [sp, #92]	; 0x5c
 8005fb2:	5d5a      	ldrb	r2, [r3, r5]
 8005fb4:	2f00      	cmp	r7, #0
 8005fb6:	d037      	beq.n	8006028 <_strtod_l+0x250>
 8005fb8:	9005      	str	r0, [sp, #20]
 8005fba:	463d      	mov	r5, r7
 8005fbc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005fc0:	2b09      	cmp	r3, #9
 8005fc2:	d912      	bls.n	8005fea <_strtod_l+0x212>
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e7c2      	b.n	8005f4e <_strtod_l+0x176>
 8005fc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005fca:	1c5a      	adds	r2, r3, #1
 8005fcc:	9217      	str	r2, [sp, #92]	; 0x5c
 8005fce:	785a      	ldrb	r2, [r3, #1]
 8005fd0:	3001      	adds	r0, #1
 8005fd2:	2a30      	cmp	r2, #48	; 0x30
 8005fd4:	d0f8      	beq.n	8005fc8 <_strtod_l+0x1f0>
 8005fd6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005fda:	2b08      	cmp	r3, #8
 8005fdc:	f200 84d9 	bhi.w	8006992 <_strtod_l+0xbba>
 8005fe0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005fe2:	9005      	str	r0, [sp, #20]
 8005fe4:	2000      	movs	r0, #0
 8005fe6:	9308      	str	r3, [sp, #32]
 8005fe8:	4605      	mov	r5, r0
 8005fea:	3a30      	subs	r2, #48	; 0x30
 8005fec:	f100 0301 	add.w	r3, r0, #1
 8005ff0:	d014      	beq.n	800601c <_strtod_l+0x244>
 8005ff2:	9905      	ldr	r1, [sp, #20]
 8005ff4:	4419      	add	r1, r3
 8005ff6:	9105      	str	r1, [sp, #20]
 8005ff8:	462b      	mov	r3, r5
 8005ffa:	eb00 0e05 	add.w	lr, r0, r5
 8005ffe:	210a      	movs	r1, #10
 8006000:	4573      	cmp	r3, lr
 8006002:	d113      	bne.n	800602c <_strtod_l+0x254>
 8006004:	182b      	adds	r3, r5, r0
 8006006:	2b08      	cmp	r3, #8
 8006008:	f105 0501 	add.w	r5, r5, #1
 800600c:	4405      	add	r5, r0
 800600e:	dc1c      	bgt.n	800604a <_strtod_l+0x272>
 8006010:	9907      	ldr	r1, [sp, #28]
 8006012:	230a      	movs	r3, #10
 8006014:	fb03 2301 	mla	r3, r3, r1, r2
 8006018:	9307      	str	r3, [sp, #28]
 800601a:	2300      	movs	r3, #0
 800601c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800601e:	1c51      	adds	r1, r2, #1
 8006020:	9117      	str	r1, [sp, #92]	; 0x5c
 8006022:	7852      	ldrb	r2, [r2, #1]
 8006024:	4618      	mov	r0, r3
 8006026:	e7c9      	b.n	8005fbc <_strtod_l+0x1e4>
 8006028:	4638      	mov	r0, r7
 800602a:	e7d2      	b.n	8005fd2 <_strtod_l+0x1fa>
 800602c:	2b08      	cmp	r3, #8
 800602e:	dc04      	bgt.n	800603a <_strtod_l+0x262>
 8006030:	9e07      	ldr	r6, [sp, #28]
 8006032:	434e      	muls	r6, r1
 8006034:	9607      	str	r6, [sp, #28]
 8006036:	3301      	adds	r3, #1
 8006038:	e7e2      	b.n	8006000 <_strtod_l+0x228>
 800603a:	f103 0c01 	add.w	ip, r3, #1
 800603e:	f1bc 0f10 	cmp.w	ip, #16
 8006042:	bfd8      	it	le
 8006044:	fb01 f909 	mulle.w	r9, r1, r9
 8006048:	e7f5      	b.n	8006036 <_strtod_l+0x25e>
 800604a:	2d10      	cmp	r5, #16
 800604c:	bfdc      	itt	le
 800604e:	230a      	movle	r3, #10
 8006050:	fb03 2909 	mlale	r9, r3, r9, r2
 8006054:	e7e1      	b.n	800601a <_strtod_l+0x242>
 8006056:	2300      	movs	r3, #0
 8006058:	9305      	str	r3, [sp, #20]
 800605a:	2301      	movs	r3, #1
 800605c:	e77c      	b.n	8005f58 <_strtod_l+0x180>
 800605e:	f04f 0c00 	mov.w	ip, #0
 8006062:	f108 0202 	add.w	r2, r8, #2
 8006066:	9217      	str	r2, [sp, #92]	; 0x5c
 8006068:	f898 2002 	ldrb.w	r2, [r8, #2]
 800606c:	e785      	b.n	8005f7a <_strtod_l+0x1a2>
 800606e:	f04f 0c01 	mov.w	ip, #1
 8006072:	e7f6      	b.n	8006062 <_strtod_l+0x28a>
 8006074:	08009d64 	.word	0x08009d64
 8006078:	08009ab4 	.word	0x08009ab4
 800607c:	7ff00000 	.word	0x7ff00000
 8006080:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006082:	1c51      	adds	r1, r2, #1
 8006084:	9117      	str	r1, [sp, #92]	; 0x5c
 8006086:	7852      	ldrb	r2, [r2, #1]
 8006088:	2a30      	cmp	r2, #48	; 0x30
 800608a:	d0f9      	beq.n	8006080 <_strtod_l+0x2a8>
 800608c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006090:	2908      	cmp	r1, #8
 8006092:	f63f af79 	bhi.w	8005f88 <_strtod_l+0x1b0>
 8006096:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800609a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800609c:	9206      	str	r2, [sp, #24]
 800609e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80060a0:	1c51      	adds	r1, r2, #1
 80060a2:	9117      	str	r1, [sp, #92]	; 0x5c
 80060a4:	7852      	ldrb	r2, [r2, #1]
 80060a6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80060aa:	2e09      	cmp	r6, #9
 80060ac:	d937      	bls.n	800611e <_strtod_l+0x346>
 80060ae:	9e06      	ldr	r6, [sp, #24]
 80060b0:	1b89      	subs	r1, r1, r6
 80060b2:	2908      	cmp	r1, #8
 80060b4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80060b8:	dc02      	bgt.n	80060c0 <_strtod_l+0x2e8>
 80060ba:	4576      	cmp	r6, lr
 80060bc:	bfa8      	it	ge
 80060be:	4676      	movge	r6, lr
 80060c0:	f1bc 0f00 	cmp.w	ip, #0
 80060c4:	d000      	beq.n	80060c8 <_strtod_l+0x2f0>
 80060c6:	4276      	negs	r6, r6
 80060c8:	2d00      	cmp	r5, #0
 80060ca:	d14d      	bne.n	8006168 <_strtod_l+0x390>
 80060cc:	9904      	ldr	r1, [sp, #16]
 80060ce:	4301      	orrs	r1, r0
 80060d0:	f47f aec6 	bne.w	8005e60 <_strtod_l+0x88>
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f47f aee1 	bne.w	8005e9c <_strtod_l+0xc4>
 80060da:	2a69      	cmp	r2, #105	; 0x69
 80060dc:	d027      	beq.n	800612e <_strtod_l+0x356>
 80060de:	dc24      	bgt.n	800612a <_strtod_l+0x352>
 80060e0:	2a49      	cmp	r2, #73	; 0x49
 80060e2:	d024      	beq.n	800612e <_strtod_l+0x356>
 80060e4:	2a4e      	cmp	r2, #78	; 0x4e
 80060e6:	f47f aed9 	bne.w	8005e9c <_strtod_l+0xc4>
 80060ea:	499f      	ldr	r1, [pc, #636]	; (8006368 <_strtod_l+0x590>)
 80060ec:	a817      	add	r0, sp, #92	; 0x5c
 80060ee:	f002 f8b3 	bl	8008258 <__match>
 80060f2:	2800      	cmp	r0, #0
 80060f4:	f43f aed2 	beq.w	8005e9c <_strtod_l+0xc4>
 80060f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	2b28      	cmp	r3, #40	; 0x28
 80060fe:	d12d      	bne.n	800615c <_strtod_l+0x384>
 8006100:	499a      	ldr	r1, [pc, #616]	; (800636c <_strtod_l+0x594>)
 8006102:	aa1a      	add	r2, sp, #104	; 0x68
 8006104:	a817      	add	r0, sp, #92	; 0x5c
 8006106:	f002 f8bb 	bl	8008280 <__hexnan>
 800610a:	2805      	cmp	r0, #5
 800610c:	d126      	bne.n	800615c <_strtod_l+0x384>
 800610e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006110:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8006114:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006118:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800611c:	e6a0      	b.n	8005e60 <_strtod_l+0x88>
 800611e:	210a      	movs	r1, #10
 8006120:	fb01 2e0e 	mla	lr, r1, lr, r2
 8006124:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006128:	e7b9      	b.n	800609e <_strtod_l+0x2c6>
 800612a:	2a6e      	cmp	r2, #110	; 0x6e
 800612c:	e7db      	b.n	80060e6 <_strtod_l+0x30e>
 800612e:	4990      	ldr	r1, [pc, #576]	; (8006370 <_strtod_l+0x598>)
 8006130:	a817      	add	r0, sp, #92	; 0x5c
 8006132:	f002 f891 	bl	8008258 <__match>
 8006136:	2800      	cmp	r0, #0
 8006138:	f43f aeb0 	beq.w	8005e9c <_strtod_l+0xc4>
 800613c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800613e:	498d      	ldr	r1, [pc, #564]	; (8006374 <_strtod_l+0x59c>)
 8006140:	3b01      	subs	r3, #1
 8006142:	a817      	add	r0, sp, #92	; 0x5c
 8006144:	9317      	str	r3, [sp, #92]	; 0x5c
 8006146:	f002 f887 	bl	8008258 <__match>
 800614a:	b910      	cbnz	r0, 8006152 <_strtod_l+0x37a>
 800614c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800614e:	3301      	adds	r3, #1
 8006150:	9317      	str	r3, [sp, #92]	; 0x5c
 8006152:	f8df b230 	ldr.w	fp, [pc, #560]	; 8006384 <_strtod_l+0x5ac>
 8006156:	f04f 0a00 	mov.w	sl, #0
 800615a:	e681      	b.n	8005e60 <_strtod_l+0x88>
 800615c:	4886      	ldr	r0, [pc, #536]	; (8006378 <_strtod_l+0x5a0>)
 800615e:	f003 fa67 	bl	8009630 <nan>
 8006162:	ec5b ab10 	vmov	sl, fp, d0
 8006166:	e67b      	b.n	8005e60 <_strtod_l+0x88>
 8006168:	9b05      	ldr	r3, [sp, #20]
 800616a:	9807      	ldr	r0, [sp, #28]
 800616c:	1af3      	subs	r3, r6, r3
 800616e:	2f00      	cmp	r7, #0
 8006170:	bf08      	it	eq
 8006172:	462f      	moveq	r7, r5
 8006174:	2d10      	cmp	r5, #16
 8006176:	9306      	str	r3, [sp, #24]
 8006178:	46a8      	mov	r8, r5
 800617a:	bfa8      	it	ge
 800617c:	f04f 0810 	movge.w	r8, #16
 8006180:	f7fa f9c8 	bl	8000514 <__aeabi_ui2d>
 8006184:	2d09      	cmp	r5, #9
 8006186:	4682      	mov	sl, r0
 8006188:	468b      	mov	fp, r1
 800618a:	dd13      	ble.n	80061b4 <_strtod_l+0x3dc>
 800618c:	4b7b      	ldr	r3, [pc, #492]	; (800637c <_strtod_l+0x5a4>)
 800618e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006192:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006196:	f7fa fa37 	bl	8000608 <__aeabi_dmul>
 800619a:	4682      	mov	sl, r0
 800619c:	4648      	mov	r0, r9
 800619e:	468b      	mov	fp, r1
 80061a0:	f7fa f9b8 	bl	8000514 <__aeabi_ui2d>
 80061a4:	4602      	mov	r2, r0
 80061a6:	460b      	mov	r3, r1
 80061a8:	4650      	mov	r0, sl
 80061aa:	4659      	mov	r1, fp
 80061ac:	f7fa f876 	bl	800029c <__adddf3>
 80061b0:	4682      	mov	sl, r0
 80061b2:	468b      	mov	fp, r1
 80061b4:	2d0f      	cmp	r5, #15
 80061b6:	dc38      	bgt.n	800622a <_strtod_l+0x452>
 80061b8:	9b06      	ldr	r3, [sp, #24]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	f43f ae50 	beq.w	8005e60 <_strtod_l+0x88>
 80061c0:	dd24      	ble.n	800620c <_strtod_l+0x434>
 80061c2:	2b16      	cmp	r3, #22
 80061c4:	dc0b      	bgt.n	80061de <_strtod_l+0x406>
 80061c6:	496d      	ldr	r1, [pc, #436]	; (800637c <_strtod_l+0x5a4>)
 80061c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80061cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061d0:	4652      	mov	r2, sl
 80061d2:	465b      	mov	r3, fp
 80061d4:	f7fa fa18 	bl	8000608 <__aeabi_dmul>
 80061d8:	4682      	mov	sl, r0
 80061da:	468b      	mov	fp, r1
 80061dc:	e640      	b.n	8005e60 <_strtod_l+0x88>
 80061de:	9a06      	ldr	r2, [sp, #24]
 80061e0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80061e4:	4293      	cmp	r3, r2
 80061e6:	db20      	blt.n	800622a <_strtod_l+0x452>
 80061e8:	4c64      	ldr	r4, [pc, #400]	; (800637c <_strtod_l+0x5a4>)
 80061ea:	f1c5 050f 	rsb	r5, r5, #15
 80061ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80061f2:	4652      	mov	r2, sl
 80061f4:	465b      	mov	r3, fp
 80061f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061fa:	f7fa fa05 	bl	8000608 <__aeabi_dmul>
 80061fe:	9b06      	ldr	r3, [sp, #24]
 8006200:	1b5d      	subs	r5, r3, r5
 8006202:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006206:	e9d4 2300 	ldrd	r2, r3, [r4]
 800620a:	e7e3      	b.n	80061d4 <_strtod_l+0x3fc>
 800620c:	9b06      	ldr	r3, [sp, #24]
 800620e:	3316      	adds	r3, #22
 8006210:	db0b      	blt.n	800622a <_strtod_l+0x452>
 8006212:	9b05      	ldr	r3, [sp, #20]
 8006214:	1b9e      	subs	r6, r3, r6
 8006216:	4b59      	ldr	r3, [pc, #356]	; (800637c <_strtod_l+0x5a4>)
 8006218:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800621c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006220:	4650      	mov	r0, sl
 8006222:	4659      	mov	r1, fp
 8006224:	f7fa fb1a 	bl	800085c <__aeabi_ddiv>
 8006228:	e7d6      	b.n	80061d8 <_strtod_l+0x400>
 800622a:	9b06      	ldr	r3, [sp, #24]
 800622c:	eba5 0808 	sub.w	r8, r5, r8
 8006230:	4498      	add	r8, r3
 8006232:	f1b8 0f00 	cmp.w	r8, #0
 8006236:	dd74      	ble.n	8006322 <_strtod_l+0x54a>
 8006238:	f018 030f 	ands.w	r3, r8, #15
 800623c:	d00a      	beq.n	8006254 <_strtod_l+0x47c>
 800623e:	494f      	ldr	r1, [pc, #316]	; (800637c <_strtod_l+0x5a4>)
 8006240:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006244:	4652      	mov	r2, sl
 8006246:	465b      	mov	r3, fp
 8006248:	e9d1 0100 	ldrd	r0, r1, [r1]
 800624c:	f7fa f9dc 	bl	8000608 <__aeabi_dmul>
 8006250:	4682      	mov	sl, r0
 8006252:	468b      	mov	fp, r1
 8006254:	f038 080f 	bics.w	r8, r8, #15
 8006258:	d04f      	beq.n	80062fa <_strtod_l+0x522>
 800625a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800625e:	dd22      	ble.n	80062a6 <_strtod_l+0x4ce>
 8006260:	2500      	movs	r5, #0
 8006262:	462e      	mov	r6, r5
 8006264:	9507      	str	r5, [sp, #28]
 8006266:	9505      	str	r5, [sp, #20]
 8006268:	2322      	movs	r3, #34	; 0x22
 800626a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8006384 <_strtod_l+0x5ac>
 800626e:	6023      	str	r3, [r4, #0]
 8006270:	f04f 0a00 	mov.w	sl, #0
 8006274:	9b07      	ldr	r3, [sp, #28]
 8006276:	2b00      	cmp	r3, #0
 8006278:	f43f adf2 	beq.w	8005e60 <_strtod_l+0x88>
 800627c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800627e:	4620      	mov	r0, r4
 8006280:	f002 f960 	bl	8008544 <_Bfree>
 8006284:	9905      	ldr	r1, [sp, #20]
 8006286:	4620      	mov	r0, r4
 8006288:	f002 f95c 	bl	8008544 <_Bfree>
 800628c:	4631      	mov	r1, r6
 800628e:	4620      	mov	r0, r4
 8006290:	f002 f958 	bl	8008544 <_Bfree>
 8006294:	9907      	ldr	r1, [sp, #28]
 8006296:	4620      	mov	r0, r4
 8006298:	f002 f954 	bl	8008544 <_Bfree>
 800629c:	4629      	mov	r1, r5
 800629e:	4620      	mov	r0, r4
 80062a0:	f002 f950 	bl	8008544 <_Bfree>
 80062a4:	e5dc      	b.n	8005e60 <_strtod_l+0x88>
 80062a6:	4b36      	ldr	r3, [pc, #216]	; (8006380 <_strtod_l+0x5a8>)
 80062a8:	9304      	str	r3, [sp, #16]
 80062aa:	2300      	movs	r3, #0
 80062ac:	ea4f 1828 	mov.w	r8, r8, asr #4
 80062b0:	4650      	mov	r0, sl
 80062b2:	4659      	mov	r1, fp
 80062b4:	4699      	mov	r9, r3
 80062b6:	f1b8 0f01 	cmp.w	r8, #1
 80062ba:	dc21      	bgt.n	8006300 <_strtod_l+0x528>
 80062bc:	b10b      	cbz	r3, 80062c2 <_strtod_l+0x4ea>
 80062be:	4682      	mov	sl, r0
 80062c0:	468b      	mov	fp, r1
 80062c2:	4b2f      	ldr	r3, [pc, #188]	; (8006380 <_strtod_l+0x5a8>)
 80062c4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80062c8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80062cc:	4652      	mov	r2, sl
 80062ce:	465b      	mov	r3, fp
 80062d0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80062d4:	f7fa f998 	bl	8000608 <__aeabi_dmul>
 80062d8:	4b2a      	ldr	r3, [pc, #168]	; (8006384 <_strtod_l+0x5ac>)
 80062da:	460a      	mov	r2, r1
 80062dc:	400b      	ands	r3, r1
 80062de:	492a      	ldr	r1, [pc, #168]	; (8006388 <_strtod_l+0x5b0>)
 80062e0:	428b      	cmp	r3, r1
 80062e2:	4682      	mov	sl, r0
 80062e4:	d8bc      	bhi.n	8006260 <_strtod_l+0x488>
 80062e6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80062ea:	428b      	cmp	r3, r1
 80062ec:	bf86      	itte	hi
 80062ee:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800638c <_strtod_l+0x5b4>
 80062f2:	f04f 3aff 	movhi.w	sl, #4294967295
 80062f6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80062fa:	2300      	movs	r3, #0
 80062fc:	9304      	str	r3, [sp, #16]
 80062fe:	e084      	b.n	800640a <_strtod_l+0x632>
 8006300:	f018 0f01 	tst.w	r8, #1
 8006304:	d005      	beq.n	8006312 <_strtod_l+0x53a>
 8006306:	9b04      	ldr	r3, [sp, #16]
 8006308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630c:	f7fa f97c 	bl	8000608 <__aeabi_dmul>
 8006310:	2301      	movs	r3, #1
 8006312:	9a04      	ldr	r2, [sp, #16]
 8006314:	3208      	adds	r2, #8
 8006316:	f109 0901 	add.w	r9, r9, #1
 800631a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800631e:	9204      	str	r2, [sp, #16]
 8006320:	e7c9      	b.n	80062b6 <_strtod_l+0x4de>
 8006322:	d0ea      	beq.n	80062fa <_strtod_l+0x522>
 8006324:	f1c8 0800 	rsb	r8, r8, #0
 8006328:	f018 020f 	ands.w	r2, r8, #15
 800632c:	d00a      	beq.n	8006344 <_strtod_l+0x56c>
 800632e:	4b13      	ldr	r3, [pc, #76]	; (800637c <_strtod_l+0x5a4>)
 8006330:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006334:	4650      	mov	r0, sl
 8006336:	4659      	mov	r1, fp
 8006338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633c:	f7fa fa8e 	bl	800085c <__aeabi_ddiv>
 8006340:	4682      	mov	sl, r0
 8006342:	468b      	mov	fp, r1
 8006344:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006348:	d0d7      	beq.n	80062fa <_strtod_l+0x522>
 800634a:	f1b8 0f1f 	cmp.w	r8, #31
 800634e:	dd1f      	ble.n	8006390 <_strtod_l+0x5b8>
 8006350:	2500      	movs	r5, #0
 8006352:	462e      	mov	r6, r5
 8006354:	9507      	str	r5, [sp, #28]
 8006356:	9505      	str	r5, [sp, #20]
 8006358:	2322      	movs	r3, #34	; 0x22
 800635a:	f04f 0a00 	mov.w	sl, #0
 800635e:	f04f 0b00 	mov.w	fp, #0
 8006362:	6023      	str	r3, [r4, #0]
 8006364:	e786      	b.n	8006274 <_strtod_l+0x49c>
 8006366:	bf00      	nop
 8006368:	08009a85 	.word	0x08009a85
 800636c:	08009ac8 	.word	0x08009ac8
 8006370:	08009a7d 	.word	0x08009a7d
 8006374:	08009c0c 	.word	0x08009c0c
 8006378:	08009f20 	.word	0x08009f20
 800637c:	08009e00 	.word	0x08009e00
 8006380:	08009dd8 	.word	0x08009dd8
 8006384:	7ff00000 	.word	0x7ff00000
 8006388:	7ca00000 	.word	0x7ca00000
 800638c:	7fefffff 	.word	0x7fefffff
 8006390:	f018 0310 	ands.w	r3, r8, #16
 8006394:	bf18      	it	ne
 8006396:	236a      	movne	r3, #106	; 0x6a
 8006398:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006748 <_strtod_l+0x970>
 800639c:	9304      	str	r3, [sp, #16]
 800639e:	4650      	mov	r0, sl
 80063a0:	4659      	mov	r1, fp
 80063a2:	2300      	movs	r3, #0
 80063a4:	f018 0f01 	tst.w	r8, #1
 80063a8:	d004      	beq.n	80063b4 <_strtod_l+0x5dc>
 80063aa:	e9d9 2300 	ldrd	r2, r3, [r9]
 80063ae:	f7fa f92b 	bl	8000608 <__aeabi_dmul>
 80063b2:	2301      	movs	r3, #1
 80063b4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80063b8:	f109 0908 	add.w	r9, r9, #8
 80063bc:	d1f2      	bne.n	80063a4 <_strtod_l+0x5cc>
 80063be:	b10b      	cbz	r3, 80063c4 <_strtod_l+0x5ec>
 80063c0:	4682      	mov	sl, r0
 80063c2:	468b      	mov	fp, r1
 80063c4:	9b04      	ldr	r3, [sp, #16]
 80063c6:	b1c3      	cbz	r3, 80063fa <_strtod_l+0x622>
 80063c8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80063cc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	4659      	mov	r1, fp
 80063d4:	dd11      	ble.n	80063fa <_strtod_l+0x622>
 80063d6:	2b1f      	cmp	r3, #31
 80063d8:	f340 8124 	ble.w	8006624 <_strtod_l+0x84c>
 80063dc:	2b34      	cmp	r3, #52	; 0x34
 80063de:	bfde      	ittt	le
 80063e0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80063e4:	f04f 33ff 	movle.w	r3, #4294967295
 80063e8:	fa03 f202 	lslle.w	r2, r3, r2
 80063ec:	f04f 0a00 	mov.w	sl, #0
 80063f0:	bfcc      	ite	gt
 80063f2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80063f6:	ea02 0b01 	andle.w	fp, r2, r1
 80063fa:	2200      	movs	r2, #0
 80063fc:	2300      	movs	r3, #0
 80063fe:	4650      	mov	r0, sl
 8006400:	4659      	mov	r1, fp
 8006402:	f7fa fb69 	bl	8000ad8 <__aeabi_dcmpeq>
 8006406:	2800      	cmp	r0, #0
 8006408:	d1a2      	bne.n	8006350 <_strtod_l+0x578>
 800640a:	9b07      	ldr	r3, [sp, #28]
 800640c:	9300      	str	r3, [sp, #0]
 800640e:	9908      	ldr	r1, [sp, #32]
 8006410:	462b      	mov	r3, r5
 8006412:	463a      	mov	r2, r7
 8006414:	4620      	mov	r0, r4
 8006416:	f002 f8fd 	bl	8008614 <__s2b>
 800641a:	9007      	str	r0, [sp, #28]
 800641c:	2800      	cmp	r0, #0
 800641e:	f43f af1f 	beq.w	8006260 <_strtod_l+0x488>
 8006422:	9b05      	ldr	r3, [sp, #20]
 8006424:	1b9e      	subs	r6, r3, r6
 8006426:	9b06      	ldr	r3, [sp, #24]
 8006428:	2b00      	cmp	r3, #0
 800642a:	bfb4      	ite	lt
 800642c:	4633      	movlt	r3, r6
 800642e:	2300      	movge	r3, #0
 8006430:	930c      	str	r3, [sp, #48]	; 0x30
 8006432:	9b06      	ldr	r3, [sp, #24]
 8006434:	2500      	movs	r5, #0
 8006436:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800643a:	9312      	str	r3, [sp, #72]	; 0x48
 800643c:	462e      	mov	r6, r5
 800643e:	9b07      	ldr	r3, [sp, #28]
 8006440:	4620      	mov	r0, r4
 8006442:	6859      	ldr	r1, [r3, #4]
 8006444:	f002 f83e 	bl	80084c4 <_Balloc>
 8006448:	9005      	str	r0, [sp, #20]
 800644a:	2800      	cmp	r0, #0
 800644c:	f43f af0c 	beq.w	8006268 <_strtod_l+0x490>
 8006450:	9b07      	ldr	r3, [sp, #28]
 8006452:	691a      	ldr	r2, [r3, #16]
 8006454:	3202      	adds	r2, #2
 8006456:	f103 010c 	add.w	r1, r3, #12
 800645a:	0092      	lsls	r2, r2, #2
 800645c:	300c      	adds	r0, #12
 800645e:	f7fe fd45 	bl	8004eec <memcpy>
 8006462:	ec4b ab10 	vmov	d0, sl, fp
 8006466:	aa1a      	add	r2, sp, #104	; 0x68
 8006468:	a919      	add	r1, sp, #100	; 0x64
 800646a:	4620      	mov	r0, r4
 800646c:	f002 fc18 	bl	8008ca0 <__d2b>
 8006470:	ec4b ab18 	vmov	d8, sl, fp
 8006474:	9018      	str	r0, [sp, #96]	; 0x60
 8006476:	2800      	cmp	r0, #0
 8006478:	f43f aef6 	beq.w	8006268 <_strtod_l+0x490>
 800647c:	2101      	movs	r1, #1
 800647e:	4620      	mov	r0, r4
 8006480:	f002 f962 	bl	8008748 <__i2b>
 8006484:	4606      	mov	r6, r0
 8006486:	2800      	cmp	r0, #0
 8006488:	f43f aeee 	beq.w	8006268 <_strtod_l+0x490>
 800648c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800648e:	9904      	ldr	r1, [sp, #16]
 8006490:	2b00      	cmp	r3, #0
 8006492:	bfab      	itete	ge
 8006494:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8006496:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006498:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800649a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800649e:	bfac      	ite	ge
 80064a0:	eb03 0902 	addge.w	r9, r3, r2
 80064a4:	1ad7      	sublt	r7, r2, r3
 80064a6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80064a8:	eba3 0801 	sub.w	r8, r3, r1
 80064ac:	4490      	add	r8, r2
 80064ae:	4ba1      	ldr	r3, [pc, #644]	; (8006734 <_strtod_l+0x95c>)
 80064b0:	f108 38ff 	add.w	r8, r8, #4294967295
 80064b4:	4598      	cmp	r8, r3
 80064b6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80064ba:	f280 80c7 	bge.w	800664c <_strtod_l+0x874>
 80064be:	eba3 0308 	sub.w	r3, r3, r8
 80064c2:	2b1f      	cmp	r3, #31
 80064c4:	eba2 0203 	sub.w	r2, r2, r3
 80064c8:	f04f 0101 	mov.w	r1, #1
 80064cc:	f300 80b1 	bgt.w	8006632 <_strtod_l+0x85a>
 80064d0:	fa01 f303 	lsl.w	r3, r1, r3
 80064d4:	930d      	str	r3, [sp, #52]	; 0x34
 80064d6:	2300      	movs	r3, #0
 80064d8:	9308      	str	r3, [sp, #32]
 80064da:	eb09 0802 	add.w	r8, r9, r2
 80064de:	9b04      	ldr	r3, [sp, #16]
 80064e0:	45c1      	cmp	r9, r8
 80064e2:	4417      	add	r7, r2
 80064e4:	441f      	add	r7, r3
 80064e6:	464b      	mov	r3, r9
 80064e8:	bfa8      	it	ge
 80064ea:	4643      	movge	r3, r8
 80064ec:	42bb      	cmp	r3, r7
 80064ee:	bfa8      	it	ge
 80064f0:	463b      	movge	r3, r7
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	bfc2      	ittt	gt
 80064f6:	eba8 0803 	subgt.w	r8, r8, r3
 80064fa:	1aff      	subgt	r7, r7, r3
 80064fc:	eba9 0903 	subgt.w	r9, r9, r3
 8006500:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006502:	2b00      	cmp	r3, #0
 8006504:	dd17      	ble.n	8006536 <_strtod_l+0x75e>
 8006506:	4631      	mov	r1, r6
 8006508:	461a      	mov	r2, r3
 800650a:	4620      	mov	r0, r4
 800650c:	f002 f9dc 	bl	80088c8 <__pow5mult>
 8006510:	4606      	mov	r6, r0
 8006512:	2800      	cmp	r0, #0
 8006514:	f43f aea8 	beq.w	8006268 <_strtod_l+0x490>
 8006518:	4601      	mov	r1, r0
 800651a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800651c:	4620      	mov	r0, r4
 800651e:	f002 f929 	bl	8008774 <__multiply>
 8006522:	900b      	str	r0, [sp, #44]	; 0x2c
 8006524:	2800      	cmp	r0, #0
 8006526:	f43f ae9f 	beq.w	8006268 <_strtod_l+0x490>
 800652a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800652c:	4620      	mov	r0, r4
 800652e:	f002 f809 	bl	8008544 <_Bfree>
 8006532:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006534:	9318      	str	r3, [sp, #96]	; 0x60
 8006536:	f1b8 0f00 	cmp.w	r8, #0
 800653a:	f300 808c 	bgt.w	8006656 <_strtod_l+0x87e>
 800653e:	9b06      	ldr	r3, [sp, #24]
 8006540:	2b00      	cmp	r3, #0
 8006542:	dd08      	ble.n	8006556 <_strtod_l+0x77e>
 8006544:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006546:	9905      	ldr	r1, [sp, #20]
 8006548:	4620      	mov	r0, r4
 800654a:	f002 f9bd 	bl	80088c8 <__pow5mult>
 800654e:	9005      	str	r0, [sp, #20]
 8006550:	2800      	cmp	r0, #0
 8006552:	f43f ae89 	beq.w	8006268 <_strtod_l+0x490>
 8006556:	2f00      	cmp	r7, #0
 8006558:	dd08      	ble.n	800656c <_strtod_l+0x794>
 800655a:	9905      	ldr	r1, [sp, #20]
 800655c:	463a      	mov	r2, r7
 800655e:	4620      	mov	r0, r4
 8006560:	f002 fa0c 	bl	800897c <__lshift>
 8006564:	9005      	str	r0, [sp, #20]
 8006566:	2800      	cmp	r0, #0
 8006568:	f43f ae7e 	beq.w	8006268 <_strtod_l+0x490>
 800656c:	f1b9 0f00 	cmp.w	r9, #0
 8006570:	dd08      	ble.n	8006584 <_strtod_l+0x7ac>
 8006572:	4631      	mov	r1, r6
 8006574:	464a      	mov	r2, r9
 8006576:	4620      	mov	r0, r4
 8006578:	f002 fa00 	bl	800897c <__lshift>
 800657c:	4606      	mov	r6, r0
 800657e:	2800      	cmp	r0, #0
 8006580:	f43f ae72 	beq.w	8006268 <_strtod_l+0x490>
 8006584:	9a05      	ldr	r2, [sp, #20]
 8006586:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006588:	4620      	mov	r0, r4
 800658a:	f002 fa83 	bl	8008a94 <__mdiff>
 800658e:	4605      	mov	r5, r0
 8006590:	2800      	cmp	r0, #0
 8006592:	f43f ae69 	beq.w	8006268 <_strtod_l+0x490>
 8006596:	68c3      	ldr	r3, [r0, #12]
 8006598:	930b      	str	r3, [sp, #44]	; 0x2c
 800659a:	2300      	movs	r3, #0
 800659c:	60c3      	str	r3, [r0, #12]
 800659e:	4631      	mov	r1, r6
 80065a0:	f002 fa5c 	bl	8008a5c <__mcmp>
 80065a4:	2800      	cmp	r0, #0
 80065a6:	da60      	bge.n	800666a <_strtod_l+0x892>
 80065a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065aa:	ea53 030a 	orrs.w	r3, r3, sl
 80065ae:	f040 8082 	bne.w	80066b6 <_strtod_l+0x8de>
 80065b2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d17d      	bne.n	80066b6 <_strtod_l+0x8de>
 80065ba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80065be:	0d1b      	lsrs	r3, r3, #20
 80065c0:	051b      	lsls	r3, r3, #20
 80065c2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80065c6:	d976      	bls.n	80066b6 <_strtod_l+0x8de>
 80065c8:	696b      	ldr	r3, [r5, #20]
 80065ca:	b913      	cbnz	r3, 80065d2 <_strtod_l+0x7fa>
 80065cc:	692b      	ldr	r3, [r5, #16]
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	dd71      	ble.n	80066b6 <_strtod_l+0x8de>
 80065d2:	4629      	mov	r1, r5
 80065d4:	2201      	movs	r2, #1
 80065d6:	4620      	mov	r0, r4
 80065d8:	f002 f9d0 	bl	800897c <__lshift>
 80065dc:	4631      	mov	r1, r6
 80065de:	4605      	mov	r5, r0
 80065e0:	f002 fa3c 	bl	8008a5c <__mcmp>
 80065e4:	2800      	cmp	r0, #0
 80065e6:	dd66      	ble.n	80066b6 <_strtod_l+0x8de>
 80065e8:	9904      	ldr	r1, [sp, #16]
 80065ea:	4a53      	ldr	r2, [pc, #332]	; (8006738 <_strtod_l+0x960>)
 80065ec:	465b      	mov	r3, fp
 80065ee:	2900      	cmp	r1, #0
 80065f0:	f000 8081 	beq.w	80066f6 <_strtod_l+0x91e>
 80065f4:	ea02 010b 	and.w	r1, r2, fp
 80065f8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80065fc:	dc7b      	bgt.n	80066f6 <_strtod_l+0x91e>
 80065fe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006602:	f77f aea9 	ble.w	8006358 <_strtod_l+0x580>
 8006606:	4b4d      	ldr	r3, [pc, #308]	; (800673c <_strtod_l+0x964>)
 8006608:	4650      	mov	r0, sl
 800660a:	4659      	mov	r1, fp
 800660c:	2200      	movs	r2, #0
 800660e:	f7f9 fffb 	bl	8000608 <__aeabi_dmul>
 8006612:	460b      	mov	r3, r1
 8006614:	4303      	orrs	r3, r0
 8006616:	bf08      	it	eq
 8006618:	2322      	moveq	r3, #34	; 0x22
 800661a:	4682      	mov	sl, r0
 800661c:	468b      	mov	fp, r1
 800661e:	bf08      	it	eq
 8006620:	6023      	streq	r3, [r4, #0]
 8006622:	e62b      	b.n	800627c <_strtod_l+0x4a4>
 8006624:	f04f 32ff 	mov.w	r2, #4294967295
 8006628:	fa02 f303 	lsl.w	r3, r2, r3
 800662c:	ea03 0a0a 	and.w	sl, r3, sl
 8006630:	e6e3      	b.n	80063fa <_strtod_l+0x622>
 8006632:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006636:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800663a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800663e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006642:	fa01 f308 	lsl.w	r3, r1, r8
 8006646:	9308      	str	r3, [sp, #32]
 8006648:	910d      	str	r1, [sp, #52]	; 0x34
 800664a:	e746      	b.n	80064da <_strtod_l+0x702>
 800664c:	2300      	movs	r3, #0
 800664e:	9308      	str	r3, [sp, #32]
 8006650:	2301      	movs	r3, #1
 8006652:	930d      	str	r3, [sp, #52]	; 0x34
 8006654:	e741      	b.n	80064da <_strtod_l+0x702>
 8006656:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006658:	4642      	mov	r2, r8
 800665a:	4620      	mov	r0, r4
 800665c:	f002 f98e 	bl	800897c <__lshift>
 8006660:	9018      	str	r0, [sp, #96]	; 0x60
 8006662:	2800      	cmp	r0, #0
 8006664:	f47f af6b 	bne.w	800653e <_strtod_l+0x766>
 8006668:	e5fe      	b.n	8006268 <_strtod_l+0x490>
 800666a:	465f      	mov	r7, fp
 800666c:	d16e      	bne.n	800674c <_strtod_l+0x974>
 800666e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006670:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006674:	b342      	cbz	r2, 80066c8 <_strtod_l+0x8f0>
 8006676:	4a32      	ldr	r2, [pc, #200]	; (8006740 <_strtod_l+0x968>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d128      	bne.n	80066ce <_strtod_l+0x8f6>
 800667c:	9b04      	ldr	r3, [sp, #16]
 800667e:	4651      	mov	r1, sl
 8006680:	b1eb      	cbz	r3, 80066be <_strtod_l+0x8e6>
 8006682:	4b2d      	ldr	r3, [pc, #180]	; (8006738 <_strtod_l+0x960>)
 8006684:	403b      	ands	r3, r7
 8006686:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800668a:	f04f 32ff 	mov.w	r2, #4294967295
 800668e:	d819      	bhi.n	80066c4 <_strtod_l+0x8ec>
 8006690:	0d1b      	lsrs	r3, r3, #20
 8006692:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006696:	fa02 f303 	lsl.w	r3, r2, r3
 800669a:	4299      	cmp	r1, r3
 800669c:	d117      	bne.n	80066ce <_strtod_l+0x8f6>
 800669e:	4b29      	ldr	r3, [pc, #164]	; (8006744 <_strtod_l+0x96c>)
 80066a0:	429f      	cmp	r7, r3
 80066a2:	d102      	bne.n	80066aa <_strtod_l+0x8d2>
 80066a4:	3101      	adds	r1, #1
 80066a6:	f43f addf 	beq.w	8006268 <_strtod_l+0x490>
 80066aa:	4b23      	ldr	r3, [pc, #140]	; (8006738 <_strtod_l+0x960>)
 80066ac:	403b      	ands	r3, r7
 80066ae:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80066b2:	f04f 0a00 	mov.w	sl, #0
 80066b6:	9b04      	ldr	r3, [sp, #16]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1a4      	bne.n	8006606 <_strtod_l+0x82e>
 80066bc:	e5de      	b.n	800627c <_strtod_l+0x4a4>
 80066be:	f04f 33ff 	mov.w	r3, #4294967295
 80066c2:	e7ea      	b.n	800669a <_strtod_l+0x8c2>
 80066c4:	4613      	mov	r3, r2
 80066c6:	e7e8      	b.n	800669a <_strtod_l+0x8c2>
 80066c8:	ea53 030a 	orrs.w	r3, r3, sl
 80066cc:	d08c      	beq.n	80065e8 <_strtod_l+0x810>
 80066ce:	9b08      	ldr	r3, [sp, #32]
 80066d0:	b1db      	cbz	r3, 800670a <_strtod_l+0x932>
 80066d2:	423b      	tst	r3, r7
 80066d4:	d0ef      	beq.n	80066b6 <_strtod_l+0x8de>
 80066d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066d8:	9a04      	ldr	r2, [sp, #16]
 80066da:	4650      	mov	r0, sl
 80066dc:	4659      	mov	r1, fp
 80066de:	b1c3      	cbz	r3, 8006712 <_strtod_l+0x93a>
 80066e0:	f7ff fb5e 	bl	8005da0 <sulp>
 80066e4:	4602      	mov	r2, r0
 80066e6:	460b      	mov	r3, r1
 80066e8:	ec51 0b18 	vmov	r0, r1, d8
 80066ec:	f7f9 fdd6 	bl	800029c <__adddf3>
 80066f0:	4682      	mov	sl, r0
 80066f2:	468b      	mov	fp, r1
 80066f4:	e7df      	b.n	80066b6 <_strtod_l+0x8de>
 80066f6:	4013      	ands	r3, r2
 80066f8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80066fc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006700:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006704:	f04f 3aff 	mov.w	sl, #4294967295
 8006708:	e7d5      	b.n	80066b6 <_strtod_l+0x8de>
 800670a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800670c:	ea13 0f0a 	tst.w	r3, sl
 8006710:	e7e0      	b.n	80066d4 <_strtod_l+0x8fc>
 8006712:	f7ff fb45 	bl	8005da0 <sulp>
 8006716:	4602      	mov	r2, r0
 8006718:	460b      	mov	r3, r1
 800671a:	ec51 0b18 	vmov	r0, r1, d8
 800671e:	f7f9 fdbb 	bl	8000298 <__aeabi_dsub>
 8006722:	2200      	movs	r2, #0
 8006724:	2300      	movs	r3, #0
 8006726:	4682      	mov	sl, r0
 8006728:	468b      	mov	fp, r1
 800672a:	f7fa f9d5 	bl	8000ad8 <__aeabi_dcmpeq>
 800672e:	2800      	cmp	r0, #0
 8006730:	d0c1      	beq.n	80066b6 <_strtod_l+0x8de>
 8006732:	e611      	b.n	8006358 <_strtod_l+0x580>
 8006734:	fffffc02 	.word	0xfffffc02
 8006738:	7ff00000 	.word	0x7ff00000
 800673c:	39500000 	.word	0x39500000
 8006740:	000fffff 	.word	0x000fffff
 8006744:	7fefffff 	.word	0x7fefffff
 8006748:	08009ae0 	.word	0x08009ae0
 800674c:	4631      	mov	r1, r6
 800674e:	4628      	mov	r0, r5
 8006750:	f002 fb02 	bl	8008d58 <__ratio>
 8006754:	ec59 8b10 	vmov	r8, r9, d0
 8006758:	ee10 0a10 	vmov	r0, s0
 800675c:	2200      	movs	r2, #0
 800675e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006762:	4649      	mov	r1, r9
 8006764:	f7fa f9cc 	bl	8000b00 <__aeabi_dcmple>
 8006768:	2800      	cmp	r0, #0
 800676a:	d07a      	beq.n	8006862 <_strtod_l+0xa8a>
 800676c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800676e:	2b00      	cmp	r3, #0
 8006770:	d04a      	beq.n	8006808 <_strtod_l+0xa30>
 8006772:	4b95      	ldr	r3, [pc, #596]	; (80069c8 <_strtod_l+0xbf0>)
 8006774:	2200      	movs	r2, #0
 8006776:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800677a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80069c8 <_strtod_l+0xbf0>
 800677e:	f04f 0800 	mov.w	r8, #0
 8006782:	4b92      	ldr	r3, [pc, #584]	; (80069cc <_strtod_l+0xbf4>)
 8006784:	403b      	ands	r3, r7
 8006786:	930d      	str	r3, [sp, #52]	; 0x34
 8006788:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800678a:	4b91      	ldr	r3, [pc, #580]	; (80069d0 <_strtod_l+0xbf8>)
 800678c:	429a      	cmp	r2, r3
 800678e:	f040 80b0 	bne.w	80068f2 <_strtod_l+0xb1a>
 8006792:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006796:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800679a:	ec4b ab10 	vmov	d0, sl, fp
 800679e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80067a2:	f002 fa01 	bl	8008ba8 <__ulp>
 80067a6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80067aa:	ec53 2b10 	vmov	r2, r3, d0
 80067ae:	f7f9 ff2b 	bl	8000608 <__aeabi_dmul>
 80067b2:	4652      	mov	r2, sl
 80067b4:	465b      	mov	r3, fp
 80067b6:	f7f9 fd71 	bl	800029c <__adddf3>
 80067ba:	460b      	mov	r3, r1
 80067bc:	4983      	ldr	r1, [pc, #524]	; (80069cc <_strtod_l+0xbf4>)
 80067be:	4a85      	ldr	r2, [pc, #532]	; (80069d4 <_strtod_l+0xbfc>)
 80067c0:	4019      	ands	r1, r3
 80067c2:	4291      	cmp	r1, r2
 80067c4:	4682      	mov	sl, r0
 80067c6:	d960      	bls.n	800688a <_strtod_l+0xab2>
 80067c8:	ee18 3a90 	vmov	r3, s17
 80067cc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d104      	bne.n	80067de <_strtod_l+0xa06>
 80067d4:	ee18 3a10 	vmov	r3, s16
 80067d8:	3301      	adds	r3, #1
 80067da:	f43f ad45 	beq.w	8006268 <_strtod_l+0x490>
 80067de:	f8df b200 	ldr.w	fp, [pc, #512]	; 80069e0 <_strtod_l+0xc08>
 80067e2:	f04f 3aff 	mov.w	sl, #4294967295
 80067e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80067e8:	4620      	mov	r0, r4
 80067ea:	f001 feab 	bl	8008544 <_Bfree>
 80067ee:	9905      	ldr	r1, [sp, #20]
 80067f0:	4620      	mov	r0, r4
 80067f2:	f001 fea7 	bl	8008544 <_Bfree>
 80067f6:	4631      	mov	r1, r6
 80067f8:	4620      	mov	r0, r4
 80067fa:	f001 fea3 	bl	8008544 <_Bfree>
 80067fe:	4629      	mov	r1, r5
 8006800:	4620      	mov	r0, r4
 8006802:	f001 fe9f 	bl	8008544 <_Bfree>
 8006806:	e61a      	b.n	800643e <_strtod_l+0x666>
 8006808:	f1ba 0f00 	cmp.w	sl, #0
 800680c:	d11b      	bne.n	8006846 <_strtod_l+0xa6e>
 800680e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006812:	b9f3      	cbnz	r3, 8006852 <_strtod_l+0xa7a>
 8006814:	4b6c      	ldr	r3, [pc, #432]	; (80069c8 <_strtod_l+0xbf0>)
 8006816:	2200      	movs	r2, #0
 8006818:	4640      	mov	r0, r8
 800681a:	4649      	mov	r1, r9
 800681c:	f7fa f966 	bl	8000aec <__aeabi_dcmplt>
 8006820:	b9d0      	cbnz	r0, 8006858 <_strtod_l+0xa80>
 8006822:	4640      	mov	r0, r8
 8006824:	4649      	mov	r1, r9
 8006826:	4b6c      	ldr	r3, [pc, #432]	; (80069d8 <_strtod_l+0xc00>)
 8006828:	2200      	movs	r2, #0
 800682a:	f7f9 feed 	bl	8000608 <__aeabi_dmul>
 800682e:	4680      	mov	r8, r0
 8006830:	4689      	mov	r9, r1
 8006832:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006836:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800683a:	9315      	str	r3, [sp, #84]	; 0x54
 800683c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006840:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006844:	e79d      	b.n	8006782 <_strtod_l+0x9aa>
 8006846:	f1ba 0f01 	cmp.w	sl, #1
 800684a:	d102      	bne.n	8006852 <_strtod_l+0xa7a>
 800684c:	2f00      	cmp	r7, #0
 800684e:	f43f ad83 	beq.w	8006358 <_strtod_l+0x580>
 8006852:	4b62      	ldr	r3, [pc, #392]	; (80069dc <_strtod_l+0xc04>)
 8006854:	2200      	movs	r2, #0
 8006856:	e78e      	b.n	8006776 <_strtod_l+0x99e>
 8006858:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80069d8 <_strtod_l+0xc00>
 800685c:	f04f 0800 	mov.w	r8, #0
 8006860:	e7e7      	b.n	8006832 <_strtod_l+0xa5a>
 8006862:	4b5d      	ldr	r3, [pc, #372]	; (80069d8 <_strtod_l+0xc00>)
 8006864:	4640      	mov	r0, r8
 8006866:	4649      	mov	r1, r9
 8006868:	2200      	movs	r2, #0
 800686a:	f7f9 fecd 	bl	8000608 <__aeabi_dmul>
 800686e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006870:	4680      	mov	r8, r0
 8006872:	4689      	mov	r9, r1
 8006874:	b933      	cbnz	r3, 8006884 <_strtod_l+0xaac>
 8006876:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800687a:	900e      	str	r0, [sp, #56]	; 0x38
 800687c:	930f      	str	r3, [sp, #60]	; 0x3c
 800687e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006882:	e7dd      	b.n	8006840 <_strtod_l+0xa68>
 8006884:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006888:	e7f9      	b.n	800687e <_strtod_l+0xaa6>
 800688a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800688e:	9b04      	ldr	r3, [sp, #16]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d1a8      	bne.n	80067e6 <_strtod_l+0xa0e>
 8006894:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006898:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800689a:	0d1b      	lsrs	r3, r3, #20
 800689c:	051b      	lsls	r3, r3, #20
 800689e:	429a      	cmp	r2, r3
 80068a0:	d1a1      	bne.n	80067e6 <_strtod_l+0xa0e>
 80068a2:	4640      	mov	r0, r8
 80068a4:	4649      	mov	r1, r9
 80068a6:	f7fa fa0f 	bl	8000cc8 <__aeabi_d2lz>
 80068aa:	f7f9 fe7f 	bl	80005ac <__aeabi_l2d>
 80068ae:	4602      	mov	r2, r0
 80068b0:	460b      	mov	r3, r1
 80068b2:	4640      	mov	r0, r8
 80068b4:	4649      	mov	r1, r9
 80068b6:	f7f9 fcef 	bl	8000298 <__aeabi_dsub>
 80068ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80068bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80068c0:	ea43 030a 	orr.w	r3, r3, sl
 80068c4:	4313      	orrs	r3, r2
 80068c6:	4680      	mov	r8, r0
 80068c8:	4689      	mov	r9, r1
 80068ca:	d055      	beq.n	8006978 <_strtod_l+0xba0>
 80068cc:	a336      	add	r3, pc, #216	; (adr r3, 80069a8 <_strtod_l+0xbd0>)
 80068ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d2:	f7fa f90b 	bl	8000aec <__aeabi_dcmplt>
 80068d6:	2800      	cmp	r0, #0
 80068d8:	f47f acd0 	bne.w	800627c <_strtod_l+0x4a4>
 80068dc:	a334      	add	r3, pc, #208	; (adr r3, 80069b0 <_strtod_l+0xbd8>)
 80068de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e2:	4640      	mov	r0, r8
 80068e4:	4649      	mov	r1, r9
 80068e6:	f7fa f91f 	bl	8000b28 <__aeabi_dcmpgt>
 80068ea:	2800      	cmp	r0, #0
 80068ec:	f43f af7b 	beq.w	80067e6 <_strtod_l+0xa0e>
 80068f0:	e4c4      	b.n	800627c <_strtod_l+0x4a4>
 80068f2:	9b04      	ldr	r3, [sp, #16]
 80068f4:	b333      	cbz	r3, 8006944 <_strtod_l+0xb6c>
 80068f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068f8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80068fc:	d822      	bhi.n	8006944 <_strtod_l+0xb6c>
 80068fe:	a32e      	add	r3, pc, #184	; (adr r3, 80069b8 <_strtod_l+0xbe0>)
 8006900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006904:	4640      	mov	r0, r8
 8006906:	4649      	mov	r1, r9
 8006908:	f7fa f8fa 	bl	8000b00 <__aeabi_dcmple>
 800690c:	b1a0      	cbz	r0, 8006938 <_strtod_l+0xb60>
 800690e:	4649      	mov	r1, r9
 8006910:	4640      	mov	r0, r8
 8006912:	f7fa f951 	bl	8000bb8 <__aeabi_d2uiz>
 8006916:	2801      	cmp	r0, #1
 8006918:	bf38      	it	cc
 800691a:	2001      	movcc	r0, #1
 800691c:	f7f9 fdfa 	bl	8000514 <__aeabi_ui2d>
 8006920:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006922:	4680      	mov	r8, r0
 8006924:	4689      	mov	r9, r1
 8006926:	bb23      	cbnz	r3, 8006972 <_strtod_l+0xb9a>
 8006928:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800692c:	9010      	str	r0, [sp, #64]	; 0x40
 800692e:	9311      	str	r3, [sp, #68]	; 0x44
 8006930:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006934:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006938:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800693a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800693c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006940:	1a9b      	subs	r3, r3, r2
 8006942:	9309      	str	r3, [sp, #36]	; 0x24
 8006944:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006948:	eeb0 0a48 	vmov.f32	s0, s16
 800694c:	eef0 0a68 	vmov.f32	s1, s17
 8006950:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006954:	f002 f928 	bl	8008ba8 <__ulp>
 8006958:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800695c:	ec53 2b10 	vmov	r2, r3, d0
 8006960:	f7f9 fe52 	bl	8000608 <__aeabi_dmul>
 8006964:	ec53 2b18 	vmov	r2, r3, d8
 8006968:	f7f9 fc98 	bl	800029c <__adddf3>
 800696c:	4682      	mov	sl, r0
 800696e:	468b      	mov	fp, r1
 8006970:	e78d      	b.n	800688e <_strtod_l+0xab6>
 8006972:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8006976:	e7db      	b.n	8006930 <_strtod_l+0xb58>
 8006978:	a311      	add	r3, pc, #68	; (adr r3, 80069c0 <_strtod_l+0xbe8>)
 800697a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697e:	f7fa f8b5 	bl	8000aec <__aeabi_dcmplt>
 8006982:	e7b2      	b.n	80068ea <_strtod_l+0xb12>
 8006984:	2300      	movs	r3, #0
 8006986:	930a      	str	r3, [sp, #40]	; 0x28
 8006988:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800698a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800698c:	6013      	str	r3, [r2, #0]
 800698e:	f7ff ba6b 	b.w	8005e68 <_strtod_l+0x90>
 8006992:	2a65      	cmp	r2, #101	; 0x65
 8006994:	f43f ab5f 	beq.w	8006056 <_strtod_l+0x27e>
 8006998:	2a45      	cmp	r2, #69	; 0x45
 800699a:	f43f ab5c 	beq.w	8006056 <_strtod_l+0x27e>
 800699e:	2301      	movs	r3, #1
 80069a0:	f7ff bb94 	b.w	80060cc <_strtod_l+0x2f4>
 80069a4:	f3af 8000 	nop.w
 80069a8:	94a03595 	.word	0x94a03595
 80069ac:	3fdfffff 	.word	0x3fdfffff
 80069b0:	35afe535 	.word	0x35afe535
 80069b4:	3fe00000 	.word	0x3fe00000
 80069b8:	ffc00000 	.word	0xffc00000
 80069bc:	41dfffff 	.word	0x41dfffff
 80069c0:	94a03595 	.word	0x94a03595
 80069c4:	3fcfffff 	.word	0x3fcfffff
 80069c8:	3ff00000 	.word	0x3ff00000
 80069cc:	7ff00000 	.word	0x7ff00000
 80069d0:	7fe00000 	.word	0x7fe00000
 80069d4:	7c9fffff 	.word	0x7c9fffff
 80069d8:	3fe00000 	.word	0x3fe00000
 80069dc:	bff00000 	.word	0xbff00000
 80069e0:	7fefffff 	.word	0x7fefffff

080069e4 <_strtod_r>:
 80069e4:	4b01      	ldr	r3, [pc, #4]	; (80069ec <_strtod_r+0x8>)
 80069e6:	f7ff b9f7 	b.w	8005dd8 <_strtod_l>
 80069ea:	bf00      	nop
 80069ec:	2000008c 	.word	0x2000008c

080069f0 <_strtol_l.constprop.0>:
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069f6:	d001      	beq.n	80069fc <_strtol_l.constprop.0+0xc>
 80069f8:	2b24      	cmp	r3, #36	; 0x24
 80069fa:	d906      	bls.n	8006a0a <_strtol_l.constprop.0+0x1a>
 80069fc:	f7fe fa4c 	bl	8004e98 <__errno>
 8006a00:	2316      	movs	r3, #22
 8006a02:	6003      	str	r3, [r0, #0]
 8006a04:	2000      	movs	r0, #0
 8006a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a0a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006af0 <_strtol_l.constprop.0+0x100>
 8006a0e:	460d      	mov	r5, r1
 8006a10:	462e      	mov	r6, r5
 8006a12:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a16:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006a1a:	f017 0708 	ands.w	r7, r7, #8
 8006a1e:	d1f7      	bne.n	8006a10 <_strtol_l.constprop.0+0x20>
 8006a20:	2c2d      	cmp	r4, #45	; 0x2d
 8006a22:	d132      	bne.n	8006a8a <_strtol_l.constprop.0+0x9a>
 8006a24:	782c      	ldrb	r4, [r5, #0]
 8006a26:	2701      	movs	r7, #1
 8006a28:	1cb5      	adds	r5, r6, #2
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d05b      	beq.n	8006ae6 <_strtol_l.constprop.0+0xf6>
 8006a2e:	2b10      	cmp	r3, #16
 8006a30:	d109      	bne.n	8006a46 <_strtol_l.constprop.0+0x56>
 8006a32:	2c30      	cmp	r4, #48	; 0x30
 8006a34:	d107      	bne.n	8006a46 <_strtol_l.constprop.0+0x56>
 8006a36:	782c      	ldrb	r4, [r5, #0]
 8006a38:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006a3c:	2c58      	cmp	r4, #88	; 0x58
 8006a3e:	d14d      	bne.n	8006adc <_strtol_l.constprop.0+0xec>
 8006a40:	786c      	ldrb	r4, [r5, #1]
 8006a42:	2310      	movs	r3, #16
 8006a44:	3502      	adds	r5, #2
 8006a46:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006a4a:	f108 38ff 	add.w	r8, r8, #4294967295
 8006a4e:	f04f 0c00 	mov.w	ip, #0
 8006a52:	fbb8 f9f3 	udiv	r9, r8, r3
 8006a56:	4666      	mov	r6, ip
 8006a58:	fb03 8a19 	mls	sl, r3, r9, r8
 8006a5c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006a60:	f1be 0f09 	cmp.w	lr, #9
 8006a64:	d816      	bhi.n	8006a94 <_strtol_l.constprop.0+0xa4>
 8006a66:	4674      	mov	r4, lr
 8006a68:	42a3      	cmp	r3, r4
 8006a6a:	dd24      	ble.n	8006ab6 <_strtol_l.constprop.0+0xc6>
 8006a6c:	f1bc 0f00 	cmp.w	ip, #0
 8006a70:	db1e      	blt.n	8006ab0 <_strtol_l.constprop.0+0xc0>
 8006a72:	45b1      	cmp	r9, r6
 8006a74:	d31c      	bcc.n	8006ab0 <_strtol_l.constprop.0+0xc0>
 8006a76:	d101      	bne.n	8006a7c <_strtol_l.constprop.0+0x8c>
 8006a78:	45a2      	cmp	sl, r4
 8006a7a:	db19      	blt.n	8006ab0 <_strtol_l.constprop.0+0xc0>
 8006a7c:	fb06 4603 	mla	r6, r6, r3, r4
 8006a80:	f04f 0c01 	mov.w	ip, #1
 8006a84:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a88:	e7e8      	b.n	8006a5c <_strtol_l.constprop.0+0x6c>
 8006a8a:	2c2b      	cmp	r4, #43	; 0x2b
 8006a8c:	bf04      	itt	eq
 8006a8e:	782c      	ldrbeq	r4, [r5, #0]
 8006a90:	1cb5      	addeq	r5, r6, #2
 8006a92:	e7ca      	b.n	8006a2a <_strtol_l.constprop.0+0x3a>
 8006a94:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006a98:	f1be 0f19 	cmp.w	lr, #25
 8006a9c:	d801      	bhi.n	8006aa2 <_strtol_l.constprop.0+0xb2>
 8006a9e:	3c37      	subs	r4, #55	; 0x37
 8006aa0:	e7e2      	b.n	8006a68 <_strtol_l.constprop.0+0x78>
 8006aa2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006aa6:	f1be 0f19 	cmp.w	lr, #25
 8006aaa:	d804      	bhi.n	8006ab6 <_strtol_l.constprop.0+0xc6>
 8006aac:	3c57      	subs	r4, #87	; 0x57
 8006aae:	e7db      	b.n	8006a68 <_strtol_l.constprop.0+0x78>
 8006ab0:	f04f 3cff 	mov.w	ip, #4294967295
 8006ab4:	e7e6      	b.n	8006a84 <_strtol_l.constprop.0+0x94>
 8006ab6:	f1bc 0f00 	cmp.w	ip, #0
 8006aba:	da05      	bge.n	8006ac8 <_strtol_l.constprop.0+0xd8>
 8006abc:	2322      	movs	r3, #34	; 0x22
 8006abe:	6003      	str	r3, [r0, #0]
 8006ac0:	4646      	mov	r6, r8
 8006ac2:	b942      	cbnz	r2, 8006ad6 <_strtol_l.constprop.0+0xe6>
 8006ac4:	4630      	mov	r0, r6
 8006ac6:	e79e      	b.n	8006a06 <_strtol_l.constprop.0+0x16>
 8006ac8:	b107      	cbz	r7, 8006acc <_strtol_l.constprop.0+0xdc>
 8006aca:	4276      	negs	r6, r6
 8006acc:	2a00      	cmp	r2, #0
 8006ace:	d0f9      	beq.n	8006ac4 <_strtol_l.constprop.0+0xd4>
 8006ad0:	f1bc 0f00 	cmp.w	ip, #0
 8006ad4:	d000      	beq.n	8006ad8 <_strtol_l.constprop.0+0xe8>
 8006ad6:	1e69      	subs	r1, r5, #1
 8006ad8:	6011      	str	r1, [r2, #0]
 8006ada:	e7f3      	b.n	8006ac4 <_strtol_l.constprop.0+0xd4>
 8006adc:	2430      	movs	r4, #48	; 0x30
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d1b1      	bne.n	8006a46 <_strtol_l.constprop.0+0x56>
 8006ae2:	2308      	movs	r3, #8
 8006ae4:	e7af      	b.n	8006a46 <_strtol_l.constprop.0+0x56>
 8006ae6:	2c30      	cmp	r4, #48	; 0x30
 8006ae8:	d0a5      	beq.n	8006a36 <_strtol_l.constprop.0+0x46>
 8006aea:	230a      	movs	r3, #10
 8006aec:	e7ab      	b.n	8006a46 <_strtol_l.constprop.0+0x56>
 8006aee:	bf00      	nop
 8006af0:	08009b09 	.word	0x08009b09

08006af4 <_strtol_r>:
 8006af4:	f7ff bf7c 	b.w	80069f0 <_strtol_l.constprop.0>

08006af8 <__swbuf_r>:
 8006af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006afa:	460e      	mov	r6, r1
 8006afc:	4614      	mov	r4, r2
 8006afe:	4605      	mov	r5, r0
 8006b00:	b118      	cbz	r0, 8006b0a <__swbuf_r+0x12>
 8006b02:	6983      	ldr	r3, [r0, #24]
 8006b04:	b90b      	cbnz	r3, 8006b0a <__swbuf_r+0x12>
 8006b06:	f001 f84b 	bl	8007ba0 <__sinit>
 8006b0a:	4b21      	ldr	r3, [pc, #132]	; (8006b90 <__swbuf_r+0x98>)
 8006b0c:	429c      	cmp	r4, r3
 8006b0e:	d12b      	bne.n	8006b68 <__swbuf_r+0x70>
 8006b10:	686c      	ldr	r4, [r5, #4]
 8006b12:	69a3      	ldr	r3, [r4, #24]
 8006b14:	60a3      	str	r3, [r4, #8]
 8006b16:	89a3      	ldrh	r3, [r4, #12]
 8006b18:	071a      	lsls	r2, r3, #28
 8006b1a:	d52f      	bpl.n	8006b7c <__swbuf_r+0x84>
 8006b1c:	6923      	ldr	r3, [r4, #16]
 8006b1e:	b36b      	cbz	r3, 8006b7c <__swbuf_r+0x84>
 8006b20:	6923      	ldr	r3, [r4, #16]
 8006b22:	6820      	ldr	r0, [r4, #0]
 8006b24:	1ac0      	subs	r0, r0, r3
 8006b26:	6963      	ldr	r3, [r4, #20]
 8006b28:	b2f6      	uxtb	r6, r6
 8006b2a:	4283      	cmp	r3, r0
 8006b2c:	4637      	mov	r7, r6
 8006b2e:	dc04      	bgt.n	8006b3a <__swbuf_r+0x42>
 8006b30:	4621      	mov	r1, r4
 8006b32:	4628      	mov	r0, r5
 8006b34:	f000 ffa0 	bl	8007a78 <_fflush_r>
 8006b38:	bb30      	cbnz	r0, 8006b88 <__swbuf_r+0x90>
 8006b3a:	68a3      	ldr	r3, [r4, #8]
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	60a3      	str	r3, [r4, #8]
 8006b40:	6823      	ldr	r3, [r4, #0]
 8006b42:	1c5a      	adds	r2, r3, #1
 8006b44:	6022      	str	r2, [r4, #0]
 8006b46:	701e      	strb	r6, [r3, #0]
 8006b48:	6963      	ldr	r3, [r4, #20]
 8006b4a:	3001      	adds	r0, #1
 8006b4c:	4283      	cmp	r3, r0
 8006b4e:	d004      	beq.n	8006b5a <__swbuf_r+0x62>
 8006b50:	89a3      	ldrh	r3, [r4, #12]
 8006b52:	07db      	lsls	r3, r3, #31
 8006b54:	d506      	bpl.n	8006b64 <__swbuf_r+0x6c>
 8006b56:	2e0a      	cmp	r6, #10
 8006b58:	d104      	bne.n	8006b64 <__swbuf_r+0x6c>
 8006b5a:	4621      	mov	r1, r4
 8006b5c:	4628      	mov	r0, r5
 8006b5e:	f000 ff8b 	bl	8007a78 <_fflush_r>
 8006b62:	b988      	cbnz	r0, 8006b88 <__swbuf_r+0x90>
 8006b64:	4638      	mov	r0, r7
 8006b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b68:	4b0a      	ldr	r3, [pc, #40]	; (8006b94 <__swbuf_r+0x9c>)
 8006b6a:	429c      	cmp	r4, r3
 8006b6c:	d101      	bne.n	8006b72 <__swbuf_r+0x7a>
 8006b6e:	68ac      	ldr	r4, [r5, #8]
 8006b70:	e7cf      	b.n	8006b12 <__swbuf_r+0x1a>
 8006b72:	4b09      	ldr	r3, [pc, #36]	; (8006b98 <__swbuf_r+0xa0>)
 8006b74:	429c      	cmp	r4, r3
 8006b76:	bf08      	it	eq
 8006b78:	68ec      	ldreq	r4, [r5, #12]
 8006b7a:	e7ca      	b.n	8006b12 <__swbuf_r+0x1a>
 8006b7c:	4621      	mov	r1, r4
 8006b7e:	4628      	mov	r0, r5
 8006b80:	f000 f80c 	bl	8006b9c <__swsetup_r>
 8006b84:	2800      	cmp	r0, #0
 8006b86:	d0cb      	beq.n	8006b20 <__swbuf_r+0x28>
 8006b88:	f04f 37ff 	mov.w	r7, #4294967295
 8006b8c:	e7ea      	b.n	8006b64 <__swbuf_r+0x6c>
 8006b8e:	bf00      	nop
 8006b90:	08009cbc 	.word	0x08009cbc
 8006b94:	08009cdc 	.word	0x08009cdc
 8006b98:	08009c9c 	.word	0x08009c9c

08006b9c <__swsetup_r>:
 8006b9c:	4b32      	ldr	r3, [pc, #200]	; (8006c68 <__swsetup_r+0xcc>)
 8006b9e:	b570      	push	{r4, r5, r6, lr}
 8006ba0:	681d      	ldr	r5, [r3, #0]
 8006ba2:	4606      	mov	r6, r0
 8006ba4:	460c      	mov	r4, r1
 8006ba6:	b125      	cbz	r5, 8006bb2 <__swsetup_r+0x16>
 8006ba8:	69ab      	ldr	r3, [r5, #24]
 8006baa:	b913      	cbnz	r3, 8006bb2 <__swsetup_r+0x16>
 8006bac:	4628      	mov	r0, r5
 8006bae:	f000 fff7 	bl	8007ba0 <__sinit>
 8006bb2:	4b2e      	ldr	r3, [pc, #184]	; (8006c6c <__swsetup_r+0xd0>)
 8006bb4:	429c      	cmp	r4, r3
 8006bb6:	d10f      	bne.n	8006bd8 <__swsetup_r+0x3c>
 8006bb8:	686c      	ldr	r4, [r5, #4]
 8006bba:	89a3      	ldrh	r3, [r4, #12]
 8006bbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006bc0:	0719      	lsls	r1, r3, #28
 8006bc2:	d42c      	bmi.n	8006c1e <__swsetup_r+0x82>
 8006bc4:	06dd      	lsls	r5, r3, #27
 8006bc6:	d411      	bmi.n	8006bec <__swsetup_r+0x50>
 8006bc8:	2309      	movs	r3, #9
 8006bca:	6033      	str	r3, [r6, #0]
 8006bcc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006bd0:	81a3      	strh	r3, [r4, #12]
 8006bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd6:	e03e      	b.n	8006c56 <__swsetup_r+0xba>
 8006bd8:	4b25      	ldr	r3, [pc, #148]	; (8006c70 <__swsetup_r+0xd4>)
 8006bda:	429c      	cmp	r4, r3
 8006bdc:	d101      	bne.n	8006be2 <__swsetup_r+0x46>
 8006bde:	68ac      	ldr	r4, [r5, #8]
 8006be0:	e7eb      	b.n	8006bba <__swsetup_r+0x1e>
 8006be2:	4b24      	ldr	r3, [pc, #144]	; (8006c74 <__swsetup_r+0xd8>)
 8006be4:	429c      	cmp	r4, r3
 8006be6:	bf08      	it	eq
 8006be8:	68ec      	ldreq	r4, [r5, #12]
 8006bea:	e7e6      	b.n	8006bba <__swsetup_r+0x1e>
 8006bec:	0758      	lsls	r0, r3, #29
 8006bee:	d512      	bpl.n	8006c16 <__swsetup_r+0x7a>
 8006bf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bf2:	b141      	cbz	r1, 8006c06 <__swsetup_r+0x6a>
 8006bf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bf8:	4299      	cmp	r1, r3
 8006bfa:	d002      	beq.n	8006c02 <__swsetup_r+0x66>
 8006bfc:	4630      	mov	r0, r6
 8006bfe:	f002 f939 	bl	8008e74 <_free_r>
 8006c02:	2300      	movs	r3, #0
 8006c04:	6363      	str	r3, [r4, #52]	; 0x34
 8006c06:	89a3      	ldrh	r3, [r4, #12]
 8006c08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c0c:	81a3      	strh	r3, [r4, #12]
 8006c0e:	2300      	movs	r3, #0
 8006c10:	6063      	str	r3, [r4, #4]
 8006c12:	6923      	ldr	r3, [r4, #16]
 8006c14:	6023      	str	r3, [r4, #0]
 8006c16:	89a3      	ldrh	r3, [r4, #12]
 8006c18:	f043 0308 	orr.w	r3, r3, #8
 8006c1c:	81a3      	strh	r3, [r4, #12]
 8006c1e:	6923      	ldr	r3, [r4, #16]
 8006c20:	b94b      	cbnz	r3, 8006c36 <__swsetup_r+0x9a>
 8006c22:	89a3      	ldrh	r3, [r4, #12]
 8006c24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c2c:	d003      	beq.n	8006c36 <__swsetup_r+0x9a>
 8006c2e:	4621      	mov	r1, r4
 8006c30:	4630      	mov	r0, r6
 8006c32:	f001 fbed 	bl	8008410 <__smakebuf_r>
 8006c36:	89a0      	ldrh	r0, [r4, #12]
 8006c38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c3c:	f010 0301 	ands.w	r3, r0, #1
 8006c40:	d00a      	beq.n	8006c58 <__swsetup_r+0xbc>
 8006c42:	2300      	movs	r3, #0
 8006c44:	60a3      	str	r3, [r4, #8]
 8006c46:	6963      	ldr	r3, [r4, #20]
 8006c48:	425b      	negs	r3, r3
 8006c4a:	61a3      	str	r3, [r4, #24]
 8006c4c:	6923      	ldr	r3, [r4, #16]
 8006c4e:	b943      	cbnz	r3, 8006c62 <__swsetup_r+0xc6>
 8006c50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c54:	d1ba      	bne.n	8006bcc <__swsetup_r+0x30>
 8006c56:	bd70      	pop	{r4, r5, r6, pc}
 8006c58:	0781      	lsls	r1, r0, #30
 8006c5a:	bf58      	it	pl
 8006c5c:	6963      	ldrpl	r3, [r4, #20]
 8006c5e:	60a3      	str	r3, [r4, #8]
 8006c60:	e7f4      	b.n	8006c4c <__swsetup_r+0xb0>
 8006c62:	2000      	movs	r0, #0
 8006c64:	e7f7      	b.n	8006c56 <__swsetup_r+0xba>
 8006c66:	bf00      	nop
 8006c68:	20000024 	.word	0x20000024
 8006c6c:	08009cbc 	.word	0x08009cbc
 8006c70:	08009cdc 	.word	0x08009cdc
 8006c74:	08009c9c 	.word	0x08009c9c

08006c78 <quorem>:
 8006c78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c7c:	6903      	ldr	r3, [r0, #16]
 8006c7e:	690c      	ldr	r4, [r1, #16]
 8006c80:	42a3      	cmp	r3, r4
 8006c82:	4607      	mov	r7, r0
 8006c84:	f2c0 8081 	blt.w	8006d8a <quorem+0x112>
 8006c88:	3c01      	subs	r4, #1
 8006c8a:	f101 0814 	add.w	r8, r1, #20
 8006c8e:	f100 0514 	add.w	r5, r0, #20
 8006c92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c96:	9301      	str	r3, [sp, #4]
 8006c98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006c9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006ca8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006cac:	fbb2 f6f3 	udiv	r6, r2, r3
 8006cb0:	d331      	bcc.n	8006d16 <quorem+0x9e>
 8006cb2:	f04f 0e00 	mov.w	lr, #0
 8006cb6:	4640      	mov	r0, r8
 8006cb8:	46ac      	mov	ip, r5
 8006cba:	46f2      	mov	sl, lr
 8006cbc:	f850 2b04 	ldr.w	r2, [r0], #4
 8006cc0:	b293      	uxth	r3, r2
 8006cc2:	fb06 e303 	mla	r3, r6, r3, lr
 8006cc6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	ebaa 0303 	sub.w	r3, sl, r3
 8006cd0:	f8dc a000 	ldr.w	sl, [ip]
 8006cd4:	0c12      	lsrs	r2, r2, #16
 8006cd6:	fa13 f38a 	uxtah	r3, r3, sl
 8006cda:	fb06 e202 	mla	r2, r6, r2, lr
 8006cde:	9300      	str	r3, [sp, #0]
 8006ce0:	9b00      	ldr	r3, [sp, #0]
 8006ce2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006ce6:	b292      	uxth	r2, r2
 8006ce8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006cec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006cf0:	f8bd 3000 	ldrh.w	r3, [sp]
 8006cf4:	4581      	cmp	r9, r0
 8006cf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006cfa:	f84c 3b04 	str.w	r3, [ip], #4
 8006cfe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006d02:	d2db      	bcs.n	8006cbc <quorem+0x44>
 8006d04:	f855 300b 	ldr.w	r3, [r5, fp]
 8006d08:	b92b      	cbnz	r3, 8006d16 <quorem+0x9e>
 8006d0a:	9b01      	ldr	r3, [sp, #4]
 8006d0c:	3b04      	subs	r3, #4
 8006d0e:	429d      	cmp	r5, r3
 8006d10:	461a      	mov	r2, r3
 8006d12:	d32e      	bcc.n	8006d72 <quorem+0xfa>
 8006d14:	613c      	str	r4, [r7, #16]
 8006d16:	4638      	mov	r0, r7
 8006d18:	f001 fea0 	bl	8008a5c <__mcmp>
 8006d1c:	2800      	cmp	r0, #0
 8006d1e:	db24      	blt.n	8006d6a <quorem+0xf2>
 8006d20:	3601      	adds	r6, #1
 8006d22:	4628      	mov	r0, r5
 8006d24:	f04f 0c00 	mov.w	ip, #0
 8006d28:	f858 2b04 	ldr.w	r2, [r8], #4
 8006d2c:	f8d0 e000 	ldr.w	lr, [r0]
 8006d30:	b293      	uxth	r3, r2
 8006d32:	ebac 0303 	sub.w	r3, ip, r3
 8006d36:	0c12      	lsrs	r2, r2, #16
 8006d38:	fa13 f38e 	uxtah	r3, r3, lr
 8006d3c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006d40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d4a:	45c1      	cmp	r9, r8
 8006d4c:	f840 3b04 	str.w	r3, [r0], #4
 8006d50:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006d54:	d2e8      	bcs.n	8006d28 <quorem+0xb0>
 8006d56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d5e:	b922      	cbnz	r2, 8006d6a <quorem+0xf2>
 8006d60:	3b04      	subs	r3, #4
 8006d62:	429d      	cmp	r5, r3
 8006d64:	461a      	mov	r2, r3
 8006d66:	d30a      	bcc.n	8006d7e <quorem+0x106>
 8006d68:	613c      	str	r4, [r7, #16]
 8006d6a:	4630      	mov	r0, r6
 8006d6c:	b003      	add	sp, #12
 8006d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d72:	6812      	ldr	r2, [r2, #0]
 8006d74:	3b04      	subs	r3, #4
 8006d76:	2a00      	cmp	r2, #0
 8006d78:	d1cc      	bne.n	8006d14 <quorem+0x9c>
 8006d7a:	3c01      	subs	r4, #1
 8006d7c:	e7c7      	b.n	8006d0e <quorem+0x96>
 8006d7e:	6812      	ldr	r2, [r2, #0]
 8006d80:	3b04      	subs	r3, #4
 8006d82:	2a00      	cmp	r2, #0
 8006d84:	d1f0      	bne.n	8006d68 <quorem+0xf0>
 8006d86:	3c01      	subs	r4, #1
 8006d88:	e7eb      	b.n	8006d62 <quorem+0xea>
 8006d8a:	2000      	movs	r0, #0
 8006d8c:	e7ee      	b.n	8006d6c <quorem+0xf4>
	...

08006d90 <_dtoa_r>:
 8006d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d94:	ed2d 8b04 	vpush	{d8-d9}
 8006d98:	ec57 6b10 	vmov	r6, r7, d0
 8006d9c:	b093      	sub	sp, #76	; 0x4c
 8006d9e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006da0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006da4:	9106      	str	r1, [sp, #24]
 8006da6:	ee10 aa10 	vmov	sl, s0
 8006daa:	4604      	mov	r4, r0
 8006dac:	9209      	str	r2, [sp, #36]	; 0x24
 8006dae:	930c      	str	r3, [sp, #48]	; 0x30
 8006db0:	46bb      	mov	fp, r7
 8006db2:	b975      	cbnz	r5, 8006dd2 <_dtoa_r+0x42>
 8006db4:	2010      	movs	r0, #16
 8006db6:	f001 fb6b 	bl	8008490 <malloc>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	6260      	str	r0, [r4, #36]	; 0x24
 8006dbe:	b920      	cbnz	r0, 8006dca <_dtoa_r+0x3a>
 8006dc0:	4ba7      	ldr	r3, [pc, #668]	; (8007060 <_dtoa_r+0x2d0>)
 8006dc2:	21ea      	movs	r1, #234	; 0xea
 8006dc4:	48a7      	ldr	r0, [pc, #668]	; (8007064 <_dtoa_r+0x2d4>)
 8006dc6:	f002 fcc1 	bl	800974c <__assert_func>
 8006dca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006dce:	6005      	str	r5, [r0, #0]
 8006dd0:	60c5      	str	r5, [r0, #12]
 8006dd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006dd4:	6819      	ldr	r1, [r3, #0]
 8006dd6:	b151      	cbz	r1, 8006dee <_dtoa_r+0x5e>
 8006dd8:	685a      	ldr	r2, [r3, #4]
 8006dda:	604a      	str	r2, [r1, #4]
 8006ddc:	2301      	movs	r3, #1
 8006dde:	4093      	lsls	r3, r2
 8006de0:	608b      	str	r3, [r1, #8]
 8006de2:	4620      	mov	r0, r4
 8006de4:	f001 fbae 	bl	8008544 <_Bfree>
 8006de8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006dea:	2200      	movs	r2, #0
 8006dec:	601a      	str	r2, [r3, #0]
 8006dee:	1e3b      	subs	r3, r7, #0
 8006df0:	bfaa      	itet	ge
 8006df2:	2300      	movge	r3, #0
 8006df4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006df8:	f8c8 3000 	strge.w	r3, [r8]
 8006dfc:	4b9a      	ldr	r3, [pc, #616]	; (8007068 <_dtoa_r+0x2d8>)
 8006dfe:	bfbc      	itt	lt
 8006e00:	2201      	movlt	r2, #1
 8006e02:	f8c8 2000 	strlt.w	r2, [r8]
 8006e06:	ea33 030b 	bics.w	r3, r3, fp
 8006e0a:	d11b      	bne.n	8006e44 <_dtoa_r+0xb4>
 8006e0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e0e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006e12:	6013      	str	r3, [r2, #0]
 8006e14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006e18:	4333      	orrs	r3, r6
 8006e1a:	f000 8592 	beq.w	8007942 <_dtoa_r+0xbb2>
 8006e1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e20:	b963      	cbnz	r3, 8006e3c <_dtoa_r+0xac>
 8006e22:	4b92      	ldr	r3, [pc, #584]	; (800706c <_dtoa_r+0x2dc>)
 8006e24:	e022      	b.n	8006e6c <_dtoa_r+0xdc>
 8006e26:	4b92      	ldr	r3, [pc, #584]	; (8007070 <_dtoa_r+0x2e0>)
 8006e28:	9301      	str	r3, [sp, #4]
 8006e2a:	3308      	adds	r3, #8
 8006e2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006e2e:	6013      	str	r3, [r2, #0]
 8006e30:	9801      	ldr	r0, [sp, #4]
 8006e32:	b013      	add	sp, #76	; 0x4c
 8006e34:	ecbd 8b04 	vpop	{d8-d9}
 8006e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e3c:	4b8b      	ldr	r3, [pc, #556]	; (800706c <_dtoa_r+0x2dc>)
 8006e3e:	9301      	str	r3, [sp, #4]
 8006e40:	3303      	adds	r3, #3
 8006e42:	e7f3      	b.n	8006e2c <_dtoa_r+0x9c>
 8006e44:	2200      	movs	r2, #0
 8006e46:	2300      	movs	r3, #0
 8006e48:	4650      	mov	r0, sl
 8006e4a:	4659      	mov	r1, fp
 8006e4c:	f7f9 fe44 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e50:	ec4b ab19 	vmov	d9, sl, fp
 8006e54:	4680      	mov	r8, r0
 8006e56:	b158      	cbz	r0, 8006e70 <_dtoa_r+0xe0>
 8006e58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	6013      	str	r3, [r2, #0]
 8006e5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	f000 856b 	beq.w	800793c <_dtoa_r+0xbac>
 8006e66:	4883      	ldr	r0, [pc, #524]	; (8007074 <_dtoa_r+0x2e4>)
 8006e68:	6018      	str	r0, [r3, #0]
 8006e6a:	1e43      	subs	r3, r0, #1
 8006e6c:	9301      	str	r3, [sp, #4]
 8006e6e:	e7df      	b.n	8006e30 <_dtoa_r+0xa0>
 8006e70:	ec4b ab10 	vmov	d0, sl, fp
 8006e74:	aa10      	add	r2, sp, #64	; 0x40
 8006e76:	a911      	add	r1, sp, #68	; 0x44
 8006e78:	4620      	mov	r0, r4
 8006e7a:	f001 ff11 	bl	8008ca0 <__d2b>
 8006e7e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006e82:	ee08 0a10 	vmov	s16, r0
 8006e86:	2d00      	cmp	r5, #0
 8006e88:	f000 8084 	beq.w	8006f94 <_dtoa_r+0x204>
 8006e8c:	ee19 3a90 	vmov	r3, s19
 8006e90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e94:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006e98:	4656      	mov	r6, sl
 8006e9a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006e9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006ea2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006ea6:	4b74      	ldr	r3, [pc, #464]	; (8007078 <_dtoa_r+0x2e8>)
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	4630      	mov	r0, r6
 8006eac:	4639      	mov	r1, r7
 8006eae:	f7f9 f9f3 	bl	8000298 <__aeabi_dsub>
 8006eb2:	a365      	add	r3, pc, #404	; (adr r3, 8007048 <_dtoa_r+0x2b8>)
 8006eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb8:	f7f9 fba6 	bl	8000608 <__aeabi_dmul>
 8006ebc:	a364      	add	r3, pc, #400	; (adr r3, 8007050 <_dtoa_r+0x2c0>)
 8006ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec2:	f7f9 f9eb 	bl	800029c <__adddf3>
 8006ec6:	4606      	mov	r6, r0
 8006ec8:	4628      	mov	r0, r5
 8006eca:	460f      	mov	r7, r1
 8006ecc:	f7f9 fb32 	bl	8000534 <__aeabi_i2d>
 8006ed0:	a361      	add	r3, pc, #388	; (adr r3, 8007058 <_dtoa_r+0x2c8>)
 8006ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed6:	f7f9 fb97 	bl	8000608 <__aeabi_dmul>
 8006eda:	4602      	mov	r2, r0
 8006edc:	460b      	mov	r3, r1
 8006ede:	4630      	mov	r0, r6
 8006ee0:	4639      	mov	r1, r7
 8006ee2:	f7f9 f9db 	bl	800029c <__adddf3>
 8006ee6:	4606      	mov	r6, r0
 8006ee8:	460f      	mov	r7, r1
 8006eea:	f7f9 fe3d 	bl	8000b68 <__aeabi_d2iz>
 8006eee:	2200      	movs	r2, #0
 8006ef0:	9000      	str	r0, [sp, #0]
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	4630      	mov	r0, r6
 8006ef6:	4639      	mov	r1, r7
 8006ef8:	f7f9 fdf8 	bl	8000aec <__aeabi_dcmplt>
 8006efc:	b150      	cbz	r0, 8006f14 <_dtoa_r+0x184>
 8006efe:	9800      	ldr	r0, [sp, #0]
 8006f00:	f7f9 fb18 	bl	8000534 <__aeabi_i2d>
 8006f04:	4632      	mov	r2, r6
 8006f06:	463b      	mov	r3, r7
 8006f08:	f7f9 fde6 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f0c:	b910      	cbnz	r0, 8006f14 <_dtoa_r+0x184>
 8006f0e:	9b00      	ldr	r3, [sp, #0]
 8006f10:	3b01      	subs	r3, #1
 8006f12:	9300      	str	r3, [sp, #0]
 8006f14:	9b00      	ldr	r3, [sp, #0]
 8006f16:	2b16      	cmp	r3, #22
 8006f18:	d85a      	bhi.n	8006fd0 <_dtoa_r+0x240>
 8006f1a:	9a00      	ldr	r2, [sp, #0]
 8006f1c:	4b57      	ldr	r3, [pc, #348]	; (800707c <_dtoa_r+0x2ec>)
 8006f1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f26:	ec51 0b19 	vmov	r0, r1, d9
 8006f2a:	f7f9 fddf 	bl	8000aec <__aeabi_dcmplt>
 8006f2e:	2800      	cmp	r0, #0
 8006f30:	d050      	beq.n	8006fd4 <_dtoa_r+0x244>
 8006f32:	9b00      	ldr	r3, [sp, #0]
 8006f34:	3b01      	subs	r3, #1
 8006f36:	9300      	str	r3, [sp, #0]
 8006f38:	2300      	movs	r3, #0
 8006f3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006f3e:	1b5d      	subs	r5, r3, r5
 8006f40:	1e6b      	subs	r3, r5, #1
 8006f42:	9305      	str	r3, [sp, #20]
 8006f44:	bf45      	ittet	mi
 8006f46:	f1c5 0301 	rsbmi	r3, r5, #1
 8006f4a:	9304      	strmi	r3, [sp, #16]
 8006f4c:	2300      	movpl	r3, #0
 8006f4e:	2300      	movmi	r3, #0
 8006f50:	bf4c      	ite	mi
 8006f52:	9305      	strmi	r3, [sp, #20]
 8006f54:	9304      	strpl	r3, [sp, #16]
 8006f56:	9b00      	ldr	r3, [sp, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	db3d      	blt.n	8006fd8 <_dtoa_r+0x248>
 8006f5c:	9b05      	ldr	r3, [sp, #20]
 8006f5e:	9a00      	ldr	r2, [sp, #0]
 8006f60:	920a      	str	r2, [sp, #40]	; 0x28
 8006f62:	4413      	add	r3, r2
 8006f64:	9305      	str	r3, [sp, #20]
 8006f66:	2300      	movs	r3, #0
 8006f68:	9307      	str	r3, [sp, #28]
 8006f6a:	9b06      	ldr	r3, [sp, #24]
 8006f6c:	2b09      	cmp	r3, #9
 8006f6e:	f200 8089 	bhi.w	8007084 <_dtoa_r+0x2f4>
 8006f72:	2b05      	cmp	r3, #5
 8006f74:	bfc4      	itt	gt
 8006f76:	3b04      	subgt	r3, #4
 8006f78:	9306      	strgt	r3, [sp, #24]
 8006f7a:	9b06      	ldr	r3, [sp, #24]
 8006f7c:	f1a3 0302 	sub.w	r3, r3, #2
 8006f80:	bfcc      	ite	gt
 8006f82:	2500      	movgt	r5, #0
 8006f84:	2501      	movle	r5, #1
 8006f86:	2b03      	cmp	r3, #3
 8006f88:	f200 8087 	bhi.w	800709a <_dtoa_r+0x30a>
 8006f8c:	e8df f003 	tbb	[pc, r3]
 8006f90:	59383a2d 	.word	0x59383a2d
 8006f94:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006f98:	441d      	add	r5, r3
 8006f9a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006f9e:	2b20      	cmp	r3, #32
 8006fa0:	bfc1      	itttt	gt
 8006fa2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006fa6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006faa:	fa0b f303 	lslgt.w	r3, fp, r3
 8006fae:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006fb2:	bfda      	itte	le
 8006fb4:	f1c3 0320 	rsble	r3, r3, #32
 8006fb8:	fa06 f003 	lslle.w	r0, r6, r3
 8006fbc:	4318      	orrgt	r0, r3
 8006fbe:	f7f9 faa9 	bl	8000514 <__aeabi_ui2d>
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	4606      	mov	r6, r0
 8006fc6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006fca:	3d01      	subs	r5, #1
 8006fcc:	930e      	str	r3, [sp, #56]	; 0x38
 8006fce:	e76a      	b.n	8006ea6 <_dtoa_r+0x116>
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e7b2      	b.n	8006f3a <_dtoa_r+0x1aa>
 8006fd4:	900b      	str	r0, [sp, #44]	; 0x2c
 8006fd6:	e7b1      	b.n	8006f3c <_dtoa_r+0x1ac>
 8006fd8:	9b04      	ldr	r3, [sp, #16]
 8006fda:	9a00      	ldr	r2, [sp, #0]
 8006fdc:	1a9b      	subs	r3, r3, r2
 8006fde:	9304      	str	r3, [sp, #16]
 8006fe0:	4253      	negs	r3, r2
 8006fe2:	9307      	str	r3, [sp, #28]
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	930a      	str	r3, [sp, #40]	; 0x28
 8006fe8:	e7bf      	b.n	8006f6a <_dtoa_r+0x1da>
 8006fea:	2300      	movs	r3, #0
 8006fec:	9308      	str	r3, [sp, #32]
 8006fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	dc55      	bgt.n	80070a0 <_dtoa_r+0x310>
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	9209      	str	r2, [sp, #36]	; 0x24
 8006ffe:	e00c      	b.n	800701a <_dtoa_r+0x28a>
 8007000:	2301      	movs	r3, #1
 8007002:	e7f3      	b.n	8006fec <_dtoa_r+0x25c>
 8007004:	2300      	movs	r3, #0
 8007006:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007008:	9308      	str	r3, [sp, #32]
 800700a:	9b00      	ldr	r3, [sp, #0]
 800700c:	4413      	add	r3, r2
 800700e:	9302      	str	r3, [sp, #8]
 8007010:	3301      	adds	r3, #1
 8007012:	2b01      	cmp	r3, #1
 8007014:	9303      	str	r3, [sp, #12]
 8007016:	bfb8      	it	lt
 8007018:	2301      	movlt	r3, #1
 800701a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800701c:	2200      	movs	r2, #0
 800701e:	6042      	str	r2, [r0, #4]
 8007020:	2204      	movs	r2, #4
 8007022:	f102 0614 	add.w	r6, r2, #20
 8007026:	429e      	cmp	r6, r3
 8007028:	6841      	ldr	r1, [r0, #4]
 800702a:	d93d      	bls.n	80070a8 <_dtoa_r+0x318>
 800702c:	4620      	mov	r0, r4
 800702e:	f001 fa49 	bl	80084c4 <_Balloc>
 8007032:	9001      	str	r0, [sp, #4]
 8007034:	2800      	cmp	r0, #0
 8007036:	d13b      	bne.n	80070b0 <_dtoa_r+0x320>
 8007038:	4b11      	ldr	r3, [pc, #68]	; (8007080 <_dtoa_r+0x2f0>)
 800703a:	4602      	mov	r2, r0
 800703c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007040:	e6c0      	b.n	8006dc4 <_dtoa_r+0x34>
 8007042:	2301      	movs	r3, #1
 8007044:	e7df      	b.n	8007006 <_dtoa_r+0x276>
 8007046:	bf00      	nop
 8007048:	636f4361 	.word	0x636f4361
 800704c:	3fd287a7 	.word	0x3fd287a7
 8007050:	8b60c8b3 	.word	0x8b60c8b3
 8007054:	3fc68a28 	.word	0x3fc68a28
 8007058:	509f79fb 	.word	0x509f79fb
 800705c:	3fd34413 	.word	0x3fd34413
 8007060:	08009c16 	.word	0x08009c16
 8007064:	08009c2d 	.word	0x08009c2d
 8007068:	7ff00000 	.word	0x7ff00000
 800706c:	08009c12 	.word	0x08009c12
 8007070:	08009c09 	.word	0x08009c09
 8007074:	08009a89 	.word	0x08009a89
 8007078:	3ff80000 	.word	0x3ff80000
 800707c:	08009e00 	.word	0x08009e00
 8007080:	08009c88 	.word	0x08009c88
 8007084:	2501      	movs	r5, #1
 8007086:	2300      	movs	r3, #0
 8007088:	9306      	str	r3, [sp, #24]
 800708a:	9508      	str	r5, [sp, #32]
 800708c:	f04f 33ff 	mov.w	r3, #4294967295
 8007090:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007094:	2200      	movs	r2, #0
 8007096:	2312      	movs	r3, #18
 8007098:	e7b0      	b.n	8006ffc <_dtoa_r+0x26c>
 800709a:	2301      	movs	r3, #1
 800709c:	9308      	str	r3, [sp, #32]
 800709e:	e7f5      	b.n	800708c <_dtoa_r+0x2fc>
 80070a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80070a6:	e7b8      	b.n	800701a <_dtoa_r+0x28a>
 80070a8:	3101      	adds	r1, #1
 80070aa:	6041      	str	r1, [r0, #4]
 80070ac:	0052      	lsls	r2, r2, #1
 80070ae:	e7b8      	b.n	8007022 <_dtoa_r+0x292>
 80070b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070b2:	9a01      	ldr	r2, [sp, #4]
 80070b4:	601a      	str	r2, [r3, #0]
 80070b6:	9b03      	ldr	r3, [sp, #12]
 80070b8:	2b0e      	cmp	r3, #14
 80070ba:	f200 809d 	bhi.w	80071f8 <_dtoa_r+0x468>
 80070be:	2d00      	cmp	r5, #0
 80070c0:	f000 809a 	beq.w	80071f8 <_dtoa_r+0x468>
 80070c4:	9b00      	ldr	r3, [sp, #0]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	dd32      	ble.n	8007130 <_dtoa_r+0x3a0>
 80070ca:	4ab7      	ldr	r2, [pc, #732]	; (80073a8 <_dtoa_r+0x618>)
 80070cc:	f003 030f 	and.w	r3, r3, #15
 80070d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80070d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80070d8:	9b00      	ldr	r3, [sp, #0]
 80070da:	05d8      	lsls	r0, r3, #23
 80070dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80070e0:	d516      	bpl.n	8007110 <_dtoa_r+0x380>
 80070e2:	4bb2      	ldr	r3, [pc, #712]	; (80073ac <_dtoa_r+0x61c>)
 80070e4:	ec51 0b19 	vmov	r0, r1, d9
 80070e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80070ec:	f7f9 fbb6 	bl	800085c <__aeabi_ddiv>
 80070f0:	f007 070f 	and.w	r7, r7, #15
 80070f4:	4682      	mov	sl, r0
 80070f6:	468b      	mov	fp, r1
 80070f8:	2503      	movs	r5, #3
 80070fa:	4eac      	ldr	r6, [pc, #688]	; (80073ac <_dtoa_r+0x61c>)
 80070fc:	b957      	cbnz	r7, 8007114 <_dtoa_r+0x384>
 80070fe:	4642      	mov	r2, r8
 8007100:	464b      	mov	r3, r9
 8007102:	4650      	mov	r0, sl
 8007104:	4659      	mov	r1, fp
 8007106:	f7f9 fba9 	bl	800085c <__aeabi_ddiv>
 800710a:	4682      	mov	sl, r0
 800710c:	468b      	mov	fp, r1
 800710e:	e028      	b.n	8007162 <_dtoa_r+0x3d2>
 8007110:	2502      	movs	r5, #2
 8007112:	e7f2      	b.n	80070fa <_dtoa_r+0x36a>
 8007114:	07f9      	lsls	r1, r7, #31
 8007116:	d508      	bpl.n	800712a <_dtoa_r+0x39a>
 8007118:	4640      	mov	r0, r8
 800711a:	4649      	mov	r1, r9
 800711c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007120:	f7f9 fa72 	bl	8000608 <__aeabi_dmul>
 8007124:	3501      	adds	r5, #1
 8007126:	4680      	mov	r8, r0
 8007128:	4689      	mov	r9, r1
 800712a:	107f      	asrs	r7, r7, #1
 800712c:	3608      	adds	r6, #8
 800712e:	e7e5      	b.n	80070fc <_dtoa_r+0x36c>
 8007130:	f000 809b 	beq.w	800726a <_dtoa_r+0x4da>
 8007134:	9b00      	ldr	r3, [sp, #0]
 8007136:	4f9d      	ldr	r7, [pc, #628]	; (80073ac <_dtoa_r+0x61c>)
 8007138:	425e      	negs	r6, r3
 800713a:	4b9b      	ldr	r3, [pc, #620]	; (80073a8 <_dtoa_r+0x618>)
 800713c:	f006 020f 	and.w	r2, r6, #15
 8007140:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007148:	ec51 0b19 	vmov	r0, r1, d9
 800714c:	f7f9 fa5c 	bl	8000608 <__aeabi_dmul>
 8007150:	1136      	asrs	r6, r6, #4
 8007152:	4682      	mov	sl, r0
 8007154:	468b      	mov	fp, r1
 8007156:	2300      	movs	r3, #0
 8007158:	2502      	movs	r5, #2
 800715a:	2e00      	cmp	r6, #0
 800715c:	d17a      	bne.n	8007254 <_dtoa_r+0x4c4>
 800715e:	2b00      	cmp	r3, #0
 8007160:	d1d3      	bne.n	800710a <_dtoa_r+0x37a>
 8007162:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007164:	2b00      	cmp	r3, #0
 8007166:	f000 8082 	beq.w	800726e <_dtoa_r+0x4de>
 800716a:	4b91      	ldr	r3, [pc, #580]	; (80073b0 <_dtoa_r+0x620>)
 800716c:	2200      	movs	r2, #0
 800716e:	4650      	mov	r0, sl
 8007170:	4659      	mov	r1, fp
 8007172:	f7f9 fcbb 	bl	8000aec <__aeabi_dcmplt>
 8007176:	2800      	cmp	r0, #0
 8007178:	d079      	beq.n	800726e <_dtoa_r+0x4de>
 800717a:	9b03      	ldr	r3, [sp, #12]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d076      	beq.n	800726e <_dtoa_r+0x4de>
 8007180:	9b02      	ldr	r3, [sp, #8]
 8007182:	2b00      	cmp	r3, #0
 8007184:	dd36      	ble.n	80071f4 <_dtoa_r+0x464>
 8007186:	9b00      	ldr	r3, [sp, #0]
 8007188:	4650      	mov	r0, sl
 800718a:	4659      	mov	r1, fp
 800718c:	1e5f      	subs	r7, r3, #1
 800718e:	2200      	movs	r2, #0
 8007190:	4b88      	ldr	r3, [pc, #544]	; (80073b4 <_dtoa_r+0x624>)
 8007192:	f7f9 fa39 	bl	8000608 <__aeabi_dmul>
 8007196:	9e02      	ldr	r6, [sp, #8]
 8007198:	4682      	mov	sl, r0
 800719a:	468b      	mov	fp, r1
 800719c:	3501      	adds	r5, #1
 800719e:	4628      	mov	r0, r5
 80071a0:	f7f9 f9c8 	bl	8000534 <__aeabi_i2d>
 80071a4:	4652      	mov	r2, sl
 80071a6:	465b      	mov	r3, fp
 80071a8:	f7f9 fa2e 	bl	8000608 <__aeabi_dmul>
 80071ac:	4b82      	ldr	r3, [pc, #520]	; (80073b8 <_dtoa_r+0x628>)
 80071ae:	2200      	movs	r2, #0
 80071b0:	f7f9 f874 	bl	800029c <__adddf3>
 80071b4:	46d0      	mov	r8, sl
 80071b6:	46d9      	mov	r9, fp
 80071b8:	4682      	mov	sl, r0
 80071ba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80071be:	2e00      	cmp	r6, #0
 80071c0:	d158      	bne.n	8007274 <_dtoa_r+0x4e4>
 80071c2:	4b7e      	ldr	r3, [pc, #504]	; (80073bc <_dtoa_r+0x62c>)
 80071c4:	2200      	movs	r2, #0
 80071c6:	4640      	mov	r0, r8
 80071c8:	4649      	mov	r1, r9
 80071ca:	f7f9 f865 	bl	8000298 <__aeabi_dsub>
 80071ce:	4652      	mov	r2, sl
 80071d0:	465b      	mov	r3, fp
 80071d2:	4680      	mov	r8, r0
 80071d4:	4689      	mov	r9, r1
 80071d6:	f7f9 fca7 	bl	8000b28 <__aeabi_dcmpgt>
 80071da:	2800      	cmp	r0, #0
 80071dc:	f040 8295 	bne.w	800770a <_dtoa_r+0x97a>
 80071e0:	4652      	mov	r2, sl
 80071e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80071e6:	4640      	mov	r0, r8
 80071e8:	4649      	mov	r1, r9
 80071ea:	f7f9 fc7f 	bl	8000aec <__aeabi_dcmplt>
 80071ee:	2800      	cmp	r0, #0
 80071f0:	f040 8289 	bne.w	8007706 <_dtoa_r+0x976>
 80071f4:	ec5b ab19 	vmov	sl, fp, d9
 80071f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	f2c0 8148 	blt.w	8007490 <_dtoa_r+0x700>
 8007200:	9a00      	ldr	r2, [sp, #0]
 8007202:	2a0e      	cmp	r2, #14
 8007204:	f300 8144 	bgt.w	8007490 <_dtoa_r+0x700>
 8007208:	4b67      	ldr	r3, [pc, #412]	; (80073a8 <_dtoa_r+0x618>)
 800720a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800720e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007214:	2b00      	cmp	r3, #0
 8007216:	f280 80d5 	bge.w	80073c4 <_dtoa_r+0x634>
 800721a:	9b03      	ldr	r3, [sp, #12]
 800721c:	2b00      	cmp	r3, #0
 800721e:	f300 80d1 	bgt.w	80073c4 <_dtoa_r+0x634>
 8007222:	f040 826f 	bne.w	8007704 <_dtoa_r+0x974>
 8007226:	4b65      	ldr	r3, [pc, #404]	; (80073bc <_dtoa_r+0x62c>)
 8007228:	2200      	movs	r2, #0
 800722a:	4640      	mov	r0, r8
 800722c:	4649      	mov	r1, r9
 800722e:	f7f9 f9eb 	bl	8000608 <__aeabi_dmul>
 8007232:	4652      	mov	r2, sl
 8007234:	465b      	mov	r3, fp
 8007236:	f7f9 fc6d 	bl	8000b14 <__aeabi_dcmpge>
 800723a:	9e03      	ldr	r6, [sp, #12]
 800723c:	4637      	mov	r7, r6
 800723e:	2800      	cmp	r0, #0
 8007240:	f040 8245 	bne.w	80076ce <_dtoa_r+0x93e>
 8007244:	9d01      	ldr	r5, [sp, #4]
 8007246:	2331      	movs	r3, #49	; 0x31
 8007248:	f805 3b01 	strb.w	r3, [r5], #1
 800724c:	9b00      	ldr	r3, [sp, #0]
 800724e:	3301      	adds	r3, #1
 8007250:	9300      	str	r3, [sp, #0]
 8007252:	e240      	b.n	80076d6 <_dtoa_r+0x946>
 8007254:	07f2      	lsls	r2, r6, #31
 8007256:	d505      	bpl.n	8007264 <_dtoa_r+0x4d4>
 8007258:	e9d7 2300 	ldrd	r2, r3, [r7]
 800725c:	f7f9 f9d4 	bl	8000608 <__aeabi_dmul>
 8007260:	3501      	adds	r5, #1
 8007262:	2301      	movs	r3, #1
 8007264:	1076      	asrs	r6, r6, #1
 8007266:	3708      	adds	r7, #8
 8007268:	e777      	b.n	800715a <_dtoa_r+0x3ca>
 800726a:	2502      	movs	r5, #2
 800726c:	e779      	b.n	8007162 <_dtoa_r+0x3d2>
 800726e:	9f00      	ldr	r7, [sp, #0]
 8007270:	9e03      	ldr	r6, [sp, #12]
 8007272:	e794      	b.n	800719e <_dtoa_r+0x40e>
 8007274:	9901      	ldr	r1, [sp, #4]
 8007276:	4b4c      	ldr	r3, [pc, #304]	; (80073a8 <_dtoa_r+0x618>)
 8007278:	4431      	add	r1, r6
 800727a:	910d      	str	r1, [sp, #52]	; 0x34
 800727c:	9908      	ldr	r1, [sp, #32]
 800727e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007282:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007286:	2900      	cmp	r1, #0
 8007288:	d043      	beq.n	8007312 <_dtoa_r+0x582>
 800728a:	494d      	ldr	r1, [pc, #308]	; (80073c0 <_dtoa_r+0x630>)
 800728c:	2000      	movs	r0, #0
 800728e:	f7f9 fae5 	bl	800085c <__aeabi_ddiv>
 8007292:	4652      	mov	r2, sl
 8007294:	465b      	mov	r3, fp
 8007296:	f7f8 ffff 	bl	8000298 <__aeabi_dsub>
 800729a:	9d01      	ldr	r5, [sp, #4]
 800729c:	4682      	mov	sl, r0
 800729e:	468b      	mov	fp, r1
 80072a0:	4649      	mov	r1, r9
 80072a2:	4640      	mov	r0, r8
 80072a4:	f7f9 fc60 	bl	8000b68 <__aeabi_d2iz>
 80072a8:	4606      	mov	r6, r0
 80072aa:	f7f9 f943 	bl	8000534 <__aeabi_i2d>
 80072ae:	4602      	mov	r2, r0
 80072b0:	460b      	mov	r3, r1
 80072b2:	4640      	mov	r0, r8
 80072b4:	4649      	mov	r1, r9
 80072b6:	f7f8 ffef 	bl	8000298 <__aeabi_dsub>
 80072ba:	3630      	adds	r6, #48	; 0x30
 80072bc:	f805 6b01 	strb.w	r6, [r5], #1
 80072c0:	4652      	mov	r2, sl
 80072c2:	465b      	mov	r3, fp
 80072c4:	4680      	mov	r8, r0
 80072c6:	4689      	mov	r9, r1
 80072c8:	f7f9 fc10 	bl	8000aec <__aeabi_dcmplt>
 80072cc:	2800      	cmp	r0, #0
 80072ce:	d163      	bne.n	8007398 <_dtoa_r+0x608>
 80072d0:	4642      	mov	r2, r8
 80072d2:	464b      	mov	r3, r9
 80072d4:	4936      	ldr	r1, [pc, #216]	; (80073b0 <_dtoa_r+0x620>)
 80072d6:	2000      	movs	r0, #0
 80072d8:	f7f8 ffde 	bl	8000298 <__aeabi_dsub>
 80072dc:	4652      	mov	r2, sl
 80072de:	465b      	mov	r3, fp
 80072e0:	f7f9 fc04 	bl	8000aec <__aeabi_dcmplt>
 80072e4:	2800      	cmp	r0, #0
 80072e6:	f040 80b5 	bne.w	8007454 <_dtoa_r+0x6c4>
 80072ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072ec:	429d      	cmp	r5, r3
 80072ee:	d081      	beq.n	80071f4 <_dtoa_r+0x464>
 80072f0:	4b30      	ldr	r3, [pc, #192]	; (80073b4 <_dtoa_r+0x624>)
 80072f2:	2200      	movs	r2, #0
 80072f4:	4650      	mov	r0, sl
 80072f6:	4659      	mov	r1, fp
 80072f8:	f7f9 f986 	bl	8000608 <__aeabi_dmul>
 80072fc:	4b2d      	ldr	r3, [pc, #180]	; (80073b4 <_dtoa_r+0x624>)
 80072fe:	4682      	mov	sl, r0
 8007300:	468b      	mov	fp, r1
 8007302:	4640      	mov	r0, r8
 8007304:	4649      	mov	r1, r9
 8007306:	2200      	movs	r2, #0
 8007308:	f7f9 f97e 	bl	8000608 <__aeabi_dmul>
 800730c:	4680      	mov	r8, r0
 800730e:	4689      	mov	r9, r1
 8007310:	e7c6      	b.n	80072a0 <_dtoa_r+0x510>
 8007312:	4650      	mov	r0, sl
 8007314:	4659      	mov	r1, fp
 8007316:	f7f9 f977 	bl	8000608 <__aeabi_dmul>
 800731a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800731c:	9d01      	ldr	r5, [sp, #4]
 800731e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007320:	4682      	mov	sl, r0
 8007322:	468b      	mov	fp, r1
 8007324:	4649      	mov	r1, r9
 8007326:	4640      	mov	r0, r8
 8007328:	f7f9 fc1e 	bl	8000b68 <__aeabi_d2iz>
 800732c:	4606      	mov	r6, r0
 800732e:	f7f9 f901 	bl	8000534 <__aeabi_i2d>
 8007332:	3630      	adds	r6, #48	; 0x30
 8007334:	4602      	mov	r2, r0
 8007336:	460b      	mov	r3, r1
 8007338:	4640      	mov	r0, r8
 800733a:	4649      	mov	r1, r9
 800733c:	f7f8 ffac 	bl	8000298 <__aeabi_dsub>
 8007340:	f805 6b01 	strb.w	r6, [r5], #1
 8007344:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007346:	429d      	cmp	r5, r3
 8007348:	4680      	mov	r8, r0
 800734a:	4689      	mov	r9, r1
 800734c:	f04f 0200 	mov.w	r2, #0
 8007350:	d124      	bne.n	800739c <_dtoa_r+0x60c>
 8007352:	4b1b      	ldr	r3, [pc, #108]	; (80073c0 <_dtoa_r+0x630>)
 8007354:	4650      	mov	r0, sl
 8007356:	4659      	mov	r1, fp
 8007358:	f7f8 ffa0 	bl	800029c <__adddf3>
 800735c:	4602      	mov	r2, r0
 800735e:	460b      	mov	r3, r1
 8007360:	4640      	mov	r0, r8
 8007362:	4649      	mov	r1, r9
 8007364:	f7f9 fbe0 	bl	8000b28 <__aeabi_dcmpgt>
 8007368:	2800      	cmp	r0, #0
 800736a:	d173      	bne.n	8007454 <_dtoa_r+0x6c4>
 800736c:	4652      	mov	r2, sl
 800736e:	465b      	mov	r3, fp
 8007370:	4913      	ldr	r1, [pc, #76]	; (80073c0 <_dtoa_r+0x630>)
 8007372:	2000      	movs	r0, #0
 8007374:	f7f8 ff90 	bl	8000298 <__aeabi_dsub>
 8007378:	4602      	mov	r2, r0
 800737a:	460b      	mov	r3, r1
 800737c:	4640      	mov	r0, r8
 800737e:	4649      	mov	r1, r9
 8007380:	f7f9 fbb4 	bl	8000aec <__aeabi_dcmplt>
 8007384:	2800      	cmp	r0, #0
 8007386:	f43f af35 	beq.w	80071f4 <_dtoa_r+0x464>
 800738a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800738c:	1e6b      	subs	r3, r5, #1
 800738e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007390:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007394:	2b30      	cmp	r3, #48	; 0x30
 8007396:	d0f8      	beq.n	800738a <_dtoa_r+0x5fa>
 8007398:	9700      	str	r7, [sp, #0]
 800739a:	e049      	b.n	8007430 <_dtoa_r+0x6a0>
 800739c:	4b05      	ldr	r3, [pc, #20]	; (80073b4 <_dtoa_r+0x624>)
 800739e:	f7f9 f933 	bl	8000608 <__aeabi_dmul>
 80073a2:	4680      	mov	r8, r0
 80073a4:	4689      	mov	r9, r1
 80073a6:	e7bd      	b.n	8007324 <_dtoa_r+0x594>
 80073a8:	08009e00 	.word	0x08009e00
 80073ac:	08009dd8 	.word	0x08009dd8
 80073b0:	3ff00000 	.word	0x3ff00000
 80073b4:	40240000 	.word	0x40240000
 80073b8:	401c0000 	.word	0x401c0000
 80073bc:	40140000 	.word	0x40140000
 80073c0:	3fe00000 	.word	0x3fe00000
 80073c4:	9d01      	ldr	r5, [sp, #4]
 80073c6:	4656      	mov	r6, sl
 80073c8:	465f      	mov	r7, fp
 80073ca:	4642      	mov	r2, r8
 80073cc:	464b      	mov	r3, r9
 80073ce:	4630      	mov	r0, r6
 80073d0:	4639      	mov	r1, r7
 80073d2:	f7f9 fa43 	bl	800085c <__aeabi_ddiv>
 80073d6:	f7f9 fbc7 	bl	8000b68 <__aeabi_d2iz>
 80073da:	4682      	mov	sl, r0
 80073dc:	f7f9 f8aa 	bl	8000534 <__aeabi_i2d>
 80073e0:	4642      	mov	r2, r8
 80073e2:	464b      	mov	r3, r9
 80073e4:	f7f9 f910 	bl	8000608 <__aeabi_dmul>
 80073e8:	4602      	mov	r2, r0
 80073ea:	460b      	mov	r3, r1
 80073ec:	4630      	mov	r0, r6
 80073ee:	4639      	mov	r1, r7
 80073f0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80073f4:	f7f8 ff50 	bl	8000298 <__aeabi_dsub>
 80073f8:	f805 6b01 	strb.w	r6, [r5], #1
 80073fc:	9e01      	ldr	r6, [sp, #4]
 80073fe:	9f03      	ldr	r7, [sp, #12]
 8007400:	1bae      	subs	r6, r5, r6
 8007402:	42b7      	cmp	r7, r6
 8007404:	4602      	mov	r2, r0
 8007406:	460b      	mov	r3, r1
 8007408:	d135      	bne.n	8007476 <_dtoa_r+0x6e6>
 800740a:	f7f8 ff47 	bl	800029c <__adddf3>
 800740e:	4642      	mov	r2, r8
 8007410:	464b      	mov	r3, r9
 8007412:	4606      	mov	r6, r0
 8007414:	460f      	mov	r7, r1
 8007416:	f7f9 fb87 	bl	8000b28 <__aeabi_dcmpgt>
 800741a:	b9d0      	cbnz	r0, 8007452 <_dtoa_r+0x6c2>
 800741c:	4642      	mov	r2, r8
 800741e:	464b      	mov	r3, r9
 8007420:	4630      	mov	r0, r6
 8007422:	4639      	mov	r1, r7
 8007424:	f7f9 fb58 	bl	8000ad8 <__aeabi_dcmpeq>
 8007428:	b110      	cbz	r0, 8007430 <_dtoa_r+0x6a0>
 800742a:	f01a 0f01 	tst.w	sl, #1
 800742e:	d110      	bne.n	8007452 <_dtoa_r+0x6c2>
 8007430:	4620      	mov	r0, r4
 8007432:	ee18 1a10 	vmov	r1, s16
 8007436:	f001 f885 	bl	8008544 <_Bfree>
 800743a:	2300      	movs	r3, #0
 800743c:	9800      	ldr	r0, [sp, #0]
 800743e:	702b      	strb	r3, [r5, #0]
 8007440:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007442:	3001      	adds	r0, #1
 8007444:	6018      	str	r0, [r3, #0]
 8007446:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007448:	2b00      	cmp	r3, #0
 800744a:	f43f acf1 	beq.w	8006e30 <_dtoa_r+0xa0>
 800744e:	601d      	str	r5, [r3, #0]
 8007450:	e4ee      	b.n	8006e30 <_dtoa_r+0xa0>
 8007452:	9f00      	ldr	r7, [sp, #0]
 8007454:	462b      	mov	r3, r5
 8007456:	461d      	mov	r5, r3
 8007458:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800745c:	2a39      	cmp	r2, #57	; 0x39
 800745e:	d106      	bne.n	800746e <_dtoa_r+0x6de>
 8007460:	9a01      	ldr	r2, [sp, #4]
 8007462:	429a      	cmp	r2, r3
 8007464:	d1f7      	bne.n	8007456 <_dtoa_r+0x6c6>
 8007466:	9901      	ldr	r1, [sp, #4]
 8007468:	2230      	movs	r2, #48	; 0x30
 800746a:	3701      	adds	r7, #1
 800746c:	700a      	strb	r2, [r1, #0]
 800746e:	781a      	ldrb	r2, [r3, #0]
 8007470:	3201      	adds	r2, #1
 8007472:	701a      	strb	r2, [r3, #0]
 8007474:	e790      	b.n	8007398 <_dtoa_r+0x608>
 8007476:	4ba6      	ldr	r3, [pc, #664]	; (8007710 <_dtoa_r+0x980>)
 8007478:	2200      	movs	r2, #0
 800747a:	f7f9 f8c5 	bl	8000608 <__aeabi_dmul>
 800747e:	2200      	movs	r2, #0
 8007480:	2300      	movs	r3, #0
 8007482:	4606      	mov	r6, r0
 8007484:	460f      	mov	r7, r1
 8007486:	f7f9 fb27 	bl	8000ad8 <__aeabi_dcmpeq>
 800748a:	2800      	cmp	r0, #0
 800748c:	d09d      	beq.n	80073ca <_dtoa_r+0x63a>
 800748e:	e7cf      	b.n	8007430 <_dtoa_r+0x6a0>
 8007490:	9a08      	ldr	r2, [sp, #32]
 8007492:	2a00      	cmp	r2, #0
 8007494:	f000 80d7 	beq.w	8007646 <_dtoa_r+0x8b6>
 8007498:	9a06      	ldr	r2, [sp, #24]
 800749a:	2a01      	cmp	r2, #1
 800749c:	f300 80ba 	bgt.w	8007614 <_dtoa_r+0x884>
 80074a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80074a2:	2a00      	cmp	r2, #0
 80074a4:	f000 80b2 	beq.w	800760c <_dtoa_r+0x87c>
 80074a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80074ac:	9e07      	ldr	r6, [sp, #28]
 80074ae:	9d04      	ldr	r5, [sp, #16]
 80074b0:	9a04      	ldr	r2, [sp, #16]
 80074b2:	441a      	add	r2, r3
 80074b4:	9204      	str	r2, [sp, #16]
 80074b6:	9a05      	ldr	r2, [sp, #20]
 80074b8:	2101      	movs	r1, #1
 80074ba:	441a      	add	r2, r3
 80074bc:	4620      	mov	r0, r4
 80074be:	9205      	str	r2, [sp, #20]
 80074c0:	f001 f942 	bl	8008748 <__i2b>
 80074c4:	4607      	mov	r7, r0
 80074c6:	2d00      	cmp	r5, #0
 80074c8:	dd0c      	ble.n	80074e4 <_dtoa_r+0x754>
 80074ca:	9b05      	ldr	r3, [sp, #20]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	dd09      	ble.n	80074e4 <_dtoa_r+0x754>
 80074d0:	42ab      	cmp	r3, r5
 80074d2:	9a04      	ldr	r2, [sp, #16]
 80074d4:	bfa8      	it	ge
 80074d6:	462b      	movge	r3, r5
 80074d8:	1ad2      	subs	r2, r2, r3
 80074da:	9204      	str	r2, [sp, #16]
 80074dc:	9a05      	ldr	r2, [sp, #20]
 80074de:	1aed      	subs	r5, r5, r3
 80074e0:	1ad3      	subs	r3, r2, r3
 80074e2:	9305      	str	r3, [sp, #20]
 80074e4:	9b07      	ldr	r3, [sp, #28]
 80074e6:	b31b      	cbz	r3, 8007530 <_dtoa_r+0x7a0>
 80074e8:	9b08      	ldr	r3, [sp, #32]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	f000 80af 	beq.w	800764e <_dtoa_r+0x8be>
 80074f0:	2e00      	cmp	r6, #0
 80074f2:	dd13      	ble.n	800751c <_dtoa_r+0x78c>
 80074f4:	4639      	mov	r1, r7
 80074f6:	4632      	mov	r2, r6
 80074f8:	4620      	mov	r0, r4
 80074fa:	f001 f9e5 	bl	80088c8 <__pow5mult>
 80074fe:	ee18 2a10 	vmov	r2, s16
 8007502:	4601      	mov	r1, r0
 8007504:	4607      	mov	r7, r0
 8007506:	4620      	mov	r0, r4
 8007508:	f001 f934 	bl	8008774 <__multiply>
 800750c:	ee18 1a10 	vmov	r1, s16
 8007510:	4680      	mov	r8, r0
 8007512:	4620      	mov	r0, r4
 8007514:	f001 f816 	bl	8008544 <_Bfree>
 8007518:	ee08 8a10 	vmov	s16, r8
 800751c:	9b07      	ldr	r3, [sp, #28]
 800751e:	1b9a      	subs	r2, r3, r6
 8007520:	d006      	beq.n	8007530 <_dtoa_r+0x7a0>
 8007522:	ee18 1a10 	vmov	r1, s16
 8007526:	4620      	mov	r0, r4
 8007528:	f001 f9ce 	bl	80088c8 <__pow5mult>
 800752c:	ee08 0a10 	vmov	s16, r0
 8007530:	2101      	movs	r1, #1
 8007532:	4620      	mov	r0, r4
 8007534:	f001 f908 	bl	8008748 <__i2b>
 8007538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800753a:	2b00      	cmp	r3, #0
 800753c:	4606      	mov	r6, r0
 800753e:	f340 8088 	ble.w	8007652 <_dtoa_r+0x8c2>
 8007542:	461a      	mov	r2, r3
 8007544:	4601      	mov	r1, r0
 8007546:	4620      	mov	r0, r4
 8007548:	f001 f9be 	bl	80088c8 <__pow5mult>
 800754c:	9b06      	ldr	r3, [sp, #24]
 800754e:	2b01      	cmp	r3, #1
 8007550:	4606      	mov	r6, r0
 8007552:	f340 8081 	ble.w	8007658 <_dtoa_r+0x8c8>
 8007556:	f04f 0800 	mov.w	r8, #0
 800755a:	6933      	ldr	r3, [r6, #16]
 800755c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007560:	6918      	ldr	r0, [r3, #16]
 8007562:	f001 f8a1 	bl	80086a8 <__hi0bits>
 8007566:	f1c0 0020 	rsb	r0, r0, #32
 800756a:	9b05      	ldr	r3, [sp, #20]
 800756c:	4418      	add	r0, r3
 800756e:	f010 001f 	ands.w	r0, r0, #31
 8007572:	f000 8092 	beq.w	800769a <_dtoa_r+0x90a>
 8007576:	f1c0 0320 	rsb	r3, r0, #32
 800757a:	2b04      	cmp	r3, #4
 800757c:	f340 808a 	ble.w	8007694 <_dtoa_r+0x904>
 8007580:	f1c0 001c 	rsb	r0, r0, #28
 8007584:	9b04      	ldr	r3, [sp, #16]
 8007586:	4403      	add	r3, r0
 8007588:	9304      	str	r3, [sp, #16]
 800758a:	9b05      	ldr	r3, [sp, #20]
 800758c:	4403      	add	r3, r0
 800758e:	4405      	add	r5, r0
 8007590:	9305      	str	r3, [sp, #20]
 8007592:	9b04      	ldr	r3, [sp, #16]
 8007594:	2b00      	cmp	r3, #0
 8007596:	dd07      	ble.n	80075a8 <_dtoa_r+0x818>
 8007598:	ee18 1a10 	vmov	r1, s16
 800759c:	461a      	mov	r2, r3
 800759e:	4620      	mov	r0, r4
 80075a0:	f001 f9ec 	bl	800897c <__lshift>
 80075a4:	ee08 0a10 	vmov	s16, r0
 80075a8:	9b05      	ldr	r3, [sp, #20]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	dd05      	ble.n	80075ba <_dtoa_r+0x82a>
 80075ae:	4631      	mov	r1, r6
 80075b0:	461a      	mov	r2, r3
 80075b2:	4620      	mov	r0, r4
 80075b4:	f001 f9e2 	bl	800897c <__lshift>
 80075b8:	4606      	mov	r6, r0
 80075ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d06e      	beq.n	800769e <_dtoa_r+0x90e>
 80075c0:	ee18 0a10 	vmov	r0, s16
 80075c4:	4631      	mov	r1, r6
 80075c6:	f001 fa49 	bl	8008a5c <__mcmp>
 80075ca:	2800      	cmp	r0, #0
 80075cc:	da67      	bge.n	800769e <_dtoa_r+0x90e>
 80075ce:	9b00      	ldr	r3, [sp, #0]
 80075d0:	3b01      	subs	r3, #1
 80075d2:	ee18 1a10 	vmov	r1, s16
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	220a      	movs	r2, #10
 80075da:	2300      	movs	r3, #0
 80075dc:	4620      	mov	r0, r4
 80075de:	f000 ffd3 	bl	8008588 <__multadd>
 80075e2:	9b08      	ldr	r3, [sp, #32]
 80075e4:	ee08 0a10 	vmov	s16, r0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f000 81b1 	beq.w	8007950 <_dtoa_r+0xbc0>
 80075ee:	2300      	movs	r3, #0
 80075f0:	4639      	mov	r1, r7
 80075f2:	220a      	movs	r2, #10
 80075f4:	4620      	mov	r0, r4
 80075f6:	f000 ffc7 	bl	8008588 <__multadd>
 80075fa:	9b02      	ldr	r3, [sp, #8]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	4607      	mov	r7, r0
 8007600:	f300 808e 	bgt.w	8007720 <_dtoa_r+0x990>
 8007604:	9b06      	ldr	r3, [sp, #24]
 8007606:	2b02      	cmp	r3, #2
 8007608:	dc51      	bgt.n	80076ae <_dtoa_r+0x91e>
 800760a:	e089      	b.n	8007720 <_dtoa_r+0x990>
 800760c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800760e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007612:	e74b      	b.n	80074ac <_dtoa_r+0x71c>
 8007614:	9b03      	ldr	r3, [sp, #12]
 8007616:	1e5e      	subs	r6, r3, #1
 8007618:	9b07      	ldr	r3, [sp, #28]
 800761a:	42b3      	cmp	r3, r6
 800761c:	bfbf      	itttt	lt
 800761e:	9b07      	ldrlt	r3, [sp, #28]
 8007620:	9607      	strlt	r6, [sp, #28]
 8007622:	1af2      	sublt	r2, r6, r3
 8007624:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007626:	bfb6      	itet	lt
 8007628:	189b      	addlt	r3, r3, r2
 800762a:	1b9e      	subge	r6, r3, r6
 800762c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800762e:	9b03      	ldr	r3, [sp, #12]
 8007630:	bfb8      	it	lt
 8007632:	2600      	movlt	r6, #0
 8007634:	2b00      	cmp	r3, #0
 8007636:	bfb7      	itett	lt
 8007638:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800763c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007640:	1a9d      	sublt	r5, r3, r2
 8007642:	2300      	movlt	r3, #0
 8007644:	e734      	b.n	80074b0 <_dtoa_r+0x720>
 8007646:	9e07      	ldr	r6, [sp, #28]
 8007648:	9d04      	ldr	r5, [sp, #16]
 800764a:	9f08      	ldr	r7, [sp, #32]
 800764c:	e73b      	b.n	80074c6 <_dtoa_r+0x736>
 800764e:	9a07      	ldr	r2, [sp, #28]
 8007650:	e767      	b.n	8007522 <_dtoa_r+0x792>
 8007652:	9b06      	ldr	r3, [sp, #24]
 8007654:	2b01      	cmp	r3, #1
 8007656:	dc18      	bgt.n	800768a <_dtoa_r+0x8fa>
 8007658:	f1ba 0f00 	cmp.w	sl, #0
 800765c:	d115      	bne.n	800768a <_dtoa_r+0x8fa>
 800765e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007662:	b993      	cbnz	r3, 800768a <_dtoa_r+0x8fa>
 8007664:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007668:	0d1b      	lsrs	r3, r3, #20
 800766a:	051b      	lsls	r3, r3, #20
 800766c:	b183      	cbz	r3, 8007690 <_dtoa_r+0x900>
 800766e:	9b04      	ldr	r3, [sp, #16]
 8007670:	3301      	adds	r3, #1
 8007672:	9304      	str	r3, [sp, #16]
 8007674:	9b05      	ldr	r3, [sp, #20]
 8007676:	3301      	adds	r3, #1
 8007678:	9305      	str	r3, [sp, #20]
 800767a:	f04f 0801 	mov.w	r8, #1
 800767e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007680:	2b00      	cmp	r3, #0
 8007682:	f47f af6a 	bne.w	800755a <_dtoa_r+0x7ca>
 8007686:	2001      	movs	r0, #1
 8007688:	e76f      	b.n	800756a <_dtoa_r+0x7da>
 800768a:	f04f 0800 	mov.w	r8, #0
 800768e:	e7f6      	b.n	800767e <_dtoa_r+0x8ee>
 8007690:	4698      	mov	r8, r3
 8007692:	e7f4      	b.n	800767e <_dtoa_r+0x8ee>
 8007694:	f43f af7d 	beq.w	8007592 <_dtoa_r+0x802>
 8007698:	4618      	mov	r0, r3
 800769a:	301c      	adds	r0, #28
 800769c:	e772      	b.n	8007584 <_dtoa_r+0x7f4>
 800769e:	9b03      	ldr	r3, [sp, #12]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	dc37      	bgt.n	8007714 <_dtoa_r+0x984>
 80076a4:	9b06      	ldr	r3, [sp, #24]
 80076a6:	2b02      	cmp	r3, #2
 80076a8:	dd34      	ble.n	8007714 <_dtoa_r+0x984>
 80076aa:	9b03      	ldr	r3, [sp, #12]
 80076ac:	9302      	str	r3, [sp, #8]
 80076ae:	9b02      	ldr	r3, [sp, #8]
 80076b0:	b96b      	cbnz	r3, 80076ce <_dtoa_r+0x93e>
 80076b2:	4631      	mov	r1, r6
 80076b4:	2205      	movs	r2, #5
 80076b6:	4620      	mov	r0, r4
 80076b8:	f000 ff66 	bl	8008588 <__multadd>
 80076bc:	4601      	mov	r1, r0
 80076be:	4606      	mov	r6, r0
 80076c0:	ee18 0a10 	vmov	r0, s16
 80076c4:	f001 f9ca 	bl	8008a5c <__mcmp>
 80076c8:	2800      	cmp	r0, #0
 80076ca:	f73f adbb 	bgt.w	8007244 <_dtoa_r+0x4b4>
 80076ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076d0:	9d01      	ldr	r5, [sp, #4]
 80076d2:	43db      	mvns	r3, r3
 80076d4:	9300      	str	r3, [sp, #0]
 80076d6:	f04f 0800 	mov.w	r8, #0
 80076da:	4631      	mov	r1, r6
 80076dc:	4620      	mov	r0, r4
 80076de:	f000 ff31 	bl	8008544 <_Bfree>
 80076e2:	2f00      	cmp	r7, #0
 80076e4:	f43f aea4 	beq.w	8007430 <_dtoa_r+0x6a0>
 80076e8:	f1b8 0f00 	cmp.w	r8, #0
 80076ec:	d005      	beq.n	80076fa <_dtoa_r+0x96a>
 80076ee:	45b8      	cmp	r8, r7
 80076f0:	d003      	beq.n	80076fa <_dtoa_r+0x96a>
 80076f2:	4641      	mov	r1, r8
 80076f4:	4620      	mov	r0, r4
 80076f6:	f000 ff25 	bl	8008544 <_Bfree>
 80076fa:	4639      	mov	r1, r7
 80076fc:	4620      	mov	r0, r4
 80076fe:	f000 ff21 	bl	8008544 <_Bfree>
 8007702:	e695      	b.n	8007430 <_dtoa_r+0x6a0>
 8007704:	2600      	movs	r6, #0
 8007706:	4637      	mov	r7, r6
 8007708:	e7e1      	b.n	80076ce <_dtoa_r+0x93e>
 800770a:	9700      	str	r7, [sp, #0]
 800770c:	4637      	mov	r7, r6
 800770e:	e599      	b.n	8007244 <_dtoa_r+0x4b4>
 8007710:	40240000 	.word	0x40240000
 8007714:	9b08      	ldr	r3, [sp, #32]
 8007716:	2b00      	cmp	r3, #0
 8007718:	f000 80ca 	beq.w	80078b0 <_dtoa_r+0xb20>
 800771c:	9b03      	ldr	r3, [sp, #12]
 800771e:	9302      	str	r3, [sp, #8]
 8007720:	2d00      	cmp	r5, #0
 8007722:	dd05      	ble.n	8007730 <_dtoa_r+0x9a0>
 8007724:	4639      	mov	r1, r7
 8007726:	462a      	mov	r2, r5
 8007728:	4620      	mov	r0, r4
 800772a:	f001 f927 	bl	800897c <__lshift>
 800772e:	4607      	mov	r7, r0
 8007730:	f1b8 0f00 	cmp.w	r8, #0
 8007734:	d05b      	beq.n	80077ee <_dtoa_r+0xa5e>
 8007736:	6879      	ldr	r1, [r7, #4]
 8007738:	4620      	mov	r0, r4
 800773a:	f000 fec3 	bl	80084c4 <_Balloc>
 800773e:	4605      	mov	r5, r0
 8007740:	b928      	cbnz	r0, 800774e <_dtoa_r+0x9be>
 8007742:	4b87      	ldr	r3, [pc, #540]	; (8007960 <_dtoa_r+0xbd0>)
 8007744:	4602      	mov	r2, r0
 8007746:	f240 21ea 	movw	r1, #746	; 0x2ea
 800774a:	f7ff bb3b 	b.w	8006dc4 <_dtoa_r+0x34>
 800774e:	693a      	ldr	r2, [r7, #16]
 8007750:	3202      	adds	r2, #2
 8007752:	0092      	lsls	r2, r2, #2
 8007754:	f107 010c 	add.w	r1, r7, #12
 8007758:	300c      	adds	r0, #12
 800775a:	f7fd fbc7 	bl	8004eec <memcpy>
 800775e:	2201      	movs	r2, #1
 8007760:	4629      	mov	r1, r5
 8007762:	4620      	mov	r0, r4
 8007764:	f001 f90a 	bl	800897c <__lshift>
 8007768:	9b01      	ldr	r3, [sp, #4]
 800776a:	f103 0901 	add.w	r9, r3, #1
 800776e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007772:	4413      	add	r3, r2
 8007774:	9305      	str	r3, [sp, #20]
 8007776:	f00a 0301 	and.w	r3, sl, #1
 800777a:	46b8      	mov	r8, r7
 800777c:	9304      	str	r3, [sp, #16]
 800777e:	4607      	mov	r7, r0
 8007780:	4631      	mov	r1, r6
 8007782:	ee18 0a10 	vmov	r0, s16
 8007786:	f7ff fa77 	bl	8006c78 <quorem>
 800778a:	4641      	mov	r1, r8
 800778c:	9002      	str	r0, [sp, #8]
 800778e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007792:	ee18 0a10 	vmov	r0, s16
 8007796:	f001 f961 	bl	8008a5c <__mcmp>
 800779a:	463a      	mov	r2, r7
 800779c:	9003      	str	r0, [sp, #12]
 800779e:	4631      	mov	r1, r6
 80077a0:	4620      	mov	r0, r4
 80077a2:	f001 f977 	bl	8008a94 <__mdiff>
 80077a6:	68c2      	ldr	r2, [r0, #12]
 80077a8:	f109 3bff 	add.w	fp, r9, #4294967295
 80077ac:	4605      	mov	r5, r0
 80077ae:	bb02      	cbnz	r2, 80077f2 <_dtoa_r+0xa62>
 80077b0:	4601      	mov	r1, r0
 80077b2:	ee18 0a10 	vmov	r0, s16
 80077b6:	f001 f951 	bl	8008a5c <__mcmp>
 80077ba:	4602      	mov	r2, r0
 80077bc:	4629      	mov	r1, r5
 80077be:	4620      	mov	r0, r4
 80077c0:	9207      	str	r2, [sp, #28]
 80077c2:	f000 febf 	bl	8008544 <_Bfree>
 80077c6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80077ca:	ea43 0102 	orr.w	r1, r3, r2
 80077ce:	9b04      	ldr	r3, [sp, #16]
 80077d0:	430b      	orrs	r3, r1
 80077d2:	464d      	mov	r5, r9
 80077d4:	d10f      	bne.n	80077f6 <_dtoa_r+0xa66>
 80077d6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80077da:	d02a      	beq.n	8007832 <_dtoa_r+0xaa2>
 80077dc:	9b03      	ldr	r3, [sp, #12]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	dd02      	ble.n	80077e8 <_dtoa_r+0xa58>
 80077e2:	9b02      	ldr	r3, [sp, #8]
 80077e4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80077e8:	f88b a000 	strb.w	sl, [fp]
 80077ec:	e775      	b.n	80076da <_dtoa_r+0x94a>
 80077ee:	4638      	mov	r0, r7
 80077f0:	e7ba      	b.n	8007768 <_dtoa_r+0x9d8>
 80077f2:	2201      	movs	r2, #1
 80077f4:	e7e2      	b.n	80077bc <_dtoa_r+0xa2c>
 80077f6:	9b03      	ldr	r3, [sp, #12]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	db04      	blt.n	8007806 <_dtoa_r+0xa76>
 80077fc:	9906      	ldr	r1, [sp, #24]
 80077fe:	430b      	orrs	r3, r1
 8007800:	9904      	ldr	r1, [sp, #16]
 8007802:	430b      	orrs	r3, r1
 8007804:	d122      	bne.n	800784c <_dtoa_r+0xabc>
 8007806:	2a00      	cmp	r2, #0
 8007808:	ddee      	ble.n	80077e8 <_dtoa_r+0xa58>
 800780a:	ee18 1a10 	vmov	r1, s16
 800780e:	2201      	movs	r2, #1
 8007810:	4620      	mov	r0, r4
 8007812:	f001 f8b3 	bl	800897c <__lshift>
 8007816:	4631      	mov	r1, r6
 8007818:	ee08 0a10 	vmov	s16, r0
 800781c:	f001 f91e 	bl	8008a5c <__mcmp>
 8007820:	2800      	cmp	r0, #0
 8007822:	dc03      	bgt.n	800782c <_dtoa_r+0xa9c>
 8007824:	d1e0      	bne.n	80077e8 <_dtoa_r+0xa58>
 8007826:	f01a 0f01 	tst.w	sl, #1
 800782a:	d0dd      	beq.n	80077e8 <_dtoa_r+0xa58>
 800782c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007830:	d1d7      	bne.n	80077e2 <_dtoa_r+0xa52>
 8007832:	2339      	movs	r3, #57	; 0x39
 8007834:	f88b 3000 	strb.w	r3, [fp]
 8007838:	462b      	mov	r3, r5
 800783a:	461d      	mov	r5, r3
 800783c:	3b01      	subs	r3, #1
 800783e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007842:	2a39      	cmp	r2, #57	; 0x39
 8007844:	d071      	beq.n	800792a <_dtoa_r+0xb9a>
 8007846:	3201      	adds	r2, #1
 8007848:	701a      	strb	r2, [r3, #0]
 800784a:	e746      	b.n	80076da <_dtoa_r+0x94a>
 800784c:	2a00      	cmp	r2, #0
 800784e:	dd07      	ble.n	8007860 <_dtoa_r+0xad0>
 8007850:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007854:	d0ed      	beq.n	8007832 <_dtoa_r+0xaa2>
 8007856:	f10a 0301 	add.w	r3, sl, #1
 800785a:	f88b 3000 	strb.w	r3, [fp]
 800785e:	e73c      	b.n	80076da <_dtoa_r+0x94a>
 8007860:	9b05      	ldr	r3, [sp, #20]
 8007862:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007866:	4599      	cmp	r9, r3
 8007868:	d047      	beq.n	80078fa <_dtoa_r+0xb6a>
 800786a:	ee18 1a10 	vmov	r1, s16
 800786e:	2300      	movs	r3, #0
 8007870:	220a      	movs	r2, #10
 8007872:	4620      	mov	r0, r4
 8007874:	f000 fe88 	bl	8008588 <__multadd>
 8007878:	45b8      	cmp	r8, r7
 800787a:	ee08 0a10 	vmov	s16, r0
 800787e:	f04f 0300 	mov.w	r3, #0
 8007882:	f04f 020a 	mov.w	r2, #10
 8007886:	4641      	mov	r1, r8
 8007888:	4620      	mov	r0, r4
 800788a:	d106      	bne.n	800789a <_dtoa_r+0xb0a>
 800788c:	f000 fe7c 	bl	8008588 <__multadd>
 8007890:	4680      	mov	r8, r0
 8007892:	4607      	mov	r7, r0
 8007894:	f109 0901 	add.w	r9, r9, #1
 8007898:	e772      	b.n	8007780 <_dtoa_r+0x9f0>
 800789a:	f000 fe75 	bl	8008588 <__multadd>
 800789e:	4639      	mov	r1, r7
 80078a0:	4680      	mov	r8, r0
 80078a2:	2300      	movs	r3, #0
 80078a4:	220a      	movs	r2, #10
 80078a6:	4620      	mov	r0, r4
 80078a8:	f000 fe6e 	bl	8008588 <__multadd>
 80078ac:	4607      	mov	r7, r0
 80078ae:	e7f1      	b.n	8007894 <_dtoa_r+0xb04>
 80078b0:	9b03      	ldr	r3, [sp, #12]
 80078b2:	9302      	str	r3, [sp, #8]
 80078b4:	9d01      	ldr	r5, [sp, #4]
 80078b6:	ee18 0a10 	vmov	r0, s16
 80078ba:	4631      	mov	r1, r6
 80078bc:	f7ff f9dc 	bl	8006c78 <quorem>
 80078c0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80078c4:	9b01      	ldr	r3, [sp, #4]
 80078c6:	f805 ab01 	strb.w	sl, [r5], #1
 80078ca:	1aea      	subs	r2, r5, r3
 80078cc:	9b02      	ldr	r3, [sp, #8]
 80078ce:	4293      	cmp	r3, r2
 80078d0:	dd09      	ble.n	80078e6 <_dtoa_r+0xb56>
 80078d2:	ee18 1a10 	vmov	r1, s16
 80078d6:	2300      	movs	r3, #0
 80078d8:	220a      	movs	r2, #10
 80078da:	4620      	mov	r0, r4
 80078dc:	f000 fe54 	bl	8008588 <__multadd>
 80078e0:	ee08 0a10 	vmov	s16, r0
 80078e4:	e7e7      	b.n	80078b6 <_dtoa_r+0xb26>
 80078e6:	9b02      	ldr	r3, [sp, #8]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	bfc8      	it	gt
 80078ec:	461d      	movgt	r5, r3
 80078ee:	9b01      	ldr	r3, [sp, #4]
 80078f0:	bfd8      	it	le
 80078f2:	2501      	movle	r5, #1
 80078f4:	441d      	add	r5, r3
 80078f6:	f04f 0800 	mov.w	r8, #0
 80078fa:	ee18 1a10 	vmov	r1, s16
 80078fe:	2201      	movs	r2, #1
 8007900:	4620      	mov	r0, r4
 8007902:	f001 f83b 	bl	800897c <__lshift>
 8007906:	4631      	mov	r1, r6
 8007908:	ee08 0a10 	vmov	s16, r0
 800790c:	f001 f8a6 	bl	8008a5c <__mcmp>
 8007910:	2800      	cmp	r0, #0
 8007912:	dc91      	bgt.n	8007838 <_dtoa_r+0xaa8>
 8007914:	d102      	bne.n	800791c <_dtoa_r+0xb8c>
 8007916:	f01a 0f01 	tst.w	sl, #1
 800791a:	d18d      	bne.n	8007838 <_dtoa_r+0xaa8>
 800791c:	462b      	mov	r3, r5
 800791e:	461d      	mov	r5, r3
 8007920:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007924:	2a30      	cmp	r2, #48	; 0x30
 8007926:	d0fa      	beq.n	800791e <_dtoa_r+0xb8e>
 8007928:	e6d7      	b.n	80076da <_dtoa_r+0x94a>
 800792a:	9a01      	ldr	r2, [sp, #4]
 800792c:	429a      	cmp	r2, r3
 800792e:	d184      	bne.n	800783a <_dtoa_r+0xaaa>
 8007930:	9b00      	ldr	r3, [sp, #0]
 8007932:	3301      	adds	r3, #1
 8007934:	9300      	str	r3, [sp, #0]
 8007936:	2331      	movs	r3, #49	; 0x31
 8007938:	7013      	strb	r3, [r2, #0]
 800793a:	e6ce      	b.n	80076da <_dtoa_r+0x94a>
 800793c:	4b09      	ldr	r3, [pc, #36]	; (8007964 <_dtoa_r+0xbd4>)
 800793e:	f7ff ba95 	b.w	8006e6c <_dtoa_r+0xdc>
 8007942:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007944:	2b00      	cmp	r3, #0
 8007946:	f47f aa6e 	bne.w	8006e26 <_dtoa_r+0x96>
 800794a:	4b07      	ldr	r3, [pc, #28]	; (8007968 <_dtoa_r+0xbd8>)
 800794c:	f7ff ba8e 	b.w	8006e6c <_dtoa_r+0xdc>
 8007950:	9b02      	ldr	r3, [sp, #8]
 8007952:	2b00      	cmp	r3, #0
 8007954:	dcae      	bgt.n	80078b4 <_dtoa_r+0xb24>
 8007956:	9b06      	ldr	r3, [sp, #24]
 8007958:	2b02      	cmp	r3, #2
 800795a:	f73f aea8 	bgt.w	80076ae <_dtoa_r+0x91e>
 800795e:	e7a9      	b.n	80078b4 <_dtoa_r+0xb24>
 8007960:	08009c88 	.word	0x08009c88
 8007964:	08009a88 	.word	0x08009a88
 8007968:	08009c09 	.word	0x08009c09

0800796c <__sflush_r>:
 800796c:	898a      	ldrh	r2, [r1, #12]
 800796e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007972:	4605      	mov	r5, r0
 8007974:	0710      	lsls	r0, r2, #28
 8007976:	460c      	mov	r4, r1
 8007978:	d458      	bmi.n	8007a2c <__sflush_r+0xc0>
 800797a:	684b      	ldr	r3, [r1, #4]
 800797c:	2b00      	cmp	r3, #0
 800797e:	dc05      	bgt.n	800798c <__sflush_r+0x20>
 8007980:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007982:	2b00      	cmp	r3, #0
 8007984:	dc02      	bgt.n	800798c <__sflush_r+0x20>
 8007986:	2000      	movs	r0, #0
 8007988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800798c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800798e:	2e00      	cmp	r6, #0
 8007990:	d0f9      	beq.n	8007986 <__sflush_r+0x1a>
 8007992:	2300      	movs	r3, #0
 8007994:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007998:	682f      	ldr	r7, [r5, #0]
 800799a:	602b      	str	r3, [r5, #0]
 800799c:	d032      	beq.n	8007a04 <__sflush_r+0x98>
 800799e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80079a0:	89a3      	ldrh	r3, [r4, #12]
 80079a2:	075a      	lsls	r2, r3, #29
 80079a4:	d505      	bpl.n	80079b2 <__sflush_r+0x46>
 80079a6:	6863      	ldr	r3, [r4, #4]
 80079a8:	1ac0      	subs	r0, r0, r3
 80079aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80079ac:	b10b      	cbz	r3, 80079b2 <__sflush_r+0x46>
 80079ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80079b0:	1ac0      	subs	r0, r0, r3
 80079b2:	2300      	movs	r3, #0
 80079b4:	4602      	mov	r2, r0
 80079b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079b8:	6a21      	ldr	r1, [r4, #32]
 80079ba:	4628      	mov	r0, r5
 80079bc:	47b0      	blx	r6
 80079be:	1c43      	adds	r3, r0, #1
 80079c0:	89a3      	ldrh	r3, [r4, #12]
 80079c2:	d106      	bne.n	80079d2 <__sflush_r+0x66>
 80079c4:	6829      	ldr	r1, [r5, #0]
 80079c6:	291d      	cmp	r1, #29
 80079c8:	d82c      	bhi.n	8007a24 <__sflush_r+0xb8>
 80079ca:	4a2a      	ldr	r2, [pc, #168]	; (8007a74 <__sflush_r+0x108>)
 80079cc:	40ca      	lsrs	r2, r1
 80079ce:	07d6      	lsls	r6, r2, #31
 80079d0:	d528      	bpl.n	8007a24 <__sflush_r+0xb8>
 80079d2:	2200      	movs	r2, #0
 80079d4:	6062      	str	r2, [r4, #4]
 80079d6:	04d9      	lsls	r1, r3, #19
 80079d8:	6922      	ldr	r2, [r4, #16]
 80079da:	6022      	str	r2, [r4, #0]
 80079dc:	d504      	bpl.n	80079e8 <__sflush_r+0x7c>
 80079de:	1c42      	adds	r2, r0, #1
 80079e0:	d101      	bne.n	80079e6 <__sflush_r+0x7a>
 80079e2:	682b      	ldr	r3, [r5, #0]
 80079e4:	b903      	cbnz	r3, 80079e8 <__sflush_r+0x7c>
 80079e6:	6560      	str	r0, [r4, #84]	; 0x54
 80079e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079ea:	602f      	str	r7, [r5, #0]
 80079ec:	2900      	cmp	r1, #0
 80079ee:	d0ca      	beq.n	8007986 <__sflush_r+0x1a>
 80079f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079f4:	4299      	cmp	r1, r3
 80079f6:	d002      	beq.n	80079fe <__sflush_r+0x92>
 80079f8:	4628      	mov	r0, r5
 80079fa:	f001 fa3b 	bl	8008e74 <_free_r>
 80079fe:	2000      	movs	r0, #0
 8007a00:	6360      	str	r0, [r4, #52]	; 0x34
 8007a02:	e7c1      	b.n	8007988 <__sflush_r+0x1c>
 8007a04:	6a21      	ldr	r1, [r4, #32]
 8007a06:	2301      	movs	r3, #1
 8007a08:	4628      	mov	r0, r5
 8007a0a:	47b0      	blx	r6
 8007a0c:	1c41      	adds	r1, r0, #1
 8007a0e:	d1c7      	bne.n	80079a0 <__sflush_r+0x34>
 8007a10:	682b      	ldr	r3, [r5, #0]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d0c4      	beq.n	80079a0 <__sflush_r+0x34>
 8007a16:	2b1d      	cmp	r3, #29
 8007a18:	d001      	beq.n	8007a1e <__sflush_r+0xb2>
 8007a1a:	2b16      	cmp	r3, #22
 8007a1c:	d101      	bne.n	8007a22 <__sflush_r+0xb6>
 8007a1e:	602f      	str	r7, [r5, #0]
 8007a20:	e7b1      	b.n	8007986 <__sflush_r+0x1a>
 8007a22:	89a3      	ldrh	r3, [r4, #12]
 8007a24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a28:	81a3      	strh	r3, [r4, #12]
 8007a2a:	e7ad      	b.n	8007988 <__sflush_r+0x1c>
 8007a2c:	690f      	ldr	r7, [r1, #16]
 8007a2e:	2f00      	cmp	r7, #0
 8007a30:	d0a9      	beq.n	8007986 <__sflush_r+0x1a>
 8007a32:	0793      	lsls	r3, r2, #30
 8007a34:	680e      	ldr	r6, [r1, #0]
 8007a36:	bf08      	it	eq
 8007a38:	694b      	ldreq	r3, [r1, #20]
 8007a3a:	600f      	str	r7, [r1, #0]
 8007a3c:	bf18      	it	ne
 8007a3e:	2300      	movne	r3, #0
 8007a40:	eba6 0807 	sub.w	r8, r6, r7
 8007a44:	608b      	str	r3, [r1, #8]
 8007a46:	f1b8 0f00 	cmp.w	r8, #0
 8007a4a:	dd9c      	ble.n	8007986 <__sflush_r+0x1a>
 8007a4c:	6a21      	ldr	r1, [r4, #32]
 8007a4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007a50:	4643      	mov	r3, r8
 8007a52:	463a      	mov	r2, r7
 8007a54:	4628      	mov	r0, r5
 8007a56:	47b0      	blx	r6
 8007a58:	2800      	cmp	r0, #0
 8007a5a:	dc06      	bgt.n	8007a6a <__sflush_r+0xfe>
 8007a5c:	89a3      	ldrh	r3, [r4, #12]
 8007a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a62:	81a3      	strh	r3, [r4, #12]
 8007a64:	f04f 30ff 	mov.w	r0, #4294967295
 8007a68:	e78e      	b.n	8007988 <__sflush_r+0x1c>
 8007a6a:	4407      	add	r7, r0
 8007a6c:	eba8 0800 	sub.w	r8, r8, r0
 8007a70:	e7e9      	b.n	8007a46 <__sflush_r+0xda>
 8007a72:	bf00      	nop
 8007a74:	20400001 	.word	0x20400001

08007a78 <_fflush_r>:
 8007a78:	b538      	push	{r3, r4, r5, lr}
 8007a7a:	690b      	ldr	r3, [r1, #16]
 8007a7c:	4605      	mov	r5, r0
 8007a7e:	460c      	mov	r4, r1
 8007a80:	b913      	cbnz	r3, 8007a88 <_fflush_r+0x10>
 8007a82:	2500      	movs	r5, #0
 8007a84:	4628      	mov	r0, r5
 8007a86:	bd38      	pop	{r3, r4, r5, pc}
 8007a88:	b118      	cbz	r0, 8007a92 <_fflush_r+0x1a>
 8007a8a:	6983      	ldr	r3, [r0, #24]
 8007a8c:	b90b      	cbnz	r3, 8007a92 <_fflush_r+0x1a>
 8007a8e:	f000 f887 	bl	8007ba0 <__sinit>
 8007a92:	4b14      	ldr	r3, [pc, #80]	; (8007ae4 <_fflush_r+0x6c>)
 8007a94:	429c      	cmp	r4, r3
 8007a96:	d11b      	bne.n	8007ad0 <_fflush_r+0x58>
 8007a98:	686c      	ldr	r4, [r5, #4]
 8007a9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d0ef      	beq.n	8007a82 <_fflush_r+0xa>
 8007aa2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007aa4:	07d0      	lsls	r0, r2, #31
 8007aa6:	d404      	bmi.n	8007ab2 <_fflush_r+0x3a>
 8007aa8:	0599      	lsls	r1, r3, #22
 8007aaa:	d402      	bmi.n	8007ab2 <_fflush_r+0x3a>
 8007aac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007aae:	f000 fc88 	bl	80083c2 <__retarget_lock_acquire_recursive>
 8007ab2:	4628      	mov	r0, r5
 8007ab4:	4621      	mov	r1, r4
 8007ab6:	f7ff ff59 	bl	800796c <__sflush_r>
 8007aba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007abc:	07da      	lsls	r2, r3, #31
 8007abe:	4605      	mov	r5, r0
 8007ac0:	d4e0      	bmi.n	8007a84 <_fflush_r+0xc>
 8007ac2:	89a3      	ldrh	r3, [r4, #12]
 8007ac4:	059b      	lsls	r3, r3, #22
 8007ac6:	d4dd      	bmi.n	8007a84 <_fflush_r+0xc>
 8007ac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007aca:	f000 fc7b 	bl	80083c4 <__retarget_lock_release_recursive>
 8007ace:	e7d9      	b.n	8007a84 <_fflush_r+0xc>
 8007ad0:	4b05      	ldr	r3, [pc, #20]	; (8007ae8 <_fflush_r+0x70>)
 8007ad2:	429c      	cmp	r4, r3
 8007ad4:	d101      	bne.n	8007ada <_fflush_r+0x62>
 8007ad6:	68ac      	ldr	r4, [r5, #8]
 8007ad8:	e7df      	b.n	8007a9a <_fflush_r+0x22>
 8007ada:	4b04      	ldr	r3, [pc, #16]	; (8007aec <_fflush_r+0x74>)
 8007adc:	429c      	cmp	r4, r3
 8007ade:	bf08      	it	eq
 8007ae0:	68ec      	ldreq	r4, [r5, #12]
 8007ae2:	e7da      	b.n	8007a9a <_fflush_r+0x22>
 8007ae4:	08009cbc 	.word	0x08009cbc
 8007ae8:	08009cdc 	.word	0x08009cdc
 8007aec:	08009c9c 	.word	0x08009c9c

08007af0 <std>:
 8007af0:	2300      	movs	r3, #0
 8007af2:	b510      	push	{r4, lr}
 8007af4:	4604      	mov	r4, r0
 8007af6:	e9c0 3300 	strd	r3, r3, [r0]
 8007afa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007afe:	6083      	str	r3, [r0, #8]
 8007b00:	8181      	strh	r1, [r0, #12]
 8007b02:	6643      	str	r3, [r0, #100]	; 0x64
 8007b04:	81c2      	strh	r2, [r0, #14]
 8007b06:	6183      	str	r3, [r0, #24]
 8007b08:	4619      	mov	r1, r3
 8007b0a:	2208      	movs	r2, #8
 8007b0c:	305c      	adds	r0, #92	; 0x5c
 8007b0e:	f7fd f9fb 	bl	8004f08 <memset>
 8007b12:	4b05      	ldr	r3, [pc, #20]	; (8007b28 <std+0x38>)
 8007b14:	6263      	str	r3, [r4, #36]	; 0x24
 8007b16:	4b05      	ldr	r3, [pc, #20]	; (8007b2c <std+0x3c>)
 8007b18:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b1a:	4b05      	ldr	r3, [pc, #20]	; (8007b30 <std+0x40>)
 8007b1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b1e:	4b05      	ldr	r3, [pc, #20]	; (8007b34 <std+0x44>)
 8007b20:	6224      	str	r4, [r4, #32]
 8007b22:	6323      	str	r3, [r4, #48]	; 0x30
 8007b24:	bd10      	pop	{r4, pc}
 8007b26:	bf00      	nop
 8007b28:	08009661 	.word	0x08009661
 8007b2c:	08009683 	.word	0x08009683
 8007b30:	080096bb 	.word	0x080096bb
 8007b34:	080096df 	.word	0x080096df

08007b38 <_cleanup_r>:
 8007b38:	4901      	ldr	r1, [pc, #4]	; (8007b40 <_cleanup_r+0x8>)
 8007b3a:	f000 b8af 	b.w	8007c9c <_fwalk_reent>
 8007b3e:	bf00      	nop
 8007b40:	08007a79 	.word	0x08007a79

08007b44 <__sfmoreglue>:
 8007b44:	b570      	push	{r4, r5, r6, lr}
 8007b46:	2268      	movs	r2, #104	; 0x68
 8007b48:	1e4d      	subs	r5, r1, #1
 8007b4a:	4355      	muls	r5, r2
 8007b4c:	460e      	mov	r6, r1
 8007b4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007b52:	f001 f9fb 	bl	8008f4c <_malloc_r>
 8007b56:	4604      	mov	r4, r0
 8007b58:	b140      	cbz	r0, 8007b6c <__sfmoreglue+0x28>
 8007b5a:	2100      	movs	r1, #0
 8007b5c:	e9c0 1600 	strd	r1, r6, [r0]
 8007b60:	300c      	adds	r0, #12
 8007b62:	60a0      	str	r0, [r4, #8]
 8007b64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007b68:	f7fd f9ce 	bl	8004f08 <memset>
 8007b6c:	4620      	mov	r0, r4
 8007b6e:	bd70      	pop	{r4, r5, r6, pc}

08007b70 <__sfp_lock_acquire>:
 8007b70:	4801      	ldr	r0, [pc, #4]	; (8007b78 <__sfp_lock_acquire+0x8>)
 8007b72:	f000 bc26 	b.w	80083c2 <__retarget_lock_acquire_recursive>
 8007b76:	bf00      	nop
 8007b78:	2000036d 	.word	0x2000036d

08007b7c <__sfp_lock_release>:
 8007b7c:	4801      	ldr	r0, [pc, #4]	; (8007b84 <__sfp_lock_release+0x8>)
 8007b7e:	f000 bc21 	b.w	80083c4 <__retarget_lock_release_recursive>
 8007b82:	bf00      	nop
 8007b84:	2000036d 	.word	0x2000036d

08007b88 <__sinit_lock_acquire>:
 8007b88:	4801      	ldr	r0, [pc, #4]	; (8007b90 <__sinit_lock_acquire+0x8>)
 8007b8a:	f000 bc1a 	b.w	80083c2 <__retarget_lock_acquire_recursive>
 8007b8e:	bf00      	nop
 8007b90:	2000036e 	.word	0x2000036e

08007b94 <__sinit_lock_release>:
 8007b94:	4801      	ldr	r0, [pc, #4]	; (8007b9c <__sinit_lock_release+0x8>)
 8007b96:	f000 bc15 	b.w	80083c4 <__retarget_lock_release_recursive>
 8007b9a:	bf00      	nop
 8007b9c:	2000036e 	.word	0x2000036e

08007ba0 <__sinit>:
 8007ba0:	b510      	push	{r4, lr}
 8007ba2:	4604      	mov	r4, r0
 8007ba4:	f7ff fff0 	bl	8007b88 <__sinit_lock_acquire>
 8007ba8:	69a3      	ldr	r3, [r4, #24]
 8007baa:	b11b      	cbz	r3, 8007bb4 <__sinit+0x14>
 8007bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bb0:	f7ff bff0 	b.w	8007b94 <__sinit_lock_release>
 8007bb4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007bb8:	6523      	str	r3, [r4, #80]	; 0x50
 8007bba:	4b13      	ldr	r3, [pc, #76]	; (8007c08 <__sinit+0x68>)
 8007bbc:	4a13      	ldr	r2, [pc, #76]	; (8007c0c <__sinit+0x6c>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	62a2      	str	r2, [r4, #40]	; 0x28
 8007bc2:	42a3      	cmp	r3, r4
 8007bc4:	bf04      	itt	eq
 8007bc6:	2301      	moveq	r3, #1
 8007bc8:	61a3      	streq	r3, [r4, #24]
 8007bca:	4620      	mov	r0, r4
 8007bcc:	f000 f820 	bl	8007c10 <__sfp>
 8007bd0:	6060      	str	r0, [r4, #4]
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	f000 f81c 	bl	8007c10 <__sfp>
 8007bd8:	60a0      	str	r0, [r4, #8]
 8007bda:	4620      	mov	r0, r4
 8007bdc:	f000 f818 	bl	8007c10 <__sfp>
 8007be0:	2200      	movs	r2, #0
 8007be2:	60e0      	str	r0, [r4, #12]
 8007be4:	2104      	movs	r1, #4
 8007be6:	6860      	ldr	r0, [r4, #4]
 8007be8:	f7ff ff82 	bl	8007af0 <std>
 8007bec:	68a0      	ldr	r0, [r4, #8]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	2109      	movs	r1, #9
 8007bf2:	f7ff ff7d 	bl	8007af0 <std>
 8007bf6:	68e0      	ldr	r0, [r4, #12]
 8007bf8:	2202      	movs	r2, #2
 8007bfa:	2112      	movs	r1, #18
 8007bfc:	f7ff ff78 	bl	8007af0 <std>
 8007c00:	2301      	movs	r3, #1
 8007c02:	61a3      	str	r3, [r4, #24]
 8007c04:	e7d2      	b.n	8007bac <__sinit+0xc>
 8007c06:	bf00      	nop
 8007c08:	08009a74 	.word	0x08009a74
 8007c0c:	08007b39 	.word	0x08007b39

08007c10 <__sfp>:
 8007c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c12:	4607      	mov	r7, r0
 8007c14:	f7ff ffac 	bl	8007b70 <__sfp_lock_acquire>
 8007c18:	4b1e      	ldr	r3, [pc, #120]	; (8007c94 <__sfp+0x84>)
 8007c1a:	681e      	ldr	r6, [r3, #0]
 8007c1c:	69b3      	ldr	r3, [r6, #24]
 8007c1e:	b913      	cbnz	r3, 8007c26 <__sfp+0x16>
 8007c20:	4630      	mov	r0, r6
 8007c22:	f7ff ffbd 	bl	8007ba0 <__sinit>
 8007c26:	3648      	adds	r6, #72	; 0x48
 8007c28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007c2c:	3b01      	subs	r3, #1
 8007c2e:	d503      	bpl.n	8007c38 <__sfp+0x28>
 8007c30:	6833      	ldr	r3, [r6, #0]
 8007c32:	b30b      	cbz	r3, 8007c78 <__sfp+0x68>
 8007c34:	6836      	ldr	r6, [r6, #0]
 8007c36:	e7f7      	b.n	8007c28 <__sfp+0x18>
 8007c38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007c3c:	b9d5      	cbnz	r5, 8007c74 <__sfp+0x64>
 8007c3e:	4b16      	ldr	r3, [pc, #88]	; (8007c98 <__sfp+0x88>)
 8007c40:	60e3      	str	r3, [r4, #12]
 8007c42:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007c46:	6665      	str	r5, [r4, #100]	; 0x64
 8007c48:	f000 fbba 	bl	80083c0 <__retarget_lock_init_recursive>
 8007c4c:	f7ff ff96 	bl	8007b7c <__sfp_lock_release>
 8007c50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007c54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007c58:	6025      	str	r5, [r4, #0]
 8007c5a:	61a5      	str	r5, [r4, #24]
 8007c5c:	2208      	movs	r2, #8
 8007c5e:	4629      	mov	r1, r5
 8007c60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007c64:	f7fd f950 	bl	8004f08 <memset>
 8007c68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007c6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007c70:	4620      	mov	r0, r4
 8007c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c74:	3468      	adds	r4, #104	; 0x68
 8007c76:	e7d9      	b.n	8007c2c <__sfp+0x1c>
 8007c78:	2104      	movs	r1, #4
 8007c7a:	4638      	mov	r0, r7
 8007c7c:	f7ff ff62 	bl	8007b44 <__sfmoreglue>
 8007c80:	4604      	mov	r4, r0
 8007c82:	6030      	str	r0, [r6, #0]
 8007c84:	2800      	cmp	r0, #0
 8007c86:	d1d5      	bne.n	8007c34 <__sfp+0x24>
 8007c88:	f7ff ff78 	bl	8007b7c <__sfp_lock_release>
 8007c8c:	230c      	movs	r3, #12
 8007c8e:	603b      	str	r3, [r7, #0]
 8007c90:	e7ee      	b.n	8007c70 <__sfp+0x60>
 8007c92:	bf00      	nop
 8007c94:	08009a74 	.word	0x08009a74
 8007c98:	ffff0001 	.word	0xffff0001

08007c9c <_fwalk_reent>:
 8007c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ca0:	4606      	mov	r6, r0
 8007ca2:	4688      	mov	r8, r1
 8007ca4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007ca8:	2700      	movs	r7, #0
 8007caa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007cae:	f1b9 0901 	subs.w	r9, r9, #1
 8007cb2:	d505      	bpl.n	8007cc0 <_fwalk_reent+0x24>
 8007cb4:	6824      	ldr	r4, [r4, #0]
 8007cb6:	2c00      	cmp	r4, #0
 8007cb8:	d1f7      	bne.n	8007caa <_fwalk_reent+0xe>
 8007cba:	4638      	mov	r0, r7
 8007cbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cc0:	89ab      	ldrh	r3, [r5, #12]
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d907      	bls.n	8007cd6 <_fwalk_reent+0x3a>
 8007cc6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007cca:	3301      	adds	r3, #1
 8007ccc:	d003      	beq.n	8007cd6 <_fwalk_reent+0x3a>
 8007cce:	4629      	mov	r1, r5
 8007cd0:	4630      	mov	r0, r6
 8007cd2:	47c0      	blx	r8
 8007cd4:	4307      	orrs	r7, r0
 8007cd6:	3568      	adds	r5, #104	; 0x68
 8007cd8:	e7e9      	b.n	8007cae <_fwalk_reent+0x12>

08007cda <rshift>:
 8007cda:	6903      	ldr	r3, [r0, #16]
 8007cdc:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007ce0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ce4:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007ce8:	f100 0414 	add.w	r4, r0, #20
 8007cec:	dd45      	ble.n	8007d7a <rshift+0xa0>
 8007cee:	f011 011f 	ands.w	r1, r1, #31
 8007cf2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007cf6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007cfa:	d10c      	bne.n	8007d16 <rshift+0x3c>
 8007cfc:	f100 0710 	add.w	r7, r0, #16
 8007d00:	4629      	mov	r1, r5
 8007d02:	42b1      	cmp	r1, r6
 8007d04:	d334      	bcc.n	8007d70 <rshift+0x96>
 8007d06:	1a9b      	subs	r3, r3, r2
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	1eea      	subs	r2, r5, #3
 8007d0c:	4296      	cmp	r6, r2
 8007d0e:	bf38      	it	cc
 8007d10:	2300      	movcc	r3, #0
 8007d12:	4423      	add	r3, r4
 8007d14:	e015      	b.n	8007d42 <rshift+0x68>
 8007d16:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007d1a:	f1c1 0820 	rsb	r8, r1, #32
 8007d1e:	40cf      	lsrs	r7, r1
 8007d20:	f105 0e04 	add.w	lr, r5, #4
 8007d24:	46a1      	mov	r9, r4
 8007d26:	4576      	cmp	r6, lr
 8007d28:	46f4      	mov	ip, lr
 8007d2a:	d815      	bhi.n	8007d58 <rshift+0x7e>
 8007d2c:	1a9a      	subs	r2, r3, r2
 8007d2e:	0092      	lsls	r2, r2, #2
 8007d30:	3a04      	subs	r2, #4
 8007d32:	3501      	adds	r5, #1
 8007d34:	42ae      	cmp	r6, r5
 8007d36:	bf38      	it	cc
 8007d38:	2200      	movcc	r2, #0
 8007d3a:	18a3      	adds	r3, r4, r2
 8007d3c:	50a7      	str	r7, [r4, r2]
 8007d3e:	b107      	cbz	r7, 8007d42 <rshift+0x68>
 8007d40:	3304      	adds	r3, #4
 8007d42:	1b1a      	subs	r2, r3, r4
 8007d44:	42a3      	cmp	r3, r4
 8007d46:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007d4a:	bf08      	it	eq
 8007d4c:	2300      	moveq	r3, #0
 8007d4e:	6102      	str	r2, [r0, #16]
 8007d50:	bf08      	it	eq
 8007d52:	6143      	streq	r3, [r0, #20]
 8007d54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d58:	f8dc c000 	ldr.w	ip, [ip]
 8007d5c:	fa0c fc08 	lsl.w	ip, ip, r8
 8007d60:	ea4c 0707 	orr.w	r7, ip, r7
 8007d64:	f849 7b04 	str.w	r7, [r9], #4
 8007d68:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007d6c:	40cf      	lsrs	r7, r1
 8007d6e:	e7da      	b.n	8007d26 <rshift+0x4c>
 8007d70:	f851 cb04 	ldr.w	ip, [r1], #4
 8007d74:	f847 cf04 	str.w	ip, [r7, #4]!
 8007d78:	e7c3      	b.n	8007d02 <rshift+0x28>
 8007d7a:	4623      	mov	r3, r4
 8007d7c:	e7e1      	b.n	8007d42 <rshift+0x68>

08007d7e <__hexdig_fun>:
 8007d7e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007d82:	2b09      	cmp	r3, #9
 8007d84:	d802      	bhi.n	8007d8c <__hexdig_fun+0xe>
 8007d86:	3820      	subs	r0, #32
 8007d88:	b2c0      	uxtb	r0, r0
 8007d8a:	4770      	bx	lr
 8007d8c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007d90:	2b05      	cmp	r3, #5
 8007d92:	d801      	bhi.n	8007d98 <__hexdig_fun+0x1a>
 8007d94:	3847      	subs	r0, #71	; 0x47
 8007d96:	e7f7      	b.n	8007d88 <__hexdig_fun+0xa>
 8007d98:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007d9c:	2b05      	cmp	r3, #5
 8007d9e:	d801      	bhi.n	8007da4 <__hexdig_fun+0x26>
 8007da0:	3827      	subs	r0, #39	; 0x27
 8007da2:	e7f1      	b.n	8007d88 <__hexdig_fun+0xa>
 8007da4:	2000      	movs	r0, #0
 8007da6:	4770      	bx	lr

08007da8 <__gethex>:
 8007da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dac:	ed2d 8b02 	vpush	{d8}
 8007db0:	b089      	sub	sp, #36	; 0x24
 8007db2:	ee08 0a10 	vmov	s16, r0
 8007db6:	9304      	str	r3, [sp, #16]
 8007db8:	4bb4      	ldr	r3, [pc, #720]	; (800808c <__gethex+0x2e4>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	9301      	str	r3, [sp, #4]
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	468b      	mov	fp, r1
 8007dc2:	4690      	mov	r8, r2
 8007dc4:	f7f8 fa0c 	bl	80001e0 <strlen>
 8007dc8:	9b01      	ldr	r3, [sp, #4]
 8007dca:	f8db 2000 	ldr.w	r2, [fp]
 8007dce:	4403      	add	r3, r0
 8007dd0:	4682      	mov	sl, r0
 8007dd2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007dd6:	9305      	str	r3, [sp, #20]
 8007dd8:	1c93      	adds	r3, r2, #2
 8007dda:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007dde:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007de2:	32fe      	adds	r2, #254	; 0xfe
 8007de4:	18d1      	adds	r1, r2, r3
 8007de6:	461f      	mov	r7, r3
 8007de8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007dec:	9100      	str	r1, [sp, #0]
 8007dee:	2830      	cmp	r0, #48	; 0x30
 8007df0:	d0f8      	beq.n	8007de4 <__gethex+0x3c>
 8007df2:	f7ff ffc4 	bl	8007d7e <__hexdig_fun>
 8007df6:	4604      	mov	r4, r0
 8007df8:	2800      	cmp	r0, #0
 8007dfa:	d13a      	bne.n	8007e72 <__gethex+0xca>
 8007dfc:	9901      	ldr	r1, [sp, #4]
 8007dfe:	4652      	mov	r2, sl
 8007e00:	4638      	mov	r0, r7
 8007e02:	f001 fc70 	bl	80096e6 <strncmp>
 8007e06:	4605      	mov	r5, r0
 8007e08:	2800      	cmp	r0, #0
 8007e0a:	d168      	bne.n	8007ede <__gethex+0x136>
 8007e0c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007e10:	eb07 060a 	add.w	r6, r7, sl
 8007e14:	f7ff ffb3 	bl	8007d7e <__hexdig_fun>
 8007e18:	2800      	cmp	r0, #0
 8007e1a:	d062      	beq.n	8007ee2 <__gethex+0x13a>
 8007e1c:	4633      	mov	r3, r6
 8007e1e:	7818      	ldrb	r0, [r3, #0]
 8007e20:	2830      	cmp	r0, #48	; 0x30
 8007e22:	461f      	mov	r7, r3
 8007e24:	f103 0301 	add.w	r3, r3, #1
 8007e28:	d0f9      	beq.n	8007e1e <__gethex+0x76>
 8007e2a:	f7ff ffa8 	bl	8007d7e <__hexdig_fun>
 8007e2e:	2301      	movs	r3, #1
 8007e30:	fab0 f480 	clz	r4, r0
 8007e34:	0964      	lsrs	r4, r4, #5
 8007e36:	4635      	mov	r5, r6
 8007e38:	9300      	str	r3, [sp, #0]
 8007e3a:	463a      	mov	r2, r7
 8007e3c:	4616      	mov	r6, r2
 8007e3e:	3201      	adds	r2, #1
 8007e40:	7830      	ldrb	r0, [r6, #0]
 8007e42:	f7ff ff9c 	bl	8007d7e <__hexdig_fun>
 8007e46:	2800      	cmp	r0, #0
 8007e48:	d1f8      	bne.n	8007e3c <__gethex+0x94>
 8007e4a:	9901      	ldr	r1, [sp, #4]
 8007e4c:	4652      	mov	r2, sl
 8007e4e:	4630      	mov	r0, r6
 8007e50:	f001 fc49 	bl	80096e6 <strncmp>
 8007e54:	b980      	cbnz	r0, 8007e78 <__gethex+0xd0>
 8007e56:	b94d      	cbnz	r5, 8007e6c <__gethex+0xc4>
 8007e58:	eb06 050a 	add.w	r5, r6, sl
 8007e5c:	462a      	mov	r2, r5
 8007e5e:	4616      	mov	r6, r2
 8007e60:	3201      	adds	r2, #1
 8007e62:	7830      	ldrb	r0, [r6, #0]
 8007e64:	f7ff ff8b 	bl	8007d7e <__hexdig_fun>
 8007e68:	2800      	cmp	r0, #0
 8007e6a:	d1f8      	bne.n	8007e5e <__gethex+0xb6>
 8007e6c:	1bad      	subs	r5, r5, r6
 8007e6e:	00ad      	lsls	r5, r5, #2
 8007e70:	e004      	b.n	8007e7c <__gethex+0xd4>
 8007e72:	2400      	movs	r4, #0
 8007e74:	4625      	mov	r5, r4
 8007e76:	e7e0      	b.n	8007e3a <__gethex+0x92>
 8007e78:	2d00      	cmp	r5, #0
 8007e7a:	d1f7      	bne.n	8007e6c <__gethex+0xc4>
 8007e7c:	7833      	ldrb	r3, [r6, #0]
 8007e7e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007e82:	2b50      	cmp	r3, #80	; 0x50
 8007e84:	d13b      	bne.n	8007efe <__gethex+0x156>
 8007e86:	7873      	ldrb	r3, [r6, #1]
 8007e88:	2b2b      	cmp	r3, #43	; 0x2b
 8007e8a:	d02c      	beq.n	8007ee6 <__gethex+0x13e>
 8007e8c:	2b2d      	cmp	r3, #45	; 0x2d
 8007e8e:	d02e      	beq.n	8007eee <__gethex+0x146>
 8007e90:	1c71      	adds	r1, r6, #1
 8007e92:	f04f 0900 	mov.w	r9, #0
 8007e96:	7808      	ldrb	r0, [r1, #0]
 8007e98:	f7ff ff71 	bl	8007d7e <__hexdig_fun>
 8007e9c:	1e43      	subs	r3, r0, #1
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	2b18      	cmp	r3, #24
 8007ea2:	d82c      	bhi.n	8007efe <__gethex+0x156>
 8007ea4:	f1a0 0210 	sub.w	r2, r0, #16
 8007ea8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007eac:	f7ff ff67 	bl	8007d7e <__hexdig_fun>
 8007eb0:	1e43      	subs	r3, r0, #1
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	2b18      	cmp	r3, #24
 8007eb6:	d91d      	bls.n	8007ef4 <__gethex+0x14c>
 8007eb8:	f1b9 0f00 	cmp.w	r9, #0
 8007ebc:	d000      	beq.n	8007ec0 <__gethex+0x118>
 8007ebe:	4252      	negs	r2, r2
 8007ec0:	4415      	add	r5, r2
 8007ec2:	f8cb 1000 	str.w	r1, [fp]
 8007ec6:	b1e4      	cbz	r4, 8007f02 <__gethex+0x15a>
 8007ec8:	9b00      	ldr	r3, [sp, #0]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	bf14      	ite	ne
 8007ece:	2700      	movne	r7, #0
 8007ed0:	2706      	moveq	r7, #6
 8007ed2:	4638      	mov	r0, r7
 8007ed4:	b009      	add	sp, #36	; 0x24
 8007ed6:	ecbd 8b02 	vpop	{d8}
 8007eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ede:	463e      	mov	r6, r7
 8007ee0:	4625      	mov	r5, r4
 8007ee2:	2401      	movs	r4, #1
 8007ee4:	e7ca      	b.n	8007e7c <__gethex+0xd4>
 8007ee6:	f04f 0900 	mov.w	r9, #0
 8007eea:	1cb1      	adds	r1, r6, #2
 8007eec:	e7d3      	b.n	8007e96 <__gethex+0xee>
 8007eee:	f04f 0901 	mov.w	r9, #1
 8007ef2:	e7fa      	b.n	8007eea <__gethex+0x142>
 8007ef4:	230a      	movs	r3, #10
 8007ef6:	fb03 0202 	mla	r2, r3, r2, r0
 8007efa:	3a10      	subs	r2, #16
 8007efc:	e7d4      	b.n	8007ea8 <__gethex+0x100>
 8007efe:	4631      	mov	r1, r6
 8007f00:	e7df      	b.n	8007ec2 <__gethex+0x11a>
 8007f02:	1bf3      	subs	r3, r6, r7
 8007f04:	3b01      	subs	r3, #1
 8007f06:	4621      	mov	r1, r4
 8007f08:	2b07      	cmp	r3, #7
 8007f0a:	dc0b      	bgt.n	8007f24 <__gethex+0x17c>
 8007f0c:	ee18 0a10 	vmov	r0, s16
 8007f10:	f000 fad8 	bl	80084c4 <_Balloc>
 8007f14:	4604      	mov	r4, r0
 8007f16:	b940      	cbnz	r0, 8007f2a <__gethex+0x182>
 8007f18:	4b5d      	ldr	r3, [pc, #372]	; (8008090 <__gethex+0x2e8>)
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	21de      	movs	r1, #222	; 0xde
 8007f1e:	485d      	ldr	r0, [pc, #372]	; (8008094 <__gethex+0x2ec>)
 8007f20:	f001 fc14 	bl	800974c <__assert_func>
 8007f24:	3101      	adds	r1, #1
 8007f26:	105b      	asrs	r3, r3, #1
 8007f28:	e7ee      	b.n	8007f08 <__gethex+0x160>
 8007f2a:	f100 0914 	add.w	r9, r0, #20
 8007f2e:	f04f 0b00 	mov.w	fp, #0
 8007f32:	f1ca 0301 	rsb	r3, sl, #1
 8007f36:	f8cd 9008 	str.w	r9, [sp, #8]
 8007f3a:	f8cd b000 	str.w	fp, [sp]
 8007f3e:	9306      	str	r3, [sp, #24]
 8007f40:	42b7      	cmp	r7, r6
 8007f42:	d340      	bcc.n	8007fc6 <__gethex+0x21e>
 8007f44:	9802      	ldr	r0, [sp, #8]
 8007f46:	9b00      	ldr	r3, [sp, #0]
 8007f48:	f840 3b04 	str.w	r3, [r0], #4
 8007f4c:	eba0 0009 	sub.w	r0, r0, r9
 8007f50:	1080      	asrs	r0, r0, #2
 8007f52:	0146      	lsls	r6, r0, #5
 8007f54:	6120      	str	r0, [r4, #16]
 8007f56:	4618      	mov	r0, r3
 8007f58:	f000 fba6 	bl	80086a8 <__hi0bits>
 8007f5c:	1a30      	subs	r0, r6, r0
 8007f5e:	f8d8 6000 	ldr.w	r6, [r8]
 8007f62:	42b0      	cmp	r0, r6
 8007f64:	dd63      	ble.n	800802e <__gethex+0x286>
 8007f66:	1b87      	subs	r7, r0, r6
 8007f68:	4639      	mov	r1, r7
 8007f6a:	4620      	mov	r0, r4
 8007f6c:	f000 ff4a 	bl	8008e04 <__any_on>
 8007f70:	4682      	mov	sl, r0
 8007f72:	b1a8      	cbz	r0, 8007fa0 <__gethex+0x1f8>
 8007f74:	1e7b      	subs	r3, r7, #1
 8007f76:	1159      	asrs	r1, r3, #5
 8007f78:	f003 021f 	and.w	r2, r3, #31
 8007f7c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007f80:	f04f 0a01 	mov.w	sl, #1
 8007f84:	fa0a f202 	lsl.w	r2, sl, r2
 8007f88:	420a      	tst	r2, r1
 8007f8a:	d009      	beq.n	8007fa0 <__gethex+0x1f8>
 8007f8c:	4553      	cmp	r3, sl
 8007f8e:	dd05      	ble.n	8007f9c <__gethex+0x1f4>
 8007f90:	1eb9      	subs	r1, r7, #2
 8007f92:	4620      	mov	r0, r4
 8007f94:	f000 ff36 	bl	8008e04 <__any_on>
 8007f98:	2800      	cmp	r0, #0
 8007f9a:	d145      	bne.n	8008028 <__gethex+0x280>
 8007f9c:	f04f 0a02 	mov.w	sl, #2
 8007fa0:	4639      	mov	r1, r7
 8007fa2:	4620      	mov	r0, r4
 8007fa4:	f7ff fe99 	bl	8007cda <rshift>
 8007fa8:	443d      	add	r5, r7
 8007faa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007fae:	42ab      	cmp	r3, r5
 8007fb0:	da4c      	bge.n	800804c <__gethex+0x2a4>
 8007fb2:	ee18 0a10 	vmov	r0, s16
 8007fb6:	4621      	mov	r1, r4
 8007fb8:	f000 fac4 	bl	8008544 <_Bfree>
 8007fbc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	6013      	str	r3, [r2, #0]
 8007fc2:	27a3      	movs	r7, #163	; 0xa3
 8007fc4:	e785      	b.n	8007ed2 <__gethex+0x12a>
 8007fc6:	1e73      	subs	r3, r6, #1
 8007fc8:	9a05      	ldr	r2, [sp, #20]
 8007fca:	9303      	str	r3, [sp, #12]
 8007fcc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d019      	beq.n	8008008 <__gethex+0x260>
 8007fd4:	f1bb 0f20 	cmp.w	fp, #32
 8007fd8:	d107      	bne.n	8007fea <__gethex+0x242>
 8007fda:	9b02      	ldr	r3, [sp, #8]
 8007fdc:	9a00      	ldr	r2, [sp, #0]
 8007fde:	f843 2b04 	str.w	r2, [r3], #4
 8007fe2:	9302      	str	r3, [sp, #8]
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	9300      	str	r3, [sp, #0]
 8007fe8:	469b      	mov	fp, r3
 8007fea:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007fee:	f7ff fec6 	bl	8007d7e <__hexdig_fun>
 8007ff2:	9b00      	ldr	r3, [sp, #0]
 8007ff4:	f000 000f 	and.w	r0, r0, #15
 8007ff8:	fa00 f00b 	lsl.w	r0, r0, fp
 8007ffc:	4303      	orrs	r3, r0
 8007ffe:	9300      	str	r3, [sp, #0]
 8008000:	f10b 0b04 	add.w	fp, fp, #4
 8008004:	9b03      	ldr	r3, [sp, #12]
 8008006:	e00d      	b.n	8008024 <__gethex+0x27c>
 8008008:	9b03      	ldr	r3, [sp, #12]
 800800a:	9a06      	ldr	r2, [sp, #24]
 800800c:	4413      	add	r3, r2
 800800e:	42bb      	cmp	r3, r7
 8008010:	d3e0      	bcc.n	8007fd4 <__gethex+0x22c>
 8008012:	4618      	mov	r0, r3
 8008014:	9901      	ldr	r1, [sp, #4]
 8008016:	9307      	str	r3, [sp, #28]
 8008018:	4652      	mov	r2, sl
 800801a:	f001 fb64 	bl	80096e6 <strncmp>
 800801e:	9b07      	ldr	r3, [sp, #28]
 8008020:	2800      	cmp	r0, #0
 8008022:	d1d7      	bne.n	8007fd4 <__gethex+0x22c>
 8008024:	461e      	mov	r6, r3
 8008026:	e78b      	b.n	8007f40 <__gethex+0x198>
 8008028:	f04f 0a03 	mov.w	sl, #3
 800802c:	e7b8      	b.n	8007fa0 <__gethex+0x1f8>
 800802e:	da0a      	bge.n	8008046 <__gethex+0x29e>
 8008030:	1a37      	subs	r7, r6, r0
 8008032:	4621      	mov	r1, r4
 8008034:	ee18 0a10 	vmov	r0, s16
 8008038:	463a      	mov	r2, r7
 800803a:	f000 fc9f 	bl	800897c <__lshift>
 800803e:	1bed      	subs	r5, r5, r7
 8008040:	4604      	mov	r4, r0
 8008042:	f100 0914 	add.w	r9, r0, #20
 8008046:	f04f 0a00 	mov.w	sl, #0
 800804a:	e7ae      	b.n	8007faa <__gethex+0x202>
 800804c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008050:	42a8      	cmp	r0, r5
 8008052:	dd72      	ble.n	800813a <__gethex+0x392>
 8008054:	1b45      	subs	r5, r0, r5
 8008056:	42ae      	cmp	r6, r5
 8008058:	dc36      	bgt.n	80080c8 <__gethex+0x320>
 800805a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800805e:	2b02      	cmp	r3, #2
 8008060:	d02a      	beq.n	80080b8 <__gethex+0x310>
 8008062:	2b03      	cmp	r3, #3
 8008064:	d02c      	beq.n	80080c0 <__gethex+0x318>
 8008066:	2b01      	cmp	r3, #1
 8008068:	d11c      	bne.n	80080a4 <__gethex+0x2fc>
 800806a:	42ae      	cmp	r6, r5
 800806c:	d11a      	bne.n	80080a4 <__gethex+0x2fc>
 800806e:	2e01      	cmp	r6, #1
 8008070:	d112      	bne.n	8008098 <__gethex+0x2f0>
 8008072:	9a04      	ldr	r2, [sp, #16]
 8008074:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008078:	6013      	str	r3, [r2, #0]
 800807a:	2301      	movs	r3, #1
 800807c:	6123      	str	r3, [r4, #16]
 800807e:	f8c9 3000 	str.w	r3, [r9]
 8008082:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008084:	2762      	movs	r7, #98	; 0x62
 8008086:	601c      	str	r4, [r3, #0]
 8008088:	e723      	b.n	8007ed2 <__gethex+0x12a>
 800808a:	bf00      	nop
 800808c:	08009d64 	.word	0x08009d64
 8008090:	08009c88 	.word	0x08009c88
 8008094:	08009cfc 	.word	0x08009cfc
 8008098:	1e71      	subs	r1, r6, #1
 800809a:	4620      	mov	r0, r4
 800809c:	f000 feb2 	bl	8008e04 <__any_on>
 80080a0:	2800      	cmp	r0, #0
 80080a2:	d1e6      	bne.n	8008072 <__gethex+0x2ca>
 80080a4:	ee18 0a10 	vmov	r0, s16
 80080a8:	4621      	mov	r1, r4
 80080aa:	f000 fa4b 	bl	8008544 <_Bfree>
 80080ae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80080b0:	2300      	movs	r3, #0
 80080b2:	6013      	str	r3, [r2, #0]
 80080b4:	2750      	movs	r7, #80	; 0x50
 80080b6:	e70c      	b.n	8007ed2 <__gethex+0x12a>
 80080b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d1f2      	bne.n	80080a4 <__gethex+0x2fc>
 80080be:	e7d8      	b.n	8008072 <__gethex+0x2ca>
 80080c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d1d5      	bne.n	8008072 <__gethex+0x2ca>
 80080c6:	e7ed      	b.n	80080a4 <__gethex+0x2fc>
 80080c8:	1e6f      	subs	r7, r5, #1
 80080ca:	f1ba 0f00 	cmp.w	sl, #0
 80080ce:	d131      	bne.n	8008134 <__gethex+0x38c>
 80080d0:	b127      	cbz	r7, 80080dc <__gethex+0x334>
 80080d2:	4639      	mov	r1, r7
 80080d4:	4620      	mov	r0, r4
 80080d6:	f000 fe95 	bl	8008e04 <__any_on>
 80080da:	4682      	mov	sl, r0
 80080dc:	117b      	asrs	r3, r7, #5
 80080de:	2101      	movs	r1, #1
 80080e0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80080e4:	f007 071f 	and.w	r7, r7, #31
 80080e8:	fa01 f707 	lsl.w	r7, r1, r7
 80080ec:	421f      	tst	r7, r3
 80080ee:	4629      	mov	r1, r5
 80080f0:	4620      	mov	r0, r4
 80080f2:	bf18      	it	ne
 80080f4:	f04a 0a02 	orrne.w	sl, sl, #2
 80080f8:	1b76      	subs	r6, r6, r5
 80080fa:	f7ff fdee 	bl	8007cda <rshift>
 80080fe:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008102:	2702      	movs	r7, #2
 8008104:	f1ba 0f00 	cmp.w	sl, #0
 8008108:	d048      	beq.n	800819c <__gethex+0x3f4>
 800810a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800810e:	2b02      	cmp	r3, #2
 8008110:	d015      	beq.n	800813e <__gethex+0x396>
 8008112:	2b03      	cmp	r3, #3
 8008114:	d017      	beq.n	8008146 <__gethex+0x39e>
 8008116:	2b01      	cmp	r3, #1
 8008118:	d109      	bne.n	800812e <__gethex+0x386>
 800811a:	f01a 0f02 	tst.w	sl, #2
 800811e:	d006      	beq.n	800812e <__gethex+0x386>
 8008120:	f8d9 0000 	ldr.w	r0, [r9]
 8008124:	ea4a 0a00 	orr.w	sl, sl, r0
 8008128:	f01a 0f01 	tst.w	sl, #1
 800812c:	d10e      	bne.n	800814c <__gethex+0x3a4>
 800812e:	f047 0710 	orr.w	r7, r7, #16
 8008132:	e033      	b.n	800819c <__gethex+0x3f4>
 8008134:	f04f 0a01 	mov.w	sl, #1
 8008138:	e7d0      	b.n	80080dc <__gethex+0x334>
 800813a:	2701      	movs	r7, #1
 800813c:	e7e2      	b.n	8008104 <__gethex+0x35c>
 800813e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008140:	f1c3 0301 	rsb	r3, r3, #1
 8008144:	9315      	str	r3, [sp, #84]	; 0x54
 8008146:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008148:	2b00      	cmp	r3, #0
 800814a:	d0f0      	beq.n	800812e <__gethex+0x386>
 800814c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008150:	f104 0314 	add.w	r3, r4, #20
 8008154:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008158:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800815c:	f04f 0c00 	mov.w	ip, #0
 8008160:	4618      	mov	r0, r3
 8008162:	f853 2b04 	ldr.w	r2, [r3], #4
 8008166:	f1b2 3fff 	cmp.w	r2, #4294967295
 800816a:	d01c      	beq.n	80081a6 <__gethex+0x3fe>
 800816c:	3201      	adds	r2, #1
 800816e:	6002      	str	r2, [r0, #0]
 8008170:	2f02      	cmp	r7, #2
 8008172:	f104 0314 	add.w	r3, r4, #20
 8008176:	d13f      	bne.n	80081f8 <__gethex+0x450>
 8008178:	f8d8 2000 	ldr.w	r2, [r8]
 800817c:	3a01      	subs	r2, #1
 800817e:	42b2      	cmp	r2, r6
 8008180:	d10a      	bne.n	8008198 <__gethex+0x3f0>
 8008182:	1171      	asrs	r1, r6, #5
 8008184:	2201      	movs	r2, #1
 8008186:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800818a:	f006 061f 	and.w	r6, r6, #31
 800818e:	fa02 f606 	lsl.w	r6, r2, r6
 8008192:	421e      	tst	r6, r3
 8008194:	bf18      	it	ne
 8008196:	4617      	movne	r7, r2
 8008198:	f047 0720 	orr.w	r7, r7, #32
 800819c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800819e:	601c      	str	r4, [r3, #0]
 80081a0:	9b04      	ldr	r3, [sp, #16]
 80081a2:	601d      	str	r5, [r3, #0]
 80081a4:	e695      	b.n	8007ed2 <__gethex+0x12a>
 80081a6:	4299      	cmp	r1, r3
 80081a8:	f843 cc04 	str.w	ip, [r3, #-4]
 80081ac:	d8d8      	bhi.n	8008160 <__gethex+0x3b8>
 80081ae:	68a3      	ldr	r3, [r4, #8]
 80081b0:	459b      	cmp	fp, r3
 80081b2:	db19      	blt.n	80081e8 <__gethex+0x440>
 80081b4:	6861      	ldr	r1, [r4, #4]
 80081b6:	ee18 0a10 	vmov	r0, s16
 80081ba:	3101      	adds	r1, #1
 80081bc:	f000 f982 	bl	80084c4 <_Balloc>
 80081c0:	4681      	mov	r9, r0
 80081c2:	b918      	cbnz	r0, 80081cc <__gethex+0x424>
 80081c4:	4b1a      	ldr	r3, [pc, #104]	; (8008230 <__gethex+0x488>)
 80081c6:	4602      	mov	r2, r0
 80081c8:	2184      	movs	r1, #132	; 0x84
 80081ca:	e6a8      	b.n	8007f1e <__gethex+0x176>
 80081cc:	6922      	ldr	r2, [r4, #16]
 80081ce:	3202      	adds	r2, #2
 80081d0:	f104 010c 	add.w	r1, r4, #12
 80081d4:	0092      	lsls	r2, r2, #2
 80081d6:	300c      	adds	r0, #12
 80081d8:	f7fc fe88 	bl	8004eec <memcpy>
 80081dc:	4621      	mov	r1, r4
 80081de:	ee18 0a10 	vmov	r0, s16
 80081e2:	f000 f9af 	bl	8008544 <_Bfree>
 80081e6:	464c      	mov	r4, r9
 80081e8:	6923      	ldr	r3, [r4, #16]
 80081ea:	1c5a      	adds	r2, r3, #1
 80081ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80081f0:	6122      	str	r2, [r4, #16]
 80081f2:	2201      	movs	r2, #1
 80081f4:	615a      	str	r2, [r3, #20]
 80081f6:	e7bb      	b.n	8008170 <__gethex+0x3c8>
 80081f8:	6922      	ldr	r2, [r4, #16]
 80081fa:	455a      	cmp	r2, fp
 80081fc:	dd0b      	ble.n	8008216 <__gethex+0x46e>
 80081fe:	2101      	movs	r1, #1
 8008200:	4620      	mov	r0, r4
 8008202:	f7ff fd6a 	bl	8007cda <rshift>
 8008206:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800820a:	3501      	adds	r5, #1
 800820c:	42ab      	cmp	r3, r5
 800820e:	f6ff aed0 	blt.w	8007fb2 <__gethex+0x20a>
 8008212:	2701      	movs	r7, #1
 8008214:	e7c0      	b.n	8008198 <__gethex+0x3f0>
 8008216:	f016 061f 	ands.w	r6, r6, #31
 800821a:	d0fa      	beq.n	8008212 <__gethex+0x46a>
 800821c:	4453      	add	r3, sl
 800821e:	f1c6 0620 	rsb	r6, r6, #32
 8008222:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008226:	f000 fa3f 	bl	80086a8 <__hi0bits>
 800822a:	42b0      	cmp	r0, r6
 800822c:	dbe7      	blt.n	80081fe <__gethex+0x456>
 800822e:	e7f0      	b.n	8008212 <__gethex+0x46a>
 8008230:	08009c88 	.word	0x08009c88

08008234 <L_shift>:
 8008234:	f1c2 0208 	rsb	r2, r2, #8
 8008238:	0092      	lsls	r2, r2, #2
 800823a:	b570      	push	{r4, r5, r6, lr}
 800823c:	f1c2 0620 	rsb	r6, r2, #32
 8008240:	6843      	ldr	r3, [r0, #4]
 8008242:	6804      	ldr	r4, [r0, #0]
 8008244:	fa03 f506 	lsl.w	r5, r3, r6
 8008248:	432c      	orrs	r4, r5
 800824a:	40d3      	lsrs	r3, r2
 800824c:	6004      	str	r4, [r0, #0]
 800824e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008252:	4288      	cmp	r0, r1
 8008254:	d3f4      	bcc.n	8008240 <L_shift+0xc>
 8008256:	bd70      	pop	{r4, r5, r6, pc}

08008258 <__match>:
 8008258:	b530      	push	{r4, r5, lr}
 800825a:	6803      	ldr	r3, [r0, #0]
 800825c:	3301      	adds	r3, #1
 800825e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008262:	b914      	cbnz	r4, 800826a <__match+0x12>
 8008264:	6003      	str	r3, [r0, #0]
 8008266:	2001      	movs	r0, #1
 8008268:	bd30      	pop	{r4, r5, pc}
 800826a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800826e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008272:	2d19      	cmp	r5, #25
 8008274:	bf98      	it	ls
 8008276:	3220      	addls	r2, #32
 8008278:	42a2      	cmp	r2, r4
 800827a:	d0f0      	beq.n	800825e <__match+0x6>
 800827c:	2000      	movs	r0, #0
 800827e:	e7f3      	b.n	8008268 <__match+0x10>

08008280 <__hexnan>:
 8008280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008284:	680b      	ldr	r3, [r1, #0]
 8008286:	115e      	asrs	r6, r3, #5
 8008288:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800828c:	f013 031f 	ands.w	r3, r3, #31
 8008290:	b087      	sub	sp, #28
 8008292:	bf18      	it	ne
 8008294:	3604      	addne	r6, #4
 8008296:	2500      	movs	r5, #0
 8008298:	1f37      	subs	r7, r6, #4
 800829a:	4690      	mov	r8, r2
 800829c:	6802      	ldr	r2, [r0, #0]
 800829e:	9301      	str	r3, [sp, #4]
 80082a0:	4682      	mov	sl, r0
 80082a2:	f846 5c04 	str.w	r5, [r6, #-4]
 80082a6:	46b9      	mov	r9, r7
 80082a8:	463c      	mov	r4, r7
 80082aa:	9502      	str	r5, [sp, #8]
 80082ac:	46ab      	mov	fp, r5
 80082ae:	7851      	ldrb	r1, [r2, #1]
 80082b0:	1c53      	adds	r3, r2, #1
 80082b2:	9303      	str	r3, [sp, #12]
 80082b4:	b341      	cbz	r1, 8008308 <__hexnan+0x88>
 80082b6:	4608      	mov	r0, r1
 80082b8:	9205      	str	r2, [sp, #20]
 80082ba:	9104      	str	r1, [sp, #16]
 80082bc:	f7ff fd5f 	bl	8007d7e <__hexdig_fun>
 80082c0:	2800      	cmp	r0, #0
 80082c2:	d14f      	bne.n	8008364 <__hexnan+0xe4>
 80082c4:	9904      	ldr	r1, [sp, #16]
 80082c6:	9a05      	ldr	r2, [sp, #20]
 80082c8:	2920      	cmp	r1, #32
 80082ca:	d818      	bhi.n	80082fe <__hexnan+0x7e>
 80082cc:	9b02      	ldr	r3, [sp, #8]
 80082ce:	459b      	cmp	fp, r3
 80082d0:	dd13      	ble.n	80082fa <__hexnan+0x7a>
 80082d2:	454c      	cmp	r4, r9
 80082d4:	d206      	bcs.n	80082e4 <__hexnan+0x64>
 80082d6:	2d07      	cmp	r5, #7
 80082d8:	dc04      	bgt.n	80082e4 <__hexnan+0x64>
 80082da:	462a      	mov	r2, r5
 80082dc:	4649      	mov	r1, r9
 80082de:	4620      	mov	r0, r4
 80082e0:	f7ff ffa8 	bl	8008234 <L_shift>
 80082e4:	4544      	cmp	r4, r8
 80082e6:	d950      	bls.n	800838a <__hexnan+0x10a>
 80082e8:	2300      	movs	r3, #0
 80082ea:	f1a4 0904 	sub.w	r9, r4, #4
 80082ee:	f844 3c04 	str.w	r3, [r4, #-4]
 80082f2:	f8cd b008 	str.w	fp, [sp, #8]
 80082f6:	464c      	mov	r4, r9
 80082f8:	461d      	mov	r5, r3
 80082fa:	9a03      	ldr	r2, [sp, #12]
 80082fc:	e7d7      	b.n	80082ae <__hexnan+0x2e>
 80082fe:	2929      	cmp	r1, #41	; 0x29
 8008300:	d156      	bne.n	80083b0 <__hexnan+0x130>
 8008302:	3202      	adds	r2, #2
 8008304:	f8ca 2000 	str.w	r2, [sl]
 8008308:	f1bb 0f00 	cmp.w	fp, #0
 800830c:	d050      	beq.n	80083b0 <__hexnan+0x130>
 800830e:	454c      	cmp	r4, r9
 8008310:	d206      	bcs.n	8008320 <__hexnan+0xa0>
 8008312:	2d07      	cmp	r5, #7
 8008314:	dc04      	bgt.n	8008320 <__hexnan+0xa0>
 8008316:	462a      	mov	r2, r5
 8008318:	4649      	mov	r1, r9
 800831a:	4620      	mov	r0, r4
 800831c:	f7ff ff8a 	bl	8008234 <L_shift>
 8008320:	4544      	cmp	r4, r8
 8008322:	d934      	bls.n	800838e <__hexnan+0x10e>
 8008324:	f1a8 0204 	sub.w	r2, r8, #4
 8008328:	4623      	mov	r3, r4
 800832a:	f853 1b04 	ldr.w	r1, [r3], #4
 800832e:	f842 1f04 	str.w	r1, [r2, #4]!
 8008332:	429f      	cmp	r7, r3
 8008334:	d2f9      	bcs.n	800832a <__hexnan+0xaa>
 8008336:	1b3b      	subs	r3, r7, r4
 8008338:	f023 0303 	bic.w	r3, r3, #3
 800833c:	3304      	adds	r3, #4
 800833e:	3401      	adds	r4, #1
 8008340:	3e03      	subs	r6, #3
 8008342:	42b4      	cmp	r4, r6
 8008344:	bf88      	it	hi
 8008346:	2304      	movhi	r3, #4
 8008348:	4443      	add	r3, r8
 800834a:	2200      	movs	r2, #0
 800834c:	f843 2b04 	str.w	r2, [r3], #4
 8008350:	429f      	cmp	r7, r3
 8008352:	d2fb      	bcs.n	800834c <__hexnan+0xcc>
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	b91b      	cbnz	r3, 8008360 <__hexnan+0xe0>
 8008358:	4547      	cmp	r7, r8
 800835a:	d127      	bne.n	80083ac <__hexnan+0x12c>
 800835c:	2301      	movs	r3, #1
 800835e:	603b      	str	r3, [r7, #0]
 8008360:	2005      	movs	r0, #5
 8008362:	e026      	b.n	80083b2 <__hexnan+0x132>
 8008364:	3501      	adds	r5, #1
 8008366:	2d08      	cmp	r5, #8
 8008368:	f10b 0b01 	add.w	fp, fp, #1
 800836c:	dd06      	ble.n	800837c <__hexnan+0xfc>
 800836e:	4544      	cmp	r4, r8
 8008370:	d9c3      	bls.n	80082fa <__hexnan+0x7a>
 8008372:	2300      	movs	r3, #0
 8008374:	f844 3c04 	str.w	r3, [r4, #-4]
 8008378:	2501      	movs	r5, #1
 800837a:	3c04      	subs	r4, #4
 800837c:	6822      	ldr	r2, [r4, #0]
 800837e:	f000 000f 	and.w	r0, r0, #15
 8008382:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008386:	6022      	str	r2, [r4, #0]
 8008388:	e7b7      	b.n	80082fa <__hexnan+0x7a>
 800838a:	2508      	movs	r5, #8
 800838c:	e7b5      	b.n	80082fa <__hexnan+0x7a>
 800838e:	9b01      	ldr	r3, [sp, #4]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d0df      	beq.n	8008354 <__hexnan+0xd4>
 8008394:	f04f 32ff 	mov.w	r2, #4294967295
 8008398:	f1c3 0320 	rsb	r3, r3, #32
 800839c:	fa22 f303 	lsr.w	r3, r2, r3
 80083a0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80083a4:	401a      	ands	r2, r3
 80083a6:	f846 2c04 	str.w	r2, [r6, #-4]
 80083aa:	e7d3      	b.n	8008354 <__hexnan+0xd4>
 80083ac:	3f04      	subs	r7, #4
 80083ae:	e7d1      	b.n	8008354 <__hexnan+0xd4>
 80083b0:	2004      	movs	r0, #4
 80083b2:	b007      	add	sp, #28
 80083b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080083b8 <_localeconv_r>:
 80083b8:	4800      	ldr	r0, [pc, #0]	; (80083bc <_localeconv_r+0x4>)
 80083ba:	4770      	bx	lr
 80083bc:	2000017c 	.word	0x2000017c

080083c0 <__retarget_lock_init_recursive>:
 80083c0:	4770      	bx	lr

080083c2 <__retarget_lock_acquire_recursive>:
 80083c2:	4770      	bx	lr

080083c4 <__retarget_lock_release_recursive>:
 80083c4:	4770      	bx	lr

080083c6 <__swhatbuf_r>:
 80083c6:	b570      	push	{r4, r5, r6, lr}
 80083c8:	460e      	mov	r6, r1
 80083ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083ce:	2900      	cmp	r1, #0
 80083d0:	b096      	sub	sp, #88	; 0x58
 80083d2:	4614      	mov	r4, r2
 80083d4:	461d      	mov	r5, r3
 80083d6:	da08      	bge.n	80083ea <__swhatbuf_r+0x24>
 80083d8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80083dc:	2200      	movs	r2, #0
 80083de:	602a      	str	r2, [r5, #0]
 80083e0:	061a      	lsls	r2, r3, #24
 80083e2:	d410      	bmi.n	8008406 <__swhatbuf_r+0x40>
 80083e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083e8:	e00e      	b.n	8008408 <__swhatbuf_r+0x42>
 80083ea:	466a      	mov	r2, sp
 80083ec:	f001 f9ee 	bl	80097cc <_fstat_r>
 80083f0:	2800      	cmp	r0, #0
 80083f2:	dbf1      	blt.n	80083d8 <__swhatbuf_r+0x12>
 80083f4:	9a01      	ldr	r2, [sp, #4]
 80083f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80083fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80083fe:	425a      	negs	r2, r3
 8008400:	415a      	adcs	r2, r3
 8008402:	602a      	str	r2, [r5, #0]
 8008404:	e7ee      	b.n	80083e4 <__swhatbuf_r+0x1e>
 8008406:	2340      	movs	r3, #64	; 0x40
 8008408:	2000      	movs	r0, #0
 800840a:	6023      	str	r3, [r4, #0]
 800840c:	b016      	add	sp, #88	; 0x58
 800840e:	bd70      	pop	{r4, r5, r6, pc}

08008410 <__smakebuf_r>:
 8008410:	898b      	ldrh	r3, [r1, #12]
 8008412:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008414:	079d      	lsls	r5, r3, #30
 8008416:	4606      	mov	r6, r0
 8008418:	460c      	mov	r4, r1
 800841a:	d507      	bpl.n	800842c <__smakebuf_r+0x1c>
 800841c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008420:	6023      	str	r3, [r4, #0]
 8008422:	6123      	str	r3, [r4, #16]
 8008424:	2301      	movs	r3, #1
 8008426:	6163      	str	r3, [r4, #20]
 8008428:	b002      	add	sp, #8
 800842a:	bd70      	pop	{r4, r5, r6, pc}
 800842c:	ab01      	add	r3, sp, #4
 800842e:	466a      	mov	r2, sp
 8008430:	f7ff ffc9 	bl	80083c6 <__swhatbuf_r>
 8008434:	9900      	ldr	r1, [sp, #0]
 8008436:	4605      	mov	r5, r0
 8008438:	4630      	mov	r0, r6
 800843a:	f000 fd87 	bl	8008f4c <_malloc_r>
 800843e:	b948      	cbnz	r0, 8008454 <__smakebuf_r+0x44>
 8008440:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008444:	059a      	lsls	r2, r3, #22
 8008446:	d4ef      	bmi.n	8008428 <__smakebuf_r+0x18>
 8008448:	f023 0303 	bic.w	r3, r3, #3
 800844c:	f043 0302 	orr.w	r3, r3, #2
 8008450:	81a3      	strh	r3, [r4, #12]
 8008452:	e7e3      	b.n	800841c <__smakebuf_r+0xc>
 8008454:	4b0d      	ldr	r3, [pc, #52]	; (800848c <__smakebuf_r+0x7c>)
 8008456:	62b3      	str	r3, [r6, #40]	; 0x28
 8008458:	89a3      	ldrh	r3, [r4, #12]
 800845a:	6020      	str	r0, [r4, #0]
 800845c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008460:	81a3      	strh	r3, [r4, #12]
 8008462:	9b00      	ldr	r3, [sp, #0]
 8008464:	6163      	str	r3, [r4, #20]
 8008466:	9b01      	ldr	r3, [sp, #4]
 8008468:	6120      	str	r0, [r4, #16]
 800846a:	b15b      	cbz	r3, 8008484 <__smakebuf_r+0x74>
 800846c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008470:	4630      	mov	r0, r6
 8008472:	f001 f9bd 	bl	80097f0 <_isatty_r>
 8008476:	b128      	cbz	r0, 8008484 <__smakebuf_r+0x74>
 8008478:	89a3      	ldrh	r3, [r4, #12]
 800847a:	f023 0303 	bic.w	r3, r3, #3
 800847e:	f043 0301 	orr.w	r3, r3, #1
 8008482:	81a3      	strh	r3, [r4, #12]
 8008484:	89a0      	ldrh	r0, [r4, #12]
 8008486:	4305      	orrs	r5, r0
 8008488:	81a5      	strh	r5, [r4, #12]
 800848a:	e7cd      	b.n	8008428 <__smakebuf_r+0x18>
 800848c:	08007b39 	.word	0x08007b39

08008490 <malloc>:
 8008490:	4b02      	ldr	r3, [pc, #8]	; (800849c <malloc+0xc>)
 8008492:	4601      	mov	r1, r0
 8008494:	6818      	ldr	r0, [r3, #0]
 8008496:	f000 bd59 	b.w	8008f4c <_malloc_r>
 800849a:	bf00      	nop
 800849c:	20000024 	.word	0x20000024

080084a0 <__ascii_mbtowc>:
 80084a0:	b082      	sub	sp, #8
 80084a2:	b901      	cbnz	r1, 80084a6 <__ascii_mbtowc+0x6>
 80084a4:	a901      	add	r1, sp, #4
 80084a6:	b142      	cbz	r2, 80084ba <__ascii_mbtowc+0x1a>
 80084a8:	b14b      	cbz	r3, 80084be <__ascii_mbtowc+0x1e>
 80084aa:	7813      	ldrb	r3, [r2, #0]
 80084ac:	600b      	str	r3, [r1, #0]
 80084ae:	7812      	ldrb	r2, [r2, #0]
 80084b0:	1e10      	subs	r0, r2, #0
 80084b2:	bf18      	it	ne
 80084b4:	2001      	movne	r0, #1
 80084b6:	b002      	add	sp, #8
 80084b8:	4770      	bx	lr
 80084ba:	4610      	mov	r0, r2
 80084bc:	e7fb      	b.n	80084b6 <__ascii_mbtowc+0x16>
 80084be:	f06f 0001 	mvn.w	r0, #1
 80084c2:	e7f8      	b.n	80084b6 <__ascii_mbtowc+0x16>

080084c4 <_Balloc>:
 80084c4:	b570      	push	{r4, r5, r6, lr}
 80084c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80084c8:	4604      	mov	r4, r0
 80084ca:	460d      	mov	r5, r1
 80084cc:	b976      	cbnz	r6, 80084ec <_Balloc+0x28>
 80084ce:	2010      	movs	r0, #16
 80084d0:	f7ff ffde 	bl	8008490 <malloc>
 80084d4:	4602      	mov	r2, r0
 80084d6:	6260      	str	r0, [r4, #36]	; 0x24
 80084d8:	b920      	cbnz	r0, 80084e4 <_Balloc+0x20>
 80084da:	4b18      	ldr	r3, [pc, #96]	; (800853c <_Balloc+0x78>)
 80084dc:	4818      	ldr	r0, [pc, #96]	; (8008540 <_Balloc+0x7c>)
 80084de:	2166      	movs	r1, #102	; 0x66
 80084e0:	f001 f934 	bl	800974c <__assert_func>
 80084e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084e8:	6006      	str	r6, [r0, #0]
 80084ea:	60c6      	str	r6, [r0, #12]
 80084ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80084ee:	68f3      	ldr	r3, [r6, #12]
 80084f0:	b183      	cbz	r3, 8008514 <_Balloc+0x50>
 80084f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80084fa:	b9b8      	cbnz	r0, 800852c <_Balloc+0x68>
 80084fc:	2101      	movs	r1, #1
 80084fe:	fa01 f605 	lsl.w	r6, r1, r5
 8008502:	1d72      	adds	r2, r6, #5
 8008504:	0092      	lsls	r2, r2, #2
 8008506:	4620      	mov	r0, r4
 8008508:	f000 fc9d 	bl	8008e46 <_calloc_r>
 800850c:	b160      	cbz	r0, 8008528 <_Balloc+0x64>
 800850e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008512:	e00e      	b.n	8008532 <_Balloc+0x6e>
 8008514:	2221      	movs	r2, #33	; 0x21
 8008516:	2104      	movs	r1, #4
 8008518:	4620      	mov	r0, r4
 800851a:	f000 fc94 	bl	8008e46 <_calloc_r>
 800851e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008520:	60f0      	str	r0, [r6, #12]
 8008522:	68db      	ldr	r3, [r3, #12]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d1e4      	bne.n	80084f2 <_Balloc+0x2e>
 8008528:	2000      	movs	r0, #0
 800852a:	bd70      	pop	{r4, r5, r6, pc}
 800852c:	6802      	ldr	r2, [r0, #0]
 800852e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008532:	2300      	movs	r3, #0
 8008534:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008538:	e7f7      	b.n	800852a <_Balloc+0x66>
 800853a:	bf00      	nop
 800853c:	08009c16 	.word	0x08009c16
 8008540:	08009d78 	.word	0x08009d78

08008544 <_Bfree>:
 8008544:	b570      	push	{r4, r5, r6, lr}
 8008546:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008548:	4605      	mov	r5, r0
 800854a:	460c      	mov	r4, r1
 800854c:	b976      	cbnz	r6, 800856c <_Bfree+0x28>
 800854e:	2010      	movs	r0, #16
 8008550:	f7ff ff9e 	bl	8008490 <malloc>
 8008554:	4602      	mov	r2, r0
 8008556:	6268      	str	r0, [r5, #36]	; 0x24
 8008558:	b920      	cbnz	r0, 8008564 <_Bfree+0x20>
 800855a:	4b09      	ldr	r3, [pc, #36]	; (8008580 <_Bfree+0x3c>)
 800855c:	4809      	ldr	r0, [pc, #36]	; (8008584 <_Bfree+0x40>)
 800855e:	218a      	movs	r1, #138	; 0x8a
 8008560:	f001 f8f4 	bl	800974c <__assert_func>
 8008564:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008568:	6006      	str	r6, [r0, #0]
 800856a:	60c6      	str	r6, [r0, #12]
 800856c:	b13c      	cbz	r4, 800857e <_Bfree+0x3a>
 800856e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008570:	6862      	ldr	r2, [r4, #4]
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008578:	6021      	str	r1, [r4, #0]
 800857a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800857e:	bd70      	pop	{r4, r5, r6, pc}
 8008580:	08009c16 	.word	0x08009c16
 8008584:	08009d78 	.word	0x08009d78

08008588 <__multadd>:
 8008588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800858c:	690d      	ldr	r5, [r1, #16]
 800858e:	4607      	mov	r7, r0
 8008590:	460c      	mov	r4, r1
 8008592:	461e      	mov	r6, r3
 8008594:	f101 0c14 	add.w	ip, r1, #20
 8008598:	2000      	movs	r0, #0
 800859a:	f8dc 3000 	ldr.w	r3, [ip]
 800859e:	b299      	uxth	r1, r3
 80085a0:	fb02 6101 	mla	r1, r2, r1, r6
 80085a4:	0c1e      	lsrs	r6, r3, #16
 80085a6:	0c0b      	lsrs	r3, r1, #16
 80085a8:	fb02 3306 	mla	r3, r2, r6, r3
 80085ac:	b289      	uxth	r1, r1
 80085ae:	3001      	adds	r0, #1
 80085b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80085b4:	4285      	cmp	r5, r0
 80085b6:	f84c 1b04 	str.w	r1, [ip], #4
 80085ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80085be:	dcec      	bgt.n	800859a <__multadd+0x12>
 80085c0:	b30e      	cbz	r6, 8008606 <__multadd+0x7e>
 80085c2:	68a3      	ldr	r3, [r4, #8]
 80085c4:	42ab      	cmp	r3, r5
 80085c6:	dc19      	bgt.n	80085fc <__multadd+0x74>
 80085c8:	6861      	ldr	r1, [r4, #4]
 80085ca:	4638      	mov	r0, r7
 80085cc:	3101      	adds	r1, #1
 80085ce:	f7ff ff79 	bl	80084c4 <_Balloc>
 80085d2:	4680      	mov	r8, r0
 80085d4:	b928      	cbnz	r0, 80085e2 <__multadd+0x5a>
 80085d6:	4602      	mov	r2, r0
 80085d8:	4b0c      	ldr	r3, [pc, #48]	; (800860c <__multadd+0x84>)
 80085da:	480d      	ldr	r0, [pc, #52]	; (8008610 <__multadd+0x88>)
 80085dc:	21b5      	movs	r1, #181	; 0xb5
 80085de:	f001 f8b5 	bl	800974c <__assert_func>
 80085e2:	6922      	ldr	r2, [r4, #16]
 80085e4:	3202      	adds	r2, #2
 80085e6:	f104 010c 	add.w	r1, r4, #12
 80085ea:	0092      	lsls	r2, r2, #2
 80085ec:	300c      	adds	r0, #12
 80085ee:	f7fc fc7d 	bl	8004eec <memcpy>
 80085f2:	4621      	mov	r1, r4
 80085f4:	4638      	mov	r0, r7
 80085f6:	f7ff ffa5 	bl	8008544 <_Bfree>
 80085fa:	4644      	mov	r4, r8
 80085fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008600:	3501      	adds	r5, #1
 8008602:	615e      	str	r6, [r3, #20]
 8008604:	6125      	str	r5, [r4, #16]
 8008606:	4620      	mov	r0, r4
 8008608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800860c:	08009c88 	.word	0x08009c88
 8008610:	08009d78 	.word	0x08009d78

08008614 <__s2b>:
 8008614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008618:	460c      	mov	r4, r1
 800861a:	4615      	mov	r5, r2
 800861c:	461f      	mov	r7, r3
 800861e:	2209      	movs	r2, #9
 8008620:	3308      	adds	r3, #8
 8008622:	4606      	mov	r6, r0
 8008624:	fb93 f3f2 	sdiv	r3, r3, r2
 8008628:	2100      	movs	r1, #0
 800862a:	2201      	movs	r2, #1
 800862c:	429a      	cmp	r2, r3
 800862e:	db09      	blt.n	8008644 <__s2b+0x30>
 8008630:	4630      	mov	r0, r6
 8008632:	f7ff ff47 	bl	80084c4 <_Balloc>
 8008636:	b940      	cbnz	r0, 800864a <__s2b+0x36>
 8008638:	4602      	mov	r2, r0
 800863a:	4b19      	ldr	r3, [pc, #100]	; (80086a0 <__s2b+0x8c>)
 800863c:	4819      	ldr	r0, [pc, #100]	; (80086a4 <__s2b+0x90>)
 800863e:	21ce      	movs	r1, #206	; 0xce
 8008640:	f001 f884 	bl	800974c <__assert_func>
 8008644:	0052      	lsls	r2, r2, #1
 8008646:	3101      	adds	r1, #1
 8008648:	e7f0      	b.n	800862c <__s2b+0x18>
 800864a:	9b08      	ldr	r3, [sp, #32]
 800864c:	6143      	str	r3, [r0, #20]
 800864e:	2d09      	cmp	r5, #9
 8008650:	f04f 0301 	mov.w	r3, #1
 8008654:	6103      	str	r3, [r0, #16]
 8008656:	dd16      	ble.n	8008686 <__s2b+0x72>
 8008658:	f104 0909 	add.w	r9, r4, #9
 800865c:	46c8      	mov	r8, r9
 800865e:	442c      	add	r4, r5
 8008660:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008664:	4601      	mov	r1, r0
 8008666:	3b30      	subs	r3, #48	; 0x30
 8008668:	220a      	movs	r2, #10
 800866a:	4630      	mov	r0, r6
 800866c:	f7ff ff8c 	bl	8008588 <__multadd>
 8008670:	45a0      	cmp	r8, r4
 8008672:	d1f5      	bne.n	8008660 <__s2b+0x4c>
 8008674:	f1a5 0408 	sub.w	r4, r5, #8
 8008678:	444c      	add	r4, r9
 800867a:	1b2d      	subs	r5, r5, r4
 800867c:	1963      	adds	r3, r4, r5
 800867e:	42bb      	cmp	r3, r7
 8008680:	db04      	blt.n	800868c <__s2b+0x78>
 8008682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008686:	340a      	adds	r4, #10
 8008688:	2509      	movs	r5, #9
 800868a:	e7f6      	b.n	800867a <__s2b+0x66>
 800868c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008690:	4601      	mov	r1, r0
 8008692:	3b30      	subs	r3, #48	; 0x30
 8008694:	220a      	movs	r2, #10
 8008696:	4630      	mov	r0, r6
 8008698:	f7ff ff76 	bl	8008588 <__multadd>
 800869c:	e7ee      	b.n	800867c <__s2b+0x68>
 800869e:	bf00      	nop
 80086a0:	08009c88 	.word	0x08009c88
 80086a4:	08009d78 	.word	0x08009d78

080086a8 <__hi0bits>:
 80086a8:	0c03      	lsrs	r3, r0, #16
 80086aa:	041b      	lsls	r3, r3, #16
 80086ac:	b9d3      	cbnz	r3, 80086e4 <__hi0bits+0x3c>
 80086ae:	0400      	lsls	r0, r0, #16
 80086b0:	2310      	movs	r3, #16
 80086b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80086b6:	bf04      	itt	eq
 80086b8:	0200      	lsleq	r0, r0, #8
 80086ba:	3308      	addeq	r3, #8
 80086bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80086c0:	bf04      	itt	eq
 80086c2:	0100      	lsleq	r0, r0, #4
 80086c4:	3304      	addeq	r3, #4
 80086c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80086ca:	bf04      	itt	eq
 80086cc:	0080      	lsleq	r0, r0, #2
 80086ce:	3302      	addeq	r3, #2
 80086d0:	2800      	cmp	r0, #0
 80086d2:	db05      	blt.n	80086e0 <__hi0bits+0x38>
 80086d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80086d8:	f103 0301 	add.w	r3, r3, #1
 80086dc:	bf08      	it	eq
 80086de:	2320      	moveq	r3, #32
 80086e0:	4618      	mov	r0, r3
 80086e2:	4770      	bx	lr
 80086e4:	2300      	movs	r3, #0
 80086e6:	e7e4      	b.n	80086b2 <__hi0bits+0xa>

080086e8 <__lo0bits>:
 80086e8:	6803      	ldr	r3, [r0, #0]
 80086ea:	f013 0207 	ands.w	r2, r3, #7
 80086ee:	4601      	mov	r1, r0
 80086f0:	d00b      	beq.n	800870a <__lo0bits+0x22>
 80086f2:	07da      	lsls	r2, r3, #31
 80086f4:	d423      	bmi.n	800873e <__lo0bits+0x56>
 80086f6:	0798      	lsls	r0, r3, #30
 80086f8:	bf49      	itett	mi
 80086fa:	085b      	lsrmi	r3, r3, #1
 80086fc:	089b      	lsrpl	r3, r3, #2
 80086fe:	2001      	movmi	r0, #1
 8008700:	600b      	strmi	r3, [r1, #0]
 8008702:	bf5c      	itt	pl
 8008704:	600b      	strpl	r3, [r1, #0]
 8008706:	2002      	movpl	r0, #2
 8008708:	4770      	bx	lr
 800870a:	b298      	uxth	r0, r3
 800870c:	b9a8      	cbnz	r0, 800873a <__lo0bits+0x52>
 800870e:	0c1b      	lsrs	r3, r3, #16
 8008710:	2010      	movs	r0, #16
 8008712:	b2da      	uxtb	r2, r3
 8008714:	b90a      	cbnz	r2, 800871a <__lo0bits+0x32>
 8008716:	3008      	adds	r0, #8
 8008718:	0a1b      	lsrs	r3, r3, #8
 800871a:	071a      	lsls	r2, r3, #28
 800871c:	bf04      	itt	eq
 800871e:	091b      	lsreq	r3, r3, #4
 8008720:	3004      	addeq	r0, #4
 8008722:	079a      	lsls	r2, r3, #30
 8008724:	bf04      	itt	eq
 8008726:	089b      	lsreq	r3, r3, #2
 8008728:	3002      	addeq	r0, #2
 800872a:	07da      	lsls	r2, r3, #31
 800872c:	d403      	bmi.n	8008736 <__lo0bits+0x4e>
 800872e:	085b      	lsrs	r3, r3, #1
 8008730:	f100 0001 	add.w	r0, r0, #1
 8008734:	d005      	beq.n	8008742 <__lo0bits+0x5a>
 8008736:	600b      	str	r3, [r1, #0]
 8008738:	4770      	bx	lr
 800873a:	4610      	mov	r0, r2
 800873c:	e7e9      	b.n	8008712 <__lo0bits+0x2a>
 800873e:	2000      	movs	r0, #0
 8008740:	4770      	bx	lr
 8008742:	2020      	movs	r0, #32
 8008744:	4770      	bx	lr
	...

08008748 <__i2b>:
 8008748:	b510      	push	{r4, lr}
 800874a:	460c      	mov	r4, r1
 800874c:	2101      	movs	r1, #1
 800874e:	f7ff feb9 	bl	80084c4 <_Balloc>
 8008752:	4602      	mov	r2, r0
 8008754:	b928      	cbnz	r0, 8008762 <__i2b+0x1a>
 8008756:	4b05      	ldr	r3, [pc, #20]	; (800876c <__i2b+0x24>)
 8008758:	4805      	ldr	r0, [pc, #20]	; (8008770 <__i2b+0x28>)
 800875a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800875e:	f000 fff5 	bl	800974c <__assert_func>
 8008762:	2301      	movs	r3, #1
 8008764:	6144      	str	r4, [r0, #20]
 8008766:	6103      	str	r3, [r0, #16]
 8008768:	bd10      	pop	{r4, pc}
 800876a:	bf00      	nop
 800876c:	08009c88 	.word	0x08009c88
 8008770:	08009d78 	.word	0x08009d78

08008774 <__multiply>:
 8008774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008778:	4691      	mov	r9, r2
 800877a:	690a      	ldr	r2, [r1, #16]
 800877c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008780:	429a      	cmp	r2, r3
 8008782:	bfb8      	it	lt
 8008784:	460b      	movlt	r3, r1
 8008786:	460c      	mov	r4, r1
 8008788:	bfbc      	itt	lt
 800878a:	464c      	movlt	r4, r9
 800878c:	4699      	movlt	r9, r3
 800878e:	6927      	ldr	r7, [r4, #16]
 8008790:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008794:	68a3      	ldr	r3, [r4, #8]
 8008796:	6861      	ldr	r1, [r4, #4]
 8008798:	eb07 060a 	add.w	r6, r7, sl
 800879c:	42b3      	cmp	r3, r6
 800879e:	b085      	sub	sp, #20
 80087a0:	bfb8      	it	lt
 80087a2:	3101      	addlt	r1, #1
 80087a4:	f7ff fe8e 	bl	80084c4 <_Balloc>
 80087a8:	b930      	cbnz	r0, 80087b8 <__multiply+0x44>
 80087aa:	4602      	mov	r2, r0
 80087ac:	4b44      	ldr	r3, [pc, #272]	; (80088c0 <__multiply+0x14c>)
 80087ae:	4845      	ldr	r0, [pc, #276]	; (80088c4 <__multiply+0x150>)
 80087b0:	f240 115d 	movw	r1, #349	; 0x15d
 80087b4:	f000 ffca 	bl	800974c <__assert_func>
 80087b8:	f100 0514 	add.w	r5, r0, #20
 80087bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80087c0:	462b      	mov	r3, r5
 80087c2:	2200      	movs	r2, #0
 80087c4:	4543      	cmp	r3, r8
 80087c6:	d321      	bcc.n	800880c <__multiply+0x98>
 80087c8:	f104 0314 	add.w	r3, r4, #20
 80087cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80087d0:	f109 0314 	add.w	r3, r9, #20
 80087d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80087d8:	9202      	str	r2, [sp, #8]
 80087da:	1b3a      	subs	r2, r7, r4
 80087dc:	3a15      	subs	r2, #21
 80087de:	f022 0203 	bic.w	r2, r2, #3
 80087e2:	3204      	adds	r2, #4
 80087e4:	f104 0115 	add.w	r1, r4, #21
 80087e8:	428f      	cmp	r7, r1
 80087ea:	bf38      	it	cc
 80087ec:	2204      	movcc	r2, #4
 80087ee:	9201      	str	r2, [sp, #4]
 80087f0:	9a02      	ldr	r2, [sp, #8]
 80087f2:	9303      	str	r3, [sp, #12]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d80c      	bhi.n	8008812 <__multiply+0x9e>
 80087f8:	2e00      	cmp	r6, #0
 80087fa:	dd03      	ble.n	8008804 <__multiply+0x90>
 80087fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008800:	2b00      	cmp	r3, #0
 8008802:	d05a      	beq.n	80088ba <__multiply+0x146>
 8008804:	6106      	str	r6, [r0, #16]
 8008806:	b005      	add	sp, #20
 8008808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800880c:	f843 2b04 	str.w	r2, [r3], #4
 8008810:	e7d8      	b.n	80087c4 <__multiply+0x50>
 8008812:	f8b3 a000 	ldrh.w	sl, [r3]
 8008816:	f1ba 0f00 	cmp.w	sl, #0
 800881a:	d024      	beq.n	8008866 <__multiply+0xf2>
 800881c:	f104 0e14 	add.w	lr, r4, #20
 8008820:	46a9      	mov	r9, r5
 8008822:	f04f 0c00 	mov.w	ip, #0
 8008826:	f85e 2b04 	ldr.w	r2, [lr], #4
 800882a:	f8d9 1000 	ldr.w	r1, [r9]
 800882e:	fa1f fb82 	uxth.w	fp, r2
 8008832:	b289      	uxth	r1, r1
 8008834:	fb0a 110b 	mla	r1, sl, fp, r1
 8008838:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800883c:	f8d9 2000 	ldr.w	r2, [r9]
 8008840:	4461      	add	r1, ip
 8008842:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008846:	fb0a c20b 	mla	r2, sl, fp, ip
 800884a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800884e:	b289      	uxth	r1, r1
 8008850:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008854:	4577      	cmp	r7, lr
 8008856:	f849 1b04 	str.w	r1, [r9], #4
 800885a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800885e:	d8e2      	bhi.n	8008826 <__multiply+0xb2>
 8008860:	9a01      	ldr	r2, [sp, #4]
 8008862:	f845 c002 	str.w	ip, [r5, r2]
 8008866:	9a03      	ldr	r2, [sp, #12]
 8008868:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800886c:	3304      	adds	r3, #4
 800886e:	f1b9 0f00 	cmp.w	r9, #0
 8008872:	d020      	beq.n	80088b6 <__multiply+0x142>
 8008874:	6829      	ldr	r1, [r5, #0]
 8008876:	f104 0c14 	add.w	ip, r4, #20
 800887a:	46ae      	mov	lr, r5
 800887c:	f04f 0a00 	mov.w	sl, #0
 8008880:	f8bc b000 	ldrh.w	fp, [ip]
 8008884:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008888:	fb09 220b 	mla	r2, r9, fp, r2
 800888c:	4492      	add	sl, r2
 800888e:	b289      	uxth	r1, r1
 8008890:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008894:	f84e 1b04 	str.w	r1, [lr], #4
 8008898:	f85c 2b04 	ldr.w	r2, [ip], #4
 800889c:	f8be 1000 	ldrh.w	r1, [lr]
 80088a0:	0c12      	lsrs	r2, r2, #16
 80088a2:	fb09 1102 	mla	r1, r9, r2, r1
 80088a6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80088aa:	4567      	cmp	r7, ip
 80088ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80088b0:	d8e6      	bhi.n	8008880 <__multiply+0x10c>
 80088b2:	9a01      	ldr	r2, [sp, #4]
 80088b4:	50a9      	str	r1, [r5, r2]
 80088b6:	3504      	adds	r5, #4
 80088b8:	e79a      	b.n	80087f0 <__multiply+0x7c>
 80088ba:	3e01      	subs	r6, #1
 80088bc:	e79c      	b.n	80087f8 <__multiply+0x84>
 80088be:	bf00      	nop
 80088c0:	08009c88 	.word	0x08009c88
 80088c4:	08009d78 	.word	0x08009d78

080088c8 <__pow5mult>:
 80088c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088cc:	4615      	mov	r5, r2
 80088ce:	f012 0203 	ands.w	r2, r2, #3
 80088d2:	4606      	mov	r6, r0
 80088d4:	460f      	mov	r7, r1
 80088d6:	d007      	beq.n	80088e8 <__pow5mult+0x20>
 80088d8:	4c25      	ldr	r4, [pc, #148]	; (8008970 <__pow5mult+0xa8>)
 80088da:	3a01      	subs	r2, #1
 80088dc:	2300      	movs	r3, #0
 80088de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80088e2:	f7ff fe51 	bl	8008588 <__multadd>
 80088e6:	4607      	mov	r7, r0
 80088e8:	10ad      	asrs	r5, r5, #2
 80088ea:	d03d      	beq.n	8008968 <__pow5mult+0xa0>
 80088ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80088ee:	b97c      	cbnz	r4, 8008910 <__pow5mult+0x48>
 80088f0:	2010      	movs	r0, #16
 80088f2:	f7ff fdcd 	bl	8008490 <malloc>
 80088f6:	4602      	mov	r2, r0
 80088f8:	6270      	str	r0, [r6, #36]	; 0x24
 80088fa:	b928      	cbnz	r0, 8008908 <__pow5mult+0x40>
 80088fc:	4b1d      	ldr	r3, [pc, #116]	; (8008974 <__pow5mult+0xac>)
 80088fe:	481e      	ldr	r0, [pc, #120]	; (8008978 <__pow5mult+0xb0>)
 8008900:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008904:	f000 ff22 	bl	800974c <__assert_func>
 8008908:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800890c:	6004      	str	r4, [r0, #0]
 800890e:	60c4      	str	r4, [r0, #12]
 8008910:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008914:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008918:	b94c      	cbnz	r4, 800892e <__pow5mult+0x66>
 800891a:	f240 2171 	movw	r1, #625	; 0x271
 800891e:	4630      	mov	r0, r6
 8008920:	f7ff ff12 	bl	8008748 <__i2b>
 8008924:	2300      	movs	r3, #0
 8008926:	f8c8 0008 	str.w	r0, [r8, #8]
 800892a:	4604      	mov	r4, r0
 800892c:	6003      	str	r3, [r0, #0]
 800892e:	f04f 0900 	mov.w	r9, #0
 8008932:	07eb      	lsls	r3, r5, #31
 8008934:	d50a      	bpl.n	800894c <__pow5mult+0x84>
 8008936:	4639      	mov	r1, r7
 8008938:	4622      	mov	r2, r4
 800893a:	4630      	mov	r0, r6
 800893c:	f7ff ff1a 	bl	8008774 <__multiply>
 8008940:	4639      	mov	r1, r7
 8008942:	4680      	mov	r8, r0
 8008944:	4630      	mov	r0, r6
 8008946:	f7ff fdfd 	bl	8008544 <_Bfree>
 800894a:	4647      	mov	r7, r8
 800894c:	106d      	asrs	r5, r5, #1
 800894e:	d00b      	beq.n	8008968 <__pow5mult+0xa0>
 8008950:	6820      	ldr	r0, [r4, #0]
 8008952:	b938      	cbnz	r0, 8008964 <__pow5mult+0x9c>
 8008954:	4622      	mov	r2, r4
 8008956:	4621      	mov	r1, r4
 8008958:	4630      	mov	r0, r6
 800895a:	f7ff ff0b 	bl	8008774 <__multiply>
 800895e:	6020      	str	r0, [r4, #0]
 8008960:	f8c0 9000 	str.w	r9, [r0]
 8008964:	4604      	mov	r4, r0
 8008966:	e7e4      	b.n	8008932 <__pow5mult+0x6a>
 8008968:	4638      	mov	r0, r7
 800896a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800896e:	bf00      	nop
 8008970:	08009ec8 	.word	0x08009ec8
 8008974:	08009c16 	.word	0x08009c16
 8008978:	08009d78 	.word	0x08009d78

0800897c <__lshift>:
 800897c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008980:	460c      	mov	r4, r1
 8008982:	6849      	ldr	r1, [r1, #4]
 8008984:	6923      	ldr	r3, [r4, #16]
 8008986:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800898a:	68a3      	ldr	r3, [r4, #8]
 800898c:	4607      	mov	r7, r0
 800898e:	4691      	mov	r9, r2
 8008990:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008994:	f108 0601 	add.w	r6, r8, #1
 8008998:	42b3      	cmp	r3, r6
 800899a:	db0b      	blt.n	80089b4 <__lshift+0x38>
 800899c:	4638      	mov	r0, r7
 800899e:	f7ff fd91 	bl	80084c4 <_Balloc>
 80089a2:	4605      	mov	r5, r0
 80089a4:	b948      	cbnz	r0, 80089ba <__lshift+0x3e>
 80089a6:	4602      	mov	r2, r0
 80089a8:	4b2a      	ldr	r3, [pc, #168]	; (8008a54 <__lshift+0xd8>)
 80089aa:	482b      	ldr	r0, [pc, #172]	; (8008a58 <__lshift+0xdc>)
 80089ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 80089b0:	f000 fecc 	bl	800974c <__assert_func>
 80089b4:	3101      	adds	r1, #1
 80089b6:	005b      	lsls	r3, r3, #1
 80089b8:	e7ee      	b.n	8008998 <__lshift+0x1c>
 80089ba:	2300      	movs	r3, #0
 80089bc:	f100 0114 	add.w	r1, r0, #20
 80089c0:	f100 0210 	add.w	r2, r0, #16
 80089c4:	4618      	mov	r0, r3
 80089c6:	4553      	cmp	r3, sl
 80089c8:	db37      	blt.n	8008a3a <__lshift+0xbe>
 80089ca:	6920      	ldr	r0, [r4, #16]
 80089cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80089d0:	f104 0314 	add.w	r3, r4, #20
 80089d4:	f019 091f 	ands.w	r9, r9, #31
 80089d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80089dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80089e0:	d02f      	beq.n	8008a42 <__lshift+0xc6>
 80089e2:	f1c9 0e20 	rsb	lr, r9, #32
 80089e6:	468a      	mov	sl, r1
 80089e8:	f04f 0c00 	mov.w	ip, #0
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	fa02 f209 	lsl.w	r2, r2, r9
 80089f2:	ea42 020c 	orr.w	r2, r2, ip
 80089f6:	f84a 2b04 	str.w	r2, [sl], #4
 80089fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80089fe:	4298      	cmp	r0, r3
 8008a00:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008a04:	d8f2      	bhi.n	80089ec <__lshift+0x70>
 8008a06:	1b03      	subs	r3, r0, r4
 8008a08:	3b15      	subs	r3, #21
 8008a0a:	f023 0303 	bic.w	r3, r3, #3
 8008a0e:	3304      	adds	r3, #4
 8008a10:	f104 0215 	add.w	r2, r4, #21
 8008a14:	4290      	cmp	r0, r2
 8008a16:	bf38      	it	cc
 8008a18:	2304      	movcc	r3, #4
 8008a1a:	f841 c003 	str.w	ip, [r1, r3]
 8008a1e:	f1bc 0f00 	cmp.w	ip, #0
 8008a22:	d001      	beq.n	8008a28 <__lshift+0xac>
 8008a24:	f108 0602 	add.w	r6, r8, #2
 8008a28:	3e01      	subs	r6, #1
 8008a2a:	4638      	mov	r0, r7
 8008a2c:	612e      	str	r6, [r5, #16]
 8008a2e:	4621      	mov	r1, r4
 8008a30:	f7ff fd88 	bl	8008544 <_Bfree>
 8008a34:	4628      	mov	r0, r5
 8008a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a3a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a3e:	3301      	adds	r3, #1
 8008a40:	e7c1      	b.n	80089c6 <__lshift+0x4a>
 8008a42:	3904      	subs	r1, #4
 8008a44:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a48:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a4c:	4298      	cmp	r0, r3
 8008a4e:	d8f9      	bhi.n	8008a44 <__lshift+0xc8>
 8008a50:	e7ea      	b.n	8008a28 <__lshift+0xac>
 8008a52:	bf00      	nop
 8008a54:	08009c88 	.word	0x08009c88
 8008a58:	08009d78 	.word	0x08009d78

08008a5c <__mcmp>:
 8008a5c:	b530      	push	{r4, r5, lr}
 8008a5e:	6902      	ldr	r2, [r0, #16]
 8008a60:	690c      	ldr	r4, [r1, #16]
 8008a62:	1b12      	subs	r2, r2, r4
 8008a64:	d10e      	bne.n	8008a84 <__mcmp+0x28>
 8008a66:	f100 0314 	add.w	r3, r0, #20
 8008a6a:	3114      	adds	r1, #20
 8008a6c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008a70:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008a74:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008a78:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008a7c:	42a5      	cmp	r5, r4
 8008a7e:	d003      	beq.n	8008a88 <__mcmp+0x2c>
 8008a80:	d305      	bcc.n	8008a8e <__mcmp+0x32>
 8008a82:	2201      	movs	r2, #1
 8008a84:	4610      	mov	r0, r2
 8008a86:	bd30      	pop	{r4, r5, pc}
 8008a88:	4283      	cmp	r3, r0
 8008a8a:	d3f3      	bcc.n	8008a74 <__mcmp+0x18>
 8008a8c:	e7fa      	b.n	8008a84 <__mcmp+0x28>
 8008a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a92:	e7f7      	b.n	8008a84 <__mcmp+0x28>

08008a94 <__mdiff>:
 8008a94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a98:	460c      	mov	r4, r1
 8008a9a:	4606      	mov	r6, r0
 8008a9c:	4611      	mov	r1, r2
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	4690      	mov	r8, r2
 8008aa2:	f7ff ffdb 	bl	8008a5c <__mcmp>
 8008aa6:	1e05      	subs	r5, r0, #0
 8008aa8:	d110      	bne.n	8008acc <__mdiff+0x38>
 8008aaa:	4629      	mov	r1, r5
 8008aac:	4630      	mov	r0, r6
 8008aae:	f7ff fd09 	bl	80084c4 <_Balloc>
 8008ab2:	b930      	cbnz	r0, 8008ac2 <__mdiff+0x2e>
 8008ab4:	4b3a      	ldr	r3, [pc, #232]	; (8008ba0 <__mdiff+0x10c>)
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	f240 2132 	movw	r1, #562	; 0x232
 8008abc:	4839      	ldr	r0, [pc, #228]	; (8008ba4 <__mdiff+0x110>)
 8008abe:	f000 fe45 	bl	800974c <__assert_func>
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ac8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008acc:	bfa4      	itt	ge
 8008ace:	4643      	movge	r3, r8
 8008ad0:	46a0      	movge	r8, r4
 8008ad2:	4630      	mov	r0, r6
 8008ad4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008ad8:	bfa6      	itte	ge
 8008ada:	461c      	movge	r4, r3
 8008adc:	2500      	movge	r5, #0
 8008ade:	2501      	movlt	r5, #1
 8008ae0:	f7ff fcf0 	bl	80084c4 <_Balloc>
 8008ae4:	b920      	cbnz	r0, 8008af0 <__mdiff+0x5c>
 8008ae6:	4b2e      	ldr	r3, [pc, #184]	; (8008ba0 <__mdiff+0x10c>)
 8008ae8:	4602      	mov	r2, r0
 8008aea:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008aee:	e7e5      	b.n	8008abc <__mdiff+0x28>
 8008af0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008af4:	6926      	ldr	r6, [r4, #16]
 8008af6:	60c5      	str	r5, [r0, #12]
 8008af8:	f104 0914 	add.w	r9, r4, #20
 8008afc:	f108 0514 	add.w	r5, r8, #20
 8008b00:	f100 0e14 	add.w	lr, r0, #20
 8008b04:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008b08:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008b0c:	f108 0210 	add.w	r2, r8, #16
 8008b10:	46f2      	mov	sl, lr
 8008b12:	2100      	movs	r1, #0
 8008b14:	f859 3b04 	ldr.w	r3, [r9], #4
 8008b18:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008b1c:	fa1f f883 	uxth.w	r8, r3
 8008b20:	fa11 f18b 	uxtah	r1, r1, fp
 8008b24:	0c1b      	lsrs	r3, r3, #16
 8008b26:	eba1 0808 	sub.w	r8, r1, r8
 8008b2a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008b2e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008b32:	fa1f f888 	uxth.w	r8, r8
 8008b36:	1419      	asrs	r1, r3, #16
 8008b38:	454e      	cmp	r6, r9
 8008b3a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008b3e:	f84a 3b04 	str.w	r3, [sl], #4
 8008b42:	d8e7      	bhi.n	8008b14 <__mdiff+0x80>
 8008b44:	1b33      	subs	r3, r6, r4
 8008b46:	3b15      	subs	r3, #21
 8008b48:	f023 0303 	bic.w	r3, r3, #3
 8008b4c:	3304      	adds	r3, #4
 8008b4e:	3415      	adds	r4, #21
 8008b50:	42a6      	cmp	r6, r4
 8008b52:	bf38      	it	cc
 8008b54:	2304      	movcc	r3, #4
 8008b56:	441d      	add	r5, r3
 8008b58:	4473      	add	r3, lr
 8008b5a:	469e      	mov	lr, r3
 8008b5c:	462e      	mov	r6, r5
 8008b5e:	4566      	cmp	r6, ip
 8008b60:	d30e      	bcc.n	8008b80 <__mdiff+0xec>
 8008b62:	f10c 0203 	add.w	r2, ip, #3
 8008b66:	1b52      	subs	r2, r2, r5
 8008b68:	f022 0203 	bic.w	r2, r2, #3
 8008b6c:	3d03      	subs	r5, #3
 8008b6e:	45ac      	cmp	ip, r5
 8008b70:	bf38      	it	cc
 8008b72:	2200      	movcc	r2, #0
 8008b74:	441a      	add	r2, r3
 8008b76:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008b7a:	b17b      	cbz	r3, 8008b9c <__mdiff+0x108>
 8008b7c:	6107      	str	r7, [r0, #16]
 8008b7e:	e7a3      	b.n	8008ac8 <__mdiff+0x34>
 8008b80:	f856 8b04 	ldr.w	r8, [r6], #4
 8008b84:	fa11 f288 	uxtah	r2, r1, r8
 8008b88:	1414      	asrs	r4, r2, #16
 8008b8a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008b8e:	b292      	uxth	r2, r2
 8008b90:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008b94:	f84e 2b04 	str.w	r2, [lr], #4
 8008b98:	1421      	asrs	r1, r4, #16
 8008b9a:	e7e0      	b.n	8008b5e <__mdiff+0xca>
 8008b9c:	3f01      	subs	r7, #1
 8008b9e:	e7ea      	b.n	8008b76 <__mdiff+0xe2>
 8008ba0:	08009c88 	.word	0x08009c88
 8008ba4:	08009d78 	.word	0x08009d78

08008ba8 <__ulp>:
 8008ba8:	b082      	sub	sp, #8
 8008baa:	ed8d 0b00 	vstr	d0, [sp]
 8008bae:	9b01      	ldr	r3, [sp, #4]
 8008bb0:	4912      	ldr	r1, [pc, #72]	; (8008bfc <__ulp+0x54>)
 8008bb2:	4019      	ands	r1, r3
 8008bb4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008bb8:	2900      	cmp	r1, #0
 8008bba:	dd05      	ble.n	8008bc8 <__ulp+0x20>
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	460b      	mov	r3, r1
 8008bc0:	ec43 2b10 	vmov	d0, r2, r3
 8008bc4:	b002      	add	sp, #8
 8008bc6:	4770      	bx	lr
 8008bc8:	4249      	negs	r1, r1
 8008bca:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008bce:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008bd2:	f04f 0200 	mov.w	r2, #0
 8008bd6:	f04f 0300 	mov.w	r3, #0
 8008bda:	da04      	bge.n	8008be6 <__ulp+0x3e>
 8008bdc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008be0:	fa41 f300 	asr.w	r3, r1, r0
 8008be4:	e7ec      	b.n	8008bc0 <__ulp+0x18>
 8008be6:	f1a0 0114 	sub.w	r1, r0, #20
 8008bea:	291e      	cmp	r1, #30
 8008bec:	bfda      	itte	le
 8008bee:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008bf2:	fa20 f101 	lsrle.w	r1, r0, r1
 8008bf6:	2101      	movgt	r1, #1
 8008bf8:	460a      	mov	r2, r1
 8008bfa:	e7e1      	b.n	8008bc0 <__ulp+0x18>
 8008bfc:	7ff00000 	.word	0x7ff00000

08008c00 <__b2d>:
 8008c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c02:	6905      	ldr	r5, [r0, #16]
 8008c04:	f100 0714 	add.w	r7, r0, #20
 8008c08:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008c0c:	1f2e      	subs	r6, r5, #4
 8008c0e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008c12:	4620      	mov	r0, r4
 8008c14:	f7ff fd48 	bl	80086a8 <__hi0bits>
 8008c18:	f1c0 0320 	rsb	r3, r0, #32
 8008c1c:	280a      	cmp	r0, #10
 8008c1e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008c9c <__b2d+0x9c>
 8008c22:	600b      	str	r3, [r1, #0]
 8008c24:	dc14      	bgt.n	8008c50 <__b2d+0x50>
 8008c26:	f1c0 0e0b 	rsb	lr, r0, #11
 8008c2a:	fa24 f10e 	lsr.w	r1, r4, lr
 8008c2e:	42b7      	cmp	r7, r6
 8008c30:	ea41 030c 	orr.w	r3, r1, ip
 8008c34:	bf34      	ite	cc
 8008c36:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008c3a:	2100      	movcs	r1, #0
 8008c3c:	3015      	adds	r0, #21
 8008c3e:	fa04 f000 	lsl.w	r0, r4, r0
 8008c42:	fa21 f10e 	lsr.w	r1, r1, lr
 8008c46:	ea40 0201 	orr.w	r2, r0, r1
 8008c4a:	ec43 2b10 	vmov	d0, r2, r3
 8008c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c50:	42b7      	cmp	r7, r6
 8008c52:	bf3a      	itte	cc
 8008c54:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008c58:	f1a5 0608 	subcc.w	r6, r5, #8
 8008c5c:	2100      	movcs	r1, #0
 8008c5e:	380b      	subs	r0, #11
 8008c60:	d017      	beq.n	8008c92 <__b2d+0x92>
 8008c62:	f1c0 0c20 	rsb	ip, r0, #32
 8008c66:	fa04 f500 	lsl.w	r5, r4, r0
 8008c6a:	42be      	cmp	r6, r7
 8008c6c:	fa21 f40c 	lsr.w	r4, r1, ip
 8008c70:	ea45 0504 	orr.w	r5, r5, r4
 8008c74:	bf8c      	ite	hi
 8008c76:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008c7a:	2400      	movls	r4, #0
 8008c7c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008c80:	fa01 f000 	lsl.w	r0, r1, r0
 8008c84:	fa24 f40c 	lsr.w	r4, r4, ip
 8008c88:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008c8c:	ea40 0204 	orr.w	r2, r0, r4
 8008c90:	e7db      	b.n	8008c4a <__b2d+0x4a>
 8008c92:	ea44 030c 	orr.w	r3, r4, ip
 8008c96:	460a      	mov	r2, r1
 8008c98:	e7d7      	b.n	8008c4a <__b2d+0x4a>
 8008c9a:	bf00      	nop
 8008c9c:	3ff00000 	.word	0x3ff00000

08008ca0 <__d2b>:
 8008ca0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ca4:	4689      	mov	r9, r1
 8008ca6:	2101      	movs	r1, #1
 8008ca8:	ec57 6b10 	vmov	r6, r7, d0
 8008cac:	4690      	mov	r8, r2
 8008cae:	f7ff fc09 	bl	80084c4 <_Balloc>
 8008cb2:	4604      	mov	r4, r0
 8008cb4:	b930      	cbnz	r0, 8008cc4 <__d2b+0x24>
 8008cb6:	4602      	mov	r2, r0
 8008cb8:	4b25      	ldr	r3, [pc, #148]	; (8008d50 <__d2b+0xb0>)
 8008cba:	4826      	ldr	r0, [pc, #152]	; (8008d54 <__d2b+0xb4>)
 8008cbc:	f240 310a 	movw	r1, #778	; 0x30a
 8008cc0:	f000 fd44 	bl	800974c <__assert_func>
 8008cc4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008cc8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008ccc:	bb35      	cbnz	r5, 8008d1c <__d2b+0x7c>
 8008cce:	2e00      	cmp	r6, #0
 8008cd0:	9301      	str	r3, [sp, #4]
 8008cd2:	d028      	beq.n	8008d26 <__d2b+0x86>
 8008cd4:	4668      	mov	r0, sp
 8008cd6:	9600      	str	r6, [sp, #0]
 8008cd8:	f7ff fd06 	bl	80086e8 <__lo0bits>
 8008cdc:	9900      	ldr	r1, [sp, #0]
 8008cde:	b300      	cbz	r0, 8008d22 <__d2b+0x82>
 8008ce0:	9a01      	ldr	r2, [sp, #4]
 8008ce2:	f1c0 0320 	rsb	r3, r0, #32
 8008ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8008cea:	430b      	orrs	r3, r1
 8008cec:	40c2      	lsrs	r2, r0
 8008cee:	6163      	str	r3, [r4, #20]
 8008cf0:	9201      	str	r2, [sp, #4]
 8008cf2:	9b01      	ldr	r3, [sp, #4]
 8008cf4:	61a3      	str	r3, [r4, #24]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	bf14      	ite	ne
 8008cfa:	2202      	movne	r2, #2
 8008cfc:	2201      	moveq	r2, #1
 8008cfe:	6122      	str	r2, [r4, #16]
 8008d00:	b1d5      	cbz	r5, 8008d38 <__d2b+0x98>
 8008d02:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008d06:	4405      	add	r5, r0
 8008d08:	f8c9 5000 	str.w	r5, [r9]
 8008d0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008d10:	f8c8 0000 	str.w	r0, [r8]
 8008d14:	4620      	mov	r0, r4
 8008d16:	b003      	add	sp, #12
 8008d18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d20:	e7d5      	b.n	8008cce <__d2b+0x2e>
 8008d22:	6161      	str	r1, [r4, #20]
 8008d24:	e7e5      	b.n	8008cf2 <__d2b+0x52>
 8008d26:	a801      	add	r0, sp, #4
 8008d28:	f7ff fcde 	bl	80086e8 <__lo0bits>
 8008d2c:	9b01      	ldr	r3, [sp, #4]
 8008d2e:	6163      	str	r3, [r4, #20]
 8008d30:	2201      	movs	r2, #1
 8008d32:	6122      	str	r2, [r4, #16]
 8008d34:	3020      	adds	r0, #32
 8008d36:	e7e3      	b.n	8008d00 <__d2b+0x60>
 8008d38:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008d3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008d40:	f8c9 0000 	str.w	r0, [r9]
 8008d44:	6918      	ldr	r0, [r3, #16]
 8008d46:	f7ff fcaf 	bl	80086a8 <__hi0bits>
 8008d4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008d4e:	e7df      	b.n	8008d10 <__d2b+0x70>
 8008d50:	08009c88 	.word	0x08009c88
 8008d54:	08009d78 	.word	0x08009d78

08008d58 <__ratio>:
 8008d58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d5c:	4688      	mov	r8, r1
 8008d5e:	4669      	mov	r1, sp
 8008d60:	4681      	mov	r9, r0
 8008d62:	f7ff ff4d 	bl	8008c00 <__b2d>
 8008d66:	a901      	add	r1, sp, #4
 8008d68:	4640      	mov	r0, r8
 8008d6a:	ec55 4b10 	vmov	r4, r5, d0
 8008d6e:	f7ff ff47 	bl	8008c00 <__b2d>
 8008d72:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008d76:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008d7a:	eba3 0c02 	sub.w	ip, r3, r2
 8008d7e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008d82:	1a9b      	subs	r3, r3, r2
 8008d84:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008d88:	ec51 0b10 	vmov	r0, r1, d0
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	bfd6      	itet	le
 8008d90:	460a      	movle	r2, r1
 8008d92:	462a      	movgt	r2, r5
 8008d94:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008d98:	468b      	mov	fp, r1
 8008d9a:	462f      	mov	r7, r5
 8008d9c:	bfd4      	ite	le
 8008d9e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008da2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008da6:	4620      	mov	r0, r4
 8008da8:	ee10 2a10 	vmov	r2, s0
 8008dac:	465b      	mov	r3, fp
 8008dae:	4639      	mov	r1, r7
 8008db0:	f7f7 fd54 	bl	800085c <__aeabi_ddiv>
 8008db4:	ec41 0b10 	vmov	d0, r0, r1
 8008db8:	b003      	add	sp, #12
 8008dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008dbe <__copybits>:
 8008dbe:	3901      	subs	r1, #1
 8008dc0:	b570      	push	{r4, r5, r6, lr}
 8008dc2:	1149      	asrs	r1, r1, #5
 8008dc4:	6914      	ldr	r4, [r2, #16]
 8008dc6:	3101      	adds	r1, #1
 8008dc8:	f102 0314 	add.w	r3, r2, #20
 8008dcc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008dd0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008dd4:	1f05      	subs	r5, r0, #4
 8008dd6:	42a3      	cmp	r3, r4
 8008dd8:	d30c      	bcc.n	8008df4 <__copybits+0x36>
 8008dda:	1aa3      	subs	r3, r4, r2
 8008ddc:	3b11      	subs	r3, #17
 8008dde:	f023 0303 	bic.w	r3, r3, #3
 8008de2:	3211      	adds	r2, #17
 8008de4:	42a2      	cmp	r2, r4
 8008de6:	bf88      	it	hi
 8008de8:	2300      	movhi	r3, #0
 8008dea:	4418      	add	r0, r3
 8008dec:	2300      	movs	r3, #0
 8008dee:	4288      	cmp	r0, r1
 8008df0:	d305      	bcc.n	8008dfe <__copybits+0x40>
 8008df2:	bd70      	pop	{r4, r5, r6, pc}
 8008df4:	f853 6b04 	ldr.w	r6, [r3], #4
 8008df8:	f845 6f04 	str.w	r6, [r5, #4]!
 8008dfc:	e7eb      	b.n	8008dd6 <__copybits+0x18>
 8008dfe:	f840 3b04 	str.w	r3, [r0], #4
 8008e02:	e7f4      	b.n	8008dee <__copybits+0x30>

08008e04 <__any_on>:
 8008e04:	f100 0214 	add.w	r2, r0, #20
 8008e08:	6900      	ldr	r0, [r0, #16]
 8008e0a:	114b      	asrs	r3, r1, #5
 8008e0c:	4298      	cmp	r0, r3
 8008e0e:	b510      	push	{r4, lr}
 8008e10:	db11      	blt.n	8008e36 <__any_on+0x32>
 8008e12:	dd0a      	ble.n	8008e2a <__any_on+0x26>
 8008e14:	f011 011f 	ands.w	r1, r1, #31
 8008e18:	d007      	beq.n	8008e2a <__any_on+0x26>
 8008e1a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008e1e:	fa24 f001 	lsr.w	r0, r4, r1
 8008e22:	fa00 f101 	lsl.w	r1, r0, r1
 8008e26:	428c      	cmp	r4, r1
 8008e28:	d10b      	bne.n	8008e42 <__any_on+0x3e>
 8008e2a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d803      	bhi.n	8008e3a <__any_on+0x36>
 8008e32:	2000      	movs	r0, #0
 8008e34:	bd10      	pop	{r4, pc}
 8008e36:	4603      	mov	r3, r0
 8008e38:	e7f7      	b.n	8008e2a <__any_on+0x26>
 8008e3a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008e3e:	2900      	cmp	r1, #0
 8008e40:	d0f5      	beq.n	8008e2e <__any_on+0x2a>
 8008e42:	2001      	movs	r0, #1
 8008e44:	e7f6      	b.n	8008e34 <__any_on+0x30>

08008e46 <_calloc_r>:
 8008e46:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e48:	fba1 2402 	umull	r2, r4, r1, r2
 8008e4c:	b94c      	cbnz	r4, 8008e62 <_calloc_r+0x1c>
 8008e4e:	4611      	mov	r1, r2
 8008e50:	9201      	str	r2, [sp, #4]
 8008e52:	f000 f87b 	bl	8008f4c <_malloc_r>
 8008e56:	9a01      	ldr	r2, [sp, #4]
 8008e58:	4605      	mov	r5, r0
 8008e5a:	b930      	cbnz	r0, 8008e6a <_calloc_r+0x24>
 8008e5c:	4628      	mov	r0, r5
 8008e5e:	b003      	add	sp, #12
 8008e60:	bd30      	pop	{r4, r5, pc}
 8008e62:	220c      	movs	r2, #12
 8008e64:	6002      	str	r2, [r0, #0]
 8008e66:	2500      	movs	r5, #0
 8008e68:	e7f8      	b.n	8008e5c <_calloc_r+0x16>
 8008e6a:	4621      	mov	r1, r4
 8008e6c:	f7fc f84c 	bl	8004f08 <memset>
 8008e70:	e7f4      	b.n	8008e5c <_calloc_r+0x16>
	...

08008e74 <_free_r>:
 8008e74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e76:	2900      	cmp	r1, #0
 8008e78:	d044      	beq.n	8008f04 <_free_r+0x90>
 8008e7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e7e:	9001      	str	r0, [sp, #4]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	f1a1 0404 	sub.w	r4, r1, #4
 8008e86:	bfb8      	it	lt
 8008e88:	18e4      	addlt	r4, r4, r3
 8008e8a:	f000 fced 	bl	8009868 <__malloc_lock>
 8008e8e:	4a1e      	ldr	r2, [pc, #120]	; (8008f08 <_free_r+0x94>)
 8008e90:	9801      	ldr	r0, [sp, #4]
 8008e92:	6813      	ldr	r3, [r2, #0]
 8008e94:	b933      	cbnz	r3, 8008ea4 <_free_r+0x30>
 8008e96:	6063      	str	r3, [r4, #4]
 8008e98:	6014      	str	r4, [r2, #0]
 8008e9a:	b003      	add	sp, #12
 8008e9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ea0:	f000 bce8 	b.w	8009874 <__malloc_unlock>
 8008ea4:	42a3      	cmp	r3, r4
 8008ea6:	d908      	bls.n	8008eba <_free_r+0x46>
 8008ea8:	6825      	ldr	r5, [r4, #0]
 8008eaa:	1961      	adds	r1, r4, r5
 8008eac:	428b      	cmp	r3, r1
 8008eae:	bf01      	itttt	eq
 8008eb0:	6819      	ldreq	r1, [r3, #0]
 8008eb2:	685b      	ldreq	r3, [r3, #4]
 8008eb4:	1949      	addeq	r1, r1, r5
 8008eb6:	6021      	streq	r1, [r4, #0]
 8008eb8:	e7ed      	b.n	8008e96 <_free_r+0x22>
 8008eba:	461a      	mov	r2, r3
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	b10b      	cbz	r3, 8008ec4 <_free_r+0x50>
 8008ec0:	42a3      	cmp	r3, r4
 8008ec2:	d9fa      	bls.n	8008eba <_free_r+0x46>
 8008ec4:	6811      	ldr	r1, [r2, #0]
 8008ec6:	1855      	adds	r5, r2, r1
 8008ec8:	42a5      	cmp	r5, r4
 8008eca:	d10b      	bne.n	8008ee4 <_free_r+0x70>
 8008ecc:	6824      	ldr	r4, [r4, #0]
 8008ece:	4421      	add	r1, r4
 8008ed0:	1854      	adds	r4, r2, r1
 8008ed2:	42a3      	cmp	r3, r4
 8008ed4:	6011      	str	r1, [r2, #0]
 8008ed6:	d1e0      	bne.n	8008e9a <_free_r+0x26>
 8008ed8:	681c      	ldr	r4, [r3, #0]
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	6053      	str	r3, [r2, #4]
 8008ede:	4421      	add	r1, r4
 8008ee0:	6011      	str	r1, [r2, #0]
 8008ee2:	e7da      	b.n	8008e9a <_free_r+0x26>
 8008ee4:	d902      	bls.n	8008eec <_free_r+0x78>
 8008ee6:	230c      	movs	r3, #12
 8008ee8:	6003      	str	r3, [r0, #0]
 8008eea:	e7d6      	b.n	8008e9a <_free_r+0x26>
 8008eec:	6825      	ldr	r5, [r4, #0]
 8008eee:	1961      	adds	r1, r4, r5
 8008ef0:	428b      	cmp	r3, r1
 8008ef2:	bf04      	itt	eq
 8008ef4:	6819      	ldreq	r1, [r3, #0]
 8008ef6:	685b      	ldreq	r3, [r3, #4]
 8008ef8:	6063      	str	r3, [r4, #4]
 8008efa:	bf04      	itt	eq
 8008efc:	1949      	addeq	r1, r1, r5
 8008efe:	6021      	streq	r1, [r4, #0]
 8008f00:	6054      	str	r4, [r2, #4]
 8008f02:	e7ca      	b.n	8008e9a <_free_r+0x26>
 8008f04:	b003      	add	sp, #12
 8008f06:	bd30      	pop	{r4, r5, pc}
 8008f08:	20000370 	.word	0x20000370

08008f0c <sbrk_aligned>:
 8008f0c:	b570      	push	{r4, r5, r6, lr}
 8008f0e:	4e0e      	ldr	r6, [pc, #56]	; (8008f48 <sbrk_aligned+0x3c>)
 8008f10:	460c      	mov	r4, r1
 8008f12:	6831      	ldr	r1, [r6, #0]
 8008f14:	4605      	mov	r5, r0
 8008f16:	b911      	cbnz	r1, 8008f1e <sbrk_aligned+0x12>
 8008f18:	f000 fb92 	bl	8009640 <_sbrk_r>
 8008f1c:	6030      	str	r0, [r6, #0]
 8008f1e:	4621      	mov	r1, r4
 8008f20:	4628      	mov	r0, r5
 8008f22:	f000 fb8d 	bl	8009640 <_sbrk_r>
 8008f26:	1c43      	adds	r3, r0, #1
 8008f28:	d00a      	beq.n	8008f40 <sbrk_aligned+0x34>
 8008f2a:	1cc4      	adds	r4, r0, #3
 8008f2c:	f024 0403 	bic.w	r4, r4, #3
 8008f30:	42a0      	cmp	r0, r4
 8008f32:	d007      	beq.n	8008f44 <sbrk_aligned+0x38>
 8008f34:	1a21      	subs	r1, r4, r0
 8008f36:	4628      	mov	r0, r5
 8008f38:	f000 fb82 	bl	8009640 <_sbrk_r>
 8008f3c:	3001      	adds	r0, #1
 8008f3e:	d101      	bne.n	8008f44 <sbrk_aligned+0x38>
 8008f40:	f04f 34ff 	mov.w	r4, #4294967295
 8008f44:	4620      	mov	r0, r4
 8008f46:	bd70      	pop	{r4, r5, r6, pc}
 8008f48:	20000374 	.word	0x20000374

08008f4c <_malloc_r>:
 8008f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f50:	1ccd      	adds	r5, r1, #3
 8008f52:	f025 0503 	bic.w	r5, r5, #3
 8008f56:	3508      	adds	r5, #8
 8008f58:	2d0c      	cmp	r5, #12
 8008f5a:	bf38      	it	cc
 8008f5c:	250c      	movcc	r5, #12
 8008f5e:	2d00      	cmp	r5, #0
 8008f60:	4607      	mov	r7, r0
 8008f62:	db01      	blt.n	8008f68 <_malloc_r+0x1c>
 8008f64:	42a9      	cmp	r1, r5
 8008f66:	d905      	bls.n	8008f74 <_malloc_r+0x28>
 8008f68:	230c      	movs	r3, #12
 8008f6a:	603b      	str	r3, [r7, #0]
 8008f6c:	2600      	movs	r6, #0
 8008f6e:	4630      	mov	r0, r6
 8008f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f74:	4e2e      	ldr	r6, [pc, #184]	; (8009030 <_malloc_r+0xe4>)
 8008f76:	f000 fc77 	bl	8009868 <__malloc_lock>
 8008f7a:	6833      	ldr	r3, [r6, #0]
 8008f7c:	461c      	mov	r4, r3
 8008f7e:	bb34      	cbnz	r4, 8008fce <_malloc_r+0x82>
 8008f80:	4629      	mov	r1, r5
 8008f82:	4638      	mov	r0, r7
 8008f84:	f7ff ffc2 	bl	8008f0c <sbrk_aligned>
 8008f88:	1c43      	adds	r3, r0, #1
 8008f8a:	4604      	mov	r4, r0
 8008f8c:	d14d      	bne.n	800902a <_malloc_r+0xde>
 8008f8e:	6834      	ldr	r4, [r6, #0]
 8008f90:	4626      	mov	r6, r4
 8008f92:	2e00      	cmp	r6, #0
 8008f94:	d140      	bne.n	8009018 <_malloc_r+0xcc>
 8008f96:	6823      	ldr	r3, [r4, #0]
 8008f98:	4631      	mov	r1, r6
 8008f9a:	4638      	mov	r0, r7
 8008f9c:	eb04 0803 	add.w	r8, r4, r3
 8008fa0:	f000 fb4e 	bl	8009640 <_sbrk_r>
 8008fa4:	4580      	cmp	r8, r0
 8008fa6:	d13a      	bne.n	800901e <_malloc_r+0xd2>
 8008fa8:	6821      	ldr	r1, [r4, #0]
 8008faa:	3503      	adds	r5, #3
 8008fac:	1a6d      	subs	r5, r5, r1
 8008fae:	f025 0503 	bic.w	r5, r5, #3
 8008fb2:	3508      	adds	r5, #8
 8008fb4:	2d0c      	cmp	r5, #12
 8008fb6:	bf38      	it	cc
 8008fb8:	250c      	movcc	r5, #12
 8008fba:	4629      	mov	r1, r5
 8008fbc:	4638      	mov	r0, r7
 8008fbe:	f7ff ffa5 	bl	8008f0c <sbrk_aligned>
 8008fc2:	3001      	adds	r0, #1
 8008fc4:	d02b      	beq.n	800901e <_malloc_r+0xd2>
 8008fc6:	6823      	ldr	r3, [r4, #0]
 8008fc8:	442b      	add	r3, r5
 8008fca:	6023      	str	r3, [r4, #0]
 8008fcc:	e00e      	b.n	8008fec <_malloc_r+0xa0>
 8008fce:	6822      	ldr	r2, [r4, #0]
 8008fd0:	1b52      	subs	r2, r2, r5
 8008fd2:	d41e      	bmi.n	8009012 <_malloc_r+0xc6>
 8008fd4:	2a0b      	cmp	r2, #11
 8008fd6:	d916      	bls.n	8009006 <_malloc_r+0xba>
 8008fd8:	1961      	adds	r1, r4, r5
 8008fda:	42a3      	cmp	r3, r4
 8008fdc:	6025      	str	r5, [r4, #0]
 8008fde:	bf18      	it	ne
 8008fe0:	6059      	strne	r1, [r3, #4]
 8008fe2:	6863      	ldr	r3, [r4, #4]
 8008fe4:	bf08      	it	eq
 8008fe6:	6031      	streq	r1, [r6, #0]
 8008fe8:	5162      	str	r2, [r4, r5]
 8008fea:	604b      	str	r3, [r1, #4]
 8008fec:	4638      	mov	r0, r7
 8008fee:	f104 060b 	add.w	r6, r4, #11
 8008ff2:	f000 fc3f 	bl	8009874 <__malloc_unlock>
 8008ff6:	f026 0607 	bic.w	r6, r6, #7
 8008ffa:	1d23      	adds	r3, r4, #4
 8008ffc:	1af2      	subs	r2, r6, r3
 8008ffe:	d0b6      	beq.n	8008f6e <_malloc_r+0x22>
 8009000:	1b9b      	subs	r3, r3, r6
 8009002:	50a3      	str	r3, [r4, r2]
 8009004:	e7b3      	b.n	8008f6e <_malloc_r+0x22>
 8009006:	6862      	ldr	r2, [r4, #4]
 8009008:	42a3      	cmp	r3, r4
 800900a:	bf0c      	ite	eq
 800900c:	6032      	streq	r2, [r6, #0]
 800900e:	605a      	strne	r2, [r3, #4]
 8009010:	e7ec      	b.n	8008fec <_malloc_r+0xa0>
 8009012:	4623      	mov	r3, r4
 8009014:	6864      	ldr	r4, [r4, #4]
 8009016:	e7b2      	b.n	8008f7e <_malloc_r+0x32>
 8009018:	4634      	mov	r4, r6
 800901a:	6876      	ldr	r6, [r6, #4]
 800901c:	e7b9      	b.n	8008f92 <_malloc_r+0x46>
 800901e:	230c      	movs	r3, #12
 8009020:	603b      	str	r3, [r7, #0]
 8009022:	4638      	mov	r0, r7
 8009024:	f000 fc26 	bl	8009874 <__malloc_unlock>
 8009028:	e7a1      	b.n	8008f6e <_malloc_r+0x22>
 800902a:	6025      	str	r5, [r4, #0]
 800902c:	e7de      	b.n	8008fec <_malloc_r+0xa0>
 800902e:	bf00      	nop
 8009030:	20000370 	.word	0x20000370

08009034 <__ssputs_r>:
 8009034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009038:	688e      	ldr	r6, [r1, #8]
 800903a:	429e      	cmp	r6, r3
 800903c:	4682      	mov	sl, r0
 800903e:	460c      	mov	r4, r1
 8009040:	4690      	mov	r8, r2
 8009042:	461f      	mov	r7, r3
 8009044:	d838      	bhi.n	80090b8 <__ssputs_r+0x84>
 8009046:	898a      	ldrh	r2, [r1, #12]
 8009048:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800904c:	d032      	beq.n	80090b4 <__ssputs_r+0x80>
 800904e:	6825      	ldr	r5, [r4, #0]
 8009050:	6909      	ldr	r1, [r1, #16]
 8009052:	eba5 0901 	sub.w	r9, r5, r1
 8009056:	6965      	ldr	r5, [r4, #20]
 8009058:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800905c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009060:	3301      	adds	r3, #1
 8009062:	444b      	add	r3, r9
 8009064:	106d      	asrs	r5, r5, #1
 8009066:	429d      	cmp	r5, r3
 8009068:	bf38      	it	cc
 800906a:	461d      	movcc	r5, r3
 800906c:	0553      	lsls	r3, r2, #21
 800906e:	d531      	bpl.n	80090d4 <__ssputs_r+0xa0>
 8009070:	4629      	mov	r1, r5
 8009072:	f7ff ff6b 	bl	8008f4c <_malloc_r>
 8009076:	4606      	mov	r6, r0
 8009078:	b950      	cbnz	r0, 8009090 <__ssputs_r+0x5c>
 800907a:	230c      	movs	r3, #12
 800907c:	f8ca 3000 	str.w	r3, [sl]
 8009080:	89a3      	ldrh	r3, [r4, #12]
 8009082:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009086:	81a3      	strh	r3, [r4, #12]
 8009088:	f04f 30ff 	mov.w	r0, #4294967295
 800908c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009090:	6921      	ldr	r1, [r4, #16]
 8009092:	464a      	mov	r2, r9
 8009094:	f7fb ff2a 	bl	8004eec <memcpy>
 8009098:	89a3      	ldrh	r3, [r4, #12]
 800909a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800909e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090a2:	81a3      	strh	r3, [r4, #12]
 80090a4:	6126      	str	r6, [r4, #16]
 80090a6:	6165      	str	r5, [r4, #20]
 80090a8:	444e      	add	r6, r9
 80090aa:	eba5 0509 	sub.w	r5, r5, r9
 80090ae:	6026      	str	r6, [r4, #0]
 80090b0:	60a5      	str	r5, [r4, #8]
 80090b2:	463e      	mov	r6, r7
 80090b4:	42be      	cmp	r6, r7
 80090b6:	d900      	bls.n	80090ba <__ssputs_r+0x86>
 80090b8:	463e      	mov	r6, r7
 80090ba:	6820      	ldr	r0, [r4, #0]
 80090bc:	4632      	mov	r2, r6
 80090be:	4641      	mov	r1, r8
 80090c0:	f000 fbb8 	bl	8009834 <memmove>
 80090c4:	68a3      	ldr	r3, [r4, #8]
 80090c6:	1b9b      	subs	r3, r3, r6
 80090c8:	60a3      	str	r3, [r4, #8]
 80090ca:	6823      	ldr	r3, [r4, #0]
 80090cc:	4433      	add	r3, r6
 80090ce:	6023      	str	r3, [r4, #0]
 80090d0:	2000      	movs	r0, #0
 80090d2:	e7db      	b.n	800908c <__ssputs_r+0x58>
 80090d4:	462a      	mov	r2, r5
 80090d6:	f000 fbd3 	bl	8009880 <_realloc_r>
 80090da:	4606      	mov	r6, r0
 80090dc:	2800      	cmp	r0, #0
 80090de:	d1e1      	bne.n	80090a4 <__ssputs_r+0x70>
 80090e0:	6921      	ldr	r1, [r4, #16]
 80090e2:	4650      	mov	r0, sl
 80090e4:	f7ff fec6 	bl	8008e74 <_free_r>
 80090e8:	e7c7      	b.n	800907a <__ssputs_r+0x46>
	...

080090ec <_svfiprintf_r>:
 80090ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090f0:	4698      	mov	r8, r3
 80090f2:	898b      	ldrh	r3, [r1, #12]
 80090f4:	061b      	lsls	r3, r3, #24
 80090f6:	b09d      	sub	sp, #116	; 0x74
 80090f8:	4607      	mov	r7, r0
 80090fa:	460d      	mov	r5, r1
 80090fc:	4614      	mov	r4, r2
 80090fe:	d50e      	bpl.n	800911e <_svfiprintf_r+0x32>
 8009100:	690b      	ldr	r3, [r1, #16]
 8009102:	b963      	cbnz	r3, 800911e <_svfiprintf_r+0x32>
 8009104:	2140      	movs	r1, #64	; 0x40
 8009106:	f7ff ff21 	bl	8008f4c <_malloc_r>
 800910a:	6028      	str	r0, [r5, #0]
 800910c:	6128      	str	r0, [r5, #16]
 800910e:	b920      	cbnz	r0, 800911a <_svfiprintf_r+0x2e>
 8009110:	230c      	movs	r3, #12
 8009112:	603b      	str	r3, [r7, #0]
 8009114:	f04f 30ff 	mov.w	r0, #4294967295
 8009118:	e0d1      	b.n	80092be <_svfiprintf_r+0x1d2>
 800911a:	2340      	movs	r3, #64	; 0x40
 800911c:	616b      	str	r3, [r5, #20]
 800911e:	2300      	movs	r3, #0
 8009120:	9309      	str	r3, [sp, #36]	; 0x24
 8009122:	2320      	movs	r3, #32
 8009124:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009128:	f8cd 800c 	str.w	r8, [sp, #12]
 800912c:	2330      	movs	r3, #48	; 0x30
 800912e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80092d8 <_svfiprintf_r+0x1ec>
 8009132:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009136:	f04f 0901 	mov.w	r9, #1
 800913a:	4623      	mov	r3, r4
 800913c:	469a      	mov	sl, r3
 800913e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009142:	b10a      	cbz	r2, 8009148 <_svfiprintf_r+0x5c>
 8009144:	2a25      	cmp	r2, #37	; 0x25
 8009146:	d1f9      	bne.n	800913c <_svfiprintf_r+0x50>
 8009148:	ebba 0b04 	subs.w	fp, sl, r4
 800914c:	d00b      	beq.n	8009166 <_svfiprintf_r+0x7a>
 800914e:	465b      	mov	r3, fp
 8009150:	4622      	mov	r2, r4
 8009152:	4629      	mov	r1, r5
 8009154:	4638      	mov	r0, r7
 8009156:	f7ff ff6d 	bl	8009034 <__ssputs_r>
 800915a:	3001      	adds	r0, #1
 800915c:	f000 80aa 	beq.w	80092b4 <_svfiprintf_r+0x1c8>
 8009160:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009162:	445a      	add	r2, fp
 8009164:	9209      	str	r2, [sp, #36]	; 0x24
 8009166:	f89a 3000 	ldrb.w	r3, [sl]
 800916a:	2b00      	cmp	r3, #0
 800916c:	f000 80a2 	beq.w	80092b4 <_svfiprintf_r+0x1c8>
 8009170:	2300      	movs	r3, #0
 8009172:	f04f 32ff 	mov.w	r2, #4294967295
 8009176:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800917a:	f10a 0a01 	add.w	sl, sl, #1
 800917e:	9304      	str	r3, [sp, #16]
 8009180:	9307      	str	r3, [sp, #28]
 8009182:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009186:	931a      	str	r3, [sp, #104]	; 0x68
 8009188:	4654      	mov	r4, sl
 800918a:	2205      	movs	r2, #5
 800918c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009190:	4851      	ldr	r0, [pc, #324]	; (80092d8 <_svfiprintf_r+0x1ec>)
 8009192:	f7f7 f82d 	bl	80001f0 <memchr>
 8009196:	9a04      	ldr	r2, [sp, #16]
 8009198:	b9d8      	cbnz	r0, 80091d2 <_svfiprintf_r+0xe6>
 800919a:	06d0      	lsls	r0, r2, #27
 800919c:	bf44      	itt	mi
 800919e:	2320      	movmi	r3, #32
 80091a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091a4:	0711      	lsls	r1, r2, #28
 80091a6:	bf44      	itt	mi
 80091a8:	232b      	movmi	r3, #43	; 0x2b
 80091aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091ae:	f89a 3000 	ldrb.w	r3, [sl]
 80091b2:	2b2a      	cmp	r3, #42	; 0x2a
 80091b4:	d015      	beq.n	80091e2 <_svfiprintf_r+0xf6>
 80091b6:	9a07      	ldr	r2, [sp, #28]
 80091b8:	4654      	mov	r4, sl
 80091ba:	2000      	movs	r0, #0
 80091bc:	f04f 0c0a 	mov.w	ip, #10
 80091c0:	4621      	mov	r1, r4
 80091c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091c6:	3b30      	subs	r3, #48	; 0x30
 80091c8:	2b09      	cmp	r3, #9
 80091ca:	d94e      	bls.n	800926a <_svfiprintf_r+0x17e>
 80091cc:	b1b0      	cbz	r0, 80091fc <_svfiprintf_r+0x110>
 80091ce:	9207      	str	r2, [sp, #28]
 80091d0:	e014      	b.n	80091fc <_svfiprintf_r+0x110>
 80091d2:	eba0 0308 	sub.w	r3, r0, r8
 80091d6:	fa09 f303 	lsl.w	r3, r9, r3
 80091da:	4313      	orrs	r3, r2
 80091dc:	9304      	str	r3, [sp, #16]
 80091de:	46a2      	mov	sl, r4
 80091e0:	e7d2      	b.n	8009188 <_svfiprintf_r+0x9c>
 80091e2:	9b03      	ldr	r3, [sp, #12]
 80091e4:	1d19      	adds	r1, r3, #4
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	9103      	str	r1, [sp, #12]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	bfbb      	ittet	lt
 80091ee:	425b      	neglt	r3, r3
 80091f0:	f042 0202 	orrlt.w	r2, r2, #2
 80091f4:	9307      	strge	r3, [sp, #28]
 80091f6:	9307      	strlt	r3, [sp, #28]
 80091f8:	bfb8      	it	lt
 80091fa:	9204      	strlt	r2, [sp, #16]
 80091fc:	7823      	ldrb	r3, [r4, #0]
 80091fe:	2b2e      	cmp	r3, #46	; 0x2e
 8009200:	d10c      	bne.n	800921c <_svfiprintf_r+0x130>
 8009202:	7863      	ldrb	r3, [r4, #1]
 8009204:	2b2a      	cmp	r3, #42	; 0x2a
 8009206:	d135      	bne.n	8009274 <_svfiprintf_r+0x188>
 8009208:	9b03      	ldr	r3, [sp, #12]
 800920a:	1d1a      	adds	r2, r3, #4
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	9203      	str	r2, [sp, #12]
 8009210:	2b00      	cmp	r3, #0
 8009212:	bfb8      	it	lt
 8009214:	f04f 33ff 	movlt.w	r3, #4294967295
 8009218:	3402      	adds	r4, #2
 800921a:	9305      	str	r3, [sp, #20]
 800921c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80092e8 <_svfiprintf_r+0x1fc>
 8009220:	7821      	ldrb	r1, [r4, #0]
 8009222:	2203      	movs	r2, #3
 8009224:	4650      	mov	r0, sl
 8009226:	f7f6 ffe3 	bl	80001f0 <memchr>
 800922a:	b140      	cbz	r0, 800923e <_svfiprintf_r+0x152>
 800922c:	2340      	movs	r3, #64	; 0x40
 800922e:	eba0 000a 	sub.w	r0, r0, sl
 8009232:	fa03 f000 	lsl.w	r0, r3, r0
 8009236:	9b04      	ldr	r3, [sp, #16]
 8009238:	4303      	orrs	r3, r0
 800923a:	3401      	adds	r4, #1
 800923c:	9304      	str	r3, [sp, #16]
 800923e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009242:	4826      	ldr	r0, [pc, #152]	; (80092dc <_svfiprintf_r+0x1f0>)
 8009244:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009248:	2206      	movs	r2, #6
 800924a:	f7f6 ffd1 	bl	80001f0 <memchr>
 800924e:	2800      	cmp	r0, #0
 8009250:	d038      	beq.n	80092c4 <_svfiprintf_r+0x1d8>
 8009252:	4b23      	ldr	r3, [pc, #140]	; (80092e0 <_svfiprintf_r+0x1f4>)
 8009254:	bb1b      	cbnz	r3, 800929e <_svfiprintf_r+0x1b2>
 8009256:	9b03      	ldr	r3, [sp, #12]
 8009258:	3307      	adds	r3, #7
 800925a:	f023 0307 	bic.w	r3, r3, #7
 800925e:	3308      	adds	r3, #8
 8009260:	9303      	str	r3, [sp, #12]
 8009262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009264:	4433      	add	r3, r6
 8009266:	9309      	str	r3, [sp, #36]	; 0x24
 8009268:	e767      	b.n	800913a <_svfiprintf_r+0x4e>
 800926a:	fb0c 3202 	mla	r2, ip, r2, r3
 800926e:	460c      	mov	r4, r1
 8009270:	2001      	movs	r0, #1
 8009272:	e7a5      	b.n	80091c0 <_svfiprintf_r+0xd4>
 8009274:	2300      	movs	r3, #0
 8009276:	3401      	adds	r4, #1
 8009278:	9305      	str	r3, [sp, #20]
 800927a:	4619      	mov	r1, r3
 800927c:	f04f 0c0a 	mov.w	ip, #10
 8009280:	4620      	mov	r0, r4
 8009282:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009286:	3a30      	subs	r2, #48	; 0x30
 8009288:	2a09      	cmp	r2, #9
 800928a:	d903      	bls.n	8009294 <_svfiprintf_r+0x1a8>
 800928c:	2b00      	cmp	r3, #0
 800928e:	d0c5      	beq.n	800921c <_svfiprintf_r+0x130>
 8009290:	9105      	str	r1, [sp, #20]
 8009292:	e7c3      	b.n	800921c <_svfiprintf_r+0x130>
 8009294:	fb0c 2101 	mla	r1, ip, r1, r2
 8009298:	4604      	mov	r4, r0
 800929a:	2301      	movs	r3, #1
 800929c:	e7f0      	b.n	8009280 <_svfiprintf_r+0x194>
 800929e:	ab03      	add	r3, sp, #12
 80092a0:	9300      	str	r3, [sp, #0]
 80092a2:	462a      	mov	r2, r5
 80092a4:	4b0f      	ldr	r3, [pc, #60]	; (80092e4 <_svfiprintf_r+0x1f8>)
 80092a6:	a904      	add	r1, sp, #16
 80092a8:	4638      	mov	r0, r7
 80092aa:	f7fb fed5 	bl	8005058 <_printf_float>
 80092ae:	1c42      	adds	r2, r0, #1
 80092b0:	4606      	mov	r6, r0
 80092b2:	d1d6      	bne.n	8009262 <_svfiprintf_r+0x176>
 80092b4:	89ab      	ldrh	r3, [r5, #12]
 80092b6:	065b      	lsls	r3, r3, #25
 80092b8:	f53f af2c 	bmi.w	8009114 <_svfiprintf_r+0x28>
 80092bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092be:	b01d      	add	sp, #116	; 0x74
 80092c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092c4:	ab03      	add	r3, sp, #12
 80092c6:	9300      	str	r3, [sp, #0]
 80092c8:	462a      	mov	r2, r5
 80092ca:	4b06      	ldr	r3, [pc, #24]	; (80092e4 <_svfiprintf_r+0x1f8>)
 80092cc:	a904      	add	r1, sp, #16
 80092ce:	4638      	mov	r0, r7
 80092d0:	f7fc f966 	bl	80055a0 <_printf_i>
 80092d4:	e7eb      	b.n	80092ae <_svfiprintf_r+0x1c2>
 80092d6:	bf00      	nop
 80092d8:	08009ed4 	.word	0x08009ed4
 80092dc:	08009ede 	.word	0x08009ede
 80092e0:	08005059 	.word	0x08005059
 80092e4:	08009035 	.word	0x08009035
 80092e8:	08009eda 	.word	0x08009eda

080092ec <__sfputc_r>:
 80092ec:	6893      	ldr	r3, [r2, #8]
 80092ee:	3b01      	subs	r3, #1
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	b410      	push	{r4}
 80092f4:	6093      	str	r3, [r2, #8]
 80092f6:	da08      	bge.n	800930a <__sfputc_r+0x1e>
 80092f8:	6994      	ldr	r4, [r2, #24]
 80092fa:	42a3      	cmp	r3, r4
 80092fc:	db01      	blt.n	8009302 <__sfputc_r+0x16>
 80092fe:	290a      	cmp	r1, #10
 8009300:	d103      	bne.n	800930a <__sfputc_r+0x1e>
 8009302:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009306:	f7fd bbf7 	b.w	8006af8 <__swbuf_r>
 800930a:	6813      	ldr	r3, [r2, #0]
 800930c:	1c58      	adds	r0, r3, #1
 800930e:	6010      	str	r0, [r2, #0]
 8009310:	7019      	strb	r1, [r3, #0]
 8009312:	4608      	mov	r0, r1
 8009314:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009318:	4770      	bx	lr

0800931a <__sfputs_r>:
 800931a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800931c:	4606      	mov	r6, r0
 800931e:	460f      	mov	r7, r1
 8009320:	4614      	mov	r4, r2
 8009322:	18d5      	adds	r5, r2, r3
 8009324:	42ac      	cmp	r4, r5
 8009326:	d101      	bne.n	800932c <__sfputs_r+0x12>
 8009328:	2000      	movs	r0, #0
 800932a:	e007      	b.n	800933c <__sfputs_r+0x22>
 800932c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009330:	463a      	mov	r2, r7
 8009332:	4630      	mov	r0, r6
 8009334:	f7ff ffda 	bl	80092ec <__sfputc_r>
 8009338:	1c43      	adds	r3, r0, #1
 800933a:	d1f3      	bne.n	8009324 <__sfputs_r+0xa>
 800933c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009340 <_vfiprintf_r>:
 8009340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009344:	460d      	mov	r5, r1
 8009346:	b09d      	sub	sp, #116	; 0x74
 8009348:	4614      	mov	r4, r2
 800934a:	4698      	mov	r8, r3
 800934c:	4606      	mov	r6, r0
 800934e:	b118      	cbz	r0, 8009358 <_vfiprintf_r+0x18>
 8009350:	6983      	ldr	r3, [r0, #24]
 8009352:	b90b      	cbnz	r3, 8009358 <_vfiprintf_r+0x18>
 8009354:	f7fe fc24 	bl	8007ba0 <__sinit>
 8009358:	4b89      	ldr	r3, [pc, #548]	; (8009580 <_vfiprintf_r+0x240>)
 800935a:	429d      	cmp	r5, r3
 800935c:	d11b      	bne.n	8009396 <_vfiprintf_r+0x56>
 800935e:	6875      	ldr	r5, [r6, #4]
 8009360:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009362:	07d9      	lsls	r1, r3, #31
 8009364:	d405      	bmi.n	8009372 <_vfiprintf_r+0x32>
 8009366:	89ab      	ldrh	r3, [r5, #12]
 8009368:	059a      	lsls	r2, r3, #22
 800936a:	d402      	bmi.n	8009372 <_vfiprintf_r+0x32>
 800936c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800936e:	f7ff f828 	bl	80083c2 <__retarget_lock_acquire_recursive>
 8009372:	89ab      	ldrh	r3, [r5, #12]
 8009374:	071b      	lsls	r3, r3, #28
 8009376:	d501      	bpl.n	800937c <_vfiprintf_r+0x3c>
 8009378:	692b      	ldr	r3, [r5, #16]
 800937a:	b9eb      	cbnz	r3, 80093b8 <_vfiprintf_r+0x78>
 800937c:	4629      	mov	r1, r5
 800937e:	4630      	mov	r0, r6
 8009380:	f7fd fc0c 	bl	8006b9c <__swsetup_r>
 8009384:	b1c0      	cbz	r0, 80093b8 <_vfiprintf_r+0x78>
 8009386:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009388:	07dc      	lsls	r4, r3, #31
 800938a:	d50e      	bpl.n	80093aa <_vfiprintf_r+0x6a>
 800938c:	f04f 30ff 	mov.w	r0, #4294967295
 8009390:	b01d      	add	sp, #116	; 0x74
 8009392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009396:	4b7b      	ldr	r3, [pc, #492]	; (8009584 <_vfiprintf_r+0x244>)
 8009398:	429d      	cmp	r5, r3
 800939a:	d101      	bne.n	80093a0 <_vfiprintf_r+0x60>
 800939c:	68b5      	ldr	r5, [r6, #8]
 800939e:	e7df      	b.n	8009360 <_vfiprintf_r+0x20>
 80093a0:	4b79      	ldr	r3, [pc, #484]	; (8009588 <_vfiprintf_r+0x248>)
 80093a2:	429d      	cmp	r5, r3
 80093a4:	bf08      	it	eq
 80093a6:	68f5      	ldreq	r5, [r6, #12]
 80093a8:	e7da      	b.n	8009360 <_vfiprintf_r+0x20>
 80093aa:	89ab      	ldrh	r3, [r5, #12]
 80093ac:	0598      	lsls	r0, r3, #22
 80093ae:	d4ed      	bmi.n	800938c <_vfiprintf_r+0x4c>
 80093b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093b2:	f7ff f807 	bl	80083c4 <__retarget_lock_release_recursive>
 80093b6:	e7e9      	b.n	800938c <_vfiprintf_r+0x4c>
 80093b8:	2300      	movs	r3, #0
 80093ba:	9309      	str	r3, [sp, #36]	; 0x24
 80093bc:	2320      	movs	r3, #32
 80093be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80093c6:	2330      	movs	r3, #48	; 0x30
 80093c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800958c <_vfiprintf_r+0x24c>
 80093cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80093d0:	f04f 0901 	mov.w	r9, #1
 80093d4:	4623      	mov	r3, r4
 80093d6:	469a      	mov	sl, r3
 80093d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093dc:	b10a      	cbz	r2, 80093e2 <_vfiprintf_r+0xa2>
 80093de:	2a25      	cmp	r2, #37	; 0x25
 80093e0:	d1f9      	bne.n	80093d6 <_vfiprintf_r+0x96>
 80093e2:	ebba 0b04 	subs.w	fp, sl, r4
 80093e6:	d00b      	beq.n	8009400 <_vfiprintf_r+0xc0>
 80093e8:	465b      	mov	r3, fp
 80093ea:	4622      	mov	r2, r4
 80093ec:	4629      	mov	r1, r5
 80093ee:	4630      	mov	r0, r6
 80093f0:	f7ff ff93 	bl	800931a <__sfputs_r>
 80093f4:	3001      	adds	r0, #1
 80093f6:	f000 80aa 	beq.w	800954e <_vfiprintf_r+0x20e>
 80093fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093fc:	445a      	add	r2, fp
 80093fe:	9209      	str	r2, [sp, #36]	; 0x24
 8009400:	f89a 3000 	ldrb.w	r3, [sl]
 8009404:	2b00      	cmp	r3, #0
 8009406:	f000 80a2 	beq.w	800954e <_vfiprintf_r+0x20e>
 800940a:	2300      	movs	r3, #0
 800940c:	f04f 32ff 	mov.w	r2, #4294967295
 8009410:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009414:	f10a 0a01 	add.w	sl, sl, #1
 8009418:	9304      	str	r3, [sp, #16]
 800941a:	9307      	str	r3, [sp, #28]
 800941c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009420:	931a      	str	r3, [sp, #104]	; 0x68
 8009422:	4654      	mov	r4, sl
 8009424:	2205      	movs	r2, #5
 8009426:	f814 1b01 	ldrb.w	r1, [r4], #1
 800942a:	4858      	ldr	r0, [pc, #352]	; (800958c <_vfiprintf_r+0x24c>)
 800942c:	f7f6 fee0 	bl	80001f0 <memchr>
 8009430:	9a04      	ldr	r2, [sp, #16]
 8009432:	b9d8      	cbnz	r0, 800946c <_vfiprintf_r+0x12c>
 8009434:	06d1      	lsls	r1, r2, #27
 8009436:	bf44      	itt	mi
 8009438:	2320      	movmi	r3, #32
 800943a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800943e:	0713      	lsls	r3, r2, #28
 8009440:	bf44      	itt	mi
 8009442:	232b      	movmi	r3, #43	; 0x2b
 8009444:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009448:	f89a 3000 	ldrb.w	r3, [sl]
 800944c:	2b2a      	cmp	r3, #42	; 0x2a
 800944e:	d015      	beq.n	800947c <_vfiprintf_r+0x13c>
 8009450:	9a07      	ldr	r2, [sp, #28]
 8009452:	4654      	mov	r4, sl
 8009454:	2000      	movs	r0, #0
 8009456:	f04f 0c0a 	mov.w	ip, #10
 800945a:	4621      	mov	r1, r4
 800945c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009460:	3b30      	subs	r3, #48	; 0x30
 8009462:	2b09      	cmp	r3, #9
 8009464:	d94e      	bls.n	8009504 <_vfiprintf_r+0x1c4>
 8009466:	b1b0      	cbz	r0, 8009496 <_vfiprintf_r+0x156>
 8009468:	9207      	str	r2, [sp, #28]
 800946a:	e014      	b.n	8009496 <_vfiprintf_r+0x156>
 800946c:	eba0 0308 	sub.w	r3, r0, r8
 8009470:	fa09 f303 	lsl.w	r3, r9, r3
 8009474:	4313      	orrs	r3, r2
 8009476:	9304      	str	r3, [sp, #16]
 8009478:	46a2      	mov	sl, r4
 800947a:	e7d2      	b.n	8009422 <_vfiprintf_r+0xe2>
 800947c:	9b03      	ldr	r3, [sp, #12]
 800947e:	1d19      	adds	r1, r3, #4
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	9103      	str	r1, [sp, #12]
 8009484:	2b00      	cmp	r3, #0
 8009486:	bfbb      	ittet	lt
 8009488:	425b      	neglt	r3, r3
 800948a:	f042 0202 	orrlt.w	r2, r2, #2
 800948e:	9307      	strge	r3, [sp, #28]
 8009490:	9307      	strlt	r3, [sp, #28]
 8009492:	bfb8      	it	lt
 8009494:	9204      	strlt	r2, [sp, #16]
 8009496:	7823      	ldrb	r3, [r4, #0]
 8009498:	2b2e      	cmp	r3, #46	; 0x2e
 800949a:	d10c      	bne.n	80094b6 <_vfiprintf_r+0x176>
 800949c:	7863      	ldrb	r3, [r4, #1]
 800949e:	2b2a      	cmp	r3, #42	; 0x2a
 80094a0:	d135      	bne.n	800950e <_vfiprintf_r+0x1ce>
 80094a2:	9b03      	ldr	r3, [sp, #12]
 80094a4:	1d1a      	adds	r2, r3, #4
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	9203      	str	r2, [sp, #12]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	bfb8      	it	lt
 80094ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80094b2:	3402      	adds	r4, #2
 80094b4:	9305      	str	r3, [sp, #20]
 80094b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800959c <_vfiprintf_r+0x25c>
 80094ba:	7821      	ldrb	r1, [r4, #0]
 80094bc:	2203      	movs	r2, #3
 80094be:	4650      	mov	r0, sl
 80094c0:	f7f6 fe96 	bl	80001f0 <memchr>
 80094c4:	b140      	cbz	r0, 80094d8 <_vfiprintf_r+0x198>
 80094c6:	2340      	movs	r3, #64	; 0x40
 80094c8:	eba0 000a 	sub.w	r0, r0, sl
 80094cc:	fa03 f000 	lsl.w	r0, r3, r0
 80094d0:	9b04      	ldr	r3, [sp, #16]
 80094d2:	4303      	orrs	r3, r0
 80094d4:	3401      	adds	r4, #1
 80094d6:	9304      	str	r3, [sp, #16]
 80094d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094dc:	482c      	ldr	r0, [pc, #176]	; (8009590 <_vfiprintf_r+0x250>)
 80094de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094e2:	2206      	movs	r2, #6
 80094e4:	f7f6 fe84 	bl	80001f0 <memchr>
 80094e8:	2800      	cmp	r0, #0
 80094ea:	d03f      	beq.n	800956c <_vfiprintf_r+0x22c>
 80094ec:	4b29      	ldr	r3, [pc, #164]	; (8009594 <_vfiprintf_r+0x254>)
 80094ee:	bb1b      	cbnz	r3, 8009538 <_vfiprintf_r+0x1f8>
 80094f0:	9b03      	ldr	r3, [sp, #12]
 80094f2:	3307      	adds	r3, #7
 80094f4:	f023 0307 	bic.w	r3, r3, #7
 80094f8:	3308      	adds	r3, #8
 80094fa:	9303      	str	r3, [sp, #12]
 80094fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094fe:	443b      	add	r3, r7
 8009500:	9309      	str	r3, [sp, #36]	; 0x24
 8009502:	e767      	b.n	80093d4 <_vfiprintf_r+0x94>
 8009504:	fb0c 3202 	mla	r2, ip, r2, r3
 8009508:	460c      	mov	r4, r1
 800950a:	2001      	movs	r0, #1
 800950c:	e7a5      	b.n	800945a <_vfiprintf_r+0x11a>
 800950e:	2300      	movs	r3, #0
 8009510:	3401      	adds	r4, #1
 8009512:	9305      	str	r3, [sp, #20]
 8009514:	4619      	mov	r1, r3
 8009516:	f04f 0c0a 	mov.w	ip, #10
 800951a:	4620      	mov	r0, r4
 800951c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009520:	3a30      	subs	r2, #48	; 0x30
 8009522:	2a09      	cmp	r2, #9
 8009524:	d903      	bls.n	800952e <_vfiprintf_r+0x1ee>
 8009526:	2b00      	cmp	r3, #0
 8009528:	d0c5      	beq.n	80094b6 <_vfiprintf_r+0x176>
 800952a:	9105      	str	r1, [sp, #20]
 800952c:	e7c3      	b.n	80094b6 <_vfiprintf_r+0x176>
 800952e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009532:	4604      	mov	r4, r0
 8009534:	2301      	movs	r3, #1
 8009536:	e7f0      	b.n	800951a <_vfiprintf_r+0x1da>
 8009538:	ab03      	add	r3, sp, #12
 800953a:	9300      	str	r3, [sp, #0]
 800953c:	462a      	mov	r2, r5
 800953e:	4b16      	ldr	r3, [pc, #88]	; (8009598 <_vfiprintf_r+0x258>)
 8009540:	a904      	add	r1, sp, #16
 8009542:	4630      	mov	r0, r6
 8009544:	f7fb fd88 	bl	8005058 <_printf_float>
 8009548:	4607      	mov	r7, r0
 800954a:	1c78      	adds	r0, r7, #1
 800954c:	d1d6      	bne.n	80094fc <_vfiprintf_r+0x1bc>
 800954e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009550:	07d9      	lsls	r1, r3, #31
 8009552:	d405      	bmi.n	8009560 <_vfiprintf_r+0x220>
 8009554:	89ab      	ldrh	r3, [r5, #12]
 8009556:	059a      	lsls	r2, r3, #22
 8009558:	d402      	bmi.n	8009560 <_vfiprintf_r+0x220>
 800955a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800955c:	f7fe ff32 	bl	80083c4 <__retarget_lock_release_recursive>
 8009560:	89ab      	ldrh	r3, [r5, #12]
 8009562:	065b      	lsls	r3, r3, #25
 8009564:	f53f af12 	bmi.w	800938c <_vfiprintf_r+0x4c>
 8009568:	9809      	ldr	r0, [sp, #36]	; 0x24
 800956a:	e711      	b.n	8009390 <_vfiprintf_r+0x50>
 800956c:	ab03      	add	r3, sp, #12
 800956e:	9300      	str	r3, [sp, #0]
 8009570:	462a      	mov	r2, r5
 8009572:	4b09      	ldr	r3, [pc, #36]	; (8009598 <_vfiprintf_r+0x258>)
 8009574:	a904      	add	r1, sp, #16
 8009576:	4630      	mov	r0, r6
 8009578:	f7fc f812 	bl	80055a0 <_printf_i>
 800957c:	e7e4      	b.n	8009548 <_vfiprintf_r+0x208>
 800957e:	bf00      	nop
 8009580:	08009cbc 	.word	0x08009cbc
 8009584:	08009cdc 	.word	0x08009cdc
 8009588:	08009c9c 	.word	0x08009c9c
 800958c:	08009ed4 	.word	0x08009ed4
 8009590:	08009ede 	.word	0x08009ede
 8009594:	08005059 	.word	0x08005059
 8009598:	0800931b 	.word	0x0800931b
 800959c:	08009eda 	.word	0x08009eda

080095a0 <_putc_r>:
 80095a0:	b570      	push	{r4, r5, r6, lr}
 80095a2:	460d      	mov	r5, r1
 80095a4:	4614      	mov	r4, r2
 80095a6:	4606      	mov	r6, r0
 80095a8:	b118      	cbz	r0, 80095b2 <_putc_r+0x12>
 80095aa:	6983      	ldr	r3, [r0, #24]
 80095ac:	b90b      	cbnz	r3, 80095b2 <_putc_r+0x12>
 80095ae:	f7fe faf7 	bl	8007ba0 <__sinit>
 80095b2:	4b1c      	ldr	r3, [pc, #112]	; (8009624 <_putc_r+0x84>)
 80095b4:	429c      	cmp	r4, r3
 80095b6:	d124      	bne.n	8009602 <_putc_r+0x62>
 80095b8:	6874      	ldr	r4, [r6, #4]
 80095ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095bc:	07d8      	lsls	r0, r3, #31
 80095be:	d405      	bmi.n	80095cc <_putc_r+0x2c>
 80095c0:	89a3      	ldrh	r3, [r4, #12]
 80095c2:	0599      	lsls	r1, r3, #22
 80095c4:	d402      	bmi.n	80095cc <_putc_r+0x2c>
 80095c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095c8:	f7fe fefb 	bl	80083c2 <__retarget_lock_acquire_recursive>
 80095cc:	68a3      	ldr	r3, [r4, #8]
 80095ce:	3b01      	subs	r3, #1
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	60a3      	str	r3, [r4, #8]
 80095d4:	da05      	bge.n	80095e2 <_putc_r+0x42>
 80095d6:	69a2      	ldr	r2, [r4, #24]
 80095d8:	4293      	cmp	r3, r2
 80095da:	db1c      	blt.n	8009616 <_putc_r+0x76>
 80095dc:	b2eb      	uxtb	r3, r5
 80095de:	2b0a      	cmp	r3, #10
 80095e0:	d019      	beq.n	8009616 <_putc_r+0x76>
 80095e2:	6823      	ldr	r3, [r4, #0]
 80095e4:	1c5a      	adds	r2, r3, #1
 80095e6:	6022      	str	r2, [r4, #0]
 80095e8:	701d      	strb	r5, [r3, #0]
 80095ea:	b2ed      	uxtb	r5, r5
 80095ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095ee:	07da      	lsls	r2, r3, #31
 80095f0:	d405      	bmi.n	80095fe <_putc_r+0x5e>
 80095f2:	89a3      	ldrh	r3, [r4, #12]
 80095f4:	059b      	lsls	r3, r3, #22
 80095f6:	d402      	bmi.n	80095fe <_putc_r+0x5e>
 80095f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095fa:	f7fe fee3 	bl	80083c4 <__retarget_lock_release_recursive>
 80095fe:	4628      	mov	r0, r5
 8009600:	bd70      	pop	{r4, r5, r6, pc}
 8009602:	4b09      	ldr	r3, [pc, #36]	; (8009628 <_putc_r+0x88>)
 8009604:	429c      	cmp	r4, r3
 8009606:	d101      	bne.n	800960c <_putc_r+0x6c>
 8009608:	68b4      	ldr	r4, [r6, #8]
 800960a:	e7d6      	b.n	80095ba <_putc_r+0x1a>
 800960c:	4b07      	ldr	r3, [pc, #28]	; (800962c <_putc_r+0x8c>)
 800960e:	429c      	cmp	r4, r3
 8009610:	bf08      	it	eq
 8009612:	68f4      	ldreq	r4, [r6, #12]
 8009614:	e7d1      	b.n	80095ba <_putc_r+0x1a>
 8009616:	4629      	mov	r1, r5
 8009618:	4622      	mov	r2, r4
 800961a:	4630      	mov	r0, r6
 800961c:	f7fd fa6c 	bl	8006af8 <__swbuf_r>
 8009620:	4605      	mov	r5, r0
 8009622:	e7e3      	b.n	80095ec <_putc_r+0x4c>
 8009624:	08009cbc 	.word	0x08009cbc
 8009628:	08009cdc 	.word	0x08009cdc
 800962c:	08009c9c 	.word	0x08009c9c

08009630 <nan>:
 8009630:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009638 <nan+0x8>
 8009634:	4770      	bx	lr
 8009636:	bf00      	nop
 8009638:	00000000 	.word	0x00000000
 800963c:	7ff80000 	.word	0x7ff80000

08009640 <_sbrk_r>:
 8009640:	b538      	push	{r3, r4, r5, lr}
 8009642:	4d06      	ldr	r5, [pc, #24]	; (800965c <_sbrk_r+0x1c>)
 8009644:	2300      	movs	r3, #0
 8009646:	4604      	mov	r4, r0
 8009648:	4608      	mov	r0, r1
 800964a:	602b      	str	r3, [r5, #0]
 800964c:	f7f8 fdf2 	bl	8002234 <_sbrk>
 8009650:	1c43      	adds	r3, r0, #1
 8009652:	d102      	bne.n	800965a <_sbrk_r+0x1a>
 8009654:	682b      	ldr	r3, [r5, #0]
 8009656:	b103      	cbz	r3, 800965a <_sbrk_r+0x1a>
 8009658:	6023      	str	r3, [r4, #0]
 800965a:	bd38      	pop	{r3, r4, r5, pc}
 800965c:	20000378 	.word	0x20000378

08009660 <__sread>:
 8009660:	b510      	push	{r4, lr}
 8009662:	460c      	mov	r4, r1
 8009664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009668:	f000 f93a 	bl	80098e0 <_read_r>
 800966c:	2800      	cmp	r0, #0
 800966e:	bfab      	itete	ge
 8009670:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009672:	89a3      	ldrhlt	r3, [r4, #12]
 8009674:	181b      	addge	r3, r3, r0
 8009676:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800967a:	bfac      	ite	ge
 800967c:	6563      	strge	r3, [r4, #84]	; 0x54
 800967e:	81a3      	strhlt	r3, [r4, #12]
 8009680:	bd10      	pop	{r4, pc}

08009682 <__swrite>:
 8009682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009686:	461f      	mov	r7, r3
 8009688:	898b      	ldrh	r3, [r1, #12]
 800968a:	05db      	lsls	r3, r3, #23
 800968c:	4605      	mov	r5, r0
 800968e:	460c      	mov	r4, r1
 8009690:	4616      	mov	r6, r2
 8009692:	d505      	bpl.n	80096a0 <__swrite+0x1e>
 8009694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009698:	2302      	movs	r3, #2
 800969a:	2200      	movs	r2, #0
 800969c:	f000 f8b8 	bl	8009810 <_lseek_r>
 80096a0:	89a3      	ldrh	r3, [r4, #12]
 80096a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80096aa:	81a3      	strh	r3, [r4, #12]
 80096ac:	4632      	mov	r2, r6
 80096ae:	463b      	mov	r3, r7
 80096b0:	4628      	mov	r0, r5
 80096b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096b6:	f000 b837 	b.w	8009728 <_write_r>

080096ba <__sseek>:
 80096ba:	b510      	push	{r4, lr}
 80096bc:	460c      	mov	r4, r1
 80096be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096c2:	f000 f8a5 	bl	8009810 <_lseek_r>
 80096c6:	1c43      	adds	r3, r0, #1
 80096c8:	89a3      	ldrh	r3, [r4, #12]
 80096ca:	bf15      	itete	ne
 80096cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80096ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80096d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80096d6:	81a3      	strheq	r3, [r4, #12]
 80096d8:	bf18      	it	ne
 80096da:	81a3      	strhne	r3, [r4, #12]
 80096dc:	bd10      	pop	{r4, pc}

080096de <__sclose>:
 80096de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096e2:	f000 b851 	b.w	8009788 <_close_r>

080096e6 <strncmp>:
 80096e6:	b510      	push	{r4, lr}
 80096e8:	b17a      	cbz	r2, 800970a <strncmp+0x24>
 80096ea:	4603      	mov	r3, r0
 80096ec:	3901      	subs	r1, #1
 80096ee:	1884      	adds	r4, r0, r2
 80096f0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80096f4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80096f8:	4290      	cmp	r0, r2
 80096fa:	d101      	bne.n	8009700 <strncmp+0x1a>
 80096fc:	42a3      	cmp	r3, r4
 80096fe:	d101      	bne.n	8009704 <strncmp+0x1e>
 8009700:	1a80      	subs	r0, r0, r2
 8009702:	bd10      	pop	{r4, pc}
 8009704:	2800      	cmp	r0, #0
 8009706:	d1f3      	bne.n	80096f0 <strncmp+0xa>
 8009708:	e7fa      	b.n	8009700 <strncmp+0x1a>
 800970a:	4610      	mov	r0, r2
 800970c:	e7f9      	b.n	8009702 <strncmp+0x1c>

0800970e <__ascii_wctomb>:
 800970e:	b149      	cbz	r1, 8009724 <__ascii_wctomb+0x16>
 8009710:	2aff      	cmp	r2, #255	; 0xff
 8009712:	bf85      	ittet	hi
 8009714:	238a      	movhi	r3, #138	; 0x8a
 8009716:	6003      	strhi	r3, [r0, #0]
 8009718:	700a      	strbls	r2, [r1, #0]
 800971a:	f04f 30ff 	movhi.w	r0, #4294967295
 800971e:	bf98      	it	ls
 8009720:	2001      	movls	r0, #1
 8009722:	4770      	bx	lr
 8009724:	4608      	mov	r0, r1
 8009726:	4770      	bx	lr

08009728 <_write_r>:
 8009728:	b538      	push	{r3, r4, r5, lr}
 800972a:	4d07      	ldr	r5, [pc, #28]	; (8009748 <_write_r+0x20>)
 800972c:	4604      	mov	r4, r0
 800972e:	4608      	mov	r0, r1
 8009730:	4611      	mov	r1, r2
 8009732:	2200      	movs	r2, #0
 8009734:	602a      	str	r2, [r5, #0]
 8009736:	461a      	mov	r2, r3
 8009738:	f7f8 fd2b 	bl	8002192 <_write>
 800973c:	1c43      	adds	r3, r0, #1
 800973e:	d102      	bne.n	8009746 <_write_r+0x1e>
 8009740:	682b      	ldr	r3, [r5, #0]
 8009742:	b103      	cbz	r3, 8009746 <_write_r+0x1e>
 8009744:	6023      	str	r3, [r4, #0]
 8009746:	bd38      	pop	{r3, r4, r5, pc}
 8009748:	20000378 	.word	0x20000378

0800974c <__assert_func>:
 800974c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800974e:	4614      	mov	r4, r2
 8009750:	461a      	mov	r2, r3
 8009752:	4b09      	ldr	r3, [pc, #36]	; (8009778 <__assert_func+0x2c>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4605      	mov	r5, r0
 8009758:	68d8      	ldr	r0, [r3, #12]
 800975a:	b14c      	cbz	r4, 8009770 <__assert_func+0x24>
 800975c:	4b07      	ldr	r3, [pc, #28]	; (800977c <__assert_func+0x30>)
 800975e:	9100      	str	r1, [sp, #0]
 8009760:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009764:	4906      	ldr	r1, [pc, #24]	; (8009780 <__assert_func+0x34>)
 8009766:	462b      	mov	r3, r5
 8009768:	f000 f81e 	bl	80097a8 <fiprintf>
 800976c:	f000 f8ca 	bl	8009904 <abort>
 8009770:	4b04      	ldr	r3, [pc, #16]	; (8009784 <__assert_func+0x38>)
 8009772:	461c      	mov	r4, r3
 8009774:	e7f3      	b.n	800975e <__assert_func+0x12>
 8009776:	bf00      	nop
 8009778:	20000024 	.word	0x20000024
 800977c:	08009ee5 	.word	0x08009ee5
 8009780:	08009ef2 	.word	0x08009ef2
 8009784:	08009f20 	.word	0x08009f20

08009788 <_close_r>:
 8009788:	b538      	push	{r3, r4, r5, lr}
 800978a:	4d06      	ldr	r5, [pc, #24]	; (80097a4 <_close_r+0x1c>)
 800978c:	2300      	movs	r3, #0
 800978e:	4604      	mov	r4, r0
 8009790:	4608      	mov	r0, r1
 8009792:	602b      	str	r3, [r5, #0]
 8009794:	f7f8 fd19 	bl	80021ca <_close>
 8009798:	1c43      	adds	r3, r0, #1
 800979a:	d102      	bne.n	80097a2 <_close_r+0x1a>
 800979c:	682b      	ldr	r3, [r5, #0]
 800979e:	b103      	cbz	r3, 80097a2 <_close_r+0x1a>
 80097a0:	6023      	str	r3, [r4, #0]
 80097a2:	bd38      	pop	{r3, r4, r5, pc}
 80097a4:	20000378 	.word	0x20000378

080097a8 <fiprintf>:
 80097a8:	b40e      	push	{r1, r2, r3}
 80097aa:	b503      	push	{r0, r1, lr}
 80097ac:	4601      	mov	r1, r0
 80097ae:	ab03      	add	r3, sp, #12
 80097b0:	4805      	ldr	r0, [pc, #20]	; (80097c8 <fiprintf+0x20>)
 80097b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80097b6:	6800      	ldr	r0, [r0, #0]
 80097b8:	9301      	str	r3, [sp, #4]
 80097ba:	f7ff fdc1 	bl	8009340 <_vfiprintf_r>
 80097be:	b002      	add	sp, #8
 80097c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80097c4:	b003      	add	sp, #12
 80097c6:	4770      	bx	lr
 80097c8:	20000024 	.word	0x20000024

080097cc <_fstat_r>:
 80097cc:	b538      	push	{r3, r4, r5, lr}
 80097ce:	4d07      	ldr	r5, [pc, #28]	; (80097ec <_fstat_r+0x20>)
 80097d0:	2300      	movs	r3, #0
 80097d2:	4604      	mov	r4, r0
 80097d4:	4608      	mov	r0, r1
 80097d6:	4611      	mov	r1, r2
 80097d8:	602b      	str	r3, [r5, #0]
 80097da:	f7f8 fd02 	bl	80021e2 <_fstat>
 80097de:	1c43      	adds	r3, r0, #1
 80097e0:	d102      	bne.n	80097e8 <_fstat_r+0x1c>
 80097e2:	682b      	ldr	r3, [r5, #0]
 80097e4:	b103      	cbz	r3, 80097e8 <_fstat_r+0x1c>
 80097e6:	6023      	str	r3, [r4, #0]
 80097e8:	bd38      	pop	{r3, r4, r5, pc}
 80097ea:	bf00      	nop
 80097ec:	20000378 	.word	0x20000378

080097f0 <_isatty_r>:
 80097f0:	b538      	push	{r3, r4, r5, lr}
 80097f2:	4d06      	ldr	r5, [pc, #24]	; (800980c <_isatty_r+0x1c>)
 80097f4:	2300      	movs	r3, #0
 80097f6:	4604      	mov	r4, r0
 80097f8:	4608      	mov	r0, r1
 80097fa:	602b      	str	r3, [r5, #0]
 80097fc:	f7f8 fd01 	bl	8002202 <_isatty>
 8009800:	1c43      	adds	r3, r0, #1
 8009802:	d102      	bne.n	800980a <_isatty_r+0x1a>
 8009804:	682b      	ldr	r3, [r5, #0]
 8009806:	b103      	cbz	r3, 800980a <_isatty_r+0x1a>
 8009808:	6023      	str	r3, [r4, #0]
 800980a:	bd38      	pop	{r3, r4, r5, pc}
 800980c:	20000378 	.word	0x20000378

08009810 <_lseek_r>:
 8009810:	b538      	push	{r3, r4, r5, lr}
 8009812:	4d07      	ldr	r5, [pc, #28]	; (8009830 <_lseek_r+0x20>)
 8009814:	4604      	mov	r4, r0
 8009816:	4608      	mov	r0, r1
 8009818:	4611      	mov	r1, r2
 800981a:	2200      	movs	r2, #0
 800981c:	602a      	str	r2, [r5, #0]
 800981e:	461a      	mov	r2, r3
 8009820:	f7f8 fcfa 	bl	8002218 <_lseek>
 8009824:	1c43      	adds	r3, r0, #1
 8009826:	d102      	bne.n	800982e <_lseek_r+0x1e>
 8009828:	682b      	ldr	r3, [r5, #0]
 800982a:	b103      	cbz	r3, 800982e <_lseek_r+0x1e>
 800982c:	6023      	str	r3, [r4, #0]
 800982e:	bd38      	pop	{r3, r4, r5, pc}
 8009830:	20000378 	.word	0x20000378

08009834 <memmove>:
 8009834:	4288      	cmp	r0, r1
 8009836:	b510      	push	{r4, lr}
 8009838:	eb01 0402 	add.w	r4, r1, r2
 800983c:	d902      	bls.n	8009844 <memmove+0x10>
 800983e:	4284      	cmp	r4, r0
 8009840:	4623      	mov	r3, r4
 8009842:	d807      	bhi.n	8009854 <memmove+0x20>
 8009844:	1e43      	subs	r3, r0, #1
 8009846:	42a1      	cmp	r1, r4
 8009848:	d008      	beq.n	800985c <memmove+0x28>
 800984a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800984e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009852:	e7f8      	b.n	8009846 <memmove+0x12>
 8009854:	4402      	add	r2, r0
 8009856:	4601      	mov	r1, r0
 8009858:	428a      	cmp	r2, r1
 800985a:	d100      	bne.n	800985e <memmove+0x2a>
 800985c:	bd10      	pop	{r4, pc}
 800985e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009862:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009866:	e7f7      	b.n	8009858 <memmove+0x24>

08009868 <__malloc_lock>:
 8009868:	4801      	ldr	r0, [pc, #4]	; (8009870 <__malloc_lock+0x8>)
 800986a:	f7fe bdaa 	b.w	80083c2 <__retarget_lock_acquire_recursive>
 800986e:	bf00      	nop
 8009870:	2000036c 	.word	0x2000036c

08009874 <__malloc_unlock>:
 8009874:	4801      	ldr	r0, [pc, #4]	; (800987c <__malloc_unlock+0x8>)
 8009876:	f7fe bda5 	b.w	80083c4 <__retarget_lock_release_recursive>
 800987a:	bf00      	nop
 800987c:	2000036c 	.word	0x2000036c

08009880 <_realloc_r>:
 8009880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009884:	4680      	mov	r8, r0
 8009886:	4614      	mov	r4, r2
 8009888:	460e      	mov	r6, r1
 800988a:	b921      	cbnz	r1, 8009896 <_realloc_r+0x16>
 800988c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009890:	4611      	mov	r1, r2
 8009892:	f7ff bb5b 	b.w	8008f4c <_malloc_r>
 8009896:	b92a      	cbnz	r2, 80098a4 <_realloc_r+0x24>
 8009898:	f7ff faec 	bl	8008e74 <_free_r>
 800989c:	4625      	mov	r5, r4
 800989e:	4628      	mov	r0, r5
 80098a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098a4:	f000 f835 	bl	8009912 <_malloc_usable_size_r>
 80098a8:	4284      	cmp	r4, r0
 80098aa:	4607      	mov	r7, r0
 80098ac:	d802      	bhi.n	80098b4 <_realloc_r+0x34>
 80098ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80098b2:	d812      	bhi.n	80098da <_realloc_r+0x5a>
 80098b4:	4621      	mov	r1, r4
 80098b6:	4640      	mov	r0, r8
 80098b8:	f7ff fb48 	bl	8008f4c <_malloc_r>
 80098bc:	4605      	mov	r5, r0
 80098be:	2800      	cmp	r0, #0
 80098c0:	d0ed      	beq.n	800989e <_realloc_r+0x1e>
 80098c2:	42bc      	cmp	r4, r7
 80098c4:	4622      	mov	r2, r4
 80098c6:	4631      	mov	r1, r6
 80098c8:	bf28      	it	cs
 80098ca:	463a      	movcs	r2, r7
 80098cc:	f7fb fb0e 	bl	8004eec <memcpy>
 80098d0:	4631      	mov	r1, r6
 80098d2:	4640      	mov	r0, r8
 80098d4:	f7ff face 	bl	8008e74 <_free_r>
 80098d8:	e7e1      	b.n	800989e <_realloc_r+0x1e>
 80098da:	4635      	mov	r5, r6
 80098dc:	e7df      	b.n	800989e <_realloc_r+0x1e>
	...

080098e0 <_read_r>:
 80098e0:	b538      	push	{r3, r4, r5, lr}
 80098e2:	4d07      	ldr	r5, [pc, #28]	; (8009900 <_read_r+0x20>)
 80098e4:	4604      	mov	r4, r0
 80098e6:	4608      	mov	r0, r1
 80098e8:	4611      	mov	r1, r2
 80098ea:	2200      	movs	r2, #0
 80098ec:	602a      	str	r2, [r5, #0]
 80098ee:	461a      	mov	r2, r3
 80098f0:	f7f8 fc32 	bl	8002158 <_read>
 80098f4:	1c43      	adds	r3, r0, #1
 80098f6:	d102      	bne.n	80098fe <_read_r+0x1e>
 80098f8:	682b      	ldr	r3, [r5, #0]
 80098fa:	b103      	cbz	r3, 80098fe <_read_r+0x1e>
 80098fc:	6023      	str	r3, [r4, #0]
 80098fe:	bd38      	pop	{r3, r4, r5, pc}
 8009900:	20000378 	.word	0x20000378

08009904 <abort>:
 8009904:	b508      	push	{r3, lr}
 8009906:	2006      	movs	r0, #6
 8009908:	f000 f834 	bl	8009974 <raise>
 800990c:	2001      	movs	r0, #1
 800990e:	f7f8 fc19 	bl	8002144 <_exit>

08009912 <_malloc_usable_size_r>:
 8009912:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009916:	1f18      	subs	r0, r3, #4
 8009918:	2b00      	cmp	r3, #0
 800991a:	bfbc      	itt	lt
 800991c:	580b      	ldrlt	r3, [r1, r0]
 800991e:	18c0      	addlt	r0, r0, r3
 8009920:	4770      	bx	lr

08009922 <_raise_r>:
 8009922:	291f      	cmp	r1, #31
 8009924:	b538      	push	{r3, r4, r5, lr}
 8009926:	4604      	mov	r4, r0
 8009928:	460d      	mov	r5, r1
 800992a:	d904      	bls.n	8009936 <_raise_r+0x14>
 800992c:	2316      	movs	r3, #22
 800992e:	6003      	str	r3, [r0, #0]
 8009930:	f04f 30ff 	mov.w	r0, #4294967295
 8009934:	bd38      	pop	{r3, r4, r5, pc}
 8009936:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009938:	b112      	cbz	r2, 8009940 <_raise_r+0x1e>
 800993a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800993e:	b94b      	cbnz	r3, 8009954 <_raise_r+0x32>
 8009940:	4620      	mov	r0, r4
 8009942:	f000 f831 	bl	80099a8 <_getpid_r>
 8009946:	462a      	mov	r2, r5
 8009948:	4601      	mov	r1, r0
 800994a:	4620      	mov	r0, r4
 800994c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009950:	f000 b818 	b.w	8009984 <_kill_r>
 8009954:	2b01      	cmp	r3, #1
 8009956:	d00a      	beq.n	800996e <_raise_r+0x4c>
 8009958:	1c59      	adds	r1, r3, #1
 800995a:	d103      	bne.n	8009964 <_raise_r+0x42>
 800995c:	2316      	movs	r3, #22
 800995e:	6003      	str	r3, [r0, #0]
 8009960:	2001      	movs	r0, #1
 8009962:	e7e7      	b.n	8009934 <_raise_r+0x12>
 8009964:	2400      	movs	r4, #0
 8009966:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800996a:	4628      	mov	r0, r5
 800996c:	4798      	blx	r3
 800996e:	2000      	movs	r0, #0
 8009970:	e7e0      	b.n	8009934 <_raise_r+0x12>
	...

08009974 <raise>:
 8009974:	4b02      	ldr	r3, [pc, #8]	; (8009980 <raise+0xc>)
 8009976:	4601      	mov	r1, r0
 8009978:	6818      	ldr	r0, [r3, #0]
 800997a:	f7ff bfd2 	b.w	8009922 <_raise_r>
 800997e:	bf00      	nop
 8009980:	20000024 	.word	0x20000024

08009984 <_kill_r>:
 8009984:	b538      	push	{r3, r4, r5, lr}
 8009986:	4d07      	ldr	r5, [pc, #28]	; (80099a4 <_kill_r+0x20>)
 8009988:	2300      	movs	r3, #0
 800998a:	4604      	mov	r4, r0
 800998c:	4608      	mov	r0, r1
 800998e:	4611      	mov	r1, r2
 8009990:	602b      	str	r3, [r5, #0]
 8009992:	f7f8 fbc7 	bl	8002124 <_kill>
 8009996:	1c43      	adds	r3, r0, #1
 8009998:	d102      	bne.n	80099a0 <_kill_r+0x1c>
 800999a:	682b      	ldr	r3, [r5, #0]
 800999c:	b103      	cbz	r3, 80099a0 <_kill_r+0x1c>
 800999e:	6023      	str	r3, [r4, #0]
 80099a0:	bd38      	pop	{r3, r4, r5, pc}
 80099a2:	bf00      	nop
 80099a4:	20000378 	.word	0x20000378

080099a8 <_getpid_r>:
 80099a8:	f7f8 bbb4 	b.w	8002114 <_getpid>

080099ac <_init>:
 80099ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ae:	bf00      	nop
 80099b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099b2:	bc08      	pop	{r3}
 80099b4:	469e      	mov	lr, r3
 80099b6:	4770      	bx	lr

080099b8 <_fini>:
 80099b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ba:	bf00      	nop
 80099bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099be:	bc08      	pop	{r3}
 80099c0:	469e      	mov	lr, r3
 80099c2:	4770      	bx	lr
