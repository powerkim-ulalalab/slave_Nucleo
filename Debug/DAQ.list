
DAQ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003330  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080034c8  080034c8  000134c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034e4  080034e4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080034e4  080034e4  000134e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034ec  080034ec  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034ec  080034ec  000134ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034f0  080034f0  000134f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080034f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000514  20000010  08003504  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000524  08003504  00020524  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011e53  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023d0  00000000  00000000  00031e93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  00034268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c50  00000000  00000000  00034f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017056  00000000  00000000  00035bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f6e0  00000000  00000000  0004cc26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e6c5  00000000  00000000  0005c306  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ea9cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003638  00000000  00000000  000eaa20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080034b0 	.word	0x080034b0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	080034b0 	.word	0x080034b0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <ModbusSlave>:

MB_Handle packetHandle;
TABLE table;

void ModbusSlave()
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	Rx_TimerStartStop();
 80004d4:	f000 f8ba 	bl	800064c <Rx_TimerStartStop>
	frameCplt();
 80004d8:	f000 f830 	bl	800053c <frameCplt>
	GetRX_Packet();
 80004dc:	f000 f848 	bl	8000570 <GetRX_Packet>
}
 80004e0:	bf00      	nop
 80004e2:	bd80      	pop	{r7, pc}

080004e4 <Search_ID>:

bool Search_ID(uint8_t taget)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	71fb      	strb	r3, [r7, #7]
	if(Table_SlaveID[taget] == FULL)
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	4a06      	ldr	r2, [pc, #24]	; (800050c <Search_ID+0x28>)
 80004f2:	5cd3      	ldrb	r3, [r2, r3]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d101      	bne.n	80004fc <Search_ID+0x18>
	{
		return TURE;
 80004f8:	2301      	movs	r3, #1
 80004fa:	e000      	b.n	80004fe <Search_ID+0x1a>
	}
	else
	{
		return FALSE;
 80004fc:	2300      	movs	r3, #0
	}
}
 80004fe:	4618      	mov	r0, r3
 8000500:	370c      	adds	r7, #12
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	080034c8 	.word	0x080034c8

08000510 <RX_Buf_Init>:
	packetHandle.RX_Flag = OFF;
	packetHandle.TX_Flag = OFF;
}

void RX_Buf_Init()
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
	memset(MB_RxBuf,0,RXBUFLEN);
 8000514:	2214      	movs	r2, #20
 8000516:	2100      	movs	r1, #0
 8000518:	4805      	ldr	r0, [pc, #20]	; (8000530 <RX_Buf_Init+0x20>)
 800051a:	f002 ffc1 	bl	80034a0 <memset>
	RX_Data = 0;
 800051e:	4b05      	ldr	r3, [pc, #20]	; (8000534 <RX_Buf_Init+0x24>)
 8000520:	2200      	movs	r2, #0
 8000522:	701a      	strb	r2, [r3, #0]
	RX_DataCnt =0;
 8000524:	4b04      	ldr	r3, [pc, #16]	; (8000538 <RX_Buf_Init+0x28>)
 8000526:	2200      	movs	r2, #0
 8000528:	801a      	strh	r2, [r3, #0]
}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	20000030 	.word	0x20000030
 8000534:	20000044 	.word	0x20000044
 8000538:	2000002c 	.word	0x2000002c

0800053c <frameCplt>:

void frameCplt()
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
	if(RX_DataCnt == 8)
 8000540:	4b09      	ldr	r3, [pc, #36]	; (8000568 <frameCplt+0x2c>)
 8000542:	881b      	ldrh	r3, [r3, #0]
 8000544:	b29b      	uxth	r3, r3
 8000546:	2b08      	cmp	r3, #8
 8000548:	d104      	bne.n	8000554 <frameCplt+0x18>
	{
		packetHandle.RX_Flag = ON;
 800054a:	4b08      	ldr	r3, [pc, #32]	; (800056c <frameCplt+0x30>)
 800054c:	2201      	movs	r2, #1
 800054e:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
	}
	else
	{
		packetHandle.RX_Flag = OFF;
	}
}
 8000552:	e003      	b.n	800055c <frameCplt+0x20>
		packetHandle.RX_Flag = OFF;
 8000554:	4b05      	ldr	r3, [pc, #20]	; (800056c <frameCplt+0x30>)
 8000556:	2200      	movs	r2, #0
 8000558:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	2000002c 	.word	0x2000002c
 800056c:	20000048 	.word	0x20000048

08000570 <GetRX_Packet>:

uint8_t GetRX_Packet()
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	static uint8_t RX_State = GetID;

	switch(RX_State)
 8000574:	4b32      	ldr	r3, [pc, #200]	; (8000640 <GetRX_Packet+0xd0>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	3b01      	subs	r3, #1
 800057a:	2b04      	cmp	r3, #4
 800057c:	d85c      	bhi.n	8000638 <GetRX_Packet+0xc8>
 800057e:	a201      	add	r2, pc, #4	; (adr r2, 8000584 <GetRX_Packet+0x14>)
 8000580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000584:	08000599 	.word	0x08000599
 8000588:	080005cd 	.word	0x080005cd
 800058c:	080005dd 	.word	0x080005dd
 8000590:	080005f7 	.word	0x080005f7
 8000594:	08000611 	.word	0x08000611
	{
		case GetID:
		{
			if( Search_ID(MB_RxBuf[SlaveID]) )
 8000598:	4b2a      	ldr	r3, [pc, #168]	; (8000644 <GetRX_Packet+0xd4>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	4618      	mov	r0, r3
 800059e:	f7ff ffa1 	bl	80004e4 <Search_ID>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d007      	beq.n	80005b8 <GetRX_Packet+0x48>
			{
				packetHandle.id = MB_RxBuf[SlaveID];
 80005a8:	4b26      	ldr	r3, [pc, #152]	; (8000644 <GetRX_Packet+0xd4>)
 80005aa:	781a      	ldrb	r2, [r3, #0]
 80005ac:	4b26      	ldr	r3, [pc, #152]	; (8000648 <GetRX_Packet+0xd8>)
 80005ae:	701a      	strb	r2, [r3, #0]
				RX_State = GetFunCode;
 80005b0:	4b23      	ldr	r3, [pc, #140]	; (8000640 <GetRX_Packet+0xd0>)
 80005b2:	2202      	movs	r2, #2
 80005b4:	701a      	strb	r2, [r3, #0]
			{
				RX_Buf_Init();
				packetHandle.RX_Flag = OFF;
				RX_State = Ready;
			}
			break;
 80005b6:	e03f      	b.n	8000638 <GetRX_Packet+0xc8>
				RX_Buf_Init();
 80005b8:	f7ff ffaa 	bl	8000510 <RX_Buf_Init>
				packetHandle.RX_Flag = OFF;
 80005bc:	4b22      	ldr	r3, [pc, #136]	; (8000648 <GetRX_Packet+0xd8>)
 80005be:	2200      	movs	r2, #0
 80005c0:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
				RX_State = Ready;
 80005c4:	4b1e      	ldr	r3, [pc, #120]	; (8000640 <GetRX_Packet+0xd0>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]
			break;
 80005ca:	e035      	b.n	8000638 <GetRX_Packet+0xc8>
		}
		case GetFunCode:
		{
			packetHandle.FuncCode = MB_RxBuf[FuncCode];
 80005cc:	4b1d      	ldr	r3, [pc, #116]	; (8000644 <GetRX_Packet+0xd4>)
 80005ce:	785a      	ldrb	r2, [r3, #1]
 80005d0:	4b1d      	ldr	r3, [pc, #116]	; (8000648 <GetRX_Packet+0xd8>)
 80005d2:	705a      	strb	r2, [r3, #1]
			RX_State = GetAdr;
 80005d4:	4b1a      	ldr	r3, [pc, #104]	; (8000640 <GetRX_Packet+0xd0>)
 80005d6:	2203      	movs	r2, #3
 80005d8:	701a      	strb	r2, [r3, #0]
			break;
 80005da:	e02d      	b.n	8000638 <GetRX_Packet+0xc8>
		}
		case GetAdr:
		{
			packetHandle.adr = (uint16_t)( MB_RxBuf[AdrHigh] | MB_RxBuf[AdrLow] );
 80005dc:	4b19      	ldr	r3, [pc, #100]	; (8000644 <GetRX_Packet+0xd4>)
 80005de:	789a      	ldrb	r2, [r3, #2]
 80005e0:	4b18      	ldr	r3, [pc, #96]	; (8000644 <GetRX_Packet+0xd4>)
 80005e2:	78db      	ldrb	r3, [r3, #3]
 80005e4:	4313      	orrs	r3, r2
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	b29a      	uxth	r2, r3
 80005ea:	4b17      	ldr	r3, [pc, #92]	; (8000648 <GetRX_Packet+0xd8>)
 80005ec:	805a      	strh	r2, [r3, #2]
			RX_State = Getlen;
 80005ee:	4b14      	ldr	r3, [pc, #80]	; (8000640 <GetRX_Packet+0xd0>)
 80005f0:	2204      	movs	r2, #4
 80005f2:	701a      	strb	r2, [r3, #0]
			break;
 80005f4:	e020      	b.n	8000638 <GetRX_Packet+0xc8>
		}
		case Getlen:
		{
			packetHandle.len = (uint16_t)( MB_RxBuf[LenHigh] | MB_RxBuf[LenLow] );
 80005f6:	4b13      	ldr	r3, [pc, #76]	; (8000644 <GetRX_Packet+0xd4>)
 80005f8:	791a      	ldrb	r2, [r3, #4]
 80005fa:	4b12      	ldr	r3, [pc, #72]	; (8000644 <GetRX_Packet+0xd4>)
 80005fc:	795b      	ldrb	r3, [r3, #5]
 80005fe:	4313      	orrs	r3, r2
 8000600:	b2db      	uxtb	r3, r3
 8000602:	b29a      	uxth	r2, r3
 8000604:	4b10      	ldr	r3, [pc, #64]	; (8000648 <GetRX_Packet+0xd8>)
 8000606:	809a      	strh	r2, [r3, #4]
			RX_State = GetCrc;
 8000608:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <GetRX_Packet+0xd0>)
 800060a:	2205      	movs	r2, #5
 800060c:	701a      	strb	r2, [r3, #0]
			break;
 800060e:	e013      	b.n	8000638 <GetRX_Packet+0xc8>
		}
		case GetCrc:
		{
			packetHandle.crc_high = MB_RxBuf[CrcHigh];
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <GetRX_Packet+0xd4>)
 8000612:	799a      	ldrb	r2, [r3, #6]
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <GetRX_Packet+0xd8>)
 8000616:	f883 23ee 	strb.w	r2, [r3, #1006]	; 0x3ee
			packetHandle.crc_low = MB_RxBuf[CrcLow];
 800061a:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <GetRX_Packet+0xd4>)
 800061c:	79da      	ldrb	r2, [r3, #7]
 800061e:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <GetRX_Packet+0xd8>)
 8000620:	f883 23ef 	strb.w	r2, [r3, #1007]	; 0x3ef

			packetHandle.TX_Flag = ON;
 8000624:	4b08      	ldr	r3, [pc, #32]	; (8000648 <GetRX_Packet+0xd8>)
 8000626:	2201      	movs	r2, #1
 8000628:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
			RX_Buf_Init();
 800062c:	f7ff ff70 	bl	8000510 <RX_Buf_Init>
			RX_State = Ready;
 8000630:	4b03      	ldr	r3, [pc, #12]	; (8000640 <GetRX_Packet+0xd0>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
			break;
 8000636:	bf00      	nop
		}
	}
}
 8000638:	bf00      	nop
 800063a:	4618      	mov	r0, r3
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000000 	.word	0x20000000
 8000644:	20000030 	.word	0x20000030
 8000648:	20000048 	.word	0x20000048

0800064c <Rx_TimerStartStop>:
uint8_t RxTimerFlag = 0;
volatile uint16_t RxTimerCnt = 0;


void Rx_TimerStartStop()
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	if(RxTimerFlag)
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <Rx_TimerStartStop+0x20>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d003      	beq.n	8000660 <Rx_TimerStartStop+0x14>
	{
		HAL_TIM_Base_Start_IT(&htim1);
 8000658:	4805      	ldr	r0, [pc, #20]	; (8000670 <Rx_TimerStartStop+0x24>)
 800065a:	f001 fc11 	bl	8001e80 <HAL_TIM_Base_Start_IT>
	else
	{
		HAL_TIM_Base_Stop_IT(&htim1);
	}

}
 800065e:	e002      	b.n	8000666 <Rx_TimerStartStop+0x1a>
		HAL_TIM_Base_Stop_IT(&htim1);
 8000660:	4803      	ldr	r0, [pc, #12]	; (8000670 <Rx_TimerStartStop+0x24>)
 8000662:	f001 fc6f 	bl	8001f44 <HAL_TIM_Base_Stop_IT>
}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000045 	.word	0x20000045
 8000670:	20000450 	.word	0x20000450

08000674 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)//0.1ms
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  if(htim == &htim1)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	4a0c      	ldr	r2, [pc, #48]	; (80006b0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d10f      	bne.n	80006a4 <HAL_TIM_PeriodElapsedCallback+0x30>
  {
	  if(RxTimerCnt++ > 600)
 8000684:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000686:	881b      	ldrh	r3, [r3, #0]
 8000688:	b29b      	uxth	r3, r3
 800068a:	1c5a      	adds	r2, r3, #1
 800068c:	b291      	uxth	r1, r2
 800068e:	4a09      	ldr	r2, [pc, #36]	; (80006b4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000690:	8011      	strh	r1, [r2, #0]
 8000692:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000696:	d905      	bls.n	80006a4 <HAL_TIM_PeriodElapsedCallback+0x30>
	  {

		  RxTimerCnt = 0;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800069a:	2200      	movs	r2, #0
 800069c:	801a      	strh	r2, [r3, #0]
		  RxTimerFlag = 0;
 800069e:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	701a      	strb	r2, [r3, #0]

	  }
  }

}
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	20000450 	.word	0x20000450
 80006b4:	20000046 	.word	0x20000046
 80006b8:	20000045 	.word	0x20000045

080006bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c0:	f000 fb66 	bl	8000d90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c4:	f000 f816 	bl	80006f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c8:	f000 f956 	bl	8000978 <MX_GPIO_Init>
  MX_TIM1_Init();
 80006cc:	f000 f8b0 	bl	8000830 <MX_TIM1_Init>
  MX_USART6_UART_Init();
 80006d0:	f000 f928 	bl	8000924 <MX_USART6_UART_Init>
  MX_USART2_UART_Init();
 80006d4:	f000 f8fc 	bl	80008d0 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80006d8:	f000 f876 	bl	80007c8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &RX_Data, 1);
 80006dc:	2201      	movs	r2, #1
 80006de:	4903      	ldr	r1, [pc, #12]	; (80006ec <main+0x30>)
 80006e0:	4803      	ldr	r0, [pc, #12]	; (80006f0 <main+0x34>)
 80006e2:	f002 f83e 	bl	8002762 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
ModbusSlave();
 80006e6:	f7ff fef3 	bl	80004d0 <ModbusSlave>
 80006ea:	e7fc      	b.n	80006e6 <main+0x2a>
 80006ec:	20000044 	.word	0x20000044
 80006f0:	200004dc 	.word	0x200004dc

080006f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b094      	sub	sp, #80	; 0x50
 80006f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fa:	f107 0320 	add.w	r3, r7, #32
 80006fe:	2230      	movs	r2, #48	; 0x30
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f002 fecc 	bl	80034a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000718:	2300      	movs	r3, #0
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	4b28      	ldr	r3, [pc, #160]	; (80007c0 <SystemClock_Config+0xcc>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000720:	4a27      	ldr	r2, [pc, #156]	; (80007c0 <SystemClock_Config+0xcc>)
 8000722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000726:	6413      	str	r3, [r2, #64]	; 0x40
 8000728:	4b25      	ldr	r3, [pc, #148]	; (80007c0 <SystemClock_Config+0xcc>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000734:	2300      	movs	r3, #0
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	4b22      	ldr	r3, [pc, #136]	; (80007c4 <SystemClock_Config+0xd0>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a21      	ldr	r2, [pc, #132]	; (80007c4 <SystemClock_Config+0xd0>)
 800073e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000742:	6013      	str	r3, [r2, #0]
 8000744:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <SystemClock_Config+0xd0>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000750:	2302      	movs	r3, #2
 8000752:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000754:	2301      	movs	r3, #1
 8000756:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000758:	2310      	movs	r3, #16
 800075a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075c:	2302      	movs	r3, #2
 800075e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000760:	2300      	movs	r3, #0
 8000762:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000764:	2310      	movs	r3, #16
 8000766:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000768:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800076c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800076e:	2304      	movs	r3, #4
 8000770:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000772:	2304      	movs	r3, #4
 8000774:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000776:	f107 0320 	add.w	r3, r7, #32
 800077a:	4618      	mov	r0, r3
 800077c:	f000 febc 	bl	80014f8 <HAL_RCC_OscConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000786:	f000 f965 	bl	8000a54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078a:	230f      	movs	r3, #15
 800078c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078e:	2302      	movs	r3, #2
 8000790:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000796:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800079a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	2102      	movs	r1, #2
 80007a6:	4618      	mov	r0, r3
 80007a8:	f001 f91e 	bl	80019e8 <HAL_RCC_ClockConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007b2:	f000 f94f 	bl	8000a54 <Error_Handler>
  }
}
 80007b6:	bf00      	nop
 80007b8:	3750      	adds	r7, #80	; 0x50
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40007000 	.word	0x40007000

080007c8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80007cc:	2200      	movs	r2, #0
 80007ce:	2100      	movs	r1, #0
 80007d0:	2026      	movs	r0, #38	; 0x26
 80007d2:	f000 fc2a 	bl	800102a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80007d6:	2026      	movs	r0, #38	; 0x26
 80007d8:	f000 fc43 	bl	8001062 <HAL_NVIC_EnableIRQ>
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80007dc:	2200      	movs	r2, #0
 80007de:	2100      	movs	r1, #0
 80007e0:	2047      	movs	r0, #71	; 0x47
 80007e2:	f000 fc22 	bl	800102a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 80007e6:	2047      	movs	r0, #71	; 0x47
 80007e8:	f000 fc3b 	bl	8001062 <HAL_NVIC_EnableIRQ>
  /* TIM1_CC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2100      	movs	r1, #0
 80007f0:	201b      	movs	r0, #27
 80007f2:	f000 fc1a 	bl	800102a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80007f6:	201b      	movs	r0, #27
 80007f8:	f000 fc33 	bl	8001062 <HAL_NVIC_EnableIRQ>
  /* TIM1_TRG_COM_TIM11_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2100      	movs	r1, #0
 8000800:	201a      	movs	r0, #26
 8000802:	f000 fc12 	bl	800102a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000806:	201a      	movs	r0, #26
 8000808:	f000 fc2b 	bl	8001062 <HAL_NVIC_EnableIRQ>
  /* TIM1_UP_TIM10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800080c:	2200      	movs	r2, #0
 800080e:	2100      	movs	r1, #0
 8000810:	2019      	movs	r0, #25
 8000812:	f000 fc0a 	bl	800102a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000816:	2019      	movs	r0, #25
 8000818:	f000 fc23 	bl	8001062 <HAL_NVIC_EnableIRQ>
  /* TIM1_BRK_TIM9_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800081c:	2200      	movs	r2, #0
 800081e:	2100      	movs	r1, #0
 8000820:	2018      	movs	r0, #24
 8000822:	f000 fc02 	bl	800102a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000826:	2018      	movs	r0, #24
 8000828:	f000 fc1b 	bl	8001062 <HAL_NVIC_EnableIRQ>
}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}

08000830 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000836:	f107 0308 	add.w	r3, r7, #8
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000844:	463b      	mov	r3, r7
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800084c:	4b1e      	ldr	r3, [pc, #120]	; (80008c8 <MX_TIM1_Init+0x98>)
 800084e:	4a1f      	ldr	r2, [pc, #124]	; (80008cc <MX_TIM1_Init+0x9c>)
 8000850:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 840-1;
 8000852:	4b1d      	ldr	r3, [pc, #116]	; (80008c8 <MX_TIM1_Init+0x98>)
 8000854:	f240 3247 	movw	r2, #839	; 0x347
 8000858:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800085a:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <MX_TIM1_Init+0x98>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000860:	4b19      	ldr	r3, [pc, #100]	; (80008c8 <MX_TIM1_Init+0x98>)
 8000862:	2263      	movs	r2, #99	; 0x63
 8000864:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000866:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <MX_TIM1_Init+0x98>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800086c:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <MX_TIM1_Init+0x98>)
 800086e:	2200      	movs	r2, #0
 8000870:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000872:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <MX_TIM1_Init+0x98>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000878:	4813      	ldr	r0, [pc, #76]	; (80008c8 <MX_TIM1_Init+0x98>)
 800087a:	f001 fab1 	bl	8001de0 <HAL_TIM_Base_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000884:	f000 f8e6 	bl	8000a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000888:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800088c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800088e:	f107 0308 	add.w	r3, r7, #8
 8000892:	4619      	mov	r1, r3
 8000894:	480c      	ldr	r0, [pc, #48]	; (80008c8 <MX_TIM1_Init+0x98>)
 8000896:	f001 fc8c 	bl	80021b2 <HAL_TIM_ConfigClockSource>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80008a0:	f000 f8d8 	bl	8000a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a4:	2300      	movs	r3, #0
 80008a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a8:	2300      	movs	r3, #0
 80008aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008ac:	463b      	mov	r3, r7
 80008ae:	4619      	mov	r1, r3
 80008b0:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_TIM1_Init+0x98>)
 80008b2:	f001 fe87 	bl	80025c4 <HAL_TIMEx_MasterConfigSynchronization>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80008bc:	f000 f8ca 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80008c0:	bf00      	nop
 80008c2:	3718      	adds	r7, #24
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000450 	.word	0x20000450
 80008cc:	40010000 	.word	0x40010000

080008d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008d4:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_USART2_UART_Init+0x4c>)
 80008d6:	4a12      	ldr	r2, [pc, #72]	; (8000920 <MX_USART2_UART_Init+0x50>)
 80008d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80008da:	4b10      	ldr	r3, [pc, #64]	; (800091c <MX_USART2_UART_Init+0x4c>)
 80008dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_USART2_UART_Init+0x4c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <MX_USART2_UART_Init+0x4c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <MX_USART2_UART_Init+0x4c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_USART2_UART_Init+0x4c>)
 80008f6:	220c      	movs	r2, #12
 80008f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fa:	4b08      	ldr	r3, [pc, #32]	; (800091c <MX_USART2_UART_Init+0x4c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <MX_USART2_UART_Init+0x4c>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_USART2_UART_Init+0x4c>)
 8000908:	f001 fede 	bl	80026c8 <HAL_UART_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000912:	f000 f89f 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	200004dc 	.word	0x200004dc
 8000920:	40004400 	.word	0x40004400

08000924 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000928:	4b11      	ldr	r3, [pc, #68]	; (8000970 <MX_USART6_UART_Init+0x4c>)
 800092a:	4a12      	ldr	r2, [pc, #72]	; (8000974 <MX_USART6_UART_Init+0x50>)
 800092c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800092e:	4b10      	ldr	r3, [pc, #64]	; (8000970 <MX_USART6_UART_Init+0x4c>)
 8000930:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000934:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <MX_USART6_UART_Init+0x4c>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <MX_USART6_UART_Init+0x4c>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000942:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <MX_USART6_UART_Init+0x4c>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000948:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_USART6_UART_Init+0x4c>)
 800094a:	220c      	movs	r2, #12
 800094c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <MX_USART6_UART_Init+0x4c>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_USART6_UART_Init+0x4c>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800095a:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_USART6_UART_Init+0x4c>)
 800095c:	f001 feb4 	bl	80026c8 <HAL_UART_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000966:	f000 f875 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000498 	.word	0x20000498
 8000974:	40011400 	.word	0x40011400

08000978 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	; 0x28
 800097c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
 800098c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	613b      	str	r3, [r7, #16]
 8000992:	4b2d      	ldr	r3, [pc, #180]	; (8000a48 <MX_GPIO_Init+0xd0>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a2c      	ldr	r2, [pc, #176]	; (8000a48 <MX_GPIO_Init+0xd0>)
 8000998:	f043 0304 	orr.w	r3, r3, #4
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b2a      	ldr	r3, [pc, #168]	; (8000a48 <MX_GPIO_Init+0xd0>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0304 	and.w	r3, r3, #4
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	4b26      	ldr	r3, [pc, #152]	; (8000a48 <MX_GPIO_Init+0xd0>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a25      	ldr	r2, [pc, #148]	; (8000a48 <MX_GPIO_Init+0xd0>)
 80009b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b23      	ldr	r3, [pc, #140]	; (8000a48 <MX_GPIO_Init+0xd0>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	4b1f      	ldr	r3, [pc, #124]	; (8000a48 <MX_GPIO_Init+0xd0>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a1e      	ldr	r2, [pc, #120]	; (8000a48 <MX_GPIO_Init+0xd0>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <MX_GPIO_Init+0xd0>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <MX_GPIO_Init+0xd0>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a17      	ldr	r2, [pc, #92]	; (8000a48 <MX_GPIO_Init+0xd0>)
 80009ec:	f043 0302 	orr.w	r3, r3, #2
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <MX_GPIO_Init+0xd0>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0302 	and.w	r3, r3, #2
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	2120      	movs	r1, #32
 8000a02:	4812      	ldr	r0, [pc, #72]	; (8000a4c <MX_GPIO_Init+0xd4>)
 8000a04:	f000 fd5e 	bl	80014c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a0e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	480c      	ldr	r0, [pc, #48]	; (8000a50 <MX_GPIO_Init+0xd8>)
 8000a20:	f000 fbcc 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a24:	2320      	movs	r3, #32
 8000a26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2300      	movs	r3, #0
 8000a32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4804      	ldr	r0, [pc, #16]	; (8000a4c <MX_GPIO_Init+0xd4>)
 8000a3c:	f000 fbbe 	bl	80011bc <HAL_GPIO_Init>

}
 8000a40:	bf00      	nop
 8000a42:	3728      	adds	r7, #40	; 0x28
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40020000 	.word	0x40020000
 8000a50:	40020800 	.word	0x40020800

08000a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a58:	b672      	cpsid	i
}
 8000a5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <Error_Handler+0x8>
	...

08000a60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <HAL_MspInit+0x4c>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6e:	4a0f      	ldr	r2, [pc, #60]	; (8000aac <HAL_MspInit+0x4c>)
 8000a70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a74:	6453      	str	r3, [r2, #68]	; 0x44
 8000a76:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <HAL_MspInit+0x4c>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	603b      	str	r3, [r7, #0]
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <HAL_MspInit+0x4c>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	4a08      	ldr	r2, [pc, #32]	; (8000aac <HAL_MspInit+0x4c>)
 8000a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a90:	6413      	str	r3, [r2, #64]	; 0x40
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <HAL_MspInit+0x4c>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9a:	603b      	str	r3, [r7, #0]
 8000a9c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a9e:	2007      	movs	r0, #7
 8000aa0:	f000 fab8 	bl	8001014 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40023800 	.word	0x40023800

08000ab0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a0b      	ldr	r2, [pc, #44]	; (8000aec <HAL_TIM_Base_MspInit+0x3c>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d10d      	bne.n	8000ade <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <HAL_TIM_Base_MspInit+0x40>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	4a09      	ldr	r2, [pc, #36]	; (8000af0 <HAL_TIM_Base_MspInit+0x40>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad2:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <HAL_TIM_Base_MspInit+0x40>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000ade:	bf00      	nop
 8000ae0:	3714      	adds	r7, #20
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	40010000 	.word	0x40010000
 8000af0:	40023800 	.word	0x40023800

08000af4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08c      	sub	sp, #48	; 0x30
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 031c 	add.w	r3, r7, #28
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a32      	ldr	r2, [pc, #200]	; (8000bdc <HAL_UART_MspInit+0xe8>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d12c      	bne.n	8000b70 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	61bb      	str	r3, [r7, #24]
 8000b1a:	4b31      	ldr	r3, [pc, #196]	; (8000be0 <HAL_UART_MspInit+0xec>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	4a30      	ldr	r2, [pc, #192]	; (8000be0 <HAL_UART_MspInit+0xec>)
 8000b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b24:	6413      	str	r3, [r2, #64]	; 0x40
 8000b26:	4b2e      	ldr	r3, [pc, #184]	; (8000be0 <HAL_UART_MspInit+0xec>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b2e:	61bb      	str	r3, [r7, #24]
 8000b30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
 8000b36:	4b2a      	ldr	r3, [pc, #168]	; (8000be0 <HAL_UART_MspInit+0xec>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a29      	ldr	r2, [pc, #164]	; (8000be0 <HAL_UART_MspInit+0xec>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b27      	ldr	r3, [pc, #156]	; (8000be0 <HAL_UART_MspInit+0xec>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b4e:	230c      	movs	r3, #12
 8000b50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b52:	2302      	movs	r3, #2
 8000b54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b5e:	2307      	movs	r3, #7
 8000b60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b62:	f107 031c 	add.w	r3, r7, #28
 8000b66:	4619      	mov	r1, r3
 8000b68:	481e      	ldr	r0, [pc, #120]	; (8000be4 <HAL_UART_MspInit+0xf0>)
 8000b6a:	f000 fb27 	bl	80011bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000b6e:	e030      	b.n	8000bd2 <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a1c      	ldr	r2, [pc, #112]	; (8000be8 <HAL_UART_MspInit+0xf4>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d12b      	bne.n	8000bd2 <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	4b18      	ldr	r3, [pc, #96]	; (8000be0 <HAL_UART_MspInit+0xec>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b82:	4a17      	ldr	r2, [pc, #92]	; (8000be0 <HAL_UART_MspInit+0xec>)
 8000b84:	f043 0320 	orr.w	r3, r3, #32
 8000b88:	6453      	str	r3, [r2, #68]	; 0x44
 8000b8a:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <HAL_UART_MspInit+0xec>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8e:	f003 0320 	and.w	r3, r3, #32
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <HAL_UART_MspInit+0xec>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a10      	ldr	r2, [pc, #64]	; (8000be0 <HAL_UART_MspInit+0xec>)
 8000ba0:	f043 0304 	orr.w	r3, r3, #4
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <HAL_UART_MspInit+0xec>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0304 	and.w	r3, r3, #4
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bb2:	23c0      	movs	r3, #192	; 0xc0
 8000bb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000bc2:	2308      	movs	r3, #8
 8000bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc6:	f107 031c 	add.w	r3, r7, #28
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4807      	ldr	r0, [pc, #28]	; (8000bec <HAL_UART_MspInit+0xf8>)
 8000bce:	f000 faf5 	bl	80011bc <HAL_GPIO_Init>
}
 8000bd2:	bf00      	nop
 8000bd4:	3730      	adds	r7, #48	; 0x30
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40004400 	.word	0x40004400
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40020000 	.word	0x40020000
 8000be8:	40011400 	.word	0x40011400
 8000bec:	40020800 	.word	0x40020800

08000bf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <NMI_Handler+0x4>

08000bf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfa:	e7fe      	b.n	8000bfa <HardFault_Handler+0x4>

08000bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <MemManage_Handler+0x4>

08000c02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c06:	e7fe      	b.n	8000c06 <BusFault_Handler+0x4>

08000c08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <UsageFault_Handler+0x4>

08000c0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c3c:	f000 f8fa 	bl	8000e34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c48:	4802      	ldr	r0, [pc, #8]	; (8000c54 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000c4a:	f001 f9aa 	bl	8001fa2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000450 	.word	0x20000450

08000c58 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c5c:	4802      	ldr	r0, [pc, #8]	; (8000c68 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c5e:	f001 f9a0 	bl	8001fa2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000450 	.word	0x20000450

08000c6c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c70:	4802      	ldr	r0, [pc, #8]	; (8000c7c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000c72:	f001 f996 	bl	8001fa2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000450 	.word	0x20000450

08000c80 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c84:	4802      	ldr	r0, [pc, #8]	; (8000c90 <TIM1_CC_IRQHandler+0x10>)
 8000c86:	f001 f98c 	bl	8001fa2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000450 	.word	0x20000450

08000c94 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c98:	4802      	ldr	r0, [pc, #8]	; (8000ca4 <USART2_IRQHandler+0x10>)
 8000c9a:	f001 fd93 	bl	80027c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	200004dc 	.word	0x200004dc

08000ca8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000cac:	4802      	ldr	r0, [pc, #8]	; (8000cb8 <USART6_IRQHandler+0x10>)
 8000cae:	f001 fd89 	bl	80027c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000498 	.word	0x20000498

08000cbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <SystemInit+0x20>)
 8000cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc6:	4a05      	ldr	r2, [pc, #20]	; (8000cdc <SystemInit+0x20>)
 8000cc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ccc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <HAL_UART_RxCpltCallback>:
extern uint8_t RxTimerFlag;

extern UART_HandleTypeDef huart2;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
	if(huart == &huart2) // Modbus Slave TX
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a0f      	ldr	r2, [pc, #60]	; (8000d28 <HAL_UART_RxCpltCallback+0x48>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d117      	bne.n	8000d20 <HAL_UART_RxCpltCallback+0x40>
	{
		RxTimerFlag = ON;
 8000cf0:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <HAL_UART_RxCpltCallback+0x4c>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	701a      	strb	r2, [r3, #0]

		if(RxTimerFlag)
 8000cf6:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <HAL_UART_RxCpltCallback+0x4c>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d00b      	beq.n	8000d16 <HAL_UART_RxCpltCallback+0x36>
		{
			MB_RxBuf[RX_DataCnt++] = RX_Data;
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <HAL_UART_RxCpltCallback+0x50>)
 8000d00:	881b      	ldrh	r3, [r3, #0]
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	1c5a      	adds	r2, r3, #1
 8000d06:	b291      	uxth	r1, r2
 8000d08:	4a09      	ldr	r2, [pc, #36]	; (8000d30 <HAL_UART_RxCpltCallback+0x50>)
 8000d0a:	8011      	strh	r1, [r2, #0]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <HAL_UART_RxCpltCallback+0x54>)
 8000d10:	7819      	ldrb	r1, [r3, #0]
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <HAL_UART_RxCpltCallback+0x58>)
 8000d14:	5499      	strb	r1, [r3, r2]
		}

		HAL_UART_Receive_IT(&huart2, &RX_Data, 1);
 8000d16:	2201      	movs	r2, #1
 8000d18:	4906      	ldr	r1, [pc, #24]	; (8000d34 <HAL_UART_RxCpltCallback+0x54>)
 8000d1a:	4803      	ldr	r0, [pc, #12]	; (8000d28 <HAL_UART_RxCpltCallback+0x48>)
 8000d1c:	f001 fd21 	bl	8002762 <HAL_UART_Receive_IT>
	}

}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	200004dc 	.word	0x200004dc
 8000d2c:	20000045 	.word	0x20000045
 8000d30:	2000002c 	.word	0x2000002c
 8000d34:	20000044 	.word	0x20000044
 8000d38:	20000030 	.word	0x20000030

08000d3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d40:	480d      	ldr	r0, [pc, #52]	; (8000d78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d42:	490e      	ldr	r1, [pc, #56]	; (8000d7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d44:	4a0e      	ldr	r2, [pc, #56]	; (8000d80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d48:	e002      	b.n	8000d50 <LoopCopyDataInit>

08000d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4e:	3304      	adds	r3, #4

08000d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d54:	d3f9      	bcc.n	8000d4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d56:	4a0b      	ldr	r2, [pc, #44]	; (8000d84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d58:	4c0b      	ldr	r4, [pc, #44]	; (8000d88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d5c:	e001      	b.n	8000d62 <LoopFillZerobss>

08000d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d60:	3204      	adds	r2, #4

08000d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d64:	d3fb      	bcc.n	8000d5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d66:	f7ff ffa9 	bl	8000cbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d6a:	f002 fb75 	bl	8003458 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d6e:	f7ff fca5 	bl	80006bc <main>
  bx  lr    
 8000d72:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d7c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d80:	080034f4 	.word	0x080034f4
  ldr r2, =_sbss
 8000d84:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d88:	20000524 	.word	0x20000524

08000d8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d8c:	e7fe      	b.n	8000d8c <ADC_IRQHandler>
	...

08000d90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d94:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <HAL_Init+0x40>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a0d      	ldr	r2, [pc, #52]	; (8000dd0 <HAL_Init+0x40>)
 8000d9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000da0:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <HAL_Init+0x40>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <HAL_Init+0x40>)
 8000da6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000daa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dac:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <HAL_Init+0x40>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a07      	ldr	r2, [pc, #28]	; (8000dd0 <HAL_Init+0x40>)
 8000db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000db6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db8:	2003      	movs	r0, #3
 8000dba:	f000 f92b 	bl	8001014 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f000 f808 	bl	8000dd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc4:	f7ff fe4c 	bl	8000a60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40023c00 	.word	0x40023c00

08000dd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <HAL_InitTick+0x54>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <HAL_InitTick+0x58>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	4619      	mov	r1, r3
 8000de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 f943 	bl	800107e <HAL_SYSTICK_Config>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e00e      	b.n	8000e20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2b0f      	cmp	r3, #15
 8000e06:	d80a      	bhi.n	8000e1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	6879      	ldr	r1, [r7, #4]
 8000e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e10:	f000 f90b 	bl	800102a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e14:	4a06      	ldr	r2, [pc, #24]	; (8000e30 <HAL_InitTick+0x5c>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e000      	b.n	8000e20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000004 	.word	0x20000004
 8000e2c:	2000000c 	.word	0x2000000c
 8000e30:	20000008 	.word	0x20000008

08000e34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_IncTick+0x20>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <HAL_IncTick+0x24>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4413      	add	r3, r2
 8000e44:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <HAL_IncTick+0x24>)
 8000e46:	6013      	str	r3, [r2, #0]
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	2000000c 	.word	0x2000000c
 8000e58:	20000520 	.word	0x20000520

08000e5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e60:	4b03      	ldr	r3, [pc, #12]	; (8000e70 <HAL_GetTick+0x14>)
 8000e62:	681b      	ldr	r3, [r3, #0]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	20000520 	.word	0x20000520

08000e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8a:	68ba      	ldr	r2, [r7, #8]
 8000e8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e90:	4013      	ands	r3, r2
 8000e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea6:	4a04      	ldr	r2, [pc, #16]	; (8000eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	60d3      	str	r3, [r2, #12]
}
 8000eac:	bf00      	nop
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	0a1b      	lsrs	r3, r3, #8
 8000ec6:	f003 0307 	and.w	r3, r3, #7
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	db0b      	blt.n	8000f02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	f003 021f 	and.w	r2, r3, #31
 8000ef0:	4907      	ldr	r1, [pc, #28]	; (8000f10 <__NVIC_EnableIRQ+0x38>)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	095b      	lsrs	r3, r3, #5
 8000ef8:	2001      	movs	r0, #1
 8000efa:	fa00 f202 	lsl.w	r2, r0, r2
 8000efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	e000e100 	.word	0xe000e100

08000f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	6039      	str	r1, [r7, #0]
 8000f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	db0a      	blt.n	8000f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	490c      	ldr	r1, [pc, #48]	; (8000f60 <__NVIC_SetPriority+0x4c>)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	0112      	lsls	r2, r2, #4
 8000f34:	b2d2      	uxtb	r2, r2
 8000f36:	440b      	add	r3, r1
 8000f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f3c:	e00a      	b.n	8000f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4908      	ldr	r1, [pc, #32]	; (8000f64 <__NVIC_SetPriority+0x50>)
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	f003 030f 	and.w	r3, r3, #15
 8000f4a:	3b04      	subs	r3, #4
 8000f4c:	0112      	lsls	r2, r2, #4
 8000f4e:	b2d2      	uxtb	r2, r2
 8000f50:	440b      	add	r3, r1
 8000f52:	761a      	strb	r2, [r3, #24]
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000e100 	.word	0xe000e100
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b089      	sub	sp, #36	; 0x24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	f1c3 0307 	rsb	r3, r3, #7
 8000f82:	2b04      	cmp	r3, #4
 8000f84:	bf28      	it	cs
 8000f86:	2304      	movcs	r3, #4
 8000f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3304      	adds	r3, #4
 8000f8e:	2b06      	cmp	r3, #6
 8000f90:	d902      	bls.n	8000f98 <NVIC_EncodePriority+0x30>
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	3b03      	subs	r3, #3
 8000f96:	e000      	b.n	8000f9a <NVIC_EncodePriority+0x32>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43da      	mvns	r2, r3
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	401a      	ands	r2, r3
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fba:	43d9      	mvns	r1, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc0:	4313      	orrs	r3, r2
         );
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3724      	adds	r7, #36	; 0x24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fe0:	d301      	bcc.n	8000fe6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e00f      	b.n	8001006 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <SysTick_Config+0x40>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fee:	210f      	movs	r1, #15
 8000ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff4:	f7ff ff8e 	bl	8000f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <SysTick_Config+0x40>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffe:	4b04      	ldr	r3, [pc, #16]	; (8001010 <SysTick_Config+0x40>)
 8001000:	2207      	movs	r2, #7
 8001002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	e000e010 	.word	0xe000e010

08001014 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff ff29 	bl	8000e74 <__NVIC_SetPriorityGrouping>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800102a:	b580      	push	{r7, lr}
 800102c:	b086      	sub	sp, #24
 800102e:	af00      	add	r7, sp, #0
 8001030:	4603      	mov	r3, r0
 8001032:	60b9      	str	r1, [r7, #8]
 8001034:	607a      	str	r2, [r7, #4]
 8001036:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800103c:	f7ff ff3e 	bl	8000ebc <__NVIC_GetPriorityGrouping>
 8001040:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	68b9      	ldr	r1, [r7, #8]
 8001046:	6978      	ldr	r0, [r7, #20]
 8001048:	f7ff ff8e 	bl	8000f68 <NVIC_EncodePriority>
 800104c:	4602      	mov	r2, r0
 800104e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001052:	4611      	mov	r1, r2
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff5d 	bl	8000f14 <__NVIC_SetPriority>
}
 800105a:	bf00      	nop
 800105c:	3718      	adds	r7, #24
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	4603      	mov	r3, r0
 800106a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800106c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ff31 	bl	8000ed8 <__NVIC_EnableIRQ>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff ffa2 	bl	8000fd0 <SysTick_Config>
 800108c:	4603      	mov	r3, r0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b084      	sub	sp, #16
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80010a4:	f7ff feda 	bl	8000e5c <HAL_GetTick>
 80010a8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d008      	beq.n	80010c8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2280      	movs	r2, #128	; 0x80
 80010ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e052      	b.n	800116e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f022 0216 	bic.w	r2, r2, #22
 80010d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	695a      	ldr	r2, [r3, #20]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010e6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d103      	bne.n	80010f8 <HAL_DMA_Abort+0x62>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d007      	beq.n	8001108 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f022 0208 	bic.w	r2, r2, #8
 8001106:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f022 0201 	bic.w	r2, r2, #1
 8001116:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001118:	e013      	b.n	8001142 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800111a:	f7ff fe9f 	bl	8000e5c <HAL_GetTick>
 800111e:	4602      	mov	r2, r0
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	2b05      	cmp	r3, #5
 8001126:	d90c      	bls.n	8001142 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2220      	movs	r2, #32
 800112c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2203      	movs	r2, #3
 8001132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e015      	b.n	800116e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	2b00      	cmp	r3, #0
 800114e:	d1e4      	bne.n	800111a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001154:	223f      	movs	r2, #63	; 0x3f
 8001156:	409a      	lsls	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2201      	movs	r2, #1
 8001160:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001176:	b480      	push	{r7}
 8001178:	b083      	sub	sp, #12
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d004      	beq.n	8001194 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2280      	movs	r2, #128	; 0x80
 800118e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e00c      	b.n	80011ae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2205      	movs	r2, #5
 8001198:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f022 0201 	bic.w	r2, r2, #1
 80011aa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
	...

080011bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011bc:	b480      	push	{r7}
 80011be:	b089      	sub	sp, #36	; 0x24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
 80011d6:	e159      	b.n	800148c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011d8:	2201      	movs	r2, #1
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	697a      	ldr	r2, [r7, #20]
 80011e8:	4013      	ands	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	f040 8148 	bne.w	8001486 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f003 0303 	and.w	r3, r3, #3
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d005      	beq.n	800120e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800120a:	2b02      	cmp	r3, #2
 800120c:	d130      	bne.n	8001270 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	2203      	movs	r2, #3
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4013      	ands	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	68da      	ldr	r2, [r3, #12]
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4313      	orrs	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001244:	2201      	movs	r2, #1
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	091b      	lsrs	r3, r3, #4
 800125a:	f003 0201 	and.w	r2, r3, #1
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 0303 	and.w	r3, r3, #3
 8001278:	2b03      	cmp	r3, #3
 800127a:	d017      	beq.n	80012ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	2203      	movs	r2, #3
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 0303 	and.w	r3, r3, #3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d123      	bne.n	8001300 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	08da      	lsrs	r2, r3, #3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3208      	adds	r2, #8
 80012c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	f003 0307 	and.w	r3, r3, #7
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	220f      	movs	r2, #15
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	691a      	ldr	r2, [r3, #16]
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	08da      	lsrs	r2, r3, #3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	3208      	adds	r2, #8
 80012fa:	69b9      	ldr	r1, [r7, #24]
 80012fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	2203      	movs	r2, #3
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 0203 	and.w	r2, r3, #3
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800133c:	2b00      	cmp	r3, #0
 800133e:	f000 80a2 	beq.w	8001486 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	4b57      	ldr	r3, [pc, #348]	; (80014a4 <HAL_GPIO_Init+0x2e8>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	4a56      	ldr	r2, [pc, #344]	; (80014a4 <HAL_GPIO_Init+0x2e8>)
 800134c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001350:	6453      	str	r3, [r2, #68]	; 0x44
 8001352:	4b54      	ldr	r3, [pc, #336]	; (80014a4 <HAL_GPIO_Init+0x2e8>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800135e:	4a52      	ldr	r2, [pc, #328]	; (80014a8 <HAL_GPIO_Init+0x2ec>)
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	089b      	lsrs	r3, r3, #2
 8001364:	3302      	adds	r3, #2
 8001366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800136a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f003 0303 	and.w	r3, r3, #3
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	220f      	movs	r2, #15
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43db      	mvns	r3, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4013      	ands	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a49      	ldr	r2, [pc, #292]	; (80014ac <HAL_GPIO_Init+0x2f0>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d019      	beq.n	80013be <HAL_GPIO_Init+0x202>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a48      	ldr	r2, [pc, #288]	; (80014b0 <HAL_GPIO_Init+0x2f4>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d013      	beq.n	80013ba <HAL_GPIO_Init+0x1fe>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a47      	ldr	r2, [pc, #284]	; (80014b4 <HAL_GPIO_Init+0x2f8>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d00d      	beq.n	80013b6 <HAL_GPIO_Init+0x1fa>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a46      	ldr	r2, [pc, #280]	; (80014b8 <HAL_GPIO_Init+0x2fc>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d007      	beq.n	80013b2 <HAL_GPIO_Init+0x1f6>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a45      	ldr	r2, [pc, #276]	; (80014bc <HAL_GPIO_Init+0x300>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d101      	bne.n	80013ae <HAL_GPIO_Init+0x1f2>
 80013aa:	2304      	movs	r3, #4
 80013ac:	e008      	b.n	80013c0 <HAL_GPIO_Init+0x204>
 80013ae:	2307      	movs	r3, #7
 80013b0:	e006      	b.n	80013c0 <HAL_GPIO_Init+0x204>
 80013b2:	2303      	movs	r3, #3
 80013b4:	e004      	b.n	80013c0 <HAL_GPIO_Init+0x204>
 80013b6:	2302      	movs	r3, #2
 80013b8:	e002      	b.n	80013c0 <HAL_GPIO_Init+0x204>
 80013ba:	2301      	movs	r3, #1
 80013bc:	e000      	b.n	80013c0 <HAL_GPIO_Init+0x204>
 80013be:	2300      	movs	r3, #0
 80013c0:	69fa      	ldr	r2, [r7, #28]
 80013c2:	f002 0203 	and.w	r2, r2, #3
 80013c6:	0092      	lsls	r2, r2, #2
 80013c8:	4093      	lsls	r3, r2
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013d0:	4935      	ldr	r1, [pc, #212]	; (80014a8 <HAL_GPIO_Init+0x2ec>)
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	089b      	lsrs	r3, r3, #2
 80013d6:	3302      	adds	r3, #2
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013de:	4b38      	ldr	r3, [pc, #224]	; (80014c0 <HAL_GPIO_Init+0x304>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	43db      	mvns	r3, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4013      	ands	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001402:	4a2f      	ldr	r2, [pc, #188]	; (80014c0 <HAL_GPIO_Init+0x304>)
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001408:	4b2d      	ldr	r3, [pc, #180]	; (80014c0 <HAL_GPIO_Init+0x304>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	43db      	mvns	r3, r3
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4013      	ands	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d003      	beq.n	800142c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	4313      	orrs	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800142c:	4a24      	ldr	r2, [pc, #144]	; (80014c0 <HAL_GPIO_Init+0x304>)
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001432:	4b23      	ldr	r3, [pc, #140]	; (80014c0 <HAL_GPIO_Init+0x304>)
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	43db      	mvns	r3, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4013      	ands	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	4313      	orrs	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001456:	4a1a      	ldr	r2, [pc, #104]	; (80014c0 <HAL_GPIO_Init+0x304>)
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800145c:	4b18      	ldr	r3, [pc, #96]	; (80014c0 <HAL_GPIO_Init+0x304>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	43db      	mvns	r3, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4013      	ands	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d003      	beq.n	8001480 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	4313      	orrs	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001480:	4a0f      	ldr	r2, [pc, #60]	; (80014c0 <HAL_GPIO_Init+0x304>)
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	3301      	adds	r3, #1
 800148a:	61fb      	str	r3, [r7, #28]
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	2b0f      	cmp	r3, #15
 8001490:	f67f aea2 	bls.w	80011d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001494:	bf00      	nop
 8001496:	bf00      	nop
 8001498:	3724      	adds	r7, #36	; 0x24
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40013800 	.word	0x40013800
 80014ac:	40020000 	.word	0x40020000
 80014b0:	40020400 	.word	0x40020400
 80014b4:	40020800 	.word	0x40020800
 80014b8:	40020c00 	.word	0x40020c00
 80014bc:	40021000 	.word	0x40021000
 80014c0:	40013c00 	.word	0x40013c00

080014c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	460b      	mov	r3, r1
 80014ce:	807b      	strh	r3, [r7, #2]
 80014d0:	4613      	mov	r3, r2
 80014d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014d4:	787b      	ldrb	r3, [r7, #1]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014da:	887a      	ldrh	r2, [r7, #2]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014e0:	e003      	b.n	80014ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014e2:	887b      	ldrh	r3, [r7, #2]
 80014e4:	041a      	lsls	r2, r3, #16
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	619a      	str	r2, [r3, #24]
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
	...

080014f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e264      	b.n	80019d4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	2b00      	cmp	r3, #0
 8001514:	d075      	beq.n	8001602 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001516:	4ba3      	ldr	r3, [pc, #652]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f003 030c 	and.w	r3, r3, #12
 800151e:	2b04      	cmp	r3, #4
 8001520:	d00c      	beq.n	800153c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001522:	4ba0      	ldr	r3, [pc, #640]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800152a:	2b08      	cmp	r3, #8
 800152c:	d112      	bne.n	8001554 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800152e:	4b9d      	ldr	r3, [pc, #628]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001536:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800153a:	d10b      	bne.n	8001554 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800153c:	4b99      	ldr	r3, [pc, #612]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d05b      	beq.n	8001600 <HAL_RCC_OscConfig+0x108>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d157      	bne.n	8001600 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e23f      	b.n	80019d4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800155c:	d106      	bne.n	800156c <HAL_RCC_OscConfig+0x74>
 800155e:	4b91      	ldr	r3, [pc, #580]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a90      	ldr	r2, [pc, #576]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001568:	6013      	str	r3, [r2, #0]
 800156a:	e01d      	b.n	80015a8 <HAL_RCC_OscConfig+0xb0>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001574:	d10c      	bne.n	8001590 <HAL_RCC_OscConfig+0x98>
 8001576:	4b8b      	ldr	r3, [pc, #556]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a8a      	ldr	r2, [pc, #552]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 800157c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	4b88      	ldr	r3, [pc, #544]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a87      	ldr	r2, [pc, #540]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	e00b      	b.n	80015a8 <HAL_RCC_OscConfig+0xb0>
 8001590:	4b84      	ldr	r3, [pc, #528]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a83      	ldr	r2, [pc, #524]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	4b81      	ldr	r3, [pc, #516]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a80      	ldr	r2, [pc, #512]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 80015a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d013      	beq.n	80015d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b0:	f7ff fc54 	bl	8000e5c <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015b8:	f7ff fc50 	bl	8000e5c <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b64      	cmp	r3, #100	; 0x64
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e204      	b.n	80019d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ca:	4b76      	ldr	r3, [pc, #472]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0f0      	beq.n	80015b8 <HAL_RCC_OscConfig+0xc0>
 80015d6:	e014      	b.n	8001602 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d8:	f7ff fc40 	bl	8000e5c <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015e0:	f7ff fc3c 	bl	8000e5c <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b64      	cmp	r3, #100	; 0x64
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e1f0      	b.n	80019d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015f2:	4b6c      	ldr	r3, [pc, #432]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f0      	bne.n	80015e0 <HAL_RCC_OscConfig+0xe8>
 80015fe:	e000      	b.n	8001602 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d063      	beq.n	80016d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800160e:	4b65      	ldr	r3, [pc, #404]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 030c 	and.w	r3, r3, #12
 8001616:	2b00      	cmp	r3, #0
 8001618:	d00b      	beq.n	8001632 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800161a:	4b62      	ldr	r3, [pc, #392]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001622:	2b08      	cmp	r3, #8
 8001624:	d11c      	bne.n	8001660 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001626:	4b5f      	ldr	r3, [pc, #380]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d116      	bne.n	8001660 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001632:	4b5c      	ldr	r3, [pc, #368]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d005      	beq.n	800164a <HAL_RCC_OscConfig+0x152>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d001      	beq.n	800164a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e1c4      	b.n	80019d4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800164a:	4b56      	ldr	r3, [pc, #344]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	691b      	ldr	r3, [r3, #16]
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	4952      	ldr	r1, [pc, #328]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 800165a:	4313      	orrs	r3, r2
 800165c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800165e:	e03a      	b.n	80016d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d020      	beq.n	80016aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001668:	4b4f      	ldr	r3, [pc, #316]	; (80017a8 <HAL_RCC_OscConfig+0x2b0>)
 800166a:	2201      	movs	r2, #1
 800166c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166e:	f7ff fbf5 	bl	8000e5c <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001674:	e008      	b.n	8001688 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001676:	f7ff fbf1 	bl	8000e5c <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e1a5      	b.n	80019d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001688:	4b46      	ldr	r3, [pc, #280]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0f0      	beq.n	8001676 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001694:	4b43      	ldr	r3, [pc, #268]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	4940      	ldr	r1, [pc, #256]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 80016a4:	4313      	orrs	r3, r2
 80016a6:	600b      	str	r3, [r1, #0]
 80016a8:	e015      	b.n	80016d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016aa:	4b3f      	ldr	r3, [pc, #252]	; (80017a8 <HAL_RCC_OscConfig+0x2b0>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b0:	f7ff fbd4 	bl	8000e5c <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016b8:	f7ff fbd0 	bl	8000e5c <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e184      	b.n	80019d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ca:	4b36      	ldr	r3, [pc, #216]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1f0      	bne.n	80016b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0308 	and.w	r3, r3, #8
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d030      	beq.n	8001744 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d016      	beq.n	8001718 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ea:	4b30      	ldr	r3, [pc, #192]	; (80017ac <HAL_RCC_OscConfig+0x2b4>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f0:	f7ff fbb4 	bl	8000e5c <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016f8:	f7ff fbb0 	bl	8000e5c <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e164      	b.n	80019d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800170a:	4b26      	ldr	r3, [pc, #152]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 800170c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0f0      	beq.n	80016f8 <HAL_RCC_OscConfig+0x200>
 8001716:	e015      	b.n	8001744 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001718:	4b24      	ldr	r3, [pc, #144]	; (80017ac <HAL_RCC_OscConfig+0x2b4>)
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800171e:	f7ff fb9d 	bl	8000e5c <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001726:	f7ff fb99 	bl	8000e5c <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e14d      	b.n	80019d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001738:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 800173a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1f0      	bne.n	8001726 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0304 	and.w	r3, r3, #4
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 80a0 	beq.w	8001892 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001752:	2300      	movs	r3, #0
 8001754:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001756:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d10f      	bne.n	8001782 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	4a0e      	ldr	r2, [pc, #56]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 800176c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001770:	6413      	str	r3, [r2, #64]	; 0x40
 8001772:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800177e:	2301      	movs	r3, #1
 8001780:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001782:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <HAL_RCC_OscConfig+0x2b8>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800178a:	2b00      	cmp	r3, #0
 800178c:	d121      	bne.n	80017d2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800178e:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <HAL_RCC_OscConfig+0x2b8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a07      	ldr	r2, [pc, #28]	; (80017b0 <HAL_RCC_OscConfig+0x2b8>)
 8001794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001798:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800179a:	f7ff fb5f 	bl	8000e5c <HAL_GetTick>
 800179e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a0:	e011      	b.n	80017c6 <HAL_RCC_OscConfig+0x2ce>
 80017a2:	bf00      	nop
 80017a4:	40023800 	.word	0x40023800
 80017a8:	42470000 	.word	0x42470000
 80017ac:	42470e80 	.word	0x42470e80
 80017b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017b4:	f7ff fb52 	bl	8000e5c <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e106      	b.n	80019d4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c6:	4b85      	ldr	r3, [pc, #532]	; (80019dc <HAL_RCC_OscConfig+0x4e4>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0f0      	beq.n	80017b4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d106      	bne.n	80017e8 <HAL_RCC_OscConfig+0x2f0>
 80017da:	4b81      	ldr	r3, [pc, #516]	; (80019e0 <HAL_RCC_OscConfig+0x4e8>)
 80017dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017de:	4a80      	ldr	r2, [pc, #512]	; (80019e0 <HAL_RCC_OscConfig+0x4e8>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	6713      	str	r3, [r2, #112]	; 0x70
 80017e6:	e01c      	b.n	8001822 <HAL_RCC_OscConfig+0x32a>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	2b05      	cmp	r3, #5
 80017ee:	d10c      	bne.n	800180a <HAL_RCC_OscConfig+0x312>
 80017f0:	4b7b      	ldr	r3, [pc, #492]	; (80019e0 <HAL_RCC_OscConfig+0x4e8>)
 80017f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f4:	4a7a      	ldr	r2, [pc, #488]	; (80019e0 <HAL_RCC_OscConfig+0x4e8>)
 80017f6:	f043 0304 	orr.w	r3, r3, #4
 80017fa:	6713      	str	r3, [r2, #112]	; 0x70
 80017fc:	4b78      	ldr	r3, [pc, #480]	; (80019e0 <HAL_RCC_OscConfig+0x4e8>)
 80017fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001800:	4a77      	ldr	r2, [pc, #476]	; (80019e0 <HAL_RCC_OscConfig+0x4e8>)
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	6713      	str	r3, [r2, #112]	; 0x70
 8001808:	e00b      	b.n	8001822 <HAL_RCC_OscConfig+0x32a>
 800180a:	4b75      	ldr	r3, [pc, #468]	; (80019e0 <HAL_RCC_OscConfig+0x4e8>)
 800180c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800180e:	4a74      	ldr	r2, [pc, #464]	; (80019e0 <HAL_RCC_OscConfig+0x4e8>)
 8001810:	f023 0301 	bic.w	r3, r3, #1
 8001814:	6713      	str	r3, [r2, #112]	; 0x70
 8001816:	4b72      	ldr	r3, [pc, #456]	; (80019e0 <HAL_RCC_OscConfig+0x4e8>)
 8001818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800181a:	4a71      	ldr	r2, [pc, #452]	; (80019e0 <HAL_RCC_OscConfig+0x4e8>)
 800181c:	f023 0304 	bic.w	r3, r3, #4
 8001820:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d015      	beq.n	8001856 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800182a:	f7ff fb17 	bl	8000e5c <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001830:	e00a      	b.n	8001848 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001832:	f7ff fb13 	bl	8000e5c <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001840:	4293      	cmp	r3, r2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e0c5      	b.n	80019d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001848:	4b65      	ldr	r3, [pc, #404]	; (80019e0 <HAL_RCC_OscConfig+0x4e8>)
 800184a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0ee      	beq.n	8001832 <HAL_RCC_OscConfig+0x33a>
 8001854:	e014      	b.n	8001880 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001856:	f7ff fb01 	bl	8000e5c <HAL_GetTick>
 800185a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800185c:	e00a      	b.n	8001874 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800185e:	f7ff fafd 	bl	8000e5c <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	f241 3288 	movw	r2, #5000	; 0x1388
 800186c:	4293      	cmp	r3, r2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e0af      	b.n	80019d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001874:	4b5a      	ldr	r3, [pc, #360]	; (80019e0 <HAL_RCC_OscConfig+0x4e8>)
 8001876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1ee      	bne.n	800185e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001880:	7dfb      	ldrb	r3, [r7, #23]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d105      	bne.n	8001892 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001886:	4b56      	ldr	r3, [pc, #344]	; (80019e0 <HAL_RCC_OscConfig+0x4e8>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	4a55      	ldr	r2, [pc, #340]	; (80019e0 <HAL_RCC_OscConfig+0x4e8>)
 800188c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001890:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	2b00      	cmp	r3, #0
 8001898:	f000 809b 	beq.w	80019d2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800189c:	4b50      	ldr	r3, [pc, #320]	; (80019e0 <HAL_RCC_OscConfig+0x4e8>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f003 030c 	and.w	r3, r3, #12
 80018a4:	2b08      	cmp	r3, #8
 80018a6:	d05c      	beq.n	8001962 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d141      	bne.n	8001934 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b0:	4b4c      	ldr	r3, [pc, #304]	; (80019e4 <HAL_RCC_OscConfig+0x4ec>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b6:	f7ff fad1 	bl	8000e5c <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018bc:	e008      	b.n	80018d0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018be:	f7ff facd 	bl	8000e5c <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e081      	b.n	80019d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018d0:	4b43      	ldr	r3, [pc, #268]	; (80019e0 <HAL_RCC_OscConfig+0x4e8>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1f0      	bne.n	80018be <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	69da      	ldr	r2, [r3, #28]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a1b      	ldr	r3, [r3, #32]
 80018e4:	431a      	orrs	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ea:	019b      	lsls	r3, r3, #6
 80018ec:	431a      	orrs	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f2:	085b      	lsrs	r3, r3, #1
 80018f4:	3b01      	subs	r3, #1
 80018f6:	041b      	lsls	r3, r3, #16
 80018f8:	431a      	orrs	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fe:	061b      	lsls	r3, r3, #24
 8001900:	4937      	ldr	r1, [pc, #220]	; (80019e0 <HAL_RCC_OscConfig+0x4e8>)
 8001902:	4313      	orrs	r3, r2
 8001904:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001906:	4b37      	ldr	r3, [pc, #220]	; (80019e4 <HAL_RCC_OscConfig+0x4ec>)
 8001908:	2201      	movs	r2, #1
 800190a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190c:	f7ff faa6 	bl	8000e5c <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001914:	f7ff faa2 	bl	8000e5c <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e056      	b.n	80019d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001926:	4b2e      	ldr	r3, [pc, #184]	; (80019e0 <HAL_RCC_OscConfig+0x4e8>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0f0      	beq.n	8001914 <HAL_RCC_OscConfig+0x41c>
 8001932:	e04e      	b.n	80019d2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001934:	4b2b      	ldr	r3, [pc, #172]	; (80019e4 <HAL_RCC_OscConfig+0x4ec>)
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193a:	f7ff fa8f 	bl	8000e5c <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001942:	f7ff fa8b 	bl	8000e5c <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e03f      	b.n	80019d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001954:	4b22      	ldr	r3, [pc, #136]	; (80019e0 <HAL_RCC_OscConfig+0x4e8>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1f0      	bne.n	8001942 <HAL_RCC_OscConfig+0x44a>
 8001960:	e037      	b.n	80019d2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d101      	bne.n	800196e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e032      	b.n	80019d4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800196e:	4b1c      	ldr	r3, [pc, #112]	; (80019e0 <HAL_RCC_OscConfig+0x4e8>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d028      	beq.n	80019ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001986:	429a      	cmp	r2, r3
 8001988:	d121      	bne.n	80019ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001994:	429a      	cmp	r2, r3
 8001996:	d11a      	bne.n	80019ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001998:	68fa      	ldr	r2, [r7, #12]
 800199a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800199e:	4013      	ands	r3, r2
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019a4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d111      	bne.n	80019ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b4:	085b      	lsrs	r3, r3, #1
 80019b6:	3b01      	subs	r3, #1
 80019b8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d107      	bne.n	80019ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d001      	beq.n	80019d2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e000      	b.n	80019d4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40007000 	.word	0x40007000
 80019e0:	40023800 	.word	0x40023800
 80019e4:	42470060 	.word	0x42470060

080019e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d101      	bne.n	80019fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e0cc      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019fc:	4b68      	ldr	r3, [pc, #416]	; (8001ba0 <HAL_RCC_ClockConfig+0x1b8>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d90c      	bls.n	8001a24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a0a:	4b65      	ldr	r3, [pc, #404]	; (8001ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a12:	4b63      	ldr	r3, [pc, #396]	; (8001ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d001      	beq.n	8001a24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e0b8      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d020      	beq.n	8001a72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d005      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a3c:	4b59      	ldr	r3, [pc, #356]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	4a58      	ldr	r2, [pc, #352]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0308 	and.w	r3, r3, #8
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d005      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a54:	4b53      	ldr	r3, [pc, #332]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	4a52      	ldr	r2, [pc, #328]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a60:	4b50      	ldr	r3, [pc, #320]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	494d      	ldr	r1, [pc, #308]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d044      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d107      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a86:	4b47      	ldr	r3, [pc, #284]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d119      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e07f      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d003      	beq.n	8001aa6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aa2:	2b03      	cmp	r3, #3
 8001aa4:	d107      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aa6:	4b3f      	ldr	r3, [pc, #252]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d109      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e06f      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab6:	4b3b      	ldr	r3, [pc, #236]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e067      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ac6:	4b37      	ldr	r3, [pc, #220]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f023 0203 	bic.w	r2, r3, #3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	4934      	ldr	r1, [pc, #208]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ad8:	f7ff f9c0 	bl	8000e5c <HAL_GetTick>
 8001adc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ade:	e00a      	b.n	8001af6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ae0:	f7ff f9bc 	bl	8000e5c <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e04f      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001af6:	4b2b      	ldr	r3, [pc, #172]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 020c 	and.w	r2, r3, #12
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d1eb      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b08:	4b25      	ldr	r3, [pc, #148]	; (8001ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d20c      	bcs.n	8001b30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b16:	4b22      	ldr	r3, [pc, #136]	; (8001ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b1e:	4b20      	ldr	r3, [pc, #128]	; (8001ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d001      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e032      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d008      	beq.n	8001b4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b3c:	4b19      	ldr	r3, [pc, #100]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	4916      	ldr	r1, [pc, #88]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d009      	beq.n	8001b6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b5a:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	490e      	ldr	r1, [pc, #56]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b6e:	f000 f821 	bl	8001bb4 <HAL_RCC_GetSysClockFreq>
 8001b72:	4602      	mov	r2, r0
 8001b74:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	091b      	lsrs	r3, r3, #4
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	490a      	ldr	r1, [pc, #40]	; (8001ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b80:	5ccb      	ldrb	r3, [r1, r3]
 8001b82:	fa22 f303 	lsr.w	r3, r2, r3
 8001b86:	4a09      	ldr	r2, [pc, #36]	; (8001bac <HAL_RCC_ClockConfig+0x1c4>)
 8001b88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b8a:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff f920 	bl	8000dd4 <HAL_InitTick>

  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40023c00 	.word	0x40023c00
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	080034cc 	.word	0x080034cc
 8001bac:	20000004 	.word	0x20000004
 8001bb0:	20000008 	.word	0x20000008

08001bb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bb4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001bb8:	b084      	sub	sp, #16
 8001bba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	607b      	str	r3, [r7, #4]
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bcc:	4b67      	ldr	r3, [pc, #412]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f003 030c 	and.w	r3, r3, #12
 8001bd4:	2b08      	cmp	r3, #8
 8001bd6:	d00d      	beq.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x40>
 8001bd8:	2b08      	cmp	r3, #8
 8001bda:	f200 80bd 	bhi.w	8001d58 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d002      	beq.n	8001be8 <HAL_RCC_GetSysClockFreq+0x34>
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	d003      	beq.n	8001bee <HAL_RCC_GetSysClockFreq+0x3a>
 8001be6:	e0b7      	b.n	8001d58 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001be8:	4b61      	ldr	r3, [pc, #388]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001bea:	60bb      	str	r3, [r7, #8]
       break;
 8001bec:	e0b7      	b.n	8001d5e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bee:	4b61      	ldr	r3, [pc, #388]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001bf0:	60bb      	str	r3, [r7, #8]
      break;
 8001bf2:	e0b4      	b.n	8001d5e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bf4:	4b5d      	ldr	r3, [pc, #372]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bfc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bfe:	4b5b      	ldr	r3, [pc, #364]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d04d      	beq.n	8001ca6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c0a:	4b58      	ldr	r3, [pc, #352]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	099b      	lsrs	r3, r3, #6
 8001c10:	461a      	mov	r2, r3
 8001c12:	f04f 0300 	mov.w	r3, #0
 8001c16:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c1a:	f04f 0100 	mov.w	r1, #0
 8001c1e:	ea02 0800 	and.w	r8, r2, r0
 8001c22:	ea03 0901 	and.w	r9, r3, r1
 8001c26:	4640      	mov	r0, r8
 8001c28:	4649      	mov	r1, r9
 8001c2a:	f04f 0200 	mov.w	r2, #0
 8001c2e:	f04f 0300 	mov.w	r3, #0
 8001c32:	014b      	lsls	r3, r1, #5
 8001c34:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c38:	0142      	lsls	r2, r0, #5
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	ebb0 0008 	subs.w	r0, r0, r8
 8001c42:	eb61 0109 	sbc.w	r1, r1, r9
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	f04f 0300 	mov.w	r3, #0
 8001c4e:	018b      	lsls	r3, r1, #6
 8001c50:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c54:	0182      	lsls	r2, r0, #6
 8001c56:	1a12      	subs	r2, r2, r0
 8001c58:	eb63 0301 	sbc.w	r3, r3, r1
 8001c5c:	f04f 0000 	mov.w	r0, #0
 8001c60:	f04f 0100 	mov.w	r1, #0
 8001c64:	00d9      	lsls	r1, r3, #3
 8001c66:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c6a:	00d0      	lsls	r0, r2, #3
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	eb12 0208 	adds.w	r2, r2, r8
 8001c74:	eb43 0309 	adc.w	r3, r3, r9
 8001c78:	f04f 0000 	mov.w	r0, #0
 8001c7c:	f04f 0100 	mov.w	r1, #0
 8001c80:	0259      	lsls	r1, r3, #9
 8001c82:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001c86:	0250      	lsls	r0, r2, #9
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	4610      	mov	r0, r2
 8001c8e:	4619      	mov	r1, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	461a      	mov	r2, r3
 8001c94:	f04f 0300 	mov.w	r3, #0
 8001c98:	f7fe fa9e 	bl	80001d8 <__aeabi_uldivmod>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	e04a      	b.n	8001d3c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ca6:	4b31      	ldr	r3, [pc, #196]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	099b      	lsrs	r3, r3, #6
 8001cac:	461a      	mov	r2, r3
 8001cae:	f04f 0300 	mov.w	r3, #0
 8001cb2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001cb6:	f04f 0100 	mov.w	r1, #0
 8001cba:	ea02 0400 	and.w	r4, r2, r0
 8001cbe:	ea03 0501 	and.w	r5, r3, r1
 8001cc2:	4620      	mov	r0, r4
 8001cc4:	4629      	mov	r1, r5
 8001cc6:	f04f 0200 	mov.w	r2, #0
 8001cca:	f04f 0300 	mov.w	r3, #0
 8001cce:	014b      	lsls	r3, r1, #5
 8001cd0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001cd4:	0142      	lsls	r2, r0, #5
 8001cd6:	4610      	mov	r0, r2
 8001cd8:	4619      	mov	r1, r3
 8001cda:	1b00      	subs	r0, r0, r4
 8001cdc:	eb61 0105 	sbc.w	r1, r1, r5
 8001ce0:	f04f 0200 	mov.w	r2, #0
 8001ce4:	f04f 0300 	mov.w	r3, #0
 8001ce8:	018b      	lsls	r3, r1, #6
 8001cea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001cee:	0182      	lsls	r2, r0, #6
 8001cf0:	1a12      	subs	r2, r2, r0
 8001cf2:	eb63 0301 	sbc.w	r3, r3, r1
 8001cf6:	f04f 0000 	mov.w	r0, #0
 8001cfa:	f04f 0100 	mov.w	r1, #0
 8001cfe:	00d9      	lsls	r1, r3, #3
 8001d00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d04:	00d0      	lsls	r0, r2, #3
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	1912      	adds	r2, r2, r4
 8001d0c:	eb45 0303 	adc.w	r3, r5, r3
 8001d10:	f04f 0000 	mov.w	r0, #0
 8001d14:	f04f 0100 	mov.w	r1, #0
 8001d18:	0299      	lsls	r1, r3, #10
 8001d1a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001d1e:	0290      	lsls	r0, r2, #10
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	4610      	mov	r0, r2
 8001d26:	4619      	mov	r1, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	f04f 0300 	mov.w	r3, #0
 8001d30:	f7fe fa52 	bl	80001d8 <__aeabi_uldivmod>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4613      	mov	r3, r2
 8001d3a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d3c:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	0c1b      	lsrs	r3, r3, #16
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	3301      	adds	r3, #1
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d54:	60bb      	str	r3, [r7, #8]
      break;
 8001d56:	e002      	b.n	8001d5e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d58:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001d5a:	60bb      	str	r3, [r7, #8]
      break;
 8001d5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d5e:	68bb      	ldr	r3, [r7, #8]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	00f42400 	.word	0x00f42400
 8001d74:	007a1200 	.word	0x007a1200

08001d78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d7c:	4b03      	ldr	r3, [pc, #12]	; (8001d8c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	20000004 	.word	0x20000004

08001d90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d94:	f7ff fff0 	bl	8001d78 <HAL_RCC_GetHCLKFreq>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	0a9b      	lsrs	r3, r3, #10
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	4903      	ldr	r1, [pc, #12]	; (8001db4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001da6:	5ccb      	ldrb	r3, [r1, r3]
 8001da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40023800 	.word	0x40023800
 8001db4:	080034dc 	.word	0x080034dc

08001db8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001dbc:	f7ff ffdc 	bl	8001d78 <HAL_RCC_GetHCLKFreq>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	0b5b      	lsrs	r3, r3, #13
 8001dc8:	f003 0307 	and.w	r3, r3, #7
 8001dcc:	4903      	ldr	r1, [pc, #12]	; (8001ddc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dce:	5ccb      	ldrb	r3, [r1, r3]
 8001dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	080034dc 	.word	0x080034dc

08001de0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e041      	b.n	8001e76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d106      	bne.n	8001e0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7fe fe52 	bl	8000ab0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2202      	movs	r2, #2
 8001e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3304      	adds	r3, #4
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4610      	mov	r0, r2
 8001e20:	f000 fab6 	bl	8002390 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
	...

08001e80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d001      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e044      	b.n	8001f22 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f042 0201 	orr.w	r2, r2, #1
 8001eae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a1e      	ldr	r2, [pc, #120]	; (8001f30 <HAL_TIM_Base_Start_IT+0xb0>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d018      	beq.n	8001eec <HAL_TIM_Base_Start_IT+0x6c>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ec2:	d013      	beq.n	8001eec <HAL_TIM_Base_Start_IT+0x6c>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a1a      	ldr	r2, [pc, #104]	; (8001f34 <HAL_TIM_Base_Start_IT+0xb4>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d00e      	beq.n	8001eec <HAL_TIM_Base_Start_IT+0x6c>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a19      	ldr	r2, [pc, #100]	; (8001f38 <HAL_TIM_Base_Start_IT+0xb8>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d009      	beq.n	8001eec <HAL_TIM_Base_Start_IT+0x6c>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a17      	ldr	r2, [pc, #92]	; (8001f3c <HAL_TIM_Base_Start_IT+0xbc>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d004      	beq.n	8001eec <HAL_TIM_Base_Start_IT+0x6c>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a16      	ldr	r2, [pc, #88]	; (8001f40 <HAL_TIM_Base_Start_IT+0xc0>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d111      	bne.n	8001f10 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2b06      	cmp	r3, #6
 8001efc:	d010      	beq.n	8001f20 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f042 0201 	orr.w	r2, r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f0e:	e007      	b.n	8001f20 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0201 	orr.w	r2, r2, #1
 8001f1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	40010000 	.word	0x40010000
 8001f34:	40000400 	.word	0x40000400
 8001f38:	40000800 	.word	0x40000800
 8001f3c:	40000c00 	.word	0x40000c00
 8001f40:	40014000 	.word	0x40014000

08001f44 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68da      	ldr	r2, [r3, #12]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f022 0201 	bic.w	r2, r2, #1
 8001f5a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6a1a      	ldr	r2, [r3, #32]
 8001f62:	f241 1311 	movw	r3, #4369	; 0x1111
 8001f66:	4013      	ands	r3, r2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d10f      	bne.n	8001f8c <HAL_TIM_Base_Stop_IT+0x48>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6a1a      	ldr	r2, [r3, #32]
 8001f72:	f240 4344 	movw	r3, #1092	; 0x444
 8001f76:	4013      	ands	r3, r2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d107      	bne.n	8001f8c <HAL_TIM_Base_Stop_IT+0x48>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 0201 	bic.w	r2, r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b082      	sub	sp, #8
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d122      	bne.n	8001ffe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d11b      	bne.n	8001ffe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f06f 0202 	mvn.w	r2, #2
 8001fce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	f003 0303 	and.w	r3, r3, #3
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 f9b5 	bl	8002354 <HAL_TIM_IC_CaptureCallback>
 8001fea:	e005      	b.n	8001ff8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 f9a7 	bl	8002340 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f9b8 	bl	8002368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	2b04      	cmp	r3, #4
 800200a:	d122      	bne.n	8002052 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	f003 0304 	and.w	r3, r3, #4
 8002016:	2b04      	cmp	r3, #4
 8002018:	d11b      	bne.n	8002052 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f06f 0204 	mvn.w	r2, #4
 8002022:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2202      	movs	r2, #2
 8002028:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002034:	2b00      	cmp	r3, #0
 8002036:	d003      	beq.n	8002040 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 f98b 	bl	8002354 <HAL_TIM_IC_CaptureCallback>
 800203e:	e005      	b.n	800204c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 f97d 	bl	8002340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f98e 	bl	8002368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	f003 0308 	and.w	r3, r3, #8
 800205c:	2b08      	cmp	r3, #8
 800205e:	d122      	bne.n	80020a6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	f003 0308 	and.w	r3, r3, #8
 800206a:	2b08      	cmp	r3, #8
 800206c:	d11b      	bne.n	80020a6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f06f 0208 	mvn.w	r2, #8
 8002076:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2204      	movs	r2, #4
 800207c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	69db      	ldr	r3, [r3, #28]
 8002084:	f003 0303 	and.w	r3, r3, #3
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 f961 	bl	8002354 <HAL_TIM_IC_CaptureCallback>
 8002092:	e005      	b.n	80020a0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f953 	bl	8002340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f964 	bl	8002368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	f003 0310 	and.w	r3, r3, #16
 80020b0:	2b10      	cmp	r3, #16
 80020b2:	d122      	bne.n	80020fa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	f003 0310 	and.w	r3, r3, #16
 80020be:	2b10      	cmp	r3, #16
 80020c0:	d11b      	bne.n	80020fa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f06f 0210 	mvn.w	r2, #16
 80020ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2208      	movs	r2, #8
 80020d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	69db      	ldr	r3, [r3, #28]
 80020d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 f937 	bl	8002354 <HAL_TIM_IC_CaptureCallback>
 80020e6:	e005      	b.n	80020f4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 f929 	bl	8002340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 f93a 	bl	8002368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	2b01      	cmp	r3, #1
 8002106:	d10e      	bne.n	8002126 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b01      	cmp	r3, #1
 8002114:	d107      	bne.n	8002126 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f06f 0201 	mvn.w	r2, #1
 800211e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7fe faa7 	bl	8000674 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002130:	2b80      	cmp	r3, #128	; 0x80
 8002132:	d10e      	bne.n	8002152 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800213e:	2b80      	cmp	r3, #128	; 0x80
 8002140:	d107      	bne.n	8002152 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800214a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f000 fab1 	bl	80026b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800215c:	2b40      	cmp	r3, #64	; 0x40
 800215e:	d10e      	bne.n	800217e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800216a:	2b40      	cmp	r3, #64	; 0x40
 800216c:	d107      	bne.n	800217e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002176:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 f8ff 	bl	800237c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	f003 0320 	and.w	r3, r3, #32
 8002188:	2b20      	cmp	r3, #32
 800218a:	d10e      	bne.n	80021aa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	f003 0320 	and.w	r3, r3, #32
 8002196:	2b20      	cmp	r3, #32
 8002198:	d107      	bne.n	80021aa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f06f 0220 	mvn.w	r2, #32
 80021a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 fa7b 	bl	80026a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b084      	sub	sp, #16
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
 80021ba:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021bc:	2300      	movs	r3, #0
 80021be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d101      	bne.n	80021ce <HAL_TIM_ConfigClockSource+0x1c>
 80021ca:	2302      	movs	r3, #2
 80021cc:	e0b4      	b.n	8002338 <HAL_TIM_ConfigClockSource+0x186>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2201      	movs	r2, #1
 80021d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2202      	movs	r2, #2
 80021da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80021ec:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021f4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002206:	d03e      	beq.n	8002286 <HAL_TIM_ConfigClockSource+0xd4>
 8002208:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800220c:	f200 8087 	bhi.w	800231e <HAL_TIM_ConfigClockSource+0x16c>
 8002210:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002214:	f000 8086 	beq.w	8002324 <HAL_TIM_ConfigClockSource+0x172>
 8002218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800221c:	d87f      	bhi.n	800231e <HAL_TIM_ConfigClockSource+0x16c>
 800221e:	2b70      	cmp	r3, #112	; 0x70
 8002220:	d01a      	beq.n	8002258 <HAL_TIM_ConfigClockSource+0xa6>
 8002222:	2b70      	cmp	r3, #112	; 0x70
 8002224:	d87b      	bhi.n	800231e <HAL_TIM_ConfigClockSource+0x16c>
 8002226:	2b60      	cmp	r3, #96	; 0x60
 8002228:	d050      	beq.n	80022cc <HAL_TIM_ConfigClockSource+0x11a>
 800222a:	2b60      	cmp	r3, #96	; 0x60
 800222c:	d877      	bhi.n	800231e <HAL_TIM_ConfigClockSource+0x16c>
 800222e:	2b50      	cmp	r3, #80	; 0x50
 8002230:	d03c      	beq.n	80022ac <HAL_TIM_ConfigClockSource+0xfa>
 8002232:	2b50      	cmp	r3, #80	; 0x50
 8002234:	d873      	bhi.n	800231e <HAL_TIM_ConfigClockSource+0x16c>
 8002236:	2b40      	cmp	r3, #64	; 0x40
 8002238:	d058      	beq.n	80022ec <HAL_TIM_ConfigClockSource+0x13a>
 800223a:	2b40      	cmp	r3, #64	; 0x40
 800223c:	d86f      	bhi.n	800231e <HAL_TIM_ConfigClockSource+0x16c>
 800223e:	2b30      	cmp	r3, #48	; 0x30
 8002240:	d064      	beq.n	800230c <HAL_TIM_ConfigClockSource+0x15a>
 8002242:	2b30      	cmp	r3, #48	; 0x30
 8002244:	d86b      	bhi.n	800231e <HAL_TIM_ConfigClockSource+0x16c>
 8002246:	2b20      	cmp	r3, #32
 8002248:	d060      	beq.n	800230c <HAL_TIM_ConfigClockSource+0x15a>
 800224a:	2b20      	cmp	r3, #32
 800224c:	d867      	bhi.n	800231e <HAL_TIM_ConfigClockSource+0x16c>
 800224e:	2b00      	cmp	r3, #0
 8002250:	d05c      	beq.n	800230c <HAL_TIM_ConfigClockSource+0x15a>
 8002252:	2b10      	cmp	r3, #16
 8002254:	d05a      	beq.n	800230c <HAL_TIM_ConfigClockSource+0x15a>
 8002256:	e062      	b.n	800231e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6818      	ldr	r0, [r3, #0]
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	6899      	ldr	r1, [r3, #8]
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	f000 f98c 	bl	8002584 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800227a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68ba      	ldr	r2, [r7, #8]
 8002282:	609a      	str	r2, [r3, #8]
      break;
 8002284:	e04f      	b.n	8002326 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6818      	ldr	r0, [r3, #0]
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	6899      	ldr	r1, [r3, #8]
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	f000 f975 	bl	8002584 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022a8:	609a      	str	r2, [r3, #8]
      break;
 80022aa:	e03c      	b.n	8002326 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6818      	ldr	r0, [r3, #0]
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	6859      	ldr	r1, [r3, #4]
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	461a      	mov	r2, r3
 80022ba:	f000 f8e9 	bl	8002490 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2150      	movs	r1, #80	; 0x50
 80022c4:	4618      	mov	r0, r3
 80022c6:	f000 f942 	bl	800254e <TIM_ITRx_SetConfig>
      break;
 80022ca:	e02c      	b.n	8002326 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6818      	ldr	r0, [r3, #0]
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	6859      	ldr	r1, [r3, #4]
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	461a      	mov	r2, r3
 80022da:	f000 f908 	bl	80024ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2160      	movs	r1, #96	; 0x60
 80022e4:	4618      	mov	r0, r3
 80022e6:	f000 f932 	bl	800254e <TIM_ITRx_SetConfig>
      break;
 80022ea:	e01c      	b.n	8002326 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6818      	ldr	r0, [r3, #0]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	6859      	ldr	r1, [r3, #4]
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	461a      	mov	r2, r3
 80022fa:	f000 f8c9 	bl	8002490 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2140      	movs	r1, #64	; 0x40
 8002304:	4618      	mov	r0, r3
 8002306:	f000 f922 	bl	800254e <TIM_ITRx_SetConfig>
      break;
 800230a:	e00c      	b.n	8002326 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4619      	mov	r1, r3
 8002316:	4610      	mov	r0, r2
 8002318:	f000 f919 	bl	800254e <TIM_ITRx_SetConfig>
      break;
 800231c:	e003      	b.n	8002326 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	73fb      	strb	r3, [r7, #15]
      break;
 8002322:	e000      	b.n	8002326 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002324:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002336:	7bfb      	ldrb	r3, [r7, #15]
}
 8002338:	4618      	mov	r0, r3
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a34      	ldr	r2, [pc, #208]	; (8002474 <TIM_Base_SetConfig+0xe4>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d00f      	beq.n	80023c8 <TIM_Base_SetConfig+0x38>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ae:	d00b      	beq.n	80023c8 <TIM_Base_SetConfig+0x38>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a31      	ldr	r2, [pc, #196]	; (8002478 <TIM_Base_SetConfig+0xe8>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d007      	beq.n	80023c8 <TIM_Base_SetConfig+0x38>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a30      	ldr	r2, [pc, #192]	; (800247c <TIM_Base_SetConfig+0xec>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d003      	beq.n	80023c8 <TIM_Base_SetConfig+0x38>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a2f      	ldr	r2, [pc, #188]	; (8002480 <TIM_Base_SetConfig+0xf0>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d108      	bne.n	80023da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a25      	ldr	r2, [pc, #148]	; (8002474 <TIM_Base_SetConfig+0xe4>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d01b      	beq.n	800241a <TIM_Base_SetConfig+0x8a>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023e8:	d017      	beq.n	800241a <TIM_Base_SetConfig+0x8a>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a22      	ldr	r2, [pc, #136]	; (8002478 <TIM_Base_SetConfig+0xe8>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d013      	beq.n	800241a <TIM_Base_SetConfig+0x8a>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a21      	ldr	r2, [pc, #132]	; (800247c <TIM_Base_SetConfig+0xec>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d00f      	beq.n	800241a <TIM_Base_SetConfig+0x8a>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a20      	ldr	r2, [pc, #128]	; (8002480 <TIM_Base_SetConfig+0xf0>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d00b      	beq.n	800241a <TIM_Base_SetConfig+0x8a>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a1f      	ldr	r2, [pc, #124]	; (8002484 <TIM_Base_SetConfig+0xf4>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d007      	beq.n	800241a <TIM_Base_SetConfig+0x8a>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a1e      	ldr	r2, [pc, #120]	; (8002488 <TIM_Base_SetConfig+0xf8>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d003      	beq.n	800241a <TIM_Base_SetConfig+0x8a>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a1d      	ldr	r2, [pc, #116]	; (800248c <TIM_Base_SetConfig+0xfc>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d108      	bne.n	800242c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002420:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	4313      	orrs	r3, r2
 800242a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	4313      	orrs	r3, r2
 8002438:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a08      	ldr	r2, [pc, #32]	; (8002474 <TIM_Base_SetConfig+0xe4>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d103      	bne.n	8002460 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	691a      	ldr	r2, [r3, #16]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	615a      	str	r2, [r3, #20]
}
 8002466:	bf00      	nop
 8002468:	3714      	adds	r7, #20
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	40010000 	.word	0x40010000
 8002478:	40000400 	.word	0x40000400
 800247c:	40000800 	.word	0x40000800
 8002480:	40000c00 	.word	0x40000c00
 8002484:	40014000 	.word	0x40014000
 8002488:	40014400 	.word	0x40014400
 800248c:	40014800 	.word	0x40014800

08002490 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002490:	b480      	push	{r7}
 8002492:	b087      	sub	sp, #28
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	f023 0201 	bic.w	r2, r3, #1
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	f023 030a 	bic.w	r3, r3, #10
 80024cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	621a      	str	r2, [r3, #32]
}
 80024e2:	bf00      	nop
 80024e4:	371c      	adds	r7, #28
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b087      	sub	sp, #28
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	60f8      	str	r0, [r7, #12]
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	f023 0210 	bic.w	r2, r3, #16
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002518:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	031b      	lsls	r3, r3, #12
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	4313      	orrs	r3, r2
 8002522:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800252a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	4313      	orrs	r3, r2
 8002534:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	697a      	ldr	r2, [r7, #20]
 800253a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	621a      	str	r2, [r3, #32]
}
 8002542:	bf00      	nop
 8002544:	371c      	adds	r7, #28
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800254e:	b480      	push	{r7}
 8002550:	b085      	sub	sp, #20
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
 8002556:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002564:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4313      	orrs	r3, r2
 800256c:	f043 0307 	orr.w	r3, r3, #7
 8002570:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	609a      	str	r2, [r3, #8]
}
 8002578:	bf00      	nop
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002584:	b480      	push	{r7}
 8002586:	b087      	sub	sp, #28
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
 8002590:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800259e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	021a      	lsls	r2, r3, #8
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	431a      	orrs	r2, r3
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	609a      	str	r2, [r3, #8]
}
 80025b8:	bf00      	nop
 80025ba:	371c      	adds	r7, #28
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d101      	bne.n	80025dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025d8:	2302      	movs	r3, #2
 80025da:	e050      	b.n	800267e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2202      	movs	r2, #2
 80025e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002602:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	4313      	orrs	r3, r2
 800260c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a1c      	ldr	r2, [pc, #112]	; (800268c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d018      	beq.n	8002652 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002628:	d013      	beq.n	8002652 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a18      	ldr	r2, [pc, #96]	; (8002690 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d00e      	beq.n	8002652 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a16      	ldr	r2, [pc, #88]	; (8002694 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d009      	beq.n	8002652 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a15      	ldr	r2, [pc, #84]	; (8002698 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d004      	beq.n	8002652 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a13      	ldr	r2, [pc, #76]	; (800269c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d10c      	bne.n	800266c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002658:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	68ba      	ldr	r2, [r7, #8]
 8002660:	4313      	orrs	r3, r2
 8002662:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68ba      	ldr	r2, [r7, #8]
 800266a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	40010000 	.word	0x40010000
 8002690:	40000400 	.word	0x40000400
 8002694:	40000800 	.word	0x40000800
 8002698:	40000c00 	.word	0x40000c00
 800269c:	40014000 	.word	0x40014000

080026a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e03f      	b.n	800275a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d106      	bne.n	80026f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7fe fa00 	bl	8000af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2224      	movs	r2, #36	; 0x24
 80026f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68da      	ldr	r2, [r3, #12]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800270a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 fcdb 	bl	80030c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	691a      	ldr	r2, [r3, #16]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002720:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	695a      	ldr	r2, [r3, #20]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002730:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68da      	ldr	r2, [r3, #12]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002740:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2220      	movs	r2, #32
 800274c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2220      	movs	r2, #32
 8002754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b084      	sub	sp, #16
 8002766:	af00      	add	r7, sp, #0
 8002768:	60f8      	str	r0, [r7, #12]
 800276a:	60b9      	str	r1, [r7, #8]
 800276c:	4613      	mov	r3, r2
 800276e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b20      	cmp	r3, #32
 800277a:	d11d      	bne.n	80027b8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d002      	beq.n	8002788 <HAL_UART_Receive_IT+0x26>
 8002782:	88fb      	ldrh	r3, [r7, #6]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e016      	b.n	80027ba <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002792:	2b01      	cmp	r3, #1
 8002794:	d101      	bne.n	800279a <HAL_UART_Receive_IT+0x38>
 8002796:	2302      	movs	r3, #2
 8002798:	e00f      	b.n	80027ba <HAL_UART_Receive_IT+0x58>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2200      	movs	r2, #0
 80027a6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80027a8:	88fb      	ldrh	r3, [r7, #6]
 80027aa:	461a      	mov	r2, r3
 80027ac:	68b9      	ldr	r1, [r7, #8]
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f000 fab6 	bl	8002d20 <UART_Start_Receive_IT>
 80027b4:	4603      	mov	r3, r0
 80027b6:	e000      	b.n	80027ba <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80027b8:	2302      	movs	r3, #2
  }
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
	...

080027c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b0ba      	sub	sp, #232	; 0xe8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80027f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027fa:	f003 030f 	and.w	r3, r3, #15
 80027fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002802:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10f      	bne.n	800282a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800280a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800280e:	f003 0320 	and.w	r3, r3, #32
 8002812:	2b00      	cmp	r3, #0
 8002814:	d009      	beq.n	800282a <HAL_UART_IRQHandler+0x66>
 8002816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800281a:	f003 0320 	and.w	r3, r3, #32
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 fb95 	bl	8002f52 <UART_Receive_IT>
      return;
 8002828:	e256      	b.n	8002cd8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800282a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800282e:	2b00      	cmp	r3, #0
 8002830:	f000 80de 	beq.w	80029f0 <HAL_UART_IRQHandler+0x22c>
 8002834:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b00      	cmp	r3, #0
 800283e:	d106      	bne.n	800284e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002844:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 80d1 	beq.w	80029f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800284e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00b      	beq.n	8002872 <HAL_UART_IRQHandler+0xae>
 800285a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800285e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002862:	2b00      	cmp	r3, #0
 8002864:	d005      	beq.n	8002872 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	f043 0201 	orr.w	r2, r3, #1
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002876:	f003 0304 	and.w	r3, r3, #4
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00b      	beq.n	8002896 <HAL_UART_IRQHandler+0xd2>
 800287e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d005      	beq.n	8002896 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	f043 0202 	orr.w	r2, r3, #2
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00b      	beq.n	80028ba <HAL_UART_IRQHandler+0xf6>
 80028a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d005      	beq.n	80028ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	f043 0204 	orr.w	r2, r3, #4
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80028ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d011      	beq.n	80028ea <HAL_UART_IRQHandler+0x126>
 80028c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028ca:	f003 0320 	and.w	r3, r3, #32
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d105      	bne.n	80028de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80028d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d005      	beq.n	80028ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	f043 0208 	orr.w	r2, r3, #8
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 81ed 	beq.w	8002cce <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028f8:	f003 0320 	and.w	r3, r3, #32
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d008      	beq.n	8002912 <HAL_UART_IRQHandler+0x14e>
 8002900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002904:	f003 0320 	and.w	r3, r3, #32
 8002908:	2b00      	cmp	r3, #0
 800290a:	d002      	beq.n	8002912 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 fb20 	bl	8002f52 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800291c:	2b40      	cmp	r3, #64	; 0x40
 800291e:	bf0c      	ite	eq
 8002920:	2301      	moveq	r3, #1
 8002922:	2300      	movne	r3, #0
 8002924:	b2db      	uxtb	r3, r3
 8002926:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	f003 0308 	and.w	r3, r3, #8
 8002932:	2b00      	cmp	r3, #0
 8002934:	d103      	bne.n	800293e <HAL_UART_IRQHandler+0x17a>
 8002936:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800293a:	2b00      	cmp	r3, #0
 800293c:	d04f      	beq.n	80029de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 fa28 	bl	8002d94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294e:	2b40      	cmp	r3, #64	; 0x40
 8002950:	d141      	bne.n	80029d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	3314      	adds	r3, #20
 8002958:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800295c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002960:	e853 3f00 	ldrex	r3, [r3]
 8002964:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002968:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800296c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002970:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	3314      	adds	r3, #20
 800297a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800297e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002982:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002986:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800298a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800298e:	e841 2300 	strex	r3, r2, [r1]
 8002992:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002996:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1d9      	bne.n	8002952 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d013      	beq.n	80029ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029aa:	4a7d      	ldr	r2, [pc, #500]	; (8002ba0 <HAL_UART_IRQHandler+0x3dc>)
 80029ac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7fe fbdf 	bl	8001176 <HAL_DMA_Abort_IT>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d016      	beq.n	80029ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029c8:	4610      	mov	r0, r2
 80029ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029cc:	e00e      	b.n	80029ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f990 	bl	8002cf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029d4:	e00a      	b.n	80029ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f98c 	bl	8002cf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029dc:	e006      	b.n	80029ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f988 	bl	8002cf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80029ea:	e170      	b.n	8002cce <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029ec:	bf00      	nop
    return;
 80029ee:	e16e      	b.n	8002cce <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	f040 814a 	bne.w	8002c8e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80029fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029fe:	f003 0310 	and.w	r3, r3, #16
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f000 8143 	beq.w	8002c8e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a0c:	f003 0310 	and.w	r3, r3, #16
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 813c 	beq.w	8002c8e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a16:	2300      	movs	r3, #0
 8002a18:	60bb      	str	r3, [r7, #8]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	60bb      	str	r3, [r7, #8]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	60bb      	str	r3, [r7, #8]
 8002a2a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a36:	2b40      	cmp	r3, #64	; 0x40
 8002a38:	f040 80b4 	bne.w	8002ba4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 8140 	beq.w	8002cd2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	f080 8139 	bcs.w	8002cd2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a66:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a72:	f000 8088 	beq.w	8002b86 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	330c      	adds	r3, #12
 8002a7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a84:	e853 3f00 	ldrex	r3, [r3]
 8002a88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002a8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	330c      	adds	r3, #12
 8002a9e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002aa2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002aa6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aaa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002aae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002ab2:	e841 2300 	strex	r3, r2, [r1]
 8002ab6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002aba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1d9      	bne.n	8002a76 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	3314      	adds	r3, #20
 8002ac8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002acc:	e853 3f00 	ldrex	r3, [r3]
 8002ad0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002ad2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ad4:	f023 0301 	bic.w	r3, r3, #1
 8002ad8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	3314      	adds	r3, #20
 8002ae2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ae6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002aea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002aee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002af2:	e841 2300 	strex	r3, r2, [r1]
 8002af6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002af8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1e1      	bne.n	8002ac2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	3314      	adds	r3, #20
 8002b04:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b08:	e853 3f00 	ldrex	r3, [r3]
 8002b0c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002b0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	3314      	adds	r3, #20
 8002b1e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002b22:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002b24:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b26:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002b28:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b2a:	e841 2300 	strex	r3, r2, [r1]
 8002b2e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002b30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1e3      	bne.n	8002afe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2220      	movs	r2, #32
 8002b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	330c      	adds	r3, #12
 8002b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b4e:	e853 3f00 	ldrex	r3, [r3]
 8002b52:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002b54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b56:	f023 0310 	bic.w	r3, r3, #16
 8002b5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	330c      	adds	r3, #12
 8002b64:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002b68:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b6a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b6c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b70:	e841 2300 	strex	r3, r2, [r1]
 8002b74:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002b76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1e3      	bne.n	8002b44 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fe fa88 	bl	8001096 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	4619      	mov	r1, r3
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f8b6 	bl	8002d08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b9c:	e099      	b.n	8002cd2 <HAL_UART_IRQHandler+0x50e>
 8002b9e:	bf00      	nop
 8002ba0:	08002e5b 	.word	0x08002e5b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 808b 	beq.w	8002cd6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002bc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 8086 	beq.w	8002cd6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	330c      	adds	r3, #12
 8002bd0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd4:	e853 3f00 	ldrex	r3, [r3]
 8002bd8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002be0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	330c      	adds	r3, #12
 8002bea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002bee:	647a      	str	r2, [r7, #68]	; 0x44
 8002bf0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002bf4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002bf6:	e841 2300 	strex	r3, r2, [r1]
 8002bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1e3      	bne.n	8002bca <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	3314      	adds	r3, #20
 8002c08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0c:	e853 3f00 	ldrex	r3, [r3]
 8002c10:	623b      	str	r3, [r7, #32]
   return(result);
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	f023 0301 	bic.w	r3, r3, #1
 8002c18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	3314      	adds	r3, #20
 8002c22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002c26:	633a      	str	r2, [r7, #48]	; 0x30
 8002c28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c2e:	e841 2300 	strex	r3, r2, [r1]
 8002c32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1e3      	bne.n	8002c02 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	330c      	adds	r3, #12
 8002c4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	e853 3f00 	ldrex	r3, [r3]
 8002c56:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f023 0310 	bic.w	r3, r3, #16
 8002c5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	330c      	adds	r3, #12
 8002c68:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002c6c:	61fa      	str	r2, [r7, #28]
 8002c6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c70:	69b9      	ldr	r1, [r7, #24]
 8002c72:	69fa      	ldr	r2, [r7, #28]
 8002c74:	e841 2300 	strex	r3, r2, [r1]
 8002c78:	617b      	str	r3, [r7, #20]
   return(result);
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1e3      	bne.n	8002c48 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c84:	4619      	mov	r1, r3
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f83e 	bl	8002d08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c8c:	e023      	b.n	8002cd6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d009      	beq.n	8002cae <HAL_UART_IRQHandler+0x4ea>
 8002c9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f8eb 	bl	8002e82 <UART_Transmit_IT>
    return;
 8002cac:	e014      	b.n	8002cd8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00e      	beq.n	8002cd8 <HAL_UART_IRQHandler+0x514>
 8002cba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d008      	beq.n	8002cd8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f92b 	bl	8002f22 <UART_EndTransmit_IT>
    return;
 8002ccc:	e004      	b.n	8002cd8 <HAL_UART_IRQHandler+0x514>
    return;
 8002cce:	bf00      	nop
 8002cd0:	e002      	b.n	8002cd8 <HAL_UART_IRQHandler+0x514>
      return;
 8002cd2:	bf00      	nop
 8002cd4:	e000      	b.n	8002cd8 <HAL_UART_IRQHandler+0x514>
      return;
 8002cd6:	bf00      	nop
  }
}
 8002cd8:	37e8      	adds	r7, #232	; 0xe8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop

08002ce0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	460b      	mov	r3, r1
 8002d12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	68ba      	ldr	r2, [r7, #8]
 8002d32:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	88fa      	ldrh	r2, [r7, #6]
 8002d38:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	88fa      	ldrh	r2, [r7, #6]
 8002d3e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2222      	movs	r2, #34	; 0x22
 8002d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68da      	ldr	r2, [r3, #12]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d64:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	695a      	ldr	r2, [r3, #20]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f042 0201 	orr.w	r2, r2, #1
 8002d74:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68da      	ldr	r2, [r3, #12]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f042 0220 	orr.w	r2, r2, #32
 8002d84:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3714      	adds	r7, #20
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b095      	sub	sp, #84	; 0x54
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	330c      	adds	r3, #12
 8002da2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002da6:	e853 3f00 	ldrex	r3, [r3]
 8002daa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002db2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	330c      	adds	r3, #12
 8002dba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dbc:	643a      	str	r2, [r7, #64]	; 0x40
 8002dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002dc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002dc4:	e841 2300 	strex	r3, r2, [r1]
 8002dc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1e5      	bne.n	8002d9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	3314      	adds	r3, #20
 8002dd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd8:	6a3b      	ldr	r3, [r7, #32]
 8002dda:	e853 3f00 	ldrex	r3, [r3]
 8002dde:	61fb      	str	r3, [r7, #28]
   return(result);
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	f023 0301 	bic.w	r3, r3, #1
 8002de6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	3314      	adds	r3, #20
 8002dee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002df0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002df2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002df6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002df8:	e841 2300 	strex	r3, r2, [r1]
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1e5      	bne.n	8002dd0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d119      	bne.n	8002e40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	330c      	adds	r3, #12
 8002e12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	e853 3f00 	ldrex	r3, [r3]
 8002e1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	f023 0310 	bic.w	r3, r3, #16
 8002e22:	647b      	str	r3, [r7, #68]	; 0x44
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	330c      	adds	r3, #12
 8002e2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e2c:	61ba      	str	r2, [r7, #24]
 8002e2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e30:	6979      	ldr	r1, [r7, #20]
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	e841 2300 	strex	r3, r2, [r1]
 8002e38:	613b      	str	r3, [r7, #16]
   return(result);
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1e5      	bne.n	8002e0c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2220      	movs	r2, #32
 8002e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002e4e:	bf00      	nop
 8002e50:	3754      	adds	r7, #84	; 0x54
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b084      	sub	sp, #16
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f7ff ff3d 	bl	8002cf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e7a:	bf00      	nop
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b085      	sub	sp, #20
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b21      	cmp	r3, #33	; 0x21
 8002e94:	d13e      	bne.n	8002f14 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e9e:	d114      	bne.n	8002eca <UART_Transmit_IT+0x48>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d110      	bne.n	8002eca <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	881b      	ldrh	r3, [r3, #0]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ebc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	1c9a      	adds	r2, r3, #2
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	621a      	str	r2, [r3, #32]
 8002ec8:	e008      	b.n	8002edc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	1c59      	adds	r1, r3, #1
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6211      	str	r1, [r2, #32]
 8002ed4:	781a      	ldrb	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	4619      	mov	r1, r3
 8002eea:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10f      	bne.n	8002f10 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68da      	ldr	r2, [r3, #12]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002efe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f0e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002f10:	2300      	movs	r3, #0
 8002f12:	e000      	b.n	8002f16 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002f14:	2302      	movs	r3, #2
  }
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3714      	adds	r7, #20
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr

08002f22 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b082      	sub	sp, #8
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68da      	ldr	r2, [r3, #12]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f38:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7ff fecc 	bl	8002ce0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b08c      	sub	sp, #48	; 0x30
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b22      	cmp	r3, #34	; 0x22
 8002f64:	f040 80ab 	bne.w	80030be <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f70:	d117      	bne.n	8002fa2 <UART_Receive_IT+0x50>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d113      	bne.n	8002fa2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f82:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f94:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9a:	1c9a      	adds	r2, r3, #2
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	629a      	str	r2, [r3, #40]	; 0x28
 8002fa0:	e026      	b.n	8002ff0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fb4:	d007      	beq.n	8002fc6 <UART_Receive_IT+0x74>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10a      	bne.n	8002fd4 <UART_Receive_IT+0x82>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d106      	bne.n	8002fd4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd0:	701a      	strb	r2, [r3, #0]
 8002fd2:	e008      	b.n	8002fe6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fea:	1c5a      	adds	r2, r3, #1
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003000:	2b00      	cmp	r3, #0
 8003002:	d15a      	bne.n	80030ba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68da      	ldr	r2, [r3, #12]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f022 0220 	bic.w	r2, r2, #32
 8003012:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68da      	ldr	r2, [r3, #12]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003022:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	695a      	ldr	r2, [r3, #20]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 0201 	bic.w	r2, r2, #1
 8003032:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2220      	movs	r2, #32
 8003038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003040:	2b01      	cmp	r3, #1
 8003042:	d135      	bne.n	80030b0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	330c      	adds	r3, #12
 8003050:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	e853 3f00 	ldrex	r3, [r3]
 8003058:	613b      	str	r3, [r7, #16]
   return(result);
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	f023 0310 	bic.w	r3, r3, #16
 8003060:	627b      	str	r3, [r7, #36]	; 0x24
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	330c      	adds	r3, #12
 8003068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800306a:	623a      	str	r2, [r7, #32]
 800306c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800306e:	69f9      	ldr	r1, [r7, #28]
 8003070:	6a3a      	ldr	r2, [r7, #32]
 8003072:	e841 2300 	strex	r3, r2, [r1]
 8003076:	61bb      	str	r3, [r7, #24]
   return(result);
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1e5      	bne.n	800304a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0310 	and.w	r3, r3, #16
 8003088:	2b10      	cmp	r3, #16
 800308a:	d10a      	bne.n	80030a2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800308c:	2300      	movs	r3, #0
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80030a6:	4619      	mov	r1, r3
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f7ff fe2d 	bl	8002d08 <HAL_UARTEx_RxEventCallback>
 80030ae:	e002      	b.n	80030b6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7fd fe15 	bl	8000ce0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80030b6:	2300      	movs	r3, #0
 80030b8:	e002      	b.n	80030c0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80030ba:	2300      	movs	r3, #0
 80030bc:	e000      	b.n	80030c0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80030be:	2302      	movs	r3, #2
  }
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3730      	adds	r7, #48	; 0x30
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030cc:	b09f      	sub	sp, #124	; 0x7c
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80030dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030de:	68d9      	ldr	r1, [r3, #12]
 80030e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	ea40 0301 	orr.w	r3, r0, r1
 80030e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	431a      	orrs	r2, r3
 80030f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	431a      	orrs	r2, r3
 80030fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	4313      	orrs	r3, r2
 8003100:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800310c:	f021 010c 	bic.w	r1, r1, #12
 8003110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003116:	430b      	orrs	r3, r1
 8003118:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800311a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003124:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003126:	6999      	ldr	r1, [r3, #24]
 8003128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	ea40 0301 	orr.w	r3, r0, r1
 8003130:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	4bc5      	ldr	r3, [pc, #788]	; (800344c <UART_SetConfig+0x384>)
 8003138:	429a      	cmp	r2, r3
 800313a:	d004      	beq.n	8003146 <UART_SetConfig+0x7e>
 800313c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	4bc3      	ldr	r3, [pc, #780]	; (8003450 <UART_SetConfig+0x388>)
 8003142:	429a      	cmp	r2, r3
 8003144:	d103      	bne.n	800314e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003146:	f7fe fe37 	bl	8001db8 <HAL_RCC_GetPCLK2Freq>
 800314a:	6778      	str	r0, [r7, #116]	; 0x74
 800314c:	e002      	b.n	8003154 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800314e:	f7fe fe1f 	bl	8001d90 <HAL_RCC_GetPCLK1Freq>
 8003152:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800315c:	f040 80b6 	bne.w	80032cc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003160:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003162:	461c      	mov	r4, r3
 8003164:	f04f 0500 	mov.w	r5, #0
 8003168:	4622      	mov	r2, r4
 800316a:	462b      	mov	r3, r5
 800316c:	1891      	adds	r1, r2, r2
 800316e:	6439      	str	r1, [r7, #64]	; 0x40
 8003170:	415b      	adcs	r3, r3
 8003172:	647b      	str	r3, [r7, #68]	; 0x44
 8003174:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003178:	1912      	adds	r2, r2, r4
 800317a:	eb45 0303 	adc.w	r3, r5, r3
 800317e:	f04f 0000 	mov.w	r0, #0
 8003182:	f04f 0100 	mov.w	r1, #0
 8003186:	00d9      	lsls	r1, r3, #3
 8003188:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800318c:	00d0      	lsls	r0, r2, #3
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
 8003192:	1911      	adds	r1, r2, r4
 8003194:	6639      	str	r1, [r7, #96]	; 0x60
 8003196:	416b      	adcs	r3, r5
 8003198:	667b      	str	r3, [r7, #100]	; 0x64
 800319a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	461a      	mov	r2, r3
 80031a0:	f04f 0300 	mov.w	r3, #0
 80031a4:	1891      	adds	r1, r2, r2
 80031a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80031a8:	415b      	adcs	r3, r3
 80031aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80031b0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80031b4:	f7fd f810 	bl	80001d8 <__aeabi_uldivmod>
 80031b8:	4602      	mov	r2, r0
 80031ba:	460b      	mov	r3, r1
 80031bc:	4ba5      	ldr	r3, [pc, #660]	; (8003454 <UART_SetConfig+0x38c>)
 80031be:	fba3 2302 	umull	r2, r3, r3, r2
 80031c2:	095b      	lsrs	r3, r3, #5
 80031c4:	011e      	lsls	r6, r3, #4
 80031c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031c8:	461c      	mov	r4, r3
 80031ca:	f04f 0500 	mov.w	r5, #0
 80031ce:	4622      	mov	r2, r4
 80031d0:	462b      	mov	r3, r5
 80031d2:	1891      	adds	r1, r2, r2
 80031d4:	6339      	str	r1, [r7, #48]	; 0x30
 80031d6:	415b      	adcs	r3, r3
 80031d8:	637b      	str	r3, [r7, #52]	; 0x34
 80031da:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80031de:	1912      	adds	r2, r2, r4
 80031e0:	eb45 0303 	adc.w	r3, r5, r3
 80031e4:	f04f 0000 	mov.w	r0, #0
 80031e8:	f04f 0100 	mov.w	r1, #0
 80031ec:	00d9      	lsls	r1, r3, #3
 80031ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031f2:	00d0      	lsls	r0, r2, #3
 80031f4:	4602      	mov	r2, r0
 80031f6:	460b      	mov	r3, r1
 80031f8:	1911      	adds	r1, r2, r4
 80031fa:	65b9      	str	r1, [r7, #88]	; 0x58
 80031fc:	416b      	adcs	r3, r5
 80031fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	461a      	mov	r2, r3
 8003206:	f04f 0300 	mov.w	r3, #0
 800320a:	1891      	adds	r1, r2, r2
 800320c:	62b9      	str	r1, [r7, #40]	; 0x28
 800320e:	415b      	adcs	r3, r3
 8003210:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003212:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003216:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800321a:	f7fc ffdd 	bl	80001d8 <__aeabi_uldivmod>
 800321e:	4602      	mov	r2, r0
 8003220:	460b      	mov	r3, r1
 8003222:	4b8c      	ldr	r3, [pc, #560]	; (8003454 <UART_SetConfig+0x38c>)
 8003224:	fba3 1302 	umull	r1, r3, r3, r2
 8003228:	095b      	lsrs	r3, r3, #5
 800322a:	2164      	movs	r1, #100	; 0x64
 800322c:	fb01 f303 	mul.w	r3, r1, r3
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	3332      	adds	r3, #50	; 0x32
 8003236:	4a87      	ldr	r2, [pc, #540]	; (8003454 <UART_SetConfig+0x38c>)
 8003238:	fba2 2303 	umull	r2, r3, r2, r3
 800323c:	095b      	lsrs	r3, r3, #5
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003244:	441e      	add	r6, r3
 8003246:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003248:	4618      	mov	r0, r3
 800324a:	f04f 0100 	mov.w	r1, #0
 800324e:	4602      	mov	r2, r0
 8003250:	460b      	mov	r3, r1
 8003252:	1894      	adds	r4, r2, r2
 8003254:	623c      	str	r4, [r7, #32]
 8003256:	415b      	adcs	r3, r3
 8003258:	627b      	str	r3, [r7, #36]	; 0x24
 800325a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800325e:	1812      	adds	r2, r2, r0
 8003260:	eb41 0303 	adc.w	r3, r1, r3
 8003264:	f04f 0400 	mov.w	r4, #0
 8003268:	f04f 0500 	mov.w	r5, #0
 800326c:	00dd      	lsls	r5, r3, #3
 800326e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003272:	00d4      	lsls	r4, r2, #3
 8003274:	4622      	mov	r2, r4
 8003276:	462b      	mov	r3, r5
 8003278:	1814      	adds	r4, r2, r0
 800327a:	653c      	str	r4, [r7, #80]	; 0x50
 800327c:	414b      	adcs	r3, r1
 800327e:	657b      	str	r3, [r7, #84]	; 0x54
 8003280:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	461a      	mov	r2, r3
 8003286:	f04f 0300 	mov.w	r3, #0
 800328a:	1891      	adds	r1, r2, r2
 800328c:	61b9      	str	r1, [r7, #24]
 800328e:	415b      	adcs	r3, r3
 8003290:	61fb      	str	r3, [r7, #28]
 8003292:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003296:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800329a:	f7fc ff9d 	bl	80001d8 <__aeabi_uldivmod>
 800329e:	4602      	mov	r2, r0
 80032a0:	460b      	mov	r3, r1
 80032a2:	4b6c      	ldr	r3, [pc, #432]	; (8003454 <UART_SetConfig+0x38c>)
 80032a4:	fba3 1302 	umull	r1, r3, r3, r2
 80032a8:	095b      	lsrs	r3, r3, #5
 80032aa:	2164      	movs	r1, #100	; 0x64
 80032ac:	fb01 f303 	mul.w	r3, r1, r3
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	3332      	adds	r3, #50	; 0x32
 80032b6:	4a67      	ldr	r2, [pc, #412]	; (8003454 <UART_SetConfig+0x38c>)
 80032b8:	fba2 2303 	umull	r2, r3, r2, r3
 80032bc:	095b      	lsrs	r3, r3, #5
 80032be:	f003 0207 	and.w	r2, r3, #7
 80032c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4432      	add	r2, r6
 80032c8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80032ca:	e0b9      	b.n	8003440 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032ce:	461c      	mov	r4, r3
 80032d0:	f04f 0500 	mov.w	r5, #0
 80032d4:	4622      	mov	r2, r4
 80032d6:	462b      	mov	r3, r5
 80032d8:	1891      	adds	r1, r2, r2
 80032da:	6139      	str	r1, [r7, #16]
 80032dc:	415b      	adcs	r3, r3
 80032de:	617b      	str	r3, [r7, #20]
 80032e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80032e4:	1912      	adds	r2, r2, r4
 80032e6:	eb45 0303 	adc.w	r3, r5, r3
 80032ea:	f04f 0000 	mov.w	r0, #0
 80032ee:	f04f 0100 	mov.w	r1, #0
 80032f2:	00d9      	lsls	r1, r3, #3
 80032f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032f8:	00d0      	lsls	r0, r2, #3
 80032fa:	4602      	mov	r2, r0
 80032fc:	460b      	mov	r3, r1
 80032fe:	eb12 0804 	adds.w	r8, r2, r4
 8003302:	eb43 0905 	adc.w	r9, r3, r5
 8003306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	4618      	mov	r0, r3
 800330c:	f04f 0100 	mov.w	r1, #0
 8003310:	f04f 0200 	mov.w	r2, #0
 8003314:	f04f 0300 	mov.w	r3, #0
 8003318:	008b      	lsls	r3, r1, #2
 800331a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800331e:	0082      	lsls	r2, r0, #2
 8003320:	4640      	mov	r0, r8
 8003322:	4649      	mov	r1, r9
 8003324:	f7fc ff58 	bl	80001d8 <__aeabi_uldivmod>
 8003328:	4602      	mov	r2, r0
 800332a:	460b      	mov	r3, r1
 800332c:	4b49      	ldr	r3, [pc, #292]	; (8003454 <UART_SetConfig+0x38c>)
 800332e:	fba3 2302 	umull	r2, r3, r3, r2
 8003332:	095b      	lsrs	r3, r3, #5
 8003334:	011e      	lsls	r6, r3, #4
 8003336:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003338:	4618      	mov	r0, r3
 800333a:	f04f 0100 	mov.w	r1, #0
 800333e:	4602      	mov	r2, r0
 8003340:	460b      	mov	r3, r1
 8003342:	1894      	adds	r4, r2, r2
 8003344:	60bc      	str	r4, [r7, #8]
 8003346:	415b      	adcs	r3, r3
 8003348:	60fb      	str	r3, [r7, #12]
 800334a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800334e:	1812      	adds	r2, r2, r0
 8003350:	eb41 0303 	adc.w	r3, r1, r3
 8003354:	f04f 0400 	mov.w	r4, #0
 8003358:	f04f 0500 	mov.w	r5, #0
 800335c:	00dd      	lsls	r5, r3, #3
 800335e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003362:	00d4      	lsls	r4, r2, #3
 8003364:	4622      	mov	r2, r4
 8003366:	462b      	mov	r3, r5
 8003368:	1814      	adds	r4, r2, r0
 800336a:	64bc      	str	r4, [r7, #72]	; 0x48
 800336c:	414b      	adcs	r3, r1
 800336e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003370:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	4618      	mov	r0, r3
 8003376:	f04f 0100 	mov.w	r1, #0
 800337a:	f04f 0200 	mov.w	r2, #0
 800337e:	f04f 0300 	mov.w	r3, #0
 8003382:	008b      	lsls	r3, r1, #2
 8003384:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003388:	0082      	lsls	r2, r0, #2
 800338a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800338e:	f7fc ff23 	bl	80001d8 <__aeabi_uldivmod>
 8003392:	4602      	mov	r2, r0
 8003394:	460b      	mov	r3, r1
 8003396:	4b2f      	ldr	r3, [pc, #188]	; (8003454 <UART_SetConfig+0x38c>)
 8003398:	fba3 1302 	umull	r1, r3, r3, r2
 800339c:	095b      	lsrs	r3, r3, #5
 800339e:	2164      	movs	r1, #100	; 0x64
 80033a0:	fb01 f303 	mul.w	r3, r1, r3
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	011b      	lsls	r3, r3, #4
 80033a8:	3332      	adds	r3, #50	; 0x32
 80033aa:	4a2a      	ldr	r2, [pc, #168]	; (8003454 <UART_SetConfig+0x38c>)
 80033ac:	fba2 2303 	umull	r2, r3, r2, r3
 80033b0:	095b      	lsrs	r3, r3, #5
 80033b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033b6:	441e      	add	r6, r3
 80033b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033ba:	4618      	mov	r0, r3
 80033bc:	f04f 0100 	mov.w	r1, #0
 80033c0:	4602      	mov	r2, r0
 80033c2:	460b      	mov	r3, r1
 80033c4:	1894      	adds	r4, r2, r2
 80033c6:	603c      	str	r4, [r7, #0]
 80033c8:	415b      	adcs	r3, r3
 80033ca:	607b      	str	r3, [r7, #4]
 80033cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033d0:	1812      	adds	r2, r2, r0
 80033d2:	eb41 0303 	adc.w	r3, r1, r3
 80033d6:	f04f 0400 	mov.w	r4, #0
 80033da:	f04f 0500 	mov.w	r5, #0
 80033de:	00dd      	lsls	r5, r3, #3
 80033e0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80033e4:	00d4      	lsls	r4, r2, #3
 80033e6:	4622      	mov	r2, r4
 80033e8:	462b      	mov	r3, r5
 80033ea:	eb12 0a00 	adds.w	sl, r2, r0
 80033ee:	eb43 0b01 	adc.w	fp, r3, r1
 80033f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f04f 0100 	mov.w	r1, #0
 80033fc:	f04f 0200 	mov.w	r2, #0
 8003400:	f04f 0300 	mov.w	r3, #0
 8003404:	008b      	lsls	r3, r1, #2
 8003406:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800340a:	0082      	lsls	r2, r0, #2
 800340c:	4650      	mov	r0, sl
 800340e:	4659      	mov	r1, fp
 8003410:	f7fc fee2 	bl	80001d8 <__aeabi_uldivmod>
 8003414:	4602      	mov	r2, r0
 8003416:	460b      	mov	r3, r1
 8003418:	4b0e      	ldr	r3, [pc, #56]	; (8003454 <UART_SetConfig+0x38c>)
 800341a:	fba3 1302 	umull	r1, r3, r3, r2
 800341e:	095b      	lsrs	r3, r3, #5
 8003420:	2164      	movs	r1, #100	; 0x64
 8003422:	fb01 f303 	mul.w	r3, r1, r3
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	011b      	lsls	r3, r3, #4
 800342a:	3332      	adds	r3, #50	; 0x32
 800342c:	4a09      	ldr	r2, [pc, #36]	; (8003454 <UART_SetConfig+0x38c>)
 800342e:	fba2 2303 	umull	r2, r3, r2, r3
 8003432:	095b      	lsrs	r3, r3, #5
 8003434:	f003 020f 	and.w	r2, r3, #15
 8003438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4432      	add	r2, r6
 800343e:	609a      	str	r2, [r3, #8]
}
 8003440:	bf00      	nop
 8003442:	377c      	adds	r7, #124	; 0x7c
 8003444:	46bd      	mov	sp, r7
 8003446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800344a:	bf00      	nop
 800344c:	40011000 	.word	0x40011000
 8003450:	40011400 	.word	0x40011400
 8003454:	51eb851f 	.word	0x51eb851f

08003458 <__libc_init_array>:
 8003458:	b570      	push	{r4, r5, r6, lr}
 800345a:	4d0d      	ldr	r5, [pc, #52]	; (8003490 <__libc_init_array+0x38>)
 800345c:	4c0d      	ldr	r4, [pc, #52]	; (8003494 <__libc_init_array+0x3c>)
 800345e:	1b64      	subs	r4, r4, r5
 8003460:	10a4      	asrs	r4, r4, #2
 8003462:	2600      	movs	r6, #0
 8003464:	42a6      	cmp	r6, r4
 8003466:	d109      	bne.n	800347c <__libc_init_array+0x24>
 8003468:	4d0b      	ldr	r5, [pc, #44]	; (8003498 <__libc_init_array+0x40>)
 800346a:	4c0c      	ldr	r4, [pc, #48]	; (800349c <__libc_init_array+0x44>)
 800346c:	f000 f820 	bl	80034b0 <_init>
 8003470:	1b64      	subs	r4, r4, r5
 8003472:	10a4      	asrs	r4, r4, #2
 8003474:	2600      	movs	r6, #0
 8003476:	42a6      	cmp	r6, r4
 8003478:	d105      	bne.n	8003486 <__libc_init_array+0x2e>
 800347a:	bd70      	pop	{r4, r5, r6, pc}
 800347c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003480:	4798      	blx	r3
 8003482:	3601      	adds	r6, #1
 8003484:	e7ee      	b.n	8003464 <__libc_init_array+0xc>
 8003486:	f855 3b04 	ldr.w	r3, [r5], #4
 800348a:	4798      	blx	r3
 800348c:	3601      	adds	r6, #1
 800348e:	e7f2      	b.n	8003476 <__libc_init_array+0x1e>
 8003490:	080034ec 	.word	0x080034ec
 8003494:	080034ec 	.word	0x080034ec
 8003498:	080034ec 	.word	0x080034ec
 800349c:	080034f0 	.word	0x080034f0

080034a0 <memset>:
 80034a0:	4402      	add	r2, r0
 80034a2:	4603      	mov	r3, r0
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d100      	bne.n	80034aa <memset+0xa>
 80034a8:	4770      	bx	lr
 80034aa:	f803 1b01 	strb.w	r1, [r3], #1
 80034ae:	e7f9      	b.n	80034a4 <memset+0x4>

080034b0 <_init>:
 80034b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034b2:	bf00      	nop
 80034b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034b6:	bc08      	pop	{r3}
 80034b8:	469e      	mov	lr, r3
 80034ba:	4770      	bx	lr

080034bc <_fini>:
 80034bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034be:	bf00      	nop
 80034c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034c2:	bc08      	pop	{r3}
 80034c4:	469e      	mov	lr, r3
 80034c6:	4770      	bx	lr
