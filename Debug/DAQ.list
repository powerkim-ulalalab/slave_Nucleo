
DAQ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f20  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  080050c0  080050c0  000150c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005574  08005574  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005574  08005574  00015574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800557c  0800557c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800557c  0800557c  0001557c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005580  08005580  00015580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005584  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000934  20000070  080055f4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009a4  080055f4  000209a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f82  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002adf  00000000  00000000  00035022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  00037b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d38  00000000  00000000  00038938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018780  00000000  00000000  00039670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010fd5  00000000  00000000  00051df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fef1  00000000  00000000  00062dc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f2cb6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004308  00000000  00000000  000f2d0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080050a8 	.word	0x080050a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080050a8 	.word	0x080050a8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <crc16>:
EMPTY,	//[SlaveID : 0]
FULL,	//[SlaveID : 1]

};
static uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	460b      	mov	r3, r1
 8000582:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8000584:	23ff      	movs	r3, #255	; 0xff
 8000586:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8000588:	23ff      	movs	r3, #255	; 0xff
 800058a:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 800058c:	e013      	b.n	80005b6 <crc16+0x3e>
        i = crc_hi ^ *buffer++; /* calculate the CRC  */
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	1c5a      	adds	r2, r3, #1
 8000592:	607a      	str	r2, [r7, #4]
 8000594:	781a      	ldrb	r2, [r3, #0]
 8000596:	7bfb      	ldrb	r3, [r7, #15]
 8000598:	4053      	eors	r3, r2
 800059a:	b2db      	uxtb	r3, r3
 800059c:	60bb      	str	r3, [r7, #8]
        crc_hi = crc_lo ^ table_crc_hi[i];
 800059e:	4a0f      	ldr	r2, [pc, #60]	; (80005dc <crc16+0x64>)
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	4413      	add	r3, r2
 80005a4:	781a      	ldrb	r2, [r3, #0]
 80005a6:	7bbb      	ldrb	r3, [r7, #14]
 80005a8:	4053      	eors	r3, r2
 80005aa:	73fb      	strb	r3, [r7, #15]
        crc_lo = table_crc_lo[i];
 80005ac:	4a0c      	ldr	r2, [pc, #48]	; (80005e0 <crc16+0x68>)
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	4413      	add	r3, r2
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	73bb      	strb	r3, [r7, #14]
    while (buffer_length--) {
 80005b6:	887b      	ldrh	r3, [r7, #2]
 80005b8:	1e5a      	subs	r2, r3, #1
 80005ba:	807a      	strh	r2, [r7, #2]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d1e6      	bne.n	800058e <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 80005c0:	7bfb      	ldrb	r3, [r7, #15]
 80005c2:	021b      	lsls	r3, r3, #8
 80005c4:	b21a      	sxth	r2, r3
 80005c6:	7bbb      	ldrb	r3, [r7, #14]
 80005c8:	b21b      	sxth	r3, r3
 80005ca:	4313      	orrs	r3, r2
 80005cc:	b21b      	sxth	r3, r3
 80005ce:	b29b      	uxth	r3, r3
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3714      	adds	r7, #20
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	080052c0 	.word	0x080052c0
 80005e0:	080053c0 	.word	0x080053c0

080005e4 <Search_ID>:
MB_Handle packetHandle;
TABLE table;
extern UART_HandleTypeDef huart2;

uint8_t Search_ID(uint8_t taget)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
	if(Table_SlaveID[taget] == FULL)
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	4a06      	ldr	r2, [pc, #24]	; (800060c <Search_ID+0x28>)
 80005f2:	5cd3      	ldrb	r3, [r2, r3]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d101      	bne.n	80005fc <Search_ID+0x18>
	{
		return TURE;
 80005f8:	2301      	movs	r3, #1
 80005fa:	e000      	b.n	80005fe <Search_ID+0x1a>
	}
	else
	{
		return FALSE;
 80005fc:	2300      	movs	r3, #0
	}
}
 80005fe:	4618      	mov	r0, r3
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	080054c0 	.word	0x080054c0

08000610 <MB_Slave>:

void MB_Slave()
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
	Rx_TimerStartStop();
 8000616:	f000 fb69 	bl	8000cec <Rx_TimerStartStop>
	frameCplt();
 800061a:	f000 f84d 	bl	80006b8 <frameCplt>

	uint8_t mode = SelectMode(packetHandle.RX_Flag ,packetHandle.TX_Flag);
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <MB_Slave+0x48>)
 8000620:	f893 33f0 	ldrb.w	r3, [r3, #1008]	; 0x3f0
 8000624:	4a0c      	ldr	r2, [pc, #48]	; (8000658 <MB_Slave+0x48>)
 8000626:	f892 23f1 	ldrb.w	r2, [r2, #1009]	; 0x3f1
 800062a:	4611      	mov	r1, r2
 800062c:	4618      	mov	r0, r3
 800062e:	f000 f815 	bl	800065c <SelectMode>
 8000632:	4603      	mov	r3, r0
 8000634:	71fb      	strb	r3, [r7, #7]

	switch(mode)
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	2b01      	cmp	r3, #1
 800063a:	d002      	beq.n	8000642 <MB_Slave+0x32>
 800063c:	2b02      	cmp	r3, #2
 800063e:	d003      	beq.n	8000648 <MB_Slave+0x38>
			break;
		}

	}

}
 8000640:	e005      	b.n	800064e <MB_Slave+0x3e>
			GetRX_Packet();
 8000642:	f000 f8a1 	bl	8000788 <GetRX_Packet>
			break;
 8000646:	e002      	b.n	800064e <MB_Slave+0x3e>
			GetTX_Packet();
 8000648:	f000 f93a 	bl	80008c0 <GetTX_Packet>
			break;
 800064c:	bf00      	nop
}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	200004b8 	.word	0x200004b8

0800065c <SelectMode>:

uint8_t SelectMode(uint8_t RX_Flag , uint8_t TX_Flag)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	460a      	mov	r2, r1
 8000666:	71fb      	strb	r3, [r7, #7]
 8000668:	4613      	mov	r3, r2
 800066a:	71bb      	strb	r3, [r7, #6]
	if(RX_Flag == ON)
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	2b01      	cmp	r3, #1
 8000670:	d101      	bne.n	8000676 <SelectMode+0x1a>
	{
		return RXMODE;
 8000672:	2301      	movs	r3, #1
 8000674:	e004      	b.n	8000680 <SelectMode+0x24>
	}

	if(TX_Flag == ON)
 8000676:	79bb      	ldrb	r3, [r7, #6]
 8000678:	2b01      	cmp	r3, #1
 800067a:	d101      	bne.n	8000680 <SelectMode+0x24>
	{
		return TXMODE;
 800067c:	2302      	movs	r3, #2
 800067e:	e7ff      	b.n	8000680 <SelectMode+0x24>
	}
}
 8000680:	4618      	mov	r0, r3
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr

0800068c <RX_Buf_Init>:
	packetHandle.RX_Flag = OFF;
	packetHandle.TX_Flag = OFF;
}

void RX_Buf_Init()
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	memset(MB_RxBuf,0,RXBUFLEN);
 8000690:	2214      	movs	r2, #20
 8000692:	2100      	movs	r1, #0
 8000694:	4805      	ldr	r0, [pc, #20]	; (80006ac <RX_Buf_Init+0x20>)
 8000696:	f003 fcd5 	bl	8004044 <memset>
	RX_Data = 0;
 800069a:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <RX_Buf_Init+0x24>)
 800069c:	2200      	movs	r2, #0
 800069e:	701a      	strb	r2, [r3, #0]
	RX_DataCnt = 0;
 80006a0:	4b04      	ldr	r3, [pc, #16]	; (80006b4 <RX_Buf_Init+0x28>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	801a      	strh	r2, [r3, #0]
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000090 	.word	0x20000090
 80006b0:	200004a4 	.word	0x200004a4
 80006b4:	2000008c 	.word	0x2000008c

080006b8 <frameCplt>:

void frameCplt()
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	if(RX_DataCnt == 8)
 80006bc:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <frameCplt+0x30>)
 80006be:	881b      	ldrh	r3, [r3, #0]
 80006c0:	b29b      	uxth	r3, r3
 80006c2:	2b08      	cmp	r3, #8
 80006c4:	d104      	bne.n	80006d0 <frameCplt+0x18>
	{
		SetHandleFlag(&packetHandle.RX_Flag , ON);
 80006c6:	2101      	movs	r1, #1
 80006c8:	4808      	ldr	r0, [pc, #32]	; (80006ec <frameCplt+0x34>)
 80006ca:	f000 f811 	bl	80006f0 <SetHandleFlag>
	else if(RX_DataCnt == 0)
	{
		SetHandleFlag(&packetHandle.RX_Flag , OFF);
	}

}
 80006ce:	e008      	b.n	80006e2 <frameCplt+0x2a>
	else if(RX_DataCnt == 0)
 80006d0:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <frameCplt+0x30>)
 80006d2:	881b      	ldrh	r3, [r3, #0]
 80006d4:	b29b      	uxth	r3, r3
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d103      	bne.n	80006e2 <frameCplt+0x2a>
		SetHandleFlag(&packetHandle.RX_Flag , OFF);
 80006da:	2100      	movs	r1, #0
 80006dc:	4803      	ldr	r0, [pc, #12]	; (80006ec <frameCplt+0x34>)
 80006de:	f000 f807 	bl	80006f0 <SetHandleFlag>
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	2000008c 	.word	0x2000008c
 80006ec:	200008a8 	.word	0x200008a8

080006f0 <SetHandleFlag>:

bool SetHandleFlag(uint8_t *flag , uint8_t onOff)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b087      	sub	sp, #28
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	460b      	mov	r3, r1
 80006fa:	70fb      	strb	r3, [r7, #3]

	uint8_t *RxAdr = &packetHandle.RX_Flag;
 80006fc:	4b20      	ldr	r3, [pc, #128]	; (8000780 <SetHandleFlag+0x90>)
 80006fe:	613b      	str	r3, [r7, #16]
	uint8_t *TxAdr = &packetHandle.TX_Flag;
 8000700:	4b20      	ldr	r3, [pc, #128]	; (8000784 <SetHandleFlag+0x94>)
 8000702:	60fb      	str	r3, [r7, #12]
	uint8_t flagAdr = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	75fb      	strb	r3, [r7, #23]
	uint8_t state = onOff;
 8000708:	78fb      	ldrb	r3, [r7, #3]
 800070a:	72fb      	strb	r3, [r7, #11]

	if(flag == RxAdr)
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	693b      	ldr	r3, [r7, #16]
 8000710:	429a      	cmp	r2, r3
 8000712:	d102      	bne.n	800071a <SetHandleFlag+0x2a>
	{
		flagAdr = RXADR;
 8000714:	2301      	movs	r3, #1
 8000716:	75fb      	strb	r3, [r7, #23]
 8000718:	e005      	b.n	8000726 <SetHandleFlag+0x36>
	}

	else if(flag == TxAdr)
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	429a      	cmp	r2, r3
 8000720:	d101      	bne.n	8000726 <SetHandleFlag+0x36>
	{
		flagAdr = TXADR;
 8000722:	2302      	movs	r3, #2
 8000724:	75fb      	strb	r3, [r7, #23]
	}

	switch(flagAdr)
 8000726:	7dfb      	ldrb	r3, [r7, #23]
 8000728:	2b01      	cmp	r3, #1
 800072a:	d002      	beq.n	8000732 <SetHandleFlag+0x42>
 800072c:	2b02      	cmp	r3, #2
 800072e:	d010      	beq.n	8000752 <SetHandleFlag+0x62>
 8000730:	e01f      	b.n	8000772 <SetHandleFlag+0x82>
	{
		case RXADR:
		{
			if(state == ON)
 8000732:	7afb      	ldrb	r3, [r7, #11]
 8000734:	2b01      	cmp	r3, #1
 8000736:	d104      	bne.n	8000742 <SetHandleFlag+0x52>
			{
				*flag = ON;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2201      	movs	r2, #1
 800073c:	701a      	strb	r2, [r3, #0]
				return TURE;
 800073e:	2301      	movs	r3, #1
 8000740:	e017      	b.n	8000772 <SetHandleFlag+0x82>
				break;
			}
			else if(state == OFF)
 8000742:	7afb      	ldrb	r3, [r7, #11]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d104      	bne.n	8000752 <SetHandleFlag+0x62>
			{
				*flag = OFF;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2200      	movs	r2, #0
 800074c:	701a      	strb	r2, [r3, #0]
				return FALSE;
 800074e:	2300      	movs	r3, #0
 8000750:	e00f      	b.n	8000772 <SetHandleFlag+0x82>
			}
		}

		case TXADR:
		{
			if(state == ON)
 8000752:	7afb      	ldrb	r3, [r7, #11]
 8000754:	2b01      	cmp	r3, #1
 8000756:	d104      	bne.n	8000762 <SetHandleFlag+0x72>
			{
				*flag = ON;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2201      	movs	r2, #1
 800075c:	701a      	strb	r2, [r3, #0]
				return TURE;
 800075e:	2301      	movs	r3, #1
 8000760:	e007      	b.n	8000772 <SetHandleFlag+0x82>
				break;
			}
			else if(state == OFF)
 8000762:	7afb      	ldrb	r3, [r7, #11]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d104      	bne.n	8000772 <SetHandleFlag+0x82>
			{
				*flag = OFF;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2200      	movs	r2, #0
 800076c:	701a      	strb	r2, [r3, #0]
				return FALSE;
 800076e:	2300      	movs	r3, #0
 8000770:	e7ff      	b.n	8000772 <SetHandleFlag+0x82>
				break;
			}
		}
	}
}
 8000772:	4618      	mov	r0, r3
 8000774:	371c      	adds	r7, #28
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	200008a8 	.word	0x200008a8
 8000784:	200008a9 	.word	0x200008a9

08000788 <GetRX_Packet>:

uint8_t GetRX_Packet()
{
 8000788:	b5b0      	push	{r4, r5, r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af04      	add	r7, sp, #16
	static uint8_t RX_State = Ready;

	switch(RX_State)
 800078e:	4b46      	ldr	r3, [pc, #280]	; (80008a8 <GetRX_Packet+0x120>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b05      	cmp	r3, #5
 8000794:	f200 8085 	bhi.w	80008a2 <GetRX_Packet+0x11a>
 8000798:	a201      	add	r2, pc, #4	; (adr r2, 80007a0 <GetRX_Packet+0x18>)
 800079a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800079e:	bf00      	nop
 80007a0:	080007b9 	.word	0x080007b9
 80007a4:	080007e5 	.word	0x080007e5
 80007a8:	080007f5 	.word	0x080007f5
 80007ac:	08000805 	.word	0x08000805
 80007b0:	0800081f 	.word	0x0800081f
 80007b4:	08000839 	.word	0x08000839
	{
		case Ready:
		{
			if( Search_ID(MB_RxBuf[SlaveID]) == TURE  )
 80007b8:	4b3c      	ldr	r3, [pc, #240]	; (80008ac <GetRX_Packet+0x124>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff ff11 	bl	80005e4 <Search_ID>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d103      	bne.n	80007d0 <GetRX_Packet+0x48>
			{
				RX_State = GetID;
 80007c8:	4b37      	ldr	r3, [pc, #220]	; (80008a8 <GetRX_Packet+0x120>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	701a      	strb	r2, [r3, #0]
			{
				RX_Buf_Init();
				packetHandle.RX_Flag = OFF;
				RX_State = Ready;
			}
			break;
 80007ce:	e068      	b.n	80008a2 <GetRX_Packet+0x11a>
				RX_Buf_Init();
 80007d0:	f7ff ff5c 	bl	800068c <RX_Buf_Init>
				packetHandle.RX_Flag = OFF;
 80007d4:	4b36      	ldr	r3, [pc, #216]	; (80008b0 <GetRX_Packet+0x128>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
				RX_State = Ready;
 80007dc:	4b32      	ldr	r3, [pc, #200]	; (80008a8 <GetRX_Packet+0x120>)
 80007de:	2200      	movs	r2, #0
 80007e0:	701a      	strb	r2, [r3, #0]
			break;
 80007e2:	e05e      	b.n	80008a2 <GetRX_Packet+0x11a>
		}
		case GetID:
		{

			packetHandle.id = MB_RxBuf[SlaveID];
 80007e4:	4b31      	ldr	r3, [pc, #196]	; (80008ac <GetRX_Packet+0x124>)
 80007e6:	781a      	ldrb	r2, [r3, #0]
 80007e8:	4b31      	ldr	r3, [pc, #196]	; (80008b0 <GetRX_Packet+0x128>)
 80007ea:	701a      	strb	r2, [r3, #0]
			RX_State = GetFunCode;
 80007ec:	4b2e      	ldr	r3, [pc, #184]	; (80008a8 <GetRX_Packet+0x120>)
 80007ee:	2202      	movs	r2, #2
 80007f0:	701a      	strb	r2, [r3, #0]
			break;
 80007f2:	e056      	b.n	80008a2 <GetRX_Packet+0x11a>
		}
		case GetFunCode:
		{
			packetHandle.FuncCode = MB_RxBuf[FuncCode];
 80007f4:	4b2d      	ldr	r3, [pc, #180]	; (80008ac <GetRX_Packet+0x124>)
 80007f6:	785a      	ldrb	r2, [r3, #1]
 80007f8:	4b2d      	ldr	r3, [pc, #180]	; (80008b0 <GetRX_Packet+0x128>)
 80007fa:	705a      	strb	r2, [r3, #1]
			RX_State = GetAdr;
 80007fc:	4b2a      	ldr	r3, [pc, #168]	; (80008a8 <GetRX_Packet+0x120>)
 80007fe:	2203      	movs	r2, #3
 8000800:	701a      	strb	r2, [r3, #0]
			break;
 8000802:	e04e      	b.n	80008a2 <GetRX_Packet+0x11a>
		}
		case GetAdr:
		{
			packetHandle.adr = (uint16_t)( MB_RxBuf[AdrHigh] | MB_RxBuf[AdrLow] );
 8000804:	4b29      	ldr	r3, [pc, #164]	; (80008ac <GetRX_Packet+0x124>)
 8000806:	789a      	ldrb	r2, [r3, #2]
 8000808:	4b28      	ldr	r3, [pc, #160]	; (80008ac <GetRX_Packet+0x124>)
 800080a:	78db      	ldrb	r3, [r3, #3]
 800080c:	4313      	orrs	r3, r2
 800080e:	b2db      	uxtb	r3, r3
 8000810:	b29a      	uxth	r2, r3
 8000812:	4b27      	ldr	r3, [pc, #156]	; (80008b0 <GetRX_Packet+0x128>)
 8000814:	805a      	strh	r2, [r3, #2]
			RX_State = Getlen;
 8000816:	4b24      	ldr	r3, [pc, #144]	; (80008a8 <GetRX_Packet+0x120>)
 8000818:	2204      	movs	r2, #4
 800081a:	701a      	strb	r2, [r3, #0]
			break;
 800081c:	e041      	b.n	80008a2 <GetRX_Packet+0x11a>
		}
		case Getlen:
		{

			packetHandle.len = (uint16_t)( MB_RxBuf[LenHigh] | MB_RxBuf[LenLow] );
 800081e:	4b23      	ldr	r3, [pc, #140]	; (80008ac <GetRX_Packet+0x124>)
 8000820:	791a      	ldrb	r2, [r3, #4]
 8000822:	4b22      	ldr	r3, [pc, #136]	; (80008ac <GetRX_Packet+0x124>)
 8000824:	795b      	ldrb	r3, [r3, #5]
 8000826:	4313      	orrs	r3, r2
 8000828:	b2db      	uxtb	r3, r3
 800082a:	b29a      	uxth	r2, r3
 800082c:	4b20      	ldr	r3, [pc, #128]	; (80008b0 <GetRX_Packet+0x128>)
 800082e:	809a      	strh	r2, [r3, #4]
			RX_State = GetCrc;
 8000830:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <GetRX_Packet+0x120>)
 8000832:	2205      	movs	r2, #5
 8000834:	701a      	strb	r2, [r3, #0]
			break;
 8000836:	e034      	b.n	80008a2 <GetRX_Packet+0x11a>
		}
		case GetCrc:
		{
			packetHandle.crc_high = MB_RxBuf[CrcHigh];
 8000838:	4b1c      	ldr	r3, [pc, #112]	; (80008ac <GetRX_Packet+0x124>)
 800083a:	799a      	ldrb	r2, [r3, #6]
 800083c:	4b1c      	ldr	r3, [pc, #112]	; (80008b0 <GetRX_Packet+0x128>)
 800083e:	f883 23ee 	strb.w	r2, [r3, #1006]	; 0x3ee
			packetHandle.crc_low = MB_RxBuf[CrcLow];
 8000842:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <GetRX_Packet+0x124>)
 8000844:	79da      	ldrb	r2, [r3, #7]
 8000846:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <GetRX_Packet+0x128>)
 8000848:	f883 23ef 	strb.w	r2, [r3, #1007]	; 0x3ef

			SetHandleFlag(&packetHandle.TX_Flag , ON);
 800084c:	2101      	movs	r1, #1
 800084e:	4819      	ldr	r0, [pc, #100]	; (80008b4 <GetRX_Packet+0x12c>)
 8000850:	f7ff ff4e 	bl	80006f0 <SetHandleFlag>
			SetHandleFlag(&packetHandle.RX_Flag , OFF);
 8000854:	2100      	movs	r1, #0
 8000856:	4818      	ldr	r0, [pc, #96]	; (80008b8 <GetRX_Packet+0x130>)
 8000858:	f7ff ff4a 	bl	80006f0 <SetHandleFlag>
			RX_Buf_Init();
 800085c:	f7ff ff16 	bl	800068c <RX_Buf_Init>
printf("TX-%02x %02x %02x %02x %02x %02x\n",
		packetHandle.id, packetHandle.FuncCode, packetHandle.adr, packetHandle.len , packetHandle.crc_high, packetHandle.crc_low);
 8000860:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <GetRX_Packet+0x128>)
 8000862:	781b      	ldrb	r3, [r3, #0]
printf("TX-%02x %02x %02x %02x %02x %02x\n",
 8000864:	4618      	mov	r0, r3
		packetHandle.id, packetHandle.FuncCode, packetHandle.adr, packetHandle.len , packetHandle.crc_high, packetHandle.crc_low);
 8000866:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <GetRX_Packet+0x128>)
 8000868:	785b      	ldrb	r3, [r3, #1]
printf("TX-%02x %02x %02x %02x %02x %02x\n",
 800086a:	461c      	mov	r4, r3
		packetHandle.id, packetHandle.FuncCode, packetHandle.adr, packetHandle.len , packetHandle.crc_high, packetHandle.crc_low);
 800086c:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <GetRX_Packet+0x128>)
 800086e:	885b      	ldrh	r3, [r3, #2]
printf("TX-%02x %02x %02x %02x %02x %02x\n",
 8000870:	461d      	mov	r5, r3
		packetHandle.id, packetHandle.FuncCode, packetHandle.adr, packetHandle.len , packetHandle.crc_high, packetHandle.crc_low);
 8000872:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <GetRX_Packet+0x128>)
 8000874:	889b      	ldrh	r3, [r3, #4]
printf("TX-%02x %02x %02x %02x %02x %02x\n",
 8000876:	461a      	mov	r2, r3
		packetHandle.id, packetHandle.FuncCode, packetHandle.adr, packetHandle.len , packetHandle.crc_high, packetHandle.crc_low);
 8000878:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <GetRX_Packet+0x128>)
 800087a:	f893 33ee 	ldrb.w	r3, [r3, #1006]	; 0x3ee
printf("TX-%02x %02x %02x %02x %02x %02x\n",
 800087e:	4619      	mov	r1, r3
		packetHandle.id, packetHandle.FuncCode, packetHandle.adr, packetHandle.len , packetHandle.crc_high, packetHandle.crc_low);
 8000880:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <GetRX_Packet+0x128>)
 8000882:	f893 33ef 	ldrb.w	r3, [r3, #1007]	; 0x3ef
printf("TX-%02x %02x %02x %02x %02x %02x\n",
 8000886:	9302      	str	r3, [sp, #8]
 8000888:	9101      	str	r1, [sp, #4]
 800088a:	9200      	str	r2, [sp, #0]
 800088c:	462b      	mov	r3, r5
 800088e:	4622      	mov	r2, r4
 8000890:	4601      	mov	r1, r0
 8000892:	480a      	ldr	r0, [pc, #40]	; (80008bc <GetRX_Packet+0x134>)
 8000894:	f003 fbde 	bl	8004054 <iprintf>
			RX_State = Ready;
 8000898:	4b03      	ldr	r3, [pc, #12]	; (80008a8 <GetRX_Packet+0x120>)
 800089a:	2200      	movs	r2, #0
 800089c:	701a      	strb	r2, [r3, #0]
			return RX_OK;
 800089e:	2301      	movs	r3, #1
 80008a0:	e7ff      	b.n	80008a2 <GetRX_Packet+0x11a>
			break;
		}
	}
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bdb0      	pop	{r4, r5, r7, pc}
 80008a8:	200004a5 	.word	0x200004a5
 80008ac:	20000090 	.word	0x20000090
 80008b0:	200004b8 	.word	0x200004b8
 80008b4:	200008a9 	.word	0x200008a9
 80008b8:	200008a8 	.word	0x200008a8
 80008bc:	080050c0 	.word	0x080050c0

080008c0 <GetTX_Packet>:

void GetTX_Packet()
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0

	static uint8_t TX_State = Ready;
	static uint8_t DataType = Null;

	switch(TX_State)
 80008c6:	4b5c      	ldr	r3, [pc, #368]	; (8000a38 <GetTX_Packet+0x178>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b06      	cmp	r3, #6
 80008cc:	f200 80af 	bhi.w	8000a2e <GetTX_Packet+0x16e>
 80008d0:	a201      	add	r2, pc, #4	; (adr r2, 80008d8 <GetTX_Packet+0x18>)
 80008d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d6:	bf00      	nop
 80008d8:	080008f5 	.word	0x080008f5
 80008dc:	080008fd 	.word	0x080008fd
 80008e0:	0800090d 	.word	0x0800090d
 80008e4:	08000a2f 	.word	0x08000a2f
 80008e8:	0800091d 	.word	0x0800091d
 80008ec:	080009ad 	.word	0x080009ad
 80008f0:	08000977 	.word	0x08000977
	{
		case Ready:
		{
			TX_State = GetID;
 80008f4:	4b50      	ldr	r3, [pc, #320]	; (8000a38 <GetTX_Packet+0x178>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	701a      	strb	r2, [r3, #0]
			break;
 80008fa:	e098      	b.n	8000a2e <GetTX_Packet+0x16e>
		}

		case GetID:
		{
			MB_TXBuf[SlaveID] = packetHandle.id;
 80008fc:	4b4f      	ldr	r3, [pc, #316]	; (8000a3c <GetTX_Packet+0x17c>)
 80008fe:	781a      	ldrb	r2, [r3, #0]
 8000900:	4b4f      	ldr	r3, [pc, #316]	; (8000a40 <GetTX_Packet+0x180>)
 8000902:	701a      	strb	r2, [r3, #0]
			TX_State = GetFunCode;
 8000904:	4b4c      	ldr	r3, [pc, #304]	; (8000a38 <GetTX_Packet+0x178>)
 8000906:	2202      	movs	r2, #2
 8000908:	701a      	strb	r2, [r3, #0]

			break;
 800090a:	e090      	b.n	8000a2e <GetTX_Packet+0x16e>
		}

		case GetFunCode:
		{
			MB_TXBuf[FuncCode] = packetHandle.FuncCode;
 800090c:	4b4b      	ldr	r3, [pc, #300]	; (8000a3c <GetTX_Packet+0x17c>)
 800090e:	785a      	ldrb	r2, [r3, #1]
 8000910:	4b4b      	ldr	r3, [pc, #300]	; (8000a40 <GetTX_Packet+0x180>)
 8000912:	705a      	strb	r2, [r3, #1]
			TX_State = Getlen;
 8000914:	4b48      	ldr	r3, [pc, #288]	; (8000a38 <GetTX_Packet+0x178>)
 8000916:	2204      	movs	r2, #4
 8000918:	701a      	strb	r2, [r3, #0]

			break;
 800091a:	e088      	b.n	8000a2e <GetTX_Packet+0x16e>
		}

		case Getlen:
		{
			uint16_t tablePtr = GetTableAdr();//want Coil?? Reg??
 800091c:	f000 f930 	bl	8000b80 <GetTableAdr>
 8000920:	4603      	mov	r3, r0
 8000922:	807b      	strh	r3, [r7, #2]

			if(tablePtr == Coil_1 || tablePtr == Coil_10000)//GetCoilLen
 8000924:	887b      	ldrh	r3, [r7, #2]
 8000926:	2b01      	cmp	r3, #1
 8000928:	d004      	beq.n	8000934 <GetTX_Packet+0x74>
 800092a:	887b      	ldrh	r3, [r7, #2]
 800092c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000930:	4293      	cmp	r3, r2
 8000932:	d112      	bne.n	800095a <GetTX_Packet+0x9a>
			{
				MB_TXBuf[TxLen] = DataLen(packetHandle.adr, packetHandle.len);
 8000934:	4b41      	ldr	r3, [pc, #260]	; (8000a3c <GetTX_Packet+0x17c>)
 8000936:	885b      	ldrh	r3, [r3, #2]
 8000938:	4a40      	ldr	r2, [pc, #256]	; (8000a3c <GetTX_Packet+0x17c>)
 800093a:	8892      	ldrh	r2, [r2, #4]
 800093c:	4611      	mov	r1, r2
 800093e:	4618      	mov	r0, r3
 8000940:	f000 fa4c 	bl	8000ddc <DataLen>
 8000944:	4603      	mov	r3, r0
 8000946:	b2da      	uxtb	r2, r3
 8000948:	4b3d      	ldr	r3, [pc, #244]	; (8000a40 <GetTX_Packet+0x180>)
 800094a:	709a      	strb	r2, [r3, #2]
				TX_State = GetData;
 800094c:	4b3a      	ldr	r3, [pc, #232]	; (8000a38 <GetTX_Packet+0x178>)
 800094e:	2206      	movs	r2, #6
 8000950:	701a      	strb	r2, [r3, #0]
				DataType = Coil;
 8000952:	4b3c      	ldr	r3, [pc, #240]	; (8000a44 <GetTX_Packet+0x184>)
 8000954:	2201      	movs	r2, #1
 8000956:	701a      	strb	r2, [r3, #0]
				MB_TXBuf[TxLen] = packetHandle.len * 2;
				TX_State = GetData;
				DataType = Reg;
			}

			break;
 8000958:	e069      	b.n	8000a2e <GetTX_Packet+0x16e>
				MB_TXBuf[TxLen] = packetHandle.len * 2;
 800095a:	4b38      	ldr	r3, [pc, #224]	; (8000a3c <GetTX_Packet+0x17c>)
 800095c:	889b      	ldrh	r3, [r3, #4]
 800095e:	b2db      	uxtb	r3, r3
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	b2da      	uxtb	r2, r3
 8000964:	4b36      	ldr	r3, [pc, #216]	; (8000a40 <GetTX_Packet+0x180>)
 8000966:	709a      	strb	r2, [r3, #2]
				TX_State = GetData;
 8000968:	4b33      	ldr	r3, [pc, #204]	; (8000a38 <GetTX_Packet+0x178>)
 800096a:	2206      	movs	r2, #6
 800096c:	701a      	strb	r2, [r3, #0]
				DataType = Reg;
 800096e:	4b35      	ldr	r3, [pc, #212]	; (8000a44 <GetTX_Packet+0x184>)
 8000970:	2202      	movs	r2, #2
 8000972:	701a      	strb	r2, [r3, #0]
			break;
 8000974:	e05b      	b.n	8000a2e <GetTX_Packet+0x16e>
		}

		case GetData:
		{
			switch(DataType)
 8000976:	4b33      	ldr	r3, [pc, #204]	; (8000a44 <GetTX_Packet+0x184>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b01      	cmp	r3, #1
 800097c:	d002      	beq.n	8000984 <GetTX_Packet+0xc4>
 800097e:	2b02      	cmp	r3, #2
 8000980:	d00d      	beq.n	800099e <GetTX_Packet+0xde>
					TX_State = GetCrc;
					break;
				}
			}

			break;
 8000982:	e054      	b.n	8000a2e <GetTX_Packet+0x16e>
					GetCoilData(MB_TXBuf, GetCoilRegTable(), packetHandle.adr);
 8000984:	f000 f8c8 	bl	8000b18 <GetCoilRegTable>
 8000988:	4601      	mov	r1, r0
 800098a:	4b2c      	ldr	r3, [pc, #176]	; (8000a3c <GetTX_Packet+0x17c>)
 800098c:	885b      	ldrh	r3, [r3, #2]
 800098e:	461a      	mov	r2, r3
 8000990:	482b      	ldr	r0, [pc, #172]	; (8000a40 <GetTX_Packet+0x180>)
 8000992:	f000 fa47 	bl	8000e24 <GetCoilData>
					TX_State = GetCrc;
 8000996:	4b28      	ldr	r3, [pc, #160]	; (8000a38 <GetTX_Packet+0x178>)
 8000998:	2205      	movs	r2, #5
 800099a:	701a      	strb	r2, [r3, #0]
					break;
 800099c:	e005      	b.n	80009aa <GetTX_Packet+0xea>
					GetRegData();
 800099e:	f000 f857 	bl	8000a50 <GetRegData>
					TX_State = GetCrc;
 80009a2:	4b25      	ldr	r3, [pc, #148]	; (8000a38 <GetTX_Packet+0x178>)
 80009a4:	2205      	movs	r2, #5
 80009a6:	701a      	strb	r2, [r3, #0]
					break;
 80009a8:	bf00      	nop
			break;
 80009aa:	e040      	b.n	8000a2e <GetTX_Packet+0x16e>
		}

		case GetCrc:
		{	uint16_t TxCrc = crc16(MB_TXBuf,MB_TXBuf[TxLen] + 3 );
 80009ac:	4b24      	ldr	r3, [pc, #144]	; (8000a40 <GetTX_Packet+0x180>)
 80009ae:	789b      	ldrb	r3, [r3, #2]
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	3303      	adds	r3, #3
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	4619      	mov	r1, r3
 80009b8:	4821      	ldr	r0, [pc, #132]	; (8000a40 <GetTX_Packet+0x180>)
 80009ba:	f7ff fddd 	bl	8000578 <crc16>
 80009be:	4603      	mov	r3, r0
 80009c0:	80fb      	strh	r3, [r7, #6]

			uint8_t crcHighIndex = MB_TXBuf[TxLen] + 3;
 80009c2:	4b1f      	ldr	r3, [pc, #124]	; (8000a40 <GetTX_Packet+0x180>)
 80009c4:	789b      	ldrb	r3, [r3, #2]
 80009c6:	3303      	adds	r3, #3
 80009c8:	717b      	strb	r3, [r7, #5]
			uint8_t crcLowIndex = MB_TXBuf[TxLen] + 4;
 80009ca:	4b1d      	ldr	r3, [pc, #116]	; (8000a40 <GetTX_Packet+0x180>)
 80009cc:	789b      	ldrb	r3, [r3, #2]
 80009ce:	3304      	adds	r3, #4
 80009d0:	713b      	strb	r3, [r7, #4]

			MB_TXBuf[crcHighIndex] = TxCrc >> 8;
 80009d2:	88fb      	ldrh	r3, [r7, #6]
 80009d4:	0a1b      	lsrs	r3, r3, #8
 80009d6:	b29a      	uxth	r2, r3
 80009d8:	797b      	ldrb	r3, [r7, #5]
 80009da:	b2d1      	uxtb	r1, r2
 80009dc:	4a18      	ldr	r2, [pc, #96]	; (8000a40 <GetTX_Packet+0x180>)
 80009de:	54d1      	strb	r1, [r2, r3]
			MB_TXBuf[crcLowIndex] = TxCrc;
 80009e0:	793b      	ldrb	r3, [r7, #4]
 80009e2:	88fa      	ldrh	r2, [r7, #6]
 80009e4:	b2d1      	uxtb	r1, r2
 80009e6:	4a16      	ldr	r2, [pc, #88]	; (8000a40 <GetTX_Packet+0x180>)
 80009e8:	54d1      	strb	r1, [r2, r3]
showPacket(MB_TXBuf, MB_TXBuf[TxLen]+5);
 80009ea:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <GetTX_Packet+0x180>)
 80009ec:	789b      	ldrb	r3, [r3, #2]
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	3305      	adds	r3, #5
 80009f2:	b29b      	uxth	r3, r3
 80009f4:	4619      	mov	r1, r3
 80009f6:	4812      	ldr	r0, [pc, #72]	; (8000a40 <GetTX_Packet+0x180>)
 80009f8:	f000 f8f6 	bl	8000be8 <showPacket>
			SetHandleFlag(&packetHandle.TX_Flag , OFF);
 80009fc:	2100      	movs	r1, #0
 80009fe:	4812      	ldr	r0, [pc, #72]	; (8000a48 <GetTX_Packet+0x188>)
 8000a00:	f7ff fe76 	bl	80006f0 <SetHandleFlag>
			HAL_UART_Transmit(&huart2, MB_TXBuf, MB_TXBuf[TxLen]+5, 0xffff);
 8000a04:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <GetTX_Packet+0x180>)
 8000a06:	789b      	ldrb	r3, [r3, #2]
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	3305      	adds	r3, #5
 8000a0c:	b29a      	uxth	r2, r3
 8000a0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a12:	490b      	ldr	r1, [pc, #44]	; (8000a40 <GetTX_Packet+0x180>)
 8000a14:	480d      	ldr	r0, [pc, #52]	; (8000a4c <GetTX_Packet+0x18c>)
 8000a16:	f002 fb62 	bl	80030de <HAL_UART_Transmit>
			memset(MB_TXBuf,0,1024);
 8000a1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4807      	ldr	r0, [pc, #28]	; (8000a40 <GetTX_Packet+0x180>)
 8000a22:	f003 fb0f 	bl	8004044 <memset>

			TX_State = Ready;
 8000a26:	4b04      	ldr	r3, [pc, #16]	; (8000a38 <GetTX_Packet+0x178>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	701a      	strb	r2, [r3, #0]
			break;
 8000a2c:	bf00      	nop
		}

	}

}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200004a6 	.word	0x200004a6
 8000a3c:	200004b8 	.word	0x200004b8
 8000a40:	200000a4 	.word	0x200000a4
 8000a44:	200004a7 	.word	0x200004a7
 8000a48:	200008a9 	.word	0x200008a9
 8000a4c:	2000094c 	.word	0x2000094c

08000a50 <GetRegData>:


void GetRegData()//copy packHandle.data[] -> MB_TXBuf[data]
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
		GetHandleData();
 8000a56:	f000 f837 	bl	8000ac8 <GetHandleData>

		uint8_t *bufPtr = &MB_TXBuf[3];
 8000a5a:	4b18      	ldr	r3, [pc, #96]	; (8000abc <GetRegData+0x6c>)
 8000a5c:	60fb      	str	r3, [r7, #12]
		uint16_t *packetPtr = packetHandle.data;
 8000a5e:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <GetRegData+0x70>)
 8000a60:	60bb      	str	r3, [r7, #8]

		int cnt = packetHandle.adr - packetHandle.len ;
 8000a62:	4b18      	ldr	r3, [pc, #96]	; (8000ac4 <GetRegData+0x74>)
 8000a64:	885b      	ldrh	r3, [r3, #2]
 8000a66:	461a      	mov	r2, r3
 8000a68:	4b16      	ldr	r3, [pc, #88]	; (8000ac4 <GetRegData+0x74>)
 8000a6a:	889b      	ldrh	r3, [r3, #4]
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	607b      	str	r3, [r7, #4]
		if(cnt < 0)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	da19      	bge.n	8000aaa <GetRegData+0x5a>
		{
			cnt = cnt * -1;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	425b      	negs	r3, r3
 8000a7a:	607b      	str	r3, [r7, #4]
		}

		while(cnt >= 0)
 8000a7c:	e015      	b.n	8000aaa <GetRegData+0x5a>
		{
			*bufPtr ++= *packetPtr >> 8;
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	881b      	ldrh	r3, [r3, #0]
 8000a82:	0a1b      	lsrs	r3, r3, #8
 8000a84:	b299      	uxth	r1, r3
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	1c5a      	adds	r2, r3, #1
 8000a8a:	60fa      	str	r2, [r7, #12]
 8000a8c:	b2ca      	uxtb	r2, r1
 8000a8e:	701a      	strb	r2, [r3, #0]
			*bufPtr ++= *packetPtr;
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	8819      	ldrh	r1, [r3, #0]
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	1c5a      	adds	r2, r3, #1
 8000a98:	60fa      	str	r2, [r7, #12]
 8000a9a:	b2ca      	uxtb	r2, r1
 8000a9c:	701a      	strb	r2, [r3, #0]
			packetPtr++;
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	3302      	adds	r3, #2
 8000aa2:	60bb      	str	r3, [r7, #8]
			cnt--;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	3b01      	subs	r3, #1
 8000aa8:	607b      	str	r3, [r7, #4]
		while(cnt >= 0)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	dae6      	bge.n	8000a7e <GetRegData+0x2e>
		}
}
 8000ab0:	bf00      	nop
 8000ab2:	bf00      	nop
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	200000a7 	.word	0x200000a7
 8000ac0:	200004be 	.word	0x200004be
 8000ac4:	200004b8 	.word	0x200004b8

08000ac8 <GetHandleData>:

void GetHandleData()//copy CoilRegData -> packHandle.data[]
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
	uint16_t *dataPtr = GetCoilRegTable();
 8000ace:	f000 f823 	bl	8000b18 <GetCoilRegTable>
 8000ad2:	60b8      	str	r0, [r7, #8]
	uint16_t headIndex = packetHandle.adr;
 8000ad4:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <GetHandleData+0x48>)
 8000ad6:	885b      	ldrh	r3, [r3, #2]
 8000ad8:	80fb      	strh	r3, [r7, #6]
	uint16_t tailIndex = packetHandle.len;
 8000ada:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <GetHandleData+0x48>)
 8000adc:	889b      	ldrh	r3, [r3, #4]
 8000ade:	80bb      	strh	r3, [r7, #4]

	int len = headIndex - tailIndex;
 8000ae0:	88fa      	ldrh	r2, [r7, #6]
 8000ae2:	88bb      	ldrh	r3, [r7, #4]
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	60fb      	str	r3, [r7, #12]

	if(len < 0)
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	da02      	bge.n	8000af4 <GetHandleData+0x2c>
	{
		len = len * -1;
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	425b      	negs	r3, r3
 8000af2:	60fb      	str	r3, [r7, #12]
	}

	memcpy(packetHandle.data , &dataPtr[headIndex] , len * 2);// why len * 2 : sizeof = 1byte
 8000af4:	88fb      	ldrh	r3, [r7, #6]
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	68ba      	ldr	r2, [r7, #8]
 8000afa:	18d1      	adds	r1, r2, r3
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	461a      	mov	r2, r3
 8000b02:	4804      	ldr	r0, [pc, #16]	; (8000b14 <GetHandleData+0x4c>)
 8000b04:	f003 fa90 	bl	8004028 <memcpy>
}
 8000b08:	bf00      	nop
 8000b0a:	3710      	adds	r7, #16
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	200004b8 	.word	0x200004b8
 8000b14:	200004be 	.word	0x200004be

08000b18 <GetCoilRegTable>:

uint16_t* GetCoilRegTable()
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
	uint16_t coilRegAdr = GetTableAdr();
 8000b1e:	f000 f82f 	bl	8000b80 <GetTableAdr>
 8000b22:	4603      	mov	r3, r0
 8000b24:	80fb      	strh	r3, [r7, #6]

	switch(coilRegAdr)
 8000b26:	88fb      	ldrh	r3, [r7, #6]
 8000b28:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d018      	beq.n	8000b62 <GetCoilRegTable+0x4a>
 8000b30:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000b34:	4293      	cmp	r3, r2
 8000b36:	dc16      	bgt.n	8000b66 <GetCoilRegTable+0x4e>
 8000b38:	f247 5230 	movw	r2, #30000	; 0x7530
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d00e      	beq.n	8000b5e <GetCoilRegTable+0x46>
 8000b40:	f247 5230 	movw	r2, #30000	; 0x7530
 8000b44:	4293      	cmp	r3, r2
 8000b46:	dc0e      	bgt.n	8000b66 <GetCoilRegTable+0x4e>
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d004      	beq.n	8000b56 <GetCoilRegTable+0x3e>
 8000b4c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d002      	beq.n	8000b5a <GetCoilRegTable+0x42>
 8000b54:	e007      	b.n	8000b66 <GetCoilRegTable+0x4e>
	{
		case Coil_1:
		{
			return &CoilTable_1;
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <GetCoilRegTable+0x58>)
 8000b58:	e005      	b.n	8000b66 <GetCoilRegTable+0x4e>
			break;
		}

		case Coil_10000:
		{
			return &CoilTable_10000;
 8000b5a:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <GetCoilRegTable+0x5c>)
 8000b5c:	e003      	b.n	8000b66 <GetCoilRegTable+0x4e>
			break;
		}

		case Reg_30000:
		{
			return &RegTable_30000;
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <GetCoilRegTable+0x60>)
 8000b60:	e001      	b.n	8000b66 <GetCoilRegTable+0x4e>
			break;
		}

		case Reg_40000:
		{
			return &RegTable_40000;
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <GetCoilRegTable+0x64>)
 8000b64:	e7ff      	b.n	8000b66 <GetCoilRegTable+0x4e>
			break;
		}
	}

}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	08005110 	.word	0x08005110
 8000b74:	08005120 	.word	0x08005120
 8000b78:	08005130 	.word	0x08005130
 8000b7c:	080051f8 	.word	0x080051f8

08000b80 <GetTableAdr>:

uint16_t GetTableAdr()
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
	if(MB_TXBuf[FuncCode] == 1 || MB_TXBuf[FuncCode] == 5 || MB_TXBuf[FuncCode] == 15)
 8000b84:	4b17      	ldr	r3, [pc, #92]	; (8000be4 <GetTableAdr+0x64>)
 8000b86:	785b      	ldrb	r3, [r3, #1]
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d007      	beq.n	8000b9c <GetTableAdr+0x1c>
 8000b8c:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <GetTableAdr+0x64>)
 8000b8e:	785b      	ldrb	r3, [r3, #1]
 8000b90:	2b05      	cmp	r3, #5
 8000b92:	d003      	beq.n	8000b9c <GetTableAdr+0x1c>
 8000b94:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <GetTableAdr+0x64>)
 8000b96:	785b      	ldrb	r3, [r3, #1]
 8000b98:	2b0f      	cmp	r3, #15
 8000b9a:	d101      	bne.n	8000ba0 <GetTableAdr+0x20>
	{
		return Coil_1;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	e01c      	b.n	8000bda <GetTableAdr+0x5a>
	}
	else if(MB_TXBuf[FuncCode] == 2)
 8000ba0:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <GetTableAdr+0x64>)
 8000ba2:	785b      	ldrb	r3, [r3, #1]
 8000ba4:	2b02      	cmp	r3, #2
 8000ba6:	d102      	bne.n	8000bae <GetTableAdr+0x2e>
	{
		return Coil_10000;
 8000ba8:	f242 7310 	movw	r3, #10000	; 0x2710
 8000bac:	e015      	b.n	8000bda <GetTableAdr+0x5a>
	}
	else if(MB_TXBuf[FuncCode] == 4)
 8000bae:	4b0d      	ldr	r3, [pc, #52]	; (8000be4 <GetTableAdr+0x64>)
 8000bb0:	785b      	ldrb	r3, [r3, #1]
 8000bb2:	2b04      	cmp	r3, #4
 8000bb4:	d102      	bne.n	8000bbc <GetTableAdr+0x3c>
	{
		return Reg_30000;
 8000bb6:	f247 5330 	movw	r3, #30000	; 0x7530
 8000bba:	e00e      	b.n	8000bda <GetTableAdr+0x5a>
	}
	else if(MB_TXBuf[FuncCode] == 3 || MB_TXBuf[FuncCode] == 6 || MB_TXBuf[FuncCode] == 16)
 8000bbc:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <GetTableAdr+0x64>)
 8000bbe:	785b      	ldrb	r3, [r3, #1]
 8000bc0:	2b03      	cmp	r3, #3
 8000bc2:	d007      	beq.n	8000bd4 <GetTableAdr+0x54>
 8000bc4:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <GetTableAdr+0x64>)
 8000bc6:	785b      	ldrb	r3, [r3, #1]
 8000bc8:	2b06      	cmp	r3, #6
 8000bca:	d003      	beq.n	8000bd4 <GetTableAdr+0x54>
 8000bcc:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <GetTableAdr+0x64>)
 8000bce:	785b      	ldrb	r3, [r3, #1]
 8000bd0:	2b10      	cmp	r3, #16
 8000bd2:	d102      	bne.n	8000bda <GetTableAdr+0x5a>
	{
		return Reg_40000;
 8000bd4:	f649 4340 	movw	r3, #40000	; 0x9c40
 8000bd8:	e7ff      	b.n	8000bda <GetTableAdr+0x5a>
	}
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	200000a4 	.word	0x200000a4

08000be8 <showPacket>:

void showPacket(uint8_t *packet , uint16_t len)
{
 8000be8:	b5b0      	push	{r4, r5, r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	807b      	strh	r3, [r7, #2]
 8000bf4:	466b      	mov	r3, sp
 8000bf6:	461d      	mov	r5, r3
	uint8_t buf[len];
 8000bf8:	887c      	ldrh	r4, [r7, #2]
 8000bfa:	4623      	mov	r3, r4
 8000bfc:	3b01      	subs	r3, #1
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	b2a0      	uxth	r0, r4
 8000c02:	f04f 0100 	mov.w	r1, #0
 8000c06:	f04f 0200 	mov.w	r2, #0
 8000c0a:	f04f 0300 	mov.w	r3, #0
 8000c0e:	00cb      	lsls	r3, r1, #3
 8000c10:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000c14:	00c2      	lsls	r2, r0, #3
 8000c16:	b2a0      	uxth	r0, r4
 8000c18:	f04f 0100 	mov.w	r1, #0
 8000c1c:	f04f 0200 	mov.w	r2, #0
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	00cb      	lsls	r3, r1, #3
 8000c26:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000c2a:	00c2      	lsls	r2, r0, #3
 8000c2c:	4623      	mov	r3, r4
 8000c2e:	3307      	adds	r3, #7
 8000c30:	08db      	lsrs	r3, r3, #3
 8000c32:	00db      	lsls	r3, r3, #3
 8000c34:	ebad 0d03 	sub.w	sp, sp, r3
 8000c38:	466b      	mov	r3, sp
 8000c3a:	3300      	adds	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]

	memcpy(buf,packet,len);
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	887a      	ldrh	r2, [r7, #2]
 8000c42:	6879      	ldr	r1, [r7, #4]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f003 f9ef 	bl	8004028 <memcpy>
	RX_Buf_Init();
 8000c4a:	f7ff fd1f 	bl	800068c <RX_Buf_Init>

	int mode = SelectMode(packetHandle.RX_Flag ,packetHandle.TX_Flag);
 8000c4e:	4b22      	ldr	r3, [pc, #136]	; (8000cd8 <showPacket+0xf0>)
 8000c50:	f893 33f0 	ldrb.w	r3, [r3, #1008]	; 0x3f0
 8000c54:	4a20      	ldr	r2, [pc, #128]	; (8000cd8 <showPacket+0xf0>)
 8000c56:	f892 23f1 	ldrb.w	r2, [r2, #1009]	; 0x3f1
 8000c5a:	4611      	mov	r1, r2
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fcfd 	bl	800065c <SelectMode>
 8000c62:	4603      	mov	r3, r0
 8000c64:	60bb      	str	r3, [r7, #8]

	switch(mode)
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d003      	beq.n	8000c74 <showPacket+0x8c>
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	d004      	beq.n	8000c7c <showPacket+0x94>
 8000c72:	e007      	b.n	8000c84 <showPacket+0x9c>
	{
		case RXMODE:
		{
			printf("RX_Packet:");
 8000c74:	4819      	ldr	r0, [pc, #100]	; (8000cdc <showPacket+0xf4>)
 8000c76:	f003 f9ed 	bl	8004054 <iprintf>
			break;
 8000c7a:	e003      	b.n	8000c84 <showPacket+0x9c>
		}
		case TXMODE:
		{
			printf("TX_Packet:");
 8000c7c:	4818      	ldr	r0, [pc, #96]	; (8000ce0 <showPacket+0xf8>)
 8000c7e:	f003 f9e9 	bl	8004054 <iprintf>
			break;
 8000c82:	bf00      	nop
		}
	}

	for (int i = 0; i < len; i++)
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	e019      	b.n	8000cbe <showPacket+0xd6>
	{
		if (buf[i] <= 0x0A)
 8000c8a:	68fa      	ldr	r2, [r7, #12]
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	4413      	add	r3, r2
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b0a      	cmp	r3, #10
 8000c94:	d808      	bhi.n	8000ca8 <showPacket+0xc0>
		{
			printf("0%x ", buf[i]);
 8000c96:	68fa      	ldr	r2, [r7, #12]
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4810      	ldr	r0, [pc, #64]	; (8000ce4 <showPacket+0xfc>)
 8000ca2:	f003 f9d7 	bl	8004054 <iprintf>
 8000ca6:	e007      	b.n	8000cb8 <showPacket+0xd0>
		}
		else
		{
			printf("%x ", buf[i]);
 8000ca8:	68fa      	ldr	r2, [r7, #12]
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	4413      	add	r3, r2
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	480d      	ldr	r0, [pc, #52]	; (8000ce8 <showPacket+0x100>)
 8000cb4:	f003 f9ce 	bl	8004054 <iprintf>
	for (int i = 0; i < len; i++)
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	617b      	str	r3, [r7, #20]
 8000cbe:	887b      	ldrh	r3, [r7, #2]
 8000cc0:	697a      	ldr	r2, [r7, #20]
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	dbe1      	blt.n	8000c8a <showPacket+0xa2>
		}
	}
	printf("\n");
 8000cc6:	200a      	movs	r0, #10
 8000cc8:	f003 f9dc 	bl	8004084 <putchar>
 8000ccc:	46ad      	mov	sp, r5

}
 8000cce:	bf00      	nop
 8000cd0:	3718      	adds	r7, #24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bdb0      	pop	{r4, r5, r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	200004b8 	.word	0x200004b8
 8000cdc:	080050e4 	.word	0x080050e4
 8000ce0:	080050f0 	.word	0x080050f0
 8000ce4:	080050fc 	.word	0x080050fc
 8000ce8:	08005104 	.word	0x08005104

08000cec <Rx_TimerStartStop>:
uint8_t RxTimerFlag = OFF;
volatile uint16_t RxTimerCnt = 0;


void Rx_TimerStartStop()
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
	if(RxTimerFlag)
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <Rx_TimerStartStop+0x20>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d003      	beq.n	8000d00 <Rx_TimerStartStop+0x14>
	{
		HAL_TIM_Base_Start_IT(&htim1);
 8000cf8:	4805      	ldr	r0, [pc, #20]	; (8000d10 <Rx_TimerStartStop+0x24>)
 8000cfa:	f001 fd7f 	bl	80027fc <HAL_TIM_Base_Start_IT>
	else
	{
		HAL_TIM_Base_Stop_IT(&htim1);
	}

}
 8000cfe:	e002      	b.n	8000d06 <Rx_TimerStartStop+0x1a>
		HAL_TIM_Base_Stop_IT(&htim1);
 8000d00:	4803      	ldr	r0, [pc, #12]	; (8000d10 <Rx_TimerStartStop+0x24>)
 8000d02:	f001 fddd 	bl	80028c0 <HAL_TIM_Base_Stop_IT>
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	200004a8 	.word	0x200004a8
 8000d10:	200008c0 	.word	0x200008c0

08000d14 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)//0.1ms
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  if(htim == &htim1)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4a0c      	ldr	r2, [pc, #48]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d10f      	bne.n	8000d44 <HAL_TIM_PeriodElapsedCallback+0x30>
  {
	  if(RxTimerCnt++ > 600)
 8000d24:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000d26:	881b      	ldrh	r3, [r3, #0]
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	1c5a      	adds	r2, r3, #1
 8000d2c:	b291      	uxth	r1, r2
 8000d2e:	4a09      	ldr	r2, [pc, #36]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000d30:	8011      	strh	r1, [r2, #0]
 8000d32:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000d36:	d905      	bls.n	8000d44 <HAL_TIM_PeriodElapsedCallback+0x30>
	  {
		  RxTimerCnt = 0;
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	801a      	strh	r2, [r3, #0]
		  RxTimerFlag = OFF;
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]

	  }
  }

}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	200008c0 	.word	0x200008c0
 8000d54:	200004aa 	.word	0x200004aa
 8000d58:	200004a8 	.word	0x200004a8

08000d5c <GetCoil_Index>:


#include "coil.h"

uint16_t GetCoil_Index(uint16_t bit)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	81fb      	strh	r3, [r7, #14]

	while (bit >= i* 8)
 8000d6a:	e002      	b.n	8000d72 <GetCoil_Index+0x16>
	{
		i++;
 8000d6c:	89fb      	ldrh	r3, [r7, #14]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	81fb      	strh	r3, [r7, #14]
	while (bit >= i* 8)
 8000d72:	88fa      	ldrh	r2, [r7, #6]
 8000d74:	89fb      	ldrh	r3, [r7, #14]
 8000d76:	00db      	lsls	r3, r3, #3
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	daf7      	bge.n	8000d6c <GetCoil_Index+0x10>
	}

	return i - 1;
 8000d7c:	89fb      	ldrh	r3, [r7, #14]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	b29b      	uxth	r3, r3
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3714      	adds	r7, #20
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <ReverseBitOrder>:

uint8_t ReverseBitOrder(uint8_t ucOriData)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	b085      	sub	sp, #20
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	4603      	mov	r3, r0
 8000d96:	71fb      	strb	r3, [r7, #7]
	uint8_t ucData, ucCnt, ucTemp;

	for (ucCnt = 0, ucData = 0; ucCnt < 8; ucCnt++)
 8000d98:	2300      	movs	r3, #0
 8000d9a:	73bb      	strb	r3, [r7, #14]
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	73fb      	strb	r3, [r7, #15]
 8000da0:	e012      	b.n	8000dc8 <ReverseBitOrder+0x3a>
	{
		ucTemp = (ucOriData >> ucCnt) & 0x01;
 8000da2:	79fa      	ldrb	r2, [r7, #7]
 8000da4:	7bbb      	ldrb	r3, [r7, #14]
 8000da6:	fa42 f303 	asr.w	r3, r2, r3
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	f003 0301 	and.w	r3, r3, #1
 8000db0:	737b      	strb	r3, [r7, #13]

		ucData = (ucData << 1) | ucTemp;
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	b25a      	sxtb	r2, r3
 8000db8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	b25b      	sxtb	r3, r3
 8000dc0:	73fb      	strb	r3, [r7, #15]
	for (ucCnt = 0, ucData = 0; ucCnt < 8; ucCnt++)
 8000dc2:	7bbb      	ldrb	r3, [r7, #14]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	73bb      	strb	r3, [r7, #14]
 8000dc8:	7bbb      	ldrb	r3, [r7, #14]
 8000dca:	2b07      	cmp	r3, #7
 8000dcc:	d9e9      	bls.n	8000da2 <ReverseBitOrder+0x14>
	}
	return ucData;
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3714      	adds	r7, #20
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <DataLen>:

uint16_t DataLen(uint16_t adr , uint16_t len)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	460a      	mov	r2, r1
 8000de6:	80fb      	strh	r3, [r7, #6]
 8000de8:	4613      	mov	r3, r2
 8000dea:	80bb      	strh	r3, [r7, #4]
	uint16_t bitCnt = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	81bb      	strh	r3, [r7, #12]
	uint16_t endtBit = len;
 8000df0:	88bb      	ldrh	r3, [r7, #4]
 8000df2:	817b      	strh	r3, [r7, #10]
	uint16_t i = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	81fb      	strh	r3, [r7, #14]

	if (len <= 8)
 8000df8:	88bb      	ldrh	r3, [r7, #4]
 8000dfa:	2b08      	cmp	r3, #8
 8000dfc:	d801      	bhi.n	8000e02 <DataLen+0x26>
	{
		return 1;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e00a      	b.n	8000e18 <DataLen+0x3c>
	}
	else
	{
		while (1)
		{
			if (len <= i * 8)
 8000e02:	88ba      	ldrh	r2, [r7, #4]
 8000e04:	89fb      	ldrh	r3, [r7, #14]
 8000e06:	00db      	lsls	r3, r3, #3
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	dd03      	ble.n	8000e14 <DataLen+0x38>
			{
				break;
			}

			i++;
 8000e0c:	89fb      	ldrh	r3, [r7, #14]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	81fb      	strh	r3, [r7, #14]
			if (len <= i * 8)
 8000e12:	e7f6      	b.n	8000e02 <DataLen+0x26>
				break;
 8000e14:	bf00      	nop
		}

		return i;
 8000e16:	89fb      	ldrh	r3, [r7, #14]
	}
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3714      	adds	r7, #20
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <GetCoilData>:

void GetCoilData(uint8_t* txBuf ,uint8_t *coilTable, uint16_t nthBit)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b088      	sub	sp, #32
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	4613      	mov	r3, r2
 8000e30:	80fb      	strh	r3, [r7, #6]
	uint8_t* txBufPtr = txBuf + TxData;
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	3303      	adds	r3, #3
 8000e36:	61fb      	str	r3, [r7, #28]
	uint8_t* headPtr = &coilTable[GetCoil_Index(nthBit)];
 8000e38:	88fb      	ldrh	r3, [r7, #6]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff ff8e 	bl	8000d5c <GetCoil_Index>
 8000e40:	4603      	mov	r3, r0
 8000e42:	461a      	mov	r2, r3
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	4413      	add	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
	uint8_t* nextPtr = headPtr + 1;
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	617b      	str	r3, [r7, #20]
	uint8_t cnt =  txBuf[TxLen];//DataLen(MB_Handle taget.adr , MB_Handle taget.len);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	789b      	ldrb	r3, [r3, #2]
 8000e54:	74bb      	strb	r3, [r7, #18]

	uint8_t	temp = 0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	747b      	strb	r3, [r7, #17]
	uint8_t i = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	74fb      	strb	r3, [r7, #19]

	while (i != cnt)
 8000e5e:	e026      	b.n	8000eae <GetCoilData+0x8a>
	{

		temp = *headPtr << nthBit | *nextPtr >> (8 - nthBit);
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	461a      	mov	r2, r3
 8000e66:	88fb      	ldrh	r3, [r7, #6]
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	b25a      	sxtb	r2, r3
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	4619      	mov	r1, r3
 8000e74:	88fb      	ldrh	r3, [r7, #6]
 8000e76:	f1c3 0308 	rsb	r3, r3, #8
 8000e7a:	fa41 f303 	asr.w	r3, r1, r3
 8000e7e:	b25b      	sxtb	r3, r3
 8000e80:	4313      	orrs	r3, r2
 8000e82:	b25b      	sxtb	r3, r3
 8000e84:	747b      	strb	r3, [r7, #17]
		*txBufPtr = ReverseBitOrder(temp);
 8000e86:	7c7b      	ldrb	r3, [r7, #17]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff ff80 	bl	8000d8e <ReverseBitOrder>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	461a      	mov	r2, r3
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	701a      	strb	r2, [r3, #0]
		txBufPtr++;
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	61fb      	str	r3, [r7, #28]
		headPtr++;
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	61bb      	str	r3, [r7, #24]
		nextPtr++;
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	617b      	str	r3, [r7, #20]
		i++;
 8000ea8:	7cfb      	ldrb	r3, [r7, #19]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	74fb      	strb	r3, [r7, #19]
	while (i != cnt)
 8000eae:	7cfa      	ldrb	r2, [r7, #19]
 8000eb0:	7cbb      	ldrb	r3, [r7, #18]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d1d4      	bne.n	8000e60 <GetCoilData+0x3c>
	}


}
 8000eb6:	bf00      	nop
 8000eb8:	bf00      	nop
 8000eba:	3720      	adds	r7, #32
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart6, (uint8_t *)&ch, 1, 0xFFFF);
 8000ec8:	1d39      	adds	r1, r7, #4
 8000eca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ece:	2201      	movs	r2, #1
 8000ed0:	4803      	ldr	r0, [pc, #12]	; (8000ee0 <__io_putchar+0x20>)
 8000ed2:	f002 f904 	bl	80030de <HAL_UART_Transmit>

  return ch;
 8000ed6:	687b      	ldr	r3, [r7, #4]

}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000908 	.word	0x20000908

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee8:	f000 fc10 	bl	800170c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eec:	f000 f81c 	bl	8000f28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef0:	f000 f95c 	bl	80011ac <MX_GPIO_Init>
  MX_TIM1_Init();
 8000ef4:	f000 f8b6 	bl	8001064 <MX_TIM1_Init>
  MX_USART6_UART_Init();
 8000ef8:	f000 f92e 	bl	8001158 <MX_USART6_UART_Init>
  MX_USART2_UART_Init();
 8000efc:	f000 f902 	bl	8001104 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000f00:	f000 f87c 	bl	8000ffc <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &RX_Data, 1);
 8000f04:	2201      	movs	r2, #1
 8000f06:	4905      	ldr	r1, [pc, #20]	; (8000f1c <main+0x38>)
 8000f08:	4805      	ldr	r0, [pc, #20]	; (8000f20 <main+0x3c>)
 8000f0a:	f002 f97a 	bl	8003202 <HAL_UART_Receive_IT>
  printf("UART2!!\n");
 8000f0e:	4805      	ldr	r0, [pc, #20]	; (8000f24 <main+0x40>)
 8000f10:	f003 f93c 	bl	800418c <puts>
  while (1)
  {


    /* USER CODE END WHILE */
	  MB_Slave();
 8000f14:	f7ff fb7c 	bl	8000610 <MB_Slave>
 8000f18:	e7fc      	b.n	8000f14 <main+0x30>
 8000f1a:	bf00      	nop
 8000f1c:	200004a4 	.word	0x200004a4
 8000f20:	2000094c 	.word	0x2000094c
 8000f24:	08005108 	.word	0x08005108

08000f28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b094      	sub	sp, #80	; 0x50
 8000f2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f2e:	f107 0320 	add.w	r3, r7, #32
 8000f32:	2230      	movs	r2, #48	; 0x30
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f003 f884 	bl	8004044 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f3c:	f107 030c 	add.w	r3, r7, #12
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	4b28      	ldr	r3, [pc, #160]	; (8000ff4 <SystemClock_Config+0xcc>)
 8000f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f54:	4a27      	ldr	r2, [pc, #156]	; (8000ff4 <SystemClock_Config+0xcc>)
 8000f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5c:	4b25      	ldr	r3, [pc, #148]	; (8000ff4 <SystemClock_Config+0xcc>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f68:	2300      	movs	r3, #0
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	4b22      	ldr	r3, [pc, #136]	; (8000ff8 <SystemClock_Config+0xd0>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a21      	ldr	r2, [pc, #132]	; (8000ff8 <SystemClock_Config+0xd0>)
 8000f72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f76:	6013      	str	r3, [r2, #0]
 8000f78:	4b1f      	ldr	r3, [pc, #124]	; (8000ff8 <SystemClock_Config+0xd0>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f84:	2302      	movs	r3, #2
 8000f86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f8c:	2310      	movs	r3, #16
 8000f8e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f90:	2302      	movs	r3, #2
 8000f92:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f94:	2300      	movs	r3, #0
 8000f96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f98:	2310      	movs	r3, #16
 8000f9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f9c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000fa0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000fa2:	2304      	movs	r3, #4
 8000fa4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fa6:	2304      	movs	r3, #4
 8000fa8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000faa:	f107 0320 	add.w	r3, r7, #32
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 ff60 	bl	8001e74 <HAL_RCC_OscConfig>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000fba:	f000 f965 	bl	8001288 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fbe:	230f      	movs	r3, #15
 8000fc0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fd4:	f107 030c 	add.w	r3, r7, #12
 8000fd8:	2102      	movs	r1, #2
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f001 f9c2 	bl	8002364 <HAL_RCC_ClockConfig>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000fe6:	f000 f94f 	bl	8001288 <Error_Handler>
  }
}
 8000fea:	bf00      	nop
 8000fec:	3750      	adds	r7, #80	; 0x50
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40007000 	.word	0x40007000

08000ffc <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001000:	2200      	movs	r2, #0
 8001002:	2100      	movs	r1, #0
 8001004:	2026      	movs	r0, #38	; 0x26
 8001006:	f000 fcce 	bl	80019a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800100a:	2026      	movs	r0, #38	; 0x26
 800100c:	f000 fce7 	bl	80019de <HAL_NVIC_EnableIRQ>
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001010:	2200      	movs	r2, #0
 8001012:	2100      	movs	r1, #0
 8001014:	2047      	movs	r0, #71	; 0x47
 8001016:	f000 fcc6 	bl	80019a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 800101a:	2047      	movs	r0, #71	; 0x47
 800101c:	f000 fcdf 	bl	80019de <HAL_NVIC_EnableIRQ>
  /* TIM1_CC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001020:	2200      	movs	r2, #0
 8001022:	2100      	movs	r1, #0
 8001024:	201b      	movs	r0, #27
 8001026:	f000 fcbe 	bl	80019a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800102a:	201b      	movs	r0, #27
 800102c:	f000 fcd7 	bl	80019de <HAL_NVIC_EnableIRQ>
  /* TIM1_TRG_COM_TIM11_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001030:	2200      	movs	r2, #0
 8001032:	2100      	movs	r1, #0
 8001034:	201a      	movs	r0, #26
 8001036:	f000 fcb6 	bl	80019a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800103a:	201a      	movs	r0, #26
 800103c:	f000 fccf 	bl	80019de <HAL_NVIC_EnableIRQ>
  /* TIM1_UP_TIM10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001040:	2200      	movs	r2, #0
 8001042:	2100      	movs	r1, #0
 8001044:	2019      	movs	r0, #25
 8001046:	f000 fcae 	bl	80019a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800104a:	2019      	movs	r0, #25
 800104c:	f000 fcc7 	bl	80019de <HAL_NVIC_EnableIRQ>
  /* TIM1_BRK_TIM9_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001050:	2200      	movs	r2, #0
 8001052:	2100      	movs	r1, #0
 8001054:	2018      	movs	r0, #24
 8001056:	f000 fca6 	bl	80019a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800105a:	2018      	movs	r0, #24
 800105c:	f000 fcbf 	bl	80019de <HAL_NVIC_EnableIRQ>
}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}

08001064 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800106a:	f107 0308 	add.w	r3, r7, #8
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001078:	463b      	mov	r3, r7
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001080:	4b1e      	ldr	r3, [pc, #120]	; (80010fc <MX_TIM1_Init+0x98>)
 8001082:	4a1f      	ldr	r2, [pc, #124]	; (8001100 <MX_TIM1_Init+0x9c>)
 8001084:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 840-1;
 8001086:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <MX_TIM1_Init+0x98>)
 8001088:	f240 3247 	movw	r2, #839	; 0x347
 800108c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800108e:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <MX_TIM1_Init+0x98>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001094:	4b19      	ldr	r3, [pc, #100]	; (80010fc <MX_TIM1_Init+0x98>)
 8001096:	2263      	movs	r2, #99	; 0x63
 8001098:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800109a:	4b18      	ldr	r3, [pc, #96]	; (80010fc <MX_TIM1_Init+0x98>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010a0:	4b16      	ldr	r3, [pc, #88]	; (80010fc <MX_TIM1_Init+0x98>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a6:	4b15      	ldr	r3, [pc, #84]	; (80010fc <MX_TIM1_Init+0x98>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010ac:	4813      	ldr	r0, [pc, #76]	; (80010fc <MX_TIM1_Init+0x98>)
 80010ae:	f001 fb55 	bl	800275c <HAL_TIM_Base_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80010b8:	f000 f8e6 	bl	8001288 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010c2:	f107 0308 	add.w	r3, r7, #8
 80010c6:	4619      	mov	r1, r3
 80010c8:	480c      	ldr	r0, [pc, #48]	; (80010fc <MX_TIM1_Init+0x98>)
 80010ca:	f001 fd30 	bl	8002b2e <HAL_TIM_ConfigClockSource>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80010d4:	f000 f8d8 	bl	8001288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d8:	2300      	movs	r3, #0
 80010da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010dc:	2300      	movs	r3, #0
 80010de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010e0:	463b      	mov	r3, r7
 80010e2:	4619      	mov	r1, r3
 80010e4:	4805      	ldr	r0, [pc, #20]	; (80010fc <MX_TIM1_Init+0x98>)
 80010e6:	f001 ff2b 	bl	8002f40 <HAL_TIMEx_MasterConfigSynchronization>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80010f0:	f000 f8ca 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80010f4:	bf00      	nop
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	200008c0 	.word	0x200008c0
 8001100:	40010000 	.word	0x40010000

08001104 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001108:	4b11      	ldr	r3, [pc, #68]	; (8001150 <MX_USART2_UART_Init+0x4c>)
 800110a:	4a12      	ldr	r2, [pc, #72]	; (8001154 <MX_USART2_UART_Init+0x50>)
 800110c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800110e:	4b10      	ldr	r3, [pc, #64]	; (8001150 <MX_USART2_UART_Init+0x4c>)
 8001110:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001114:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001116:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <MX_USART2_UART_Init+0x4c>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <MX_USART2_UART_Init+0x4c>)
 800111e:	2200      	movs	r2, #0
 8001120:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001122:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <MX_USART2_UART_Init+0x4c>)
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001128:	4b09      	ldr	r3, [pc, #36]	; (8001150 <MX_USART2_UART_Init+0x4c>)
 800112a:	220c      	movs	r2, #12
 800112c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800112e:	4b08      	ldr	r3, [pc, #32]	; (8001150 <MX_USART2_UART_Init+0x4c>)
 8001130:	2200      	movs	r2, #0
 8001132:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <MX_USART2_UART_Init+0x4c>)
 8001136:	2200      	movs	r2, #0
 8001138:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800113a:	4805      	ldr	r0, [pc, #20]	; (8001150 <MX_USART2_UART_Init+0x4c>)
 800113c:	f001 ff82 	bl	8003044 <HAL_UART_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001146:	f000 f89f 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	2000094c 	.word	0x2000094c
 8001154:	40004400 	.word	0x40004400

08001158 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800115c:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <MX_USART6_UART_Init+0x4c>)
 800115e:	4a12      	ldr	r2, [pc, #72]	; (80011a8 <MX_USART6_UART_Init+0x50>)
 8001160:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <MX_USART6_UART_Init+0x4c>)
 8001164:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001168:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <MX_USART6_UART_Init+0x4c>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <MX_USART6_UART_Init+0x4c>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001176:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <MX_USART6_UART_Init+0x4c>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800117c:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <MX_USART6_UART_Init+0x4c>)
 800117e:	220c      	movs	r2, #12
 8001180:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001182:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <MX_USART6_UART_Init+0x4c>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <MX_USART6_UART_Init+0x4c>)
 800118a:	2200      	movs	r2, #0
 800118c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800118e:	4805      	ldr	r0, [pc, #20]	; (80011a4 <MX_USART6_UART_Init+0x4c>)
 8001190:	f001 ff58 	bl	8003044 <HAL_UART_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800119a:	f000 f875 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000908 	.word	0x20000908
 80011a8:	40011400 	.word	0x40011400

080011ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	; 0x28
 80011b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
 80011c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	4b2d      	ldr	r3, [pc, #180]	; (800127c <MX_GPIO_Init+0xd0>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a2c      	ldr	r2, [pc, #176]	; (800127c <MX_GPIO_Init+0xd0>)
 80011cc:	f043 0304 	orr.w	r3, r3, #4
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b2a      	ldr	r3, [pc, #168]	; (800127c <MX_GPIO_Init+0xd0>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0304 	and.w	r3, r3, #4
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	4b26      	ldr	r3, [pc, #152]	; (800127c <MX_GPIO_Init+0xd0>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a25      	ldr	r2, [pc, #148]	; (800127c <MX_GPIO_Init+0xd0>)
 80011e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b23      	ldr	r3, [pc, #140]	; (800127c <MX_GPIO_Init+0xd0>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	4b1f      	ldr	r3, [pc, #124]	; (800127c <MX_GPIO_Init+0xd0>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a1e      	ldr	r2, [pc, #120]	; (800127c <MX_GPIO_Init+0xd0>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b1c      	ldr	r3, [pc, #112]	; (800127c <MX_GPIO_Init+0xd0>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	4b18      	ldr	r3, [pc, #96]	; (800127c <MX_GPIO_Init+0xd0>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a17      	ldr	r2, [pc, #92]	; (800127c <MX_GPIO_Init+0xd0>)
 8001220:	f043 0302 	orr.w	r3, r3, #2
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <MX_GPIO_Init+0xd0>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001232:	2200      	movs	r2, #0
 8001234:	2120      	movs	r1, #32
 8001236:	4812      	ldr	r0, [pc, #72]	; (8001280 <MX_GPIO_Init+0xd4>)
 8001238:	f000 fe02 	bl	8001e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800123c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001240:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001242:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001246:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	4619      	mov	r1, r3
 8001252:	480c      	ldr	r0, [pc, #48]	; (8001284 <MX_GPIO_Init+0xd8>)
 8001254:	f000 fc70 	bl	8001b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001258:	2320      	movs	r3, #32
 800125a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125c:	2301      	movs	r3, #1
 800125e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001264:	2300      	movs	r3, #0
 8001266:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	4619      	mov	r1, r3
 800126e:	4804      	ldr	r0, [pc, #16]	; (8001280 <MX_GPIO_Init+0xd4>)
 8001270:	f000 fc62 	bl	8001b38 <HAL_GPIO_Init>

}
 8001274:	bf00      	nop
 8001276:	3728      	adds	r7, #40	; 0x28
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40023800 	.word	0x40023800
 8001280:	40020000 	.word	0x40020000
 8001284:	40020800 	.word	0x40020800

08001288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800128c:	b672      	cpsid	i
}
 800128e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001290:	e7fe      	b.n	8001290 <Error_Handler+0x8>
	...

08001294 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <HAL_MspInit+0x4c>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	4a0f      	ldr	r2, [pc, #60]	; (80012e0 <HAL_MspInit+0x4c>)
 80012a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a8:	6453      	str	r3, [r2, #68]	; 0x44
 80012aa:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <HAL_MspInit+0x4c>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	603b      	str	r3, [r7, #0]
 80012ba:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <HAL_MspInit+0x4c>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	4a08      	ldr	r2, [pc, #32]	; (80012e0 <HAL_MspInit+0x4c>)
 80012c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c4:	6413      	str	r3, [r2, #64]	; 0x40
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_MspInit+0x4c>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ce:	603b      	str	r3, [r7, #0]
 80012d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012d2:	2007      	movs	r0, #7
 80012d4:	f000 fb5c 	bl	8001990 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40023800 	.word	0x40023800

080012e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a0b      	ldr	r2, [pc, #44]	; (8001320 <HAL_TIM_Base_MspInit+0x3c>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d10d      	bne.n	8001312 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <HAL_TIM_Base_MspInit+0x40>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	4a09      	ldr	r2, [pc, #36]	; (8001324 <HAL_TIM_Base_MspInit+0x40>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	6453      	str	r3, [r2, #68]	; 0x44
 8001306:	4b07      	ldr	r3, [pc, #28]	; (8001324 <HAL_TIM_Base_MspInit+0x40>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001312:	bf00      	nop
 8001314:	3714      	adds	r7, #20
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	40010000 	.word	0x40010000
 8001324:	40023800 	.word	0x40023800

08001328 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08c      	sub	sp, #48	; 0x30
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 031c 	add.w	r3, r7, #28
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a32      	ldr	r2, [pc, #200]	; (8001410 <HAL_UART_MspInit+0xe8>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d12c      	bne.n	80013a4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	61bb      	str	r3, [r7, #24]
 800134e:	4b31      	ldr	r3, [pc, #196]	; (8001414 <HAL_UART_MspInit+0xec>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	4a30      	ldr	r2, [pc, #192]	; (8001414 <HAL_UART_MspInit+0xec>)
 8001354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001358:	6413      	str	r3, [r2, #64]	; 0x40
 800135a:	4b2e      	ldr	r3, [pc, #184]	; (8001414 <HAL_UART_MspInit+0xec>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001362:	61bb      	str	r3, [r7, #24]
 8001364:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
 800136a:	4b2a      	ldr	r3, [pc, #168]	; (8001414 <HAL_UART_MspInit+0xec>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a29      	ldr	r2, [pc, #164]	; (8001414 <HAL_UART_MspInit+0xec>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b27      	ldr	r3, [pc, #156]	; (8001414 <HAL_UART_MspInit+0xec>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001382:	230c      	movs	r3, #12
 8001384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001386:	2302      	movs	r3, #2
 8001388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138e:	2303      	movs	r3, #3
 8001390:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001392:	2307      	movs	r3, #7
 8001394:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001396:	f107 031c 	add.w	r3, r7, #28
 800139a:	4619      	mov	r1, r3
 800139c:	481e      	ldr	r0, [pc, #120]	; (8001418 <HAL_UART_MspInit+0xf0>)
 800139e:	f000 fbcb 	bl	8001b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80013a2:	e030      	b.n	8001406 <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a1c      	ldr	r2, [pc, #112]	; (800141c <HAL_UART_MspInit+0xf4>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d12b      	bne.n	8001406 <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	4b18      	ldr	r3, [pc, #96]	; (8001414 <HAL_UART_MspInit+0xec>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b6:	4a17      	ldr	r2, [pc, #92]	; (8001414 <HAL_UART_MspInit+0xec>)
 80013b8:	f043 0320 	orr.w	r3, r3, #32
 80013bc:	6453      	str	r3, [r2, #68]	; 0x44
 80013be:	4b15      	ldr	r3, [pc, #84]	; (8001414 <HAL_UART_MspInit+0xec>)
 80013c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c2:	f003 0320 	and.w	r3, r3, #32
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <HAL_UART_MspInit+0xec>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a10      	ldr	r2, [pc, #64]	; (8001414 <HAL_UART_MspInit+0xec>)
 80013d4:	f043 0304 	orr.w	r3, r3, #4
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <HAL_UART_MspInit+0xec>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013e6:	23c0      	movs	r3, #192	; 0xc0
 80013e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ea:	2302      	movs	r3, #2
 80013ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f2:	2303      	movs	r3, #3
 80013f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80013f6:	2308      	movs	r3, #8
 80013f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013fa:	f107 031c 	add.w	r3, r7, #28
 80013fe:	4619      	mov	r1, r3
 8001400:	4807      	ldr	r0, [pc, #28]	; (8001420 <HAL_UART_MspInit+0xf8>)
 8001402:	f000 fb99 	bl	8001b38 <HAL_GPIO_Init>
}
 8001406:	bf00      	nop
 8001408:	3730      	adds	r7, #48	; 0x30
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40004400 	.word	0x40004400
 8001414:	40023800 	.word	0x40023800
 8001418:	40020000 	.word	0x40020000
 800141c:	40011400 	.word	0x40011400
 8001420:	40020800 	.word	0x40020800

08001424 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001428:	e7fe      	b.n	8001428 <NMI_Handler+0x4>

0800142a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800142e:	e7fe      	b.n	800142e <HardFault_Handler+0x4>

08001430 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <MemManage_Handler+0x4>

08001436 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800143a:	e7fe      	b.n	800143a <BusFault_Handler+0x4>

0800143c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001440:	e7fe      	b.n	8001440 <UsageFault_Handler+0x4>

08001442 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001470:	f000 f99e 	bl	80017b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}

08001478 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800147c:	4802      	ldr	r0, [pc, #8]	; (8001488 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800147e:	f001 fa4e 	bl	800291e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	200008c0 	.word	0x200008c0

0800148c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001490:	4802      	ldr	r0, [pc, #8]	; (800149c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001492:	f001 fa44 	bl	800291e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200008c0 	.word	0x200008c0

080014a0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014a4:	4802      	ldr	r0, [pc, #8]	; (80014b0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80014a6:	f001 fa3a 	bl	800291e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	200008c0 	.word	0x200008c0

080014b4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014b8:	4802      	ldr	r0, [pc, #8]	; (80014c4 <TIM1_CC_IRQHandler+0x10>)
 80014ba:	f001 fa30 	bl	800291e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	200008c0 	.word	0x200008c0

080014c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014cc:	4802      	ldr	r0, [pc, #8]	; (80014d8 <USART2_IRQHandler+0x10>)
 80014ce:	f001 fec9 	bl	8003264 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	2000094c 	.word	0x2000094c

080014dc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80014e0:	4802      	ldr	r0, [pc, #8]	; (80014ec <USART6_IRQHandler+0x10>)
 80014e2:	f001 febf 	bl	8003264 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000908 	.word	0x20000908

080014f0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	e00a      	b.n	8001518 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001502:	f3af 8000 	nop.w
 8001506:	4601      	mov	r1, r0
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	1c5a      	adds	r2, r3, #1
 800150c:	60ba      	str	r2, [r7, #8]
 800150e:	b2ca      	uxtb	r2, r1
 8001510:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	3301      	adds	r3, #1
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	697a      	ldr	r2, [r7, #20]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	429a      	cmp	r2, r3
 800151e:	dbf0      	blt.n	8001502 <_read+0x12>
	}

return len;
 8001520:	687b      	ldr	r3, [r7, #4]
}
 8001522:	4618      	mov	r0, r3
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b086      	sub	sp, #24
 800152e:	af00      	add	r7, sp, #0
 8001530:	60f8      	str	r0, [r7, #12]
 8001532:	60b9      	str	r1, [r7, #8]
 8001534:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
 800153a:	e009      	b.n	8001550 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	1c5a      	adds	r2, r3, #1
 8001540:	60ba      	str	r2, [r7, #8]
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fcbb 	bl	8000ec0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	3301      	adds	r3, #1
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	697a      	ldr	r2, [r7, #20]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	429a      	cmp	r2, r3
 8001556:	dbf1      	blt.n	800153c <_write+0x12>
	}
	return len;
 8001558:	687b      	ldr	r3, [r7, #4]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <_close>:

int _close(int file)
{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
	return -1;
 800156a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800156e:	4618      	mov	r0, r3
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800157a:	b480      	push	{r7}
 800157c:	b083      	sub	sp, #12
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
 8001582:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800158a:	605a      	str	r2, [r3, #4]
	return 0;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <_isatty>:

int _isatty(int file)
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
	return 1;
 80015a2:	2301      	movs	r3, #1
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
	return 0;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
	...

080015cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015d4:	4a14      	ldr	r2, [pc, #80]	; (8001628 <_sbrk+0x5c>)
 80015d6:	4b15      	ldr	r3, [pc, #84]	; (800162c <_sbrk+0x60>)
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015e0:	4b13      	ldr	r3, [pc, #76]	; (8001630 <_sbrk+0x64>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d102      	bne.n	80015ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015e8:	4b11      	ldr	r3, [pc, #68]	; (8001630 <_sbrk+0x64>)
 80015ea:	4a12      	ldr	r2, [pc, #72]	; (8001634 <_sbrk+0x68>)
 80015ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <_sbrk+0x64>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4413      	add	r3, r2
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d207      	bcs.n	800160c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015fc:	f002 fcea 	bl	8003fd4 <__errno>
 8001600:	4603      	mov	r3, r0
 8001602:	220c      	movs	r2, #12
 8001604:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001606:	f04f 33ff 	mov.w	r3, #4294967295
 800160a:	e009      	b.n	8001620 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800160c:	4b08      	ldr	r3, [pc, #32]	; (8001630 <_sbrk+0x64>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001612:	4b07      	ldr	r3, [pc, #28]	; (8001630 <_sbrk+0x64>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4413      	add	r3, r2
 800161a:	4a05      	ldr	r2, [pc, #20]	; (8001630 <_sbrk+0x64>)
 800161c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800161e:	68fb      	ldr	r3, [r7, #12]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3718      	adds	r7, #24
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20020000 	.word	0x20020000
 800162c:	00000400 	.word	0x00000400
 8001630:	200004ac 	.word	0x200004ac
 8001634:	200009a8 	.word	0x200009a8

08001638 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <SystemInit+0x20>)
 800163e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001642:	4a05      	ldr	r2, [pc, #20]	; (8001658 <SystemInit+0x20>)
 8001644:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001648:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <HAL_UART_RxCpltCallback>:
extern uint8_t RxTimerFlag;

extern UART_HandleTypeDef huart2;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
	if(huart == &huart2) // Modbus Slave TX
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4a0f      	ldr	r2, [pc, #60]	; (80016a4 <HAL_UART_RxCpltCallback+0x48>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d117      	bne.n	800169c <HAL_UART_RxCpltCallback+0x40>
	{
		RxTimerFlag = ON;
 800166c:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <HAL_UART_RxCpltCallback+0x4c>)
 800166e:	2201      	movs	r2, #1
 8001670:	701a      	strb	r2, [r3, #0]

		if(RxTimerFlag)
 8001672:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <HAL_UART_RxCpltCallback+0x4c>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d00b      	beq.n	8001692 <HAL_UART_RxCpltCallback+0x36>
		{
			MB_RxBuf[RX_DataCnt++] = RX_Data;
 800167a:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <HAL_UART_RxCpltCallback+0x50>)
 800167c:	881b      	ldrh	r3, [r3, #0]
 800167e:	b29b      	uxth	r3, r3
 8001680:	1c5a      	adds	r2, r3, #1
 8001682:	b291      	uxth	r1, r2
 8001684:	4a09      	ldr	r2, [pc, #36]	; (80016ac <HAL_UART_RxCpltCallback+0x50>)
 8001686:	8011      	strh	r1, [r2, #0]
 8001688:	461a      	mov	r2, r3
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <HAL_UART_RxCpltCallback+0x54>)
 800168c:	7819      	ldrb	r1, [r3, #0]
 800168e:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <HAL_UART_RxCpltCallback+0x58>)
 8001690:	5499      	strb	r1, [r3, r2]
		}

		HAL_UART_Receive_IT(&huart2, &RX_Data, 1);
 8001692:	2201      	movs	r2, #1
 8001694:	4906      	ldr	r1, [pc, #24]	; (80016b0 <HAL_UART_RxCpltCallback+0x54>)
 8001696:	4803      	ldr	r0, [pc, #12]	; (80016a4 <HAL_UART_RxCpltCallback+0x48>)
 8001698:	f001 fdb3 	bl	8003202 <HAL_UART_Receive_IT>
	}

}
 800169c:	bf00      	nop
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	2000094c 	.word	0x2000094c
 80016a8:	200004a8 	.word	0x200004a8
 80016ac:	2000008c 	.word	0x2000008c
 80016b0:	200004a4 	.word	0x200004a4
 80016b4:	20000090 	.word	0x20000090

080016b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016bc:	480d      	ldr	r0, [pc, #52]	; (80016f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016be:	490e      	ldr	r1, [pc, #56]	; (80016f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016c0:	4a0e      	ldr	r2, [pc, #56]	; (80016fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016c4:	e002      	b.n	80016cc <LoopCopyDataInit>

080016c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ca:	3304      	adds	r3, #4

080016cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d0:	d3f9      	bcc.n	80016c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016d2:	4a0b      	ldr	r2, [pc, #44]	; (8001700 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016d4:	4c0b      	ldr	r4, [pc, #44]	; (8001704 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d8:	e001      	b.n	80016de <LoopFillZerobss>

080016da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016dc:	3204      	adds	r2, #4

080016de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e0:	d3fb      	bcc.n	80016da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016e2:	f7ff ffa9 	bl	8001638 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016e6:	f002 fc7b 	bl	8003fe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ea:	f7ff fbfb 	bl	8000ee4 <main>
  bx  lr    
 80016ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016f8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80016fc:	08005584 	.word	0x08005584
  ldr r2, =_sbss
 8001700:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001704:	200009a4 	.word	0x200009a4

08001708 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001708:	e7fe      	b.n	8001708 <ADC_IRQHandler>
	...

0800170c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001710:	4b0e      	ldr	r3, [pc, #56]	; (800174c <HAL_Init+0x40>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a0d      	ldr	r2, [pc, #52]	; (800174c <HAL_Init+0x40>)
 8001716:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800171a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800171c:	4b0b      	ldr	r3, [pc, #44]	; (800174c <HAL_Init+0x40>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a0a      	ldr	r2, [pc, #40]	; (800174c <HAL_Init+0x40>)
 8001722:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001726:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <HAL_Init+0x40>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a07      	ldr	r2, [pc, #28]	; (800174c <HAL_Init+0x40>)
 800172e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001732:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001734:	2003      	movs	r0, #3
 8001736:	f000 f92b 	bl	8001990 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800173a:	2000      	movs	r0, #0
 800173c:	f000 f808 	bl	8001750 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001740:	f7ff fda8 	bl	8001294 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40023c00 	.word	0x40023c00

08001750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001758:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <HAL_InitTick+0x54>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <HAL_InitTick+0x58>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	4619      	mov	r1, r3
 8001762:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001766:	fbb3 f3f1 	udiv	r3, r3, r1
 800176a:	fbb2 f3f3 	udiv	r3, r2, r3
 800176e:	4618      	mov	r0, r3
 8001770:	f000 f943 	bl	80019fa <HAL_SYSTICK_Config>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e00e      	b.n	800179c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b0f      	cmp	r3, #15
 8001782:	d80a      	bhi.n	800179a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001784:	2200      	movs	r2, #0
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	f04f 30ff 	mov.w	r0, #4294967295
 800178c:	f000 f90b 	bl	80019a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001790:	4a06      	ldr	r2, [pc, #24]	; (80017ac <HAL_InitTick+0x5c>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001796:	2300      	movs	r3, #0
 8001798:	e000      	b.n	800179c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
}
 800179c:	4618      	mov	r0, r3
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000000 	.word	0x20000000
 80017a8:	20000008 	.word	0x20000008
 80017ac:	20000004 	.word	0x20000004

080017b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <HAL_IncTick+0x20>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_IncTick+0x24>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4413      	add	r3, r2
 80017c0:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <HAL_IncTick+0x24>)
 80017c2:	6013      	str	r3, [r2, #0]
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	20000008 	.word	0x20000008
 80017d4:	20000990 	.word	0x20000990

080017d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return uwTick;
 80017dc:	4b03      	ldr	r3, [pc, #12]	; (80017ec <HAL_GetTick+0x14>)
 80017de:	681b      	ldr	r3, [r3, #0]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	20000990 	.word	0x20000990

080017f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001800:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <__NVIC_SetPriorityGrouping+0x44>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001806:	68ba      	ldr	r2, [r7, #8]
 8001808:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800180c:	4013      	ands	r3, r2
 800180e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001818:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800181c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001822:	4a04      	ldr	r2, [pc, #16]	; (8001834 <__NVIC_SetPriorityGrouping+0x44>)
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	60d3      	str	r3, [r2, #12]
}
 8001828:	bf00      	nop
 800182a:	3714      	adds	r7, #20
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800183c:	4b04      	ldr	r3, [pc, #16]	; (8001850 <__NVIC_GetPriorityGrouping+0x18>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	0a1b      	lsrs	r3, r3, #8
 8001842:	f003 0307 	and.w	r3, r3, #7
}
 8001846:	4618      	mov	r0, r3
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001862:	2b00      	cmp	r3, #0
 8001864:	db0b      	blt.n	800187e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	f003 021f 	and.w	r2, r3, #31
 800186c:	4907      	ldr	r1, [pc, #28]	; (800188c <__NVIC_EnableIRQ+0x38>)
 800186e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001872:	095b      	lsrs	r3, r3, #5
 8001874:	2001      	movs	r0, #1
 8001876:	fa00 f202 	lsl.w	r2, r0, r2
 800187a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	e000e100 	.word	0xe000e100

08001890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	6039      	str	r1, [r7, #0]
 800189a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800189c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	db0a      	blt.n	80018ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	490c      	ldr	r1, [pc, #48]	; (80018dc <__NVIC_SetPriority+0x4c>)
 80018aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ae:	0112      	lsls	r2, r2, #4
 80018b0:	b2d2      	uxtb	r2, r2
 80018b2:	440b      	add	r3, r1
 80018b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b8:	e00a      	b.n	80018d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	4908      	ldr	r1, [pc, #32]	; (80018e0 <__NVIC_SetPriority+0x50>)
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	f003 030f 	and.w	r3, r3, #15
 80018c6:	3b04      	subs	r3, #4
 80018c8:	0112      	lsls	r2, r2, #4
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	440b      	add	r3, r1
 80018ce:	761a      	strb	r2, [r3, #24]
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	e000e100 	.word	0xe000e100
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b089      	sub	sp, #36	; 0x24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f1c3 0307 	rsb	r3, r3, #7
 80018fe:	2b04      	cmp	r3, #4
 8001900:	bf28      	it	cs
 8001902:	2304      	movcs	r3, #4
 8001904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3304      	adds	r3, #4
 800190a:	2b06      	cmp	r3, #6
 800190c:	d902      	bls.n	8001914 <NVIC_EncodePriority+0x30>
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	3b03      	subs	r3, #3
 8001912:	e000      	b.n	8001916 <NVIC_EncodePriority+0x32>
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001918:	f04f 32ff 	mov.w	r2, #4294967295
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43da      	mvns	r2, r3
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	401a      	ands	r2, r3
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800192c:	f04f 31ff 	mov.w	r1, #4294967295
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	fa01 f303 	lsl.w	r3, r1, r3
 8001936:	43d9      	mvns	r1, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800193c:	4313      	orrs	r3, r2
         );
}
 800193e:	4618      	mov	r0, r3
 8001940:	3724      	adds	r7, #36	; 0x24
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
	...

0800194c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3b01      	subs	r3, #1
 8001958:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800195c:	d301      	bcc.n	8001962 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800195e:	2301      	movs	r3, #1
 8001960:	e00f      	b.n	8001982 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001962:	4a0a      	ldr	r2, [pc, #40]	; (800198c <SysTick_Config+0x40>)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3b01      	subs	r3, #1
 8001968:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800196a:	210f      	movs	r1, #15
 800196c:	f04f 30ff 	mov.w	r0, #4294967295
 8001970:	f7ff ff8e 	bl	8001890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001974:	4b05      	ldr	r3, [pc, #20]	; (800198c <SysTick_Config+0x40>)
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800197a:	4b04      	ldr	r3, [pc, #16]	; (800198c <SysTick_Config+0x40>)
 800197c:	2207      	movs	r2, #7
 800197e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	e000e010 	.word	0xe000e010

08001990 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f7ff ff29 	bl	80017f0 <__NVIC_SetPriorityGrouping>
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b086      	sub	sp, #24
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	4603      	mov	r3, r0
 80019ae:	60b9      	str	r1, [r7, #8]
 80019b0:	607a      	str	r2, [r7, #4]
 80019b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019b8:	f7ff ff3e 	bl	8001838 <__NVIC_GetPriorityGrouping>
 80019bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	68b9      	ldr	r1, [r7, #8]
 80019c2:	6978      	ldr	r0, [r7, #20]
 80019c4:	f7ff ff8e 	bl	80018e4 <NVIC_EncodePriority>
 80019c8:	4602      	mov	r2, r0
 80019ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ce:	4611      	mov	r1, r2
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff5d 	bl	8001890 <__NVIC_SetPriority>
}
 80019d6:	bf00      	nop
 80019d8:	3718      	adds	r7, #24
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	4603      	mov	r3, r0
 80019e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff ff31 	bl	8001854 <__NVIC_EnableIRQ>
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff ffa2 	bl	800194c <SysTick_Config>
 8001a08:	4603      	mov	r3, r0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b084      	sub	sp, #16
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a20:	f7ff feda 	bl	80017d8 <HAL_GetTick>
 8001a24:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d008      	beq.n	8001a44 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2280      	movs	r2, #128	; 0x80
 8001a36:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e052      	b.n	8001aea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 0216 	bic.w	r2, r2, #22
 8001a52:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	695a      	ldr	r2, [r3, #20]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a62:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d103      	bne.n	8001a74 <HAL_DMA_Abort+0x62>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d007      	beq.n	8001a84 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f022 0208 	bic.w	r2, r2, #8
 8001a82:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 0201 	bic.w	r2, r2, #1
 8001a92:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a94:	e013      	b.n	8001abe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a96:	f7ff fe9f 	bl	80017d8 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b05      	cmp	r3, #5
 8001aa2:	d90c      	bls.n	8001abe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2220      	movs	r2, #32
 8001aa8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2203      	movs	r2, #3
 8001aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e015      	b.n	8001aea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1e4      	bne.n	8001a96 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad0:	223f      	movs	r2, #63	; 0x3f
 8001ad2:	409a      	lsls	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001af2:	b480      	push	{r7}
 8001af4:	b083      	sub	sp, #12
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d004      	beq.n	8001b10 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2280      	movs	r2, #128	; 0x80
 8001b0a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e00c      	b.n	8001b2a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2205      	movs	r2, #5
 8001b14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 0201 	bic.w	r2, r2, #1
 8001b26:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
	...

08001b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b089      	sub	sp, #36	; 0x24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b42:	2300      	movs	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
 8001b52:	e159      	b.n	8001e08 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b54:	2201      	movs	r2, #1
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	697a      	ldr	r2, [r7, #20]
 8001b64:	4013      	ands	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	f040 8148 	bne.w	8001e02 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f003 0303 	and.w	r3, r3, #3
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d005      	beq.n	8001b8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d130      	bne.n	8001bec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	2203      	movs	r2, #3
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	68da      	ldr	r2, [r3, #12]
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	091b      	lsrs	r3, r3, #4
 8001bd6:	f003 0201 	and.w	r2, r3, #1
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 0303 	and.w	r3, r3, #3
 8001bf4:	2b03      	cmp	r3, #3
 8001bf6:	d017      	beq.n	8001c28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	2203      	movs	r2, #3
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 0303 	and.w	r3, r3, #3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d123      	bne.n	8001c7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	08da      	lsrs	r2, r3, #3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3208      	adds	r2, #8
 8001c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	220f      	movs	r2, #15
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	43db      	mvns	r3, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4013      	ands	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	691a      	ldr	r2, [r3, #16]
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	08da      	lsrs	r2, r3, #3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	3208      	adds	r2, #8
 8001c76:	69b9      	ldr	r1, [r7, #24]
 8001c78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	2203      	movs	r2, #3
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4013      	ands	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 0203 	and.w	r2, r3, #3
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f000 80a2 	beq.w	8001e02 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	4b57      	ldr	r3, [pc, #348]	; (8001e20 <HAL_GPIO_Init+0x2e8>)
 8001cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc6:	4a56      	ldr	r2, [pc, #344]	; (8001e20 <HAL_GPIO_Init+0x2e8>)
 8001cc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cce:	4b54      	ldr	r3, [pc, #336]	; (8001e20 <HAL_GPIO_Init+0x2e8>)
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cda:	4a52      	ldr	r2, [pc, #328]	; (8001e24 <HAL_GPIO_Init+0x2ec>)
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	089b      	lsrs	r3, r3, #2
 8001ce0:	3302      	adds	r3, #2
 8001ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	f003 0303 	and.w	r3, r3, #3
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	220f      	movs	r2, #15
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a49      	ldr	r2, [pc, #292]	; (8001e28 <HAL_GPIO_Init+0x2f0>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d019      	beq.n	8001d3a <HAL_GPIO_Init+0x202>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a48      	ldr	r2, [pc, #288]	; (8001e2c <HAL_GPIO_Init+0x2f4>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d013      	beq.n	8001d36 <HAL_GPIO_Init+0x1fe>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a47      	ldr	r2, [pc, #284]	; (8001e30 <HAL_GPIO_Init+0x2f8>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d00d      	beq.n	8001d32 <HAL_GPIO_Init+0x1fa>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a46      	ldr	r2, [pc, #280]	; (8001e34 <HAL_GPIO_Init+0x2fc>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d007      	beq.n	8001d2e <HAL_GPIO_Init+0x1f6>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a45      	ldr	r2, [pc, #276]	; (8001e38 <HAL_GPIO_Init+0x300>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d101      	bne.n	8001d2a <HAL_GPIO_Init+0x1f2>
 8001d26:	2304      	movs	r3, #4
 8001d28:	e008      	b.n	8001d3c <HAL_GPIO_Init+0x204>
 8001d2a:	2307      	movs	r3, #7
 8001d2c:	e006      	b.n	8001d3c <HAL_GPIO_Init+0x204>
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e004      	b.n	8001d3c <HAL_GPIO_Init+0x204>
 8001d32:	2302      	movs	r3, #2
 8001d34:	e002      	b.n	8001d3c <HAL_GPIO_Init+0x204>
 8001d36:	2301      	movs	r3, #1
 8001d38:	e000      	b.n	8001d3c <HAL_GPIO_Init+0x204>
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	69fa      	ldr	r2, [r7, #28]
 8001d3e:	f002 0203 	and.w	r2, r2, #3
 8001d42:	0092      	lsls	r2, r2, #2
 8001d44:	4093      	lsls	r3, r2
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d4c:	4935      	ldr	r1, [pc, #212]	; (8001e24 <HAL_GPIO_Init+0x2ec>)
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	089b      	lsrs	r3, r3, #2
 8001d52:	3302      	adds	r3, #2
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d5a:	4b38      	ldr	r3, [pc, #224]	; (8001e3c <HAL_GPIO_Init+0x304>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	43db      	mvns	r3, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4013      	ands	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d7e:	4a2f      	ldr	r2, [pc, #188]	; (8001e3c <HAL_GPIO_Init+0x304>)
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d84:	4b2d      	ldr	r3, [pc, #180]	; (8001e3c <HAL_GPIO_Init+0x304>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4013      	ands	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d003      	beq.n	8001da8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001da8:	4a24      	ldr	r2, [pc, #144]	; (8001e3c <HAL_GPIO_Init+0x304>)
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dae:	4b23      	ldr	r3, [pc, #140]	; (8001e3c <HAL_GPIO_Init+0x304>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	43db      	mvns	r3, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dd2:	4a1a      	ldr	r2, [pc, #104]	; (8001e3c <HAL_GPIO_Init+0x304>)
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dd8:	4b18      	ldr	r3, [pc, #96]	; (8001e3c <HAL_GPIO_Init+0x304>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	43db      	mvns	r3, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4013      	ands	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d003      	beq.n	8001dfc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dfc:	4a0f      	ldr	r2, [pc, #60]	; (8001e3c <HAL_GPIO_Init+0x304>)
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3301      	adds	r3, #1
 8001e06:	61fb      	str	r3, [r7, #28]
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	2b0f      	cmp	r3, #15
 8001e0c:	f67f aea2 	bls.w	8001b54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e10:	bf00      	nop
 8001e12:	bf00      	nop
 8001e14:	3724      	adds	r7, #36	; 0x24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	40023800 	.word	0x40023800
 8001e24:	40013800 	.word	0x40013800
 8001e28:	40020000 	.word	0x40020000
 8001e2c:	40020400 	.word	0x40020400
 8001e30:	40020800 	.word	0x40020800
 8001e34:	40020c00 	.word	0x40020c00
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	40013c00 	.word	0x40013c00

08001e40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	807b      	strh	r3, [r7, #2]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e50:	787b      	ldrb	r3, [r7, #1]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e56:	887a      	ldrh	r2, [r7, #2]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e5c:	e003      	b.n	8001e66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e5e:	887b      	ldrh	r3, [r7, #2]
 8001e60:	041a      	lsls	r2, r3, #16
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	619a      	str	r2, [r3, #24]
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
	...

08001e74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e264      	b.n	8002350 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d075      	beq.n	8001f7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e92:	4ba3      	ldr	r3, [pc, #652]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 030c 	and.w	r3, r3, #12
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	d00c      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e9e:	4ba0      	ldr	r3, [pc, #640]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ea6:	2b08      	cmp	r3, #8
 8001ea8:	d112      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eaa:	4b9d      	ldr	r3, [pc, #628]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eb6:	d10b      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb8:	4b99      	ldr	r3, [pc, #612]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d05b      	beq.n	8001f7c <HAL_RCC_OscConfig+0x108>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d157      	bne.n	8001f7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e23f      	b.n	8002350 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ed8:	d106      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x74>
 8001eda:	4b91      	ldr	r3, [pc, #580]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a90      	ldr	r2, [pc, #576]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8001ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	e01d      	b.n	8001f24 <HAL_RCC_OscConfig+0xb0>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ef0:	d10c      	bne.n	8001f0c <HAL_RCC_OscConfig+0x98>
 8001ef2:	4b8b      	ldr	r3, [pc, #556]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a8a      	ldr	r2, [pc, #552]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8001ef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	4b88      	ldr	r3, [pc, #544]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a87      	ldr	r2, [pc, #540]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8001f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	e00b      	b.n	8001f24 <HAL_RCC_OscConfig+0xb0>
 8001f0c:	4b84      	ldr	r3, [pc, #528]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a83      	ldr	r2, [pc, #524]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8001f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f16:	6013      	str	r3, [r2, #0]
 8001f18:	4b81      	ldr	r3, [pc, #516]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a80      	ldr	r2, [pc, #512]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8001f1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d013      	beq.n	8001f54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2c:	f7ff fc54 	bl	80017d8 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f34:	f7ff fc50 	bl	80017d8 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b64      	cmp	r3, #100	; 0x64
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e204      	b.n	8002350 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f46:	4b76      	ldr	r3, [pc, #472]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0f0      	beq.n	8001f34 <HAL_RCC_OscConfig+0xc0>
 8001f52:	e014      	b.n	8001f7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f54:	f7ff fc40 	bl	80017d8 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f5c:	f7ff fc3c 	bl	80017d8 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b64      	cmp	r3, #100	; 0x64
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e1f0      	b.n	8002350 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f6e:	4b6c      	ldr	r3, [pc, #432]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f0      	bne.n	8001f5c <HAL_RCC_OscConfig+0xe8>
 8001f7a:	e000      	b.n	8001f7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d063      	beq.n	8002052 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f8a:	4b65      	ldr	r3, [pc, #404]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 030c 	and.w	r3, r3, #12
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00b      	beq.n	8001fae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f96:	4b62      	ldr	r3, [pc, #392]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f9e:	2b08      	cmp	r3, #8
 8001fa0:	d11c      	bne.n	8001fdc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fa2:	4b5f      	ldr	r3, [pc, #380]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d116      	bne.n	8001fdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fae:	4b5c      	ldr	r3, [pc, #368]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d005      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x152>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d001      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e1c4      	b.n	8002350 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc6:	4b56      	ldr	r3, [pc, #344]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	4952      	ldr	r1, [pc, #328]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fda:	e03a      	b.n	8002052 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d020      	beq.n	8002026 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fe4:	4b4f      	ldr	r3, [pc, #316]	; (8002124 <HAL_RCC_OscConfig+0x2b0>)
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fea:	f7ff fbf5 	bl	80017d8 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ff2:	f7ff fbf1 	bl	80017d8 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e1a5      	b.n	8002350 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002004:	4b46      	ldr	r3, [pc, #280]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0f0      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002010:	4b43      	ldr	r3, [pc, #268]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	4940      	ldr	r1, [pc, #256]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8002020:	4313      	orrs	r3, r2
 8002022:	600b      	str	r3, [r1, #0]
 8002024:	e015      	b.n	8002052 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002026:	4b3f      	ldr	r3, [pc, #252]	; (8002124 <HAL_RCC_OscConfig+0x2b0>)
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202c:	f7ff fbd4 	bl	80017d8 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002034:	f7ff fbd0 	bl	80017d8 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e184      	b.n	8002350 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002046:	4b36      	ldr	r3, [pc, #216]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f0      	bne.n	8002034 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	2b00      	cmp	r3, #0
 800205c:	d030      	beq.n	80020c0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d016      	beq.n	8002094 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002066:	4b30      	ldr	r3, [pc, #192]	; (8002128 <HAL_RCC_OscConfig+0x2b4>)
 8002068:	2201      	movs	r2, #1
 800206a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800206c:	f7ff fbb4 	bl	80017d8 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002074:	f7ff fbb0 	bl	80017d8 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e164      	b.n	8002350 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002086:	4b26      	ldr	r3, [pc, #152]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8002088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d0f0      	beq.n	8002074 <HAL_RCC_OscConfig+0x200>
 8002092:	e015      	b.n	80020c0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002094:	4b24      	ldr	r3, [pc, #144]	; (8002128 <HAL_RCC_OscConfig+0x2b4>)
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800209a:	f7ff fb9d 	bl	80017d8 <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a0:	e008      	b.n	80020b4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020a2:	f7ff fb99 	bl	80017d8 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e14d      	b.n	8002350 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b4:	4b1a      	ldr	r3, [pc, #104]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 80020b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1f0      	bne.n	80020a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f000 80a0 	beq.w	800220e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ce:	2300      	movs	r3, #0
 80020d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020d2:	4b13      	ldr	r3, [pc, #76]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10f      	bne.n	80020fe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	4b0f      	ldr	r3, [pc, #60]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	4a0e      	ldr	r2, [pc, #56]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 80020e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ec:	6413      	str	r3, [r2, #64]	; 0x40
 80020ee:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f6:	60bb      	str	r3, [r7, #8]
 80020f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020fa:	2301      	movs	r3, #1
 80020fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020fe:	4b0b      	ldr	r3, [pc, #44]	; (800212c <HAL_RCC_OscConfig+0x2b8>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002106:	2b00      	cmp	r3, #0
 8002108:	d121      	bne.n	800214e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800210a:	4b08      	ldr	r3, [pc, #32]	; (800212c <HAL_RCC_OscConfig+0x2b8>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a07      	ldr	r2, [pc, #28]	; (800212c <HAL_RCC_OscConfig+0x2b8>)
 8002110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002114:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002116:	f7ff fb5f 	bl	80017d8 <HAL_GetTick>
 800211a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211c:	e011      	b.n	8002142 <HAL_RCC_OscConfig+0x2ce>
 800211e:	bf00      	nop
 8002120:	40023800 	.word	0x40023800
 8002124:	42470000 	.word	0x42470000
 8002128:	42470e80 	.word	0x42470e80
 800212c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002130:	f7ff fb52 	bl	80017d8 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e106      	b.n	8002350 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002142:	4b85      	ldr	r3, [pc, #532]	; (8002358 <HAL_RCC_OscConfig+0x4e4>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214a:	2b00      	cmp	r3, #0
 800214c:	d0f0      	beq.n	8002130 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d106      	bne.n	8002164 <HAL_RCC_OscConfig+0x2f0>
 8002156:	4b81      	ldr	r3, [pc, #516]	; (800235c <HAL_RCC_OscConfig+0x4e8>)
 8002158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215a:	4a80      	ldr	r2, [pc, #512]	; (800235c <HAL_RCC_OscConfig+0x4e8>)
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	6713      	str	r3, [r2, #112]	; 0x70
 8002162:	e01c      	b.n	800219e <HAL_RCC_OscConfig+0x32a>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	2b05      	cmp	r3, #5
 800216a:	d10c      	bne.n	8002186 <HAL_RCC_OscConfig+0x312>
 800216c:	4b7b      	ldr	r3, [pc, #492]	; (800235c <HAL_RCC_OscConfig+0x4e8>)
 800216e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002170:	4a7a      	ldr	r2, [pc, #488]	; (800235c <HAL_RCC_OscConfig+0x4e8>)
 8002172:	f043 0304 	orr.w	r3, r3, #4
 8002176:	6713      	str	r3, [r2, #112]	; 0x70
 8002178:	4b78      	ldr	r3, [pc, #480]	; (800235c <HAL_RCC_OscConfig+0x4e8>)
 800217a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217c:	4a77      	ldr	r2, [pc, #476]	; (800235c <HAL_RCC_OscConfig+0x4e8>)
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	6713      	str	r3, [r2, #112]	; 0x70
 8002184:	e00b      	b.n	800219e <HAL_RCC_OscConfig+0x32a>
 8002186:	4b75      	ldr	r3, [pc, #468]	; (800235c <HAL_RCC_OscConfig+0x4e8>)
 8002188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218a:	4a74      	ldr	r2, [pc, #464]	; (800235c <HAL_RCC_OscConfig+0x4e8>)
 800218c:	f023 0301 	bic.w	r3, r3, #1
 8002190:	6713      	str	r3, [r2, #112]	; 0x70
 8002192:	4b72      	ldr	r3, [pc, #456]	; (800235c <HAL_RCC_OscConfig+0x4e8>)
 8002194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002196:	4a71      	ldr	r2, [pc, #452]	; (800235c <HAL_RCC_OscConfig+0x4e8>)
 8002198:	f023 0304 	bic.w	r3, r3, #4
 800219c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d015      	beq.n	80021d2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a6:	f7ff fb17 	bl	80017d8 <HAL_GetTick>
 80021aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ac:	e00a      	b.n	80021c4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ae:	f7ff fb13 	bl	80017d8 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021bc:	4293      	cmp	r3, r2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e0c5      	b.n	8002350 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c4:	4b65      	ldr	r3, [pc, #404]	; (800235c <HAL_RCC_OscConfig+0x4e8>)
 80021c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0ee      	beq.n	80021ae <HAL_RCC_OscConfig+0x33a>
 80021d0:	e014      	b.n	80021fc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d2:	f7ff fb01 	bl	80017d8 <HAL_GetTick>
 80021d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d8:	e00a      	b.n	80021f0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021da:	f7ff fafd 	bl	80017d8 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e0af      	b.n	8002350 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f0:	4b5a      	ldr	r3, [pc, #360]	; (800235c <HAL_RCC_OscConfig+0x4e8>)
 80021f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1ee      	bne.n	80021da <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021fc:	7dfb      	ldrb	r3, [r7, #23]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d105      	bne.n	800220e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002202:	4b56      	ldr	r3, [pc, #344]	; (800235c <HAL_RCC_OscConfig+0x4e8>)
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	4a55      	ldr	r2, [pc, #340]	; (800235c <HAL_RCC_OscConfig+0x4e8>)
 8002208:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800220c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	2b00      	cmp	r3, #0
 8002214:	f000 809b 	beq.w	800234e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002218:	4b50      	ldr	r3, [pc, #320]	; (800235c <HAL_RCC_OscConfig+0x4e8>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 030c 	and.w	r3, r3, #12
 8002220:	2b08      	cmp	r3, #8
 8002222:	d05c      	beq.n	80022de <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	2b02      	cmp	r3, #2
 800222a:	d141      	bne.n	80022b0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800222c:	4b4c      	ldr	r3, [pc, #304]	; (8002360 <HAL_RCC_OscConfig+0x4ec>)
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002232:	f7ff fad1 	bl	80017d8 <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800223a:	f7ff facd 	bl	80017d8 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e081      	b.n	8002350 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800224c:	4b43      	ldr	r3, [pc, #268]	; (800235c <HAL_RCC_OscConfig+0x4e8>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1f0      	bne.n	800223a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	69da      	ldr	r2, [r3, #28]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	431a      	orrs	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002266:	019b      	lsls	r3, r3, #6
 8002268:	431a      	orrs	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226e:	085b      	lsrs	r3, r3, #1
 8002270:	3b01      	subs	r3, #1
 8002272:	041b      	lsls	r3, r3, #16
 8002274:	431a      	orrs	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227a:	061b      	lsls	r3, r3, #24
 800227c:	4937      	ldr	r1, [pc, #220]	; (800235c <HAL_RCC_OscConfig+0x4e8>)
 800227e:	4313      	orrs	r3, r2
 8002280:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002282:	4b37      	ldr	r3, [pc, #220]	; (8002360 <HAL_RCC_OscConfig+0x4ec>)
 8002284:	2201      	movs	r2, #1
 8002286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002288:	f7ff faa6 	bl	80017d8 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002290:	f7ff faa2 	bl	80017d8 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e056      	b.n	8002350 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a2:	4b2e      	ldr	r3, [pc, #184]	; (800235c <HAL_RCC_OscConfig+0x4e8>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d0f0      	beq.n	8002290 <HAL_RCC_OscConfig+0x41c>
 80022ae:	e04e      	b.n	800234e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b0:	4b2b      	ldr	r3, [pc, #172]	; (8002360 <HAL_RCC_OscConfig+0x4ec>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b6:	f7ff fa8f 	bl	80017d8 <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022bc:	e008      	b.n	80022d0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022be:	f7ff fa8b 	bl	80017d8 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e03f      	b.n	8002350 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d0:	4b22      	ldr	r3, [pc, #136]	; (800235c <HAL_RCC_OscConfig+0x4e8>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1f0      	bne.n	80022be <HAL_RCC_OscConfig+0x44a>
 80022dc:	e037      	b.n	800234e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d101      	bne.n	80022ea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e032      	b.n	8002350 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022ea:	4b1c      	ldr	r3, [pc, #112]	; (800235c <HAL_RCC_OscConfig+0x4e8>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d028      	beq.n	800234a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002302:	429a      	cmp	r2, r3
 8002304:	d121      	bne.n	800234a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002310:	429a      	cmp	r2, r3
 8002312:	d11a      	bne.n	800234a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800231a:	4013      	ands	r3, r2
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002320:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002322:	4293      	cmp	r3, r2
 8002324:	d111      	bne.n	800234a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002330:	085b      	lsrs	r3, r3, #1
 8002332:	3b01      	subs	r3, #1
 8002334:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002336:	429a      	cmp	r2, r3
 8002338:	d107      	bne.n	800234a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002344:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002346:	429a      	cmp	r2, r3
 8002348:	d001      	beq.n	800234e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40007000 	.word	0x40007000
 800235c:	40023800 	.word	0x40023800
 8002360:	42470060 	.word	0x42470060

08002364 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e0cc      	b.n	8002512 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002378:	4b68      	ldr	r3, [pc, #416]	; (800251c <HAL_RCC_ClockConfig+0x1b8>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0307 	and.w	r3, r3, #7
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	429a      	cmp	r2, r3
 8002384:	d90c      	bls.n	80023a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002386:	4b65      	ldr	r3, [pc, #404]	; (800251c <HAL_RCC_ClockConfig+0x1b8>)
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800238e:	4b63      	ldr	r3, [pc, #396]	; (800251c <HAL_RCC_ClockConfig+0x1b8>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d001      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e0b8      	b.n	8002512 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d020      	beq.n	80023ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d005      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023b8:	4b59      	ldr	r3, [pc, #356]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	4a58      	ldr	r2, [pc, #352]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80023be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0308 	and.w	r3, r3, #8
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d005      	beq.n	80023dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023d0:	4b53      	ldr	r3, [pc, #332]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	4a52      	ldr	r2, [pc, #328]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80023d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023dc:	4b50      	ldr	r3, [pc, #320]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	494d      	ldr	r1, [pc, #308]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d044      	beq.n	8002484 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d107      	bne.n	8002412 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002402:	4b47      	ldr	r3, [pc, #284]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d119      	bne.n	8002442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e07f      	b.n	8002512 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b02      	cmp	r3, #2
 8002418:	d003      	beq.n	8002422 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800241e:	2b03      	cmp	r3, #3
 8002420:	d107      	bne.n	8002432 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002422:	4b3f      	ldr	r3, [pc, #252]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d109      	bne.n	8002442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e06f      	b.n	8002512 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002432:	4b3b      	ldr	r3, [pc, #236]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e067      	b.n	8002512 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002442:	4b37      	ldr	r3, [pc, #220]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f023 0203 	bic.w	r2, r3, #3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	4934      	ldr	r1, [pc, #208]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 8002450:	4313      	orrs	r3, r2
 8002452:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002454:	f7ff f9c0 	bl	80017d8 <HAL_GetTick>
 8002458:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245a:	e00a      	b.n	8002472 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800245c:	f7ff f9bc 	bl	80017d8 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	f241 3288 	movw	r2, #5000	; 0x1388
 800246a:	4293      	cmp	r3, r2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e04f      	b.n	8002512 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002472:	4b2b      	ldr	r3, [pc, #172]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 020c 	and.w	r2, r3, #12
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	429a      	cmp	r2, r3
 8002482:	d1eb      	bne.n	800245c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002484:	4b25      	ldr	r3, [pc, #148]	; (800251c <HAL_RCC_ClockConfig+0x1b8>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	429a      	cmp	r2, r3
 8002490:	d20c      	bcs.n	80024ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002492:	4b22      	ldr	r3, [pc, #136]	; (800251c <HAL_RCC_ClockConfig+0x1b8>)
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800249a:	4b20      	ldr	r3, [pc, #128]	; (800251c <HAL_RCC_ClockConfig+0x1b8>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d001      	beq.n	80024ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e032      	b.n	8002512 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d008      	beq.n	80024ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024b8:	4b19      	ldr	r3, [pc, #100]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	4916      	ldr	r1, [pc, #88]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d009      	beq.n	80024ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024d6:	4b12      	ldr	r3, [pc, #72]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	490e      	ldr	r1, [pc, #56]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024ea:	f000 f821 	bl	8002530 <HAL_RCC_GetSysClockFreq>
 80024ee:	4602      	mov	r2, r0
 80024f0:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	091b      	lsrs	r3, r3, #4
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	490a      	ldr	r1, [pc, #40]	; (8002524 <HAL_RCC_ClockConfig+0x1c0>)
 80024fc:	5ccb      	ldrb	r3, [r1, r3]
 80024fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002502:	4a09      	ldr	r2, [pc, #36]	; (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 8002504:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002506:	4b09      	ldr	r3, [pc, #36]	; (800252c <HAL_RCC_ClockConfig+0x1c8>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff f920 	bl	8001750 <HAL_InitTick>

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40023c00 	.word	0x40023c00
 8002520:	40023800 	.word	0x40023800
 8002524:	080054c4 	.word	0x080054c4
 8002528:	20000000 	.word	0x20000000
 800252c:	20000004 	.word	0x20000004

08002530 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002530:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002534:	b084      	sub	sp, #16
 8002536:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002538:	2300      	movs	r3, #0
 800253a:	607b      	str	r3, [r7, #4]
 800253c:	2300      	movs	r3, #0
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	2300      	movs	r3, #0
 8002542:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002548:	4b67      	ldr	r3, [pc, #412]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f003 030c 	and.w	r3, r3, #12
 8002550:	2b08      	cmp	r3, #8
 8002552:	d00d      	beq.n	8002570 <HAL_RCC_GetSysClockFreq+0x40>
 8002554:	2b08      	cmp	r3, #8
 8002556:	f200 80bd 	bhi.w	80026d4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800255a:	2b00      	cmp	r3, #0
 800255c:	d002      	beq.n	8002564 <HAL_RCC_GetSysClockFreq+0x34>
 800255e:	2b04      	cmp	r3, #4
 8002560:	d003      	beq.n	800256a <HAL_RCC_GetSysClockFreq+0x3a>
 8002562:	e0b7      	b.n	80026d4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002564:	4b61      	ldr	r3, [pc, #388]	; (80026ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002566:	60bb      	str	r3, [r7, #8]
       break;
 8002568:	e0b7      	b.n	80026da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800256a:	4b61      	ldr	r3, [pc, #388]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800256c:	60bb      	str	r3, [r7, #8]
      break;
 800256e:	e0b4      	b.n	80026da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002570:	4b5d      	ldr	r3, [pc, #372]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002578:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800257a:	4b5b      	ldr	r3, [pc, #364]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d04d      	beq.n	8002622 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002586:	4b58      	ldr	r3, [pc, #352]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	099b      	lsrs	r3, r3, #6
 800258c:	461a      	mov	r2, r3
 800258e:	f04f 0300 	mov.w	r3, #0
 8002592:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002596:	f04f 0100 	mov.w	r1, #0
 800259a:	ea02 0800 	and.w	r8, r2, r0
 800259e:	ea03 0901 	and.w	r9, r3, r1
 80025a2:	4640      	mov	r0, r8
 80025a4:	4649      	mov	r1, r9
 80025a6:	f04f 0200 	mov.w	r2, #0
 80025aa:	f04f 0300 	mov.w	r3, #0
 80025ae:	014b      	lsls	r3, r1, #5
 80025b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80025b4:	0142      	lsls	r2, r0, #5
 80025b6:	4610      	mov	r0, r2
 80025b8:	4619      	mov	r1, r3
 80025ba:	ebb0 0008 	subs.w	r0, r0, r8
 80025be:	eb61 0109 	sbc.w	r1, r1, r9
 80025c2:	f04f 0200 	mov.w	r2, #0
 80025c6:	f04f 0300 	mov.w	r3, #0
 80025ca:	018b      	lsls	r3, r1, #6
 80025cc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80025d0:	0182      	lsls	r2, r0, #6
 80025d2:	1a12      	subs	r2, r2, r0
 80025d4:	eb63 0301 	sbc.w	r3, r3, r1
 80025d8:	f04f 0000 	mov.w	r0, #0
 80025dc:	f04f 0100 	mov.w	r1, #0
 80025e0:	00d9      	lsls	r1, r3, #3
 80025e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80025e6:	00d0      	lsls	r0, r2, #3
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	eb12 0208 	adds.w	r2, r2, r8
 80025f0:	eb43 0309 	adc.w	r3, r3, r9
 80025f4:	f04f 0000 	mov.w	r0, #0
 80025f8:	f04f 0100 	mov.w	r1, #0
 80025fc:	0259      	lsls	r1, r3, #9
 80025fe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002602:	0250      	lsls	r0, r2, #9
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	4610      	mov	r0, r2
 800260a:	4619      	mov	r1, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	461a      	mov	r2, r3
 8002610:	f04f 0300 	mov.w	r3, #0
 8002614:	f7fd fe34 	bl	8000280 <__aeabi_uldivmod>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	4613      	mov	r3, r2
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	e04a      	b.n	80026b8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002622:	4b31      	ldr	r3, [pc, #196]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	099b      	lsrs	r3, r3, #6
 8002628:	461a      	mov	r2, r3
 800262a:	f04f 0300 	mov.w	r3, #0
 800262e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002632:	f04f 0100 	mov.w	r1, #0
 8002636:	ea02 0400 	and.w	r4, r2, r0
 800263a:	ea03 0501 	and.w	r5, r3, r1
 800263e:	4620      	mov	r0, r4
 8002640:	4629      	mov	r1, r5
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	f04f 0300 	mov.w	r3, #0
 800264a:	014b      	lsls	r3, r1, #5
 800264c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002650:	0142      	lsls	r2, r0, #5
 8002652:	4610      	mov	r0, r2
 8002654:	4619      	mov	r1, r3
 8002656:	1b00      	subs	r0, r0, r4
 8002658:	eb61 0105 	sbc.w	r1, r1, r5
 800265c:	f04f 0200 	mov.w	r2, #0
 8002660:	f04f 0300 	mov.w	r3, #0
 8002664:	018b      	lsls	r3, r1, #6
 8002666:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800266a:	0182      	lsls	r2, r0, #6
 800266c:	1a12      	subs	r2, r2, r0
 800266e:	eb63 0301 	sbc.w	r3, r3, r1
 8002672:	f04f 0000 	mov.w	r0, #0
 8002676:	f04f 0100 	mov.w	r1, #0
 800267a:	00d9      	lsls	r1, r3, #3
 800267c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002680:	00d0      	lsls	r0, r2, #3
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	1912      	adds	r2, r2, r4
 8002688:	eb45 0303 	adc.w	r3, r5, r3
 800268c:	f04f 0000 	mov.w	r0, #0
 8002690:	f04f 0100 	mov.w	r1, #0
 8002694:	0299      	lsls	r1, r3, #10
 8002696:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800269a:	0290      	lsls	r0, r2, #10
 800269c:	4602      	mov	r2, r0
 800269e:	460b      	mov	r3, r1
 80026a0:	4610      	mov	r0, r2
 80026a2:	4619      	mov	r1, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	461a      	mov	r2, r3
 80026a8:	f04f 0300 	mov.w	r3, #0
 80026ac:	f7fd fde8 	bl	8000280 <__aeabi_uldivmod>
 80026b0:	4602      	mov	r2, r0
 80026b2:	460b      	mov	r3, r1
 80026b4:	4613      	mov	r3, r2
 80026b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026b8:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	0c1b      	lsrs	r3, r3, #16
 80026be:	f003 0303 	and.w	r3, r3, #3
 80026c2:	3301      	adds	r3, #1
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d0:	60bb      	str	r3, [r7, #8]
      break;
 80026d2:	e002      	b.n	80026da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026d4:	4b05      	ldr	r3, [pc, #20]	; (80026ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 80026d6:	60bb      	str	r3, [r7, #8]
      break;
 80026d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026da:	68bb      	ldr	r3, [r7, #8]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80026e6:	bf00      	nop
 80026e8:	40023800 	.word	0x40023800
 80026ec:	00f42400 	.word	0x00f42400
 80026f0:	007a1200 	.word	0x007a1200

080026f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026f8:	4b03      	ldr	r3, [pc, #12]	; (8002708 <HAL_RCC_GetHCLKFreq+0x14>)
 80026fa:	681b      	ldr	r3, [r3, #0]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	20000000 	.word	0x20000000

0800270c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002710:	f7ff fff0 	bl	80026f4 <HAL_RCC_GetHCLKFreq>
 8002714:	4602      	mov	r2, r0
 8002716:	4b05      	ldr	r3, [pc, #20]	; (800272c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	0a9b      	lsrs	r3, r3, #10
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	4903      	ldr	r1, [pc, #12]	; (8002730 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002722:	5ccb      	ldrb	r3, [r1, r3]
 8002724:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002728:	4618      	mov	r0, r3
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40023800 	.word	0x40023800
 8002730:	080054d4 	.word	0x080054d4

08002734 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002738:	f7ff ffdc 	bl	80026f4 <HAL_RCC_GetHCLKFreq>
 800273c:	4602      	mov	r2, r0
 800273e:	4b05      	ldr	r3, [pc, #20]	; (8002754 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	0b5b      	lsrs	r3, r3, #13
 8002744:	f003 0307 	and.w	r3, r3, #7
 8002748:	4903      	ldr	r1, [pc, #12]	; (8002758 <HAL_RCC_GetPCLK2Freq+0x24>)
 800274a:	5ccb      	ldrb	r3, [r1, r3]
 800274c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002750:	4618      	mov	r0, r3
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40023800 	.word	0x40023800
 8002758:	080054d4 	.word	0x080054d4

0800275c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e041      	b.n	80027f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d106      	bne.n	8002788 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f7fe fdae 	bl	80012e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2202      	movs	r2, #2
 800278c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3304      	adds	r3, #4
 8002798:	4619      	mov	r1, r3
 800279a:	4610      	mov	r0, r2
 800279c:	f000 fab6 	bl	8002d0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
	...

080027fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b01      	cmp	r3, #1
 800280e:	d001      	beq.n	8002814 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e044      	b.n	800289e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2202      	movs	r2, #2
 8002818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68da      	ldr	r2, [r3, #12]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f042 0201 	orr.w	r2, r2, #1
 800282a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a1e      	ldr	r2, [pc, #120]	; (80028ac <HAL_TIM_Base_Start_IT+0xb0>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d018      	beq.n	8002868 <HAL_TIM_Base_Start_IT+0x6c>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800283e:	d013      	beq.n	8002868 <HAL_TIM_Base_Start_IT+0x6c>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a1a      	ldr	r2, [pc, #104]	; (80028b0 <HAL_TIM_Base_Start_IT+0xb4>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d00e      	beq.n	8002868 <HAL_TIM_Base_Start_IT+0x6c>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a19      	ldr	r2, [pc, #100]	; (80028b4 <HAL_TIM_Base_Start_IT+0xb8>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d009      	beq.n	8002868 <HAL_TIM_Base_Start_IT+0x6c>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a17      	ldr	r2, [pc, #92]	; (80028b8 <HAL_TIM_Base_Start_IT+0xbc>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d004      	beq.n	8002868 <HAL_TIM_Base_Start_IT+0x6c>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a16      	ldr	r2, [pc, #88]	; (80028bc <HAL_TIM_Base_Start_IT+0xc0>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d111      	bne.n	800288c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2b06      	cmp	r3, #6
 8002878:	d010      	beq.n	800289c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f042 0201 	orr.w	r2, r2, #1
 8002888:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800288a:	e007      	b.n	800289c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 0201 	orr.w	r2, r2, #1
 800289a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	40010000 	.word	0x40010000
 80028b0:	40000400 	.word	0x40000400
 80028b4:	40000800 	.word	0x40000800
 80028b8:	40000c00 	.word	0x40000c00
 80028bc:	40014000 	.word	0x40014000

080028c0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68da      	ldr	r2, [r3, #12]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0201 	bic.w	r2, r2, #1
 80028d6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6a1a      	ldr	r2, [r3, #32]
 80028de:	f241 1311 	movw	r3, #4369	; 0x1111
 80028e2:	4013      	ands	r3, r2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d10f      	bne.n	8002908 <HAL_TIM_Base_Stop_IT+0x48>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6a1a      	ldr	r2, [r3, #32]
 80028ee:	f240 4344 	movw	r3, #1092	; 0x444
 80028f2:	4013      	ands	r3, r2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d107      	bne.n	8002908 <HAL_TIM_Base_Stop_IT+0x48>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 0201 	bic.w	r2, r2, #1
 8002906:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b082      	sub	sp, #8
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b02      	cmp	r3, #2
 8002932:	d122      	bne.n	800297a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b02      	cmp	r3, #2
 8002940:	d11b      	bne.n	800297a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f06f 0202 	mvn.w	r2, #2
 800294a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	f003 0303 	and.w	r3, r3, #3
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 f9b5 	bl	8002cd0 <HAL_TIM_IC_CaptureCallback>
 8002966:	e005      	b.n	8002974 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f000 f9a7 	bl	8002cbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f9b8 	bl	8002ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b04      	cmp	r3, #4
 8002986:	d122      	bne.n	80029ce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	f003 0304 	and.w	r3, r3, #4
 8002992:	2b04      	cmp	r3, #4
 8002994:	d11b      	bne.n	80029ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f06f 0204 	mvn.w	r2, #4
 800299e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2202      	movs	r2, #2
 80029a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d003      	beq.n	80029bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 f98b 	bl	8002cd0 <HAL_TIM_IC_CaptureCallback>
 80029ba:	e005      	b.n	80029c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f000 f97d 	bl	8002cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f98e 	bl	8002ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	f003 0308 	and.w	r3, r3, #8
 80029d8:	2b08      	cmp	r3, #8
 80029da:	d122      	bne.n	8002a22 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	2b08      	cmp	r3, #8
 80029e8:	d11b      	bne.n	8002a22 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f06f 0208 	mvn.w	r2, #8
 80029f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2204      	movs	r2, #4
 80029f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	69db      	ldr	r3, [r3, #28]
 8002a00:	f003 0303 	and.w	r3, r3, #3
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d003      	beq.n	8002a10 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 f961 	bl	8002cd0 <HAL_TIM_IC_CaptureCallback>
 8002a0e:	e005      	b.n	8002a1c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 f953 	bl	8002cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f964 	bl	8002ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	f003 0310 	and.w	r3, r3, #16
 8002a2c:	2b10      	cmp	r3, #16
 8002a2e:	d122      	bne.n	8002a76 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f003 0310 	and.w	r3, r3, #16
 8002a3a:	2b10      	cmp	r3, #16
 8002a3c:	d11b      	bne.n	8002a76 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f06f 0210 	mvn.w	r2, #16
 8002a46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2208      	movs	r2, #8
 8002a4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	69db      	ldr	r3, [r3, #28]
 8002a54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 f937 	bl	8002cd0 <HAL_TIM_IC_CaptureCallback>
 8002a62:	e005      	b.n	8002a70 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 f929 	bl	8002cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f93a 	bl	8002ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d10e      	bne.n	8002aa2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d107      	bne.n	8002aa2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f06f 0201 	mvn.w	r2, #1
 8002a9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f7fe f939 	bl	8000d14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aac:	2b80      	cmp	r3, #128	; 0x80
 8002aae:	d10e      	bne.n	8002ace <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aba:	2b80      	cmp	r3, #128	; 0x80
 8002abc:	d107      	bne.n	8002ace <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ac6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 fab1 	bl	8003030 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad8:	2b40      	cmp	r3, #64	; 0x40
 8002ada:	d10e      	bne.n	8002afa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae6:	2b40      	cmp	r3, #64	; 0x40
 8002ae8:	d107      	bne.n	8002afa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002af2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 f8ff 	bl	8002cf8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	f003 0320 	and.w	r3, r3, #32
 8002b04:	2b20      	cmp	r3, #32
 8002b06:	d10e      	bne.n	8002b26 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	f003 0320 	and.w	r3, r3, #32
 8002b12:	2b20      	cmp	r3, #32
 8002b14:	d107      	bne.n	8002b26 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f06f 0220 	mvn.w	r2, #32
 8002b1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 fa7b 	bl	800301c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b26:	bf00      	nop
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b084      	sub	sp, #16
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
 8002b36:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d101      	bne.n	8002b4a <HAL_TIM_ConfigClockSource+0x1c>
 8002b46:	2302      	movs	r3, #2
 8002b48:	e0b4      	b.n	8002cb4 <HAL_TIM_ConfigClockSource+0x186>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2202      	movs	r2, #2
 8002b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b68:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b70:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b82:	d03e      	beq.n	8002c02 <HAL_TIM_ConfigClockSource+0xd4>
 8002b84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b88:	f200 8087 	bhi.w	8002c9a <HAL_TIM_ConfigClockSource+0x16c>
 8002b8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b90:	f000 8086 	beq.w	8002ca0 <HAL_TIM_ConfigClockSource+0x172>
 8002b94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b98:	d87f      	bhi.n	8002c9a <HAL_TIM_ConfigClockSource+0x16c>
 8002b9a:	2b70      	cmp	r3, #112	; 0x70
 8002b9c:	d01a      	beq.n	8002bd4 <HAL_TIM_ConfigClockSource+0xa6>
 8002b9e:	2b70      	cmp	r3, #112	; 0x70
 8002ba0:	d87b      	bhi.n	8002c9a <HAL_TIM_ConfigClockSource+0x16c>
 8002ba2:	2b60      	cmp	r3, #96	; 0x60
 8002ba4:	d050      	beq.n	8002c48 <HAL_TIM_ConfigClockSource+0x11a>
 8002ba6:	2b60      	cmp	r3, #96	; 0x60
 8002ba8:	d877      	bhi.n	8002c9a <HAL_TIM_ConfigClockSource+0x16c>
 8002baa:	2b50      	cmp	r3, #80	; 0x50
 8002bac:	d03c      	beq.n	8002c28 <HAL_TIM_ConfigClockSource+0xfa>
 8002bae:	2b50      	cmp	r3, #80	; 0x50
 8002bb0:	d873      	bhi.n	8002c9a <HAL_TIM_ConfigClockSource+0x16c>
 8002bb2:	2b40      	cmp	r3, #64	; 0x40
 8002bb4:	d058      	beq.n	8002c68 <HAL_TIM_ConfigClockSource+0x13a>
 8002bb6:	2b40      	cmp	r3, #64	; 0x40
 8002bb8:	d86f      	bhi.n	8002c9a <HAL_TIM_ConfigClockSource+0x16c>
 8002bba:	2b30      	cmp	r3, #48	; 0x30
 8002bbc:	d064      	beq.n	8002c88 <HAL_TIM_ConfigClockSource+0x15a>
 8002bbe:	2b30      	cmp	r3, #48	; 0x30
 8002bc0:	d86b      	bhi.n	8002c9a <HAL_TIM_ConfigClockSource+0x16c>
 8002bc2:	2b20      	cmp	r3, #32
 8002bc4:	d060      	beq.n	8002c88 <HAL_TIM_ConfigClockSource+0x15a>
 8002bc6:	2b20      	cmp	r3, #32
 8002bc8:	d867      	bhi.n	8002c9a <HAL_TIM_ConfigClockSource+0x16c>
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d05c      	beq.n	8002c88 <HAL_TIM_ConfigClockSource+0x15a>
 8002bce:	2b10      	cmp	r3, #16
 8002bd0:	d05a      	beq.n	8002c88 <HAL_TIM_ConfigClockSource+0x15a>
 8002bd2:	e062      	b.n	8002c9a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6818      	ldr	r0, [r3, #0]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	6899      	ldr	r1, [r3, #8]
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	f000 f98c 	bl	8002f00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002bf6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68ba      	ldr	r2, [r7, #8]
 8002bfe:	609a      	str	r2, [r3, #8]
      break;
 8002c00:	e04f      	b.n	8002ca2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6818      	ldr	r0, [r3, #0]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	6899      	ldr	r1, [r3, #8]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	f000 f975 	bl	8002f00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c24:	609a      	str	r2, [r3, #8]
      break;
 8002c26:	e03c      	b.n	8002ca2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6818      	ldr	r0, [r3, #0]
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	6859      	ldr	r1, [r3, #4]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	461a      	mov	r2, r3
 8002c36:	f000 f8e9 	bl	8002e0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2150      	movs	r1, #80	; 0x50
 8002c40:	4618      	mov	r0, r3
 8002c42:	f000 f942 	bl	8002eca <TIM_ITRx_SetConfig>
      break;
 8002c46:	e02c      	b.n	8002ca2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6818      	ldr	r0, [r3, #0]
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	6859      	ldr	r1, [r3, #4]
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	461a      	mov	r2, r3
 8002c56:	f000 f908 	bl	8002e6a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2160      	movs	r1, #96	; 0x60
 8002c60:	4618      	mov	r0, r3
 8002c62:	f000 f932 	bl	8002eca <TIM_ITRx_SetConfig>
      break;
 8002c66:	e01c      	b.n	8002ca2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6818      	ldr	r0, [r3, #0]
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	6859      	ldr	r1, [r3, #4]
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	461a      	mov	r2, r3
 8002c76:	f000 f8c9 	bl	8002e0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2140      	movs	r1, #64	; 0x40
 8002c80:	4618      	mov	r0, r3
 8002c82:	f000 f922 	bl	8002eca <TIM_ITRx_SetConfig>
      break;
 8002c86:	e00c      	b.n	8002ca2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4619      	mov	r1, r3
 8002c92:	4610      	mov	r0, r2
 8002c94:	f000 f919 	bl	8002eca <TIM_ITRx_SetConfig>
      break;
 8002c98:	e003      	b.n	8002ca2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	73fb      	strb	r3, [r7, #15]
      break;
 8002c9e:	e000      	b.n	8002ca2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ca0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a34      	ldr	r2, [pc, #208]	; (8002df0 <TIM_Base_SetConfig+0xe4>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d00f      	beq.n	8002d44 <TIM_Base_SetConfig+0x38>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d2a:	d00b      	beq.n	8002d44 <TIM_Base_SetConfig+0x38>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a31      	ldr	r2, [pc, #196]	; (8002df4 <TIM_Base_SetConfig+0xe8>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d007      	beq.n	8002d44 <TIM_Base_SetConfig+0x38>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a30      	ldr	r2, [pc, #192]	; (8002df8 <TIM_Base_SetConfig+0xec>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d003      	beq.n	8002d44 <TIM_Base_SetConfig+0x38>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a2f      	ldr	r2, [pc, #188]	; (8002dfc <TIM_Base_SetConfig+0xf0>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d108      	bne.n	8002d56 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a25      	ldr	r2, [pc, #148]	; (8002df0 <TIM_Base_SetConfig+0xe4>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d01b      	beq.n	8002d96 <TIM_Base_SetConfig+0x8a>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d64:	d017      	beq.n	8002d96 <TIM_Base_SetConfig+0x8a>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a22      	ldr	r2, [pc, #136]	; (8002df4 <TIM_Base_SetConfig+0xe8>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d013      	beq.n	8002d96 <TIM_Base_SetConfig+0x8a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a21      	ldr	r2, [pc, #132]	; (8002df8 <TIM_Base_SetConfig+0xec>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d00f      	beq.n	8002d96 <TIM_Base_SetConfig+0x8a>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a20      	ldr	r2, [pc, #128]	; (8002dfc <TIM_Base_SetConfig+0xf0>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d00b      	beq.n	8002d96 <TIM_Base_SetConfig+0x8a>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a1f      	ldr	r2, [pc, #124]	; (8002e00 <TIM_Base_SetConfig+0xf4>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d007      	beq.n	8002d96 <TIM_Base_SetConfig+0x8a>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a1e      	ldr	r2, [pc, #120]	; (8002e04 <TIM_Base_SetConfig+0xf8>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d003      	beq.n	8002d96 <TIM_Base_SetConfig+0x8a>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a1d      	ldr	r2, [pc, #116]	; (8002e08 <TIM_Base_SetConfig+0xfc>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d108      	bne.n	8002da8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a08      	ldr	r2, [pc, #32]	; (8002df0 <TIM_Base_SetConfig+0xe4>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d103      	bne.n	8002ddc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	691a      	ldr	r2, [r3, #16]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	615a      	str	r2, [r3, #20]
}
 8002de2:	bf00      	nop
 8002de4:	3714      	adds	r7, #20
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	40010000 	.word	0x40010000
 8002df4:	40000400 	.word	0x40000400
 8002df8:	40000800 	.word	0x40000800
 8002dfc:	40000c00 	.word	0x40000c00
 8002e00:	40014000 	.word	0x40014000
 8002e04:	40014400 	.word	0x40014400
 8002e08:	40014800 	.word	0x40014800

08002e0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b087      	sub	sp, #28
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	f023 0201 	bic.w	r2, r3, #1
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	011b      	lsls	r3, r3, #4
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	f023 030a 	bic.w	r3, r3, #10
 8002e48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	621a      	str	r2, [r3, #32]
}
 8002e5e:	bf00      	nop
 8002e60:	371c      	adds	r7, #28
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b087      	sub	sp, #28
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	60f8      	str	r0, [r7, #12]
 8002e72:	60b9      	str	r1, [r7, #8]
 8002e74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	f023 0210 	bic.w	r2, r3, #16
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	031b      	lsls	r3, r3, #12
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ea6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	011b      	lsls	r3, r3, #4
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	621a      	str	r2, [r3, #32]
}
 8002ebe:	bf00      	nop
 8002ec0:	371c      	adds	r7, #28
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b085      	sub	sp, #20
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
 8002ed2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ee0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	f043 0307 	orr.w	r3, r3, #7
 8002eec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	609a      	str	r2, [r3, #8]
}
 8002ef4:	bf00      	nop
 8002ef6:	3714      	adds	r7, #20
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b087      	sub	sp, #28
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
 8002f0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	021a      	lsls	r2, r3, #8
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	431a      	orrs	r2, r3
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	609a      	str	r2, [r3, #8]
}
 8002f34:	bf00      	nop
 8002f36:	371c      	adds	r7, #28
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d101      	bne.n	8002f58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f54:	2302      	movs	r3, #2
 8002f56:	e050      	b.n	8002ffa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2202      	movs	r2, #2
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a1c      	ldr	r2, [pc, #112]	; (8003008 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d018      	beq.n	8002fce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa4:	d013      	beq.n	8002fce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a18      	ldr	r2, [pc, #96]	; (800300c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d00e      	beq.n	8002fce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a16      	ldr	r2, [pc, #88]	; (8003010 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d009      	beq.n	8002fce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a15      	ldr	r2, [pc, #84]	; (8003014 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d004      	beq.n	8002fce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a13      	ldr	r2, [pc, #76]	; (8003018 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d10c      	bne.n	8002fe8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	40010000 	.word	0x40010000
 800300c:	40000400 	.word	0x40000400
 8003010:	40000800 	.word	0x40000800
 8003014:	40000c00 	.word	0x40000c00
 8003018:	40014000 	.word	0x40014000

0800301c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e03f      	b.n	80030d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d106      	bne.n	8003070 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7fe f95c 	bl	8001328 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2224      	movs	r2, #36	; 0x24
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68da      	ldr	r2, [r3, #12]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003086:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 fddb 	bl	8003c44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	691a      	ldr	r2, [r3, #16]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800309c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	695a      	ldr	r2, [r3, #20]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68da      	ldr	r2, [r3, #12]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2220      	movs	r2, #32
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2220      	movs	r2, #32
 80030d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b08a      	sub	sp, #40	; 0x28
 80030e2:	af02      	add	r7, sp, #8
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	603b      	str	r3, [r7, #0]
 80030ea:	4613      	mov	r3, r2
 80030ec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030ee:	2300      	movs	r3, #0
 80030f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b20      	cmp	r3, #32
 80030fc:	d17c      	bne.n	80031f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d002      	beq.n	800310a <HAL_UART_Transmit+0x2c>
 8003104:	88fb      	ldrh	r3, [r7, #6]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e075      	b.n	80031fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003114:	2b01      	cmp	r3, #1
 8003116:	d101      	bne.n	800311c <HAL_UART_Transmit+0x3e>
 8003118:	2302      	movs	r3, #2
 800311a:	e06e      	b.n	80031fa <HAL_UART_Transmit+0x11c>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2221      	movs	r2, #33	; 0x21
 800312e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003132:	f7fe fb51 	bl	80017d8 <HAL_GetTick>
 8003136:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	88fa      	ldrh	r2, [r7, #6]
 800313c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	88fa      	ldrh	r2, [r7, #6]
 8003142:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800314c:	d108      	bne.n	8003160 <HAL_UART_Transmit+0x82>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d104      	bne.n	8003160 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003156:	2300      	movs	r3, #0
 8003158:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	61bb      	str	r3, [r7, #24]
 800315e:	e003      	b.n	8003168 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003164:	2300      	movs	r3, #0
 8003166:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003170:	e02a      	b.n	80031c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	2200      	movs	r2, #0
 800317a:	2180      	movs	r1, #128	; 0x80
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f000 fb1f 	bl	80037c0 <UART_WaitOnFlagUntilTimeout>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e036      	b.n	80031fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10b      	bne.n	80031aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	461a      	mov	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	3302      	adds	r3, #2
 80031a6:	61bb      	str	r3, [r7, #24]
 80031a8:	e007      	b.n	80031ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	781a      	ldrb	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	3301      	adds	r3, #1
 80031b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031be:	b29b      	uxth	r3, r3
 80031c0:	3b01      	subs	r3, #1
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1cf      	bne.n	8003172 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	9300      	str	r3, [sp, #0]
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	2200      	movs	r2, #0
 80031da:	2140      	movs	r1, #64	; 0x40
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f000 faef 	bl	80037c0 <UART_WaitOnFlagUntilTimeout>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e006      	b.n	80031fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2220      	movs	r2, #32
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80031f4:	2300      	movs	r3, #0
 80031f6:	e000      	b.n	80031fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80031f8:	2302      	movs	r3, #2
  }
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3720      	adds	r7, #32
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b084      	sub	sp, #16
 8003206:	af00      	add	r7, sp, #0
 8003208:	60f8      	str	r0, [r7, #12]
 800320a:	60b9      	str	r1, [r7, #8]
 800320c:	4613      	mov	r3, r2
 800320e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2b20      	cmp	r3, #32
 800321a:	d11d      	bne.n	8003258 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d002      	beq.n	8003228 <HAL_UART_Receive_IT+0x26>
 8003222:	88fb      	ldrh	r3, [r7, #6]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e016      	b.n	800325a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003232:	2b01      	cmp	r3, #1
 8003234:	d101      	bne.n	800323a <HAL_UART_Receive_IT+0x38>
 8003236:	2302      	movs	r3, #2
 8003238:	e00f      	b.n	800325a <HAL_UART_Receive_IT+0x58>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003248:	88fb      	ldrh	r3, [r7, #6]
 800324a:	461a      	mov	r2, r3
 800324c:	68b9      	ldr	r1, [r7, #8]
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f000 fb24 	bl	800389c <UART_Start_Receive_IT>
 8003254:	4603      	mov	r3, r0
 8003256:	e000      	b.n	800325a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003258:	2302      	movs	r3, #2
  }
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
	...

08003264 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b0ba      	sub	sp, #232	; 0xe8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800328a:	2300      	movs	r3, #0
 800328c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003290:	2300      	movs	r3, #0
 8003292:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800329a:	f003 030f 	and.w	r3, r3, #15
 800329e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80032a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10f      	bne.n	80032ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ae:	f003 0320 	and.w	r3, r3, #32
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d009      	beq.n	80032ca <HAL_UART_IRQHandler+0x66>
 80032b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032ba:	f003 0320 	and.w	r3, r3, #32
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 fc03 	bl	8003ace <UART_Receive_IT>
      return;
 80032c8:	e256      	b.n	8003778 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80032ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 80de 	beq.w	8003490 <HAL_UART_IRQHandler+0x22c>
 80032d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d106      	bne.n	80032ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80032e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 80d1 	beq.w	8003490 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80032ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00b      	beq.n	8003312 <HAL_UART_IRQHandler+0xae>
 80032fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003302:	2b00      	cmp	r3, #0
 8003304:	d005      	beq.n	8003312 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	f043 0201 	orr.w	r2, r3, #1
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003316:	f003 0304 	and.w	r3, r3, #4
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00b      	beq.n	8003336 <HAL_UART_IRQHandler+0xd2>
 800331e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d005      	beq.n	8003336 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	f043 0202 	orr.w	r2, r3, #2
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00b      	beq.n	800335a <HAL_UART_IRQHandler+0xf6>
 8003342:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	d005      	beq.n	800335a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	f043 0204 	orr.w	r2, r3, #4
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800335a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800335e:	f003 0308 	and.w	r3, r3, #8
 8003362:	2b00      	cmp	r3, #0
 8003364:	d011      	beq.n	800338a <HAL_UART_IRQHandler+0x126>
 8003366:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800336a:	f003 0320 	and.w	r3, r3, #32
 800336e:	2b00      	cmp	r3, #0
 8003370:	d105      	bne.n	800337e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003372:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d005      	beq.n	800338a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	f043 0208 	orr.w	r2, r3, #8
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 81ed 	beq.w	800376e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003398:	f003 0320 	and.w	r3, r3, #32
 800339c:	2b00      	cmp	r3, #0
 800339e:	d008      	beq.n	80033b2 <HAL_UART_IRQHandler+0x14e>
 80033a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033a4:	f003 0320 	and.w	r3, r3, #32
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d002      	beq.n	80033b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 fb8e 	bl	8003ace <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033bc:	2b40      	cmp	r3, #64	; 0x40
 80033be:	bf0c      	ite	eq
 80033c0:	2301      	moveq	r3, #1
 80033c2:	2300      	movne	r3, #0
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	f003 0308 	and.w	r3, r3, #8
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d103      	bne.n	80033de <HAL_UART_IRQHandler+0x17a>
 80033d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d04f      	beq.n	800347e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 fa96 	bl	8003910 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ee:	2b40      	cmp	r3, #64	; 0x40
 80033f0:	d141      	bne.n	8003476 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	3314      	adds	r3, #20
 80033f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003400:	e853 3f00 	ldrex	r3, [r3]
 8003404:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003408:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800340c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003410:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	3314      	adds	r3, #20
 800341a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800341e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003422:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003426:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800342a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800342e:	e841 2300 	strex	r3, r2, [r1]
 8003432:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003436:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1d9      	bne.n	80033f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003442:	2b00      	cmp	r3, #0
 8003444:	d013      	beq.n	800346e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344a:	4a7d      	ldr	r2, [pc, #500]	; (8003640 <HAL_UART_IRQHandler+0x3dc>)
 800344c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003452:	4618      	mov	r0, r3
 8003454:	f7fe fb4d 	bl	8001af2 <HAL_DMA_Abort_IT>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d016      	beq.n	800348c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003468:	4610      	mov	r0, r2
 800346a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800346c:	e00e      	b.n	800348c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f990 	bl	8003794 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003474:	e00a      	b.n	800348c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f98c 	bl	8003794 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800347c:	e006      	b.n	800348c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 f988 	bl	8003794 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800348a:	e170      	b.n	800376e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800348c:	bf00      	nop
    return;
 800348e:	e16e      	b.n	800376e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003494:	2b01      	cmp	r3, #1
 8003496:	f040 814a 	bne.w	800372e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800349a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800349e:	f003 0310 	and.w	r3, r3, #16
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 8143 	beq.w	800372e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80034a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034ac:	f003 0310 	and.w	r3, r3, #16
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 813c 	beq.w	800372e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80034b6:	2300      	movs	r3, #0
 80034b8:	60bb      	str	r3, [r7, #8]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	60bb      	str	r3, [r7, #8]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	60bb      	str	r3, [r7, #8]
 80034ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d6:	2b40      	cmp	r3, #64	; 0x40
 80034d8:	f040 80b4 	bne.w	8003644 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80034e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 8140 	beq.w	8003772 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80034f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80034fa:	429a      	cmp	r2, r3
 80034fc:	f080 8139 	bcs.w	8003772 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003506:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003512:	f000 8088 	beq.w	8003626 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	330c      	adds	r3, #12
 800351c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003520:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003524:	e853 3f00 	ldrex	r3, [r3]
 8003528:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800352c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003530:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003534:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	330c      	adds	r3, #12
 800353e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003542:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003546:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800354a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800354e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003552:	e841 2300 	strex	r3, r2, [r1]
 8003556:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800355a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1d9      	bne.n	8003516 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	3314      	adds	r3, #20
 8003568:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800356a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800356c:	e853 3f00 	ldrex	r3, [r3]
 8003570:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003572:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003574:	f023 0301 	bic.w	r3, r3, #1
 8003578:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	3314      	adds	r3, #20
 8003582:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003586:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800358a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800358c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800358e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003592:	e841 2300 	strex	r3, r2, [r1]
 8003596:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003598:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1e1      	bne.n	8003562 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	3314      	adds	r3, #20
 80035a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035a8:	e853 3f00 	ldrex	r3, [r3]
 80035ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80035ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	3314      	adds	r3, #20
 80035be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80035c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80035c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80035c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80035ca:	e841 2300 	strex	r3, r2, [r1]
 80035ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80035d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1e3      	bne.n	800359e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2220      	movs	r2, #32
 80035da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	330c      	adds	r3, #12
 80035ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035ee:	e853 3f00 	ldrex	r3, [r3]
 80035f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80035f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035f6:	f023 0310 	bic.w	r3, r3, #16
 80035fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	330c      	adds	r3, #12
 8003604:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003608:	65ba      	str	r2, [r7, #88]	; 0x58
 800360a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800360e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003610:	e841 2300 	strex	r3, r2, [r1]
 8003614:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003616:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1e3      	bne.n	80035e4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003620:	4618      	mov	r0, r3
 8003622:	f7fe f9f6 	bl	8001a12 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800362e:	b29b      	uxth	r3, r3
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	b29b      	uxth	r3, r3
 8003634:	4619      	mov	r1, r3
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f8b6 	bl	80037a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800363c:	e099      	b.n	8003772 <HAL_UART_IRQHandler+0x50e>
 800363e:	bf00      	nop
 8003640:	080039d7 	.word	0x080039d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800364c:	b29b      	uxth	r3, r3
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003658:	b29b      	uxth	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	f000 808b 	beq.w	8003776 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003660:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 8086 	beq.w	8003776 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	330c      	adds	r3, #12
 8003670:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003674:	e853 3f00 	ldrex	r3, [r3]
 8003678:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800367a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800367c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003680:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	330c      	adds	r3, #12
 800368a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800368e:	647a      	str	r2, [r7, #68]	; 0x44
 8003690:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003692:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003694:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003696:	e841 2300 	strex	r3, r2, [r1]
 800369a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800369c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1e3      	bne.n	800366a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	3314      	adds	r3, #20
 80036a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	e853 3f00 	ldrex	r3, [r3]
 80036b0:	623b      	str	r3, [r7, #32]
   return(result);
 80036b2:	6a3b      	ldr	r3, [r7, #32]
 80036b4:	f023 0301 	bic.w	r3, r3, #1
 80036b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	3314      	adds	r3, #20
 80036c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80036c6:	633a      	str	r2, [r7, #48]	; 0x30
 80036c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036ce:	e841 2300 	strex	r3, r2, [r1]
 80036d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80036d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1e3      	bne.n	80036a2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2220      	movs	r2, #32
 80036de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	330c      	adds	r3, #12
 80036ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	e853 3f00 	ldrex	r3, [r3]
 80036f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f023 0310 	bic.w	r3, r3, #16
 80036fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	330c      	adds	r3, #12
 8003708:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800370c:	61fa      	str	r2, [r7, #28]
 800370e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003710:	69b9      	ldr	r1, [r7, #24]
 8003712:	69fa      	ldr	r2, [r7, #28]
 8003714:	e841 2300 	strex	r3, r2, [r1]
 8003718:	617b      	str	r3, [r7, #20]
   return(result);
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1e3      	bne.n	80036e8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003720:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003724:	4619      	mov	r1, r3
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f83e 	bl	80037a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800372c:	e023      	b.n	8003776 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800372e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003736:	2b00      	cmp	r3, #0
 8003738:	d009      	beq.n	800374e <HAL_UART_IRQHandler+0x4ea>
 800373a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800373e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f959 	bl	80039fe <UART_Transmit_IT>
    return;
 800374c:	e014      	b.n	8003778 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800374e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00e      	beq.n	8003778 <HAL_UART_IRQHandler+0x514>
 800375a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800375e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003762:	2b00      	cmp	r3, #0
 8003764:	d008      	beq.n	8003778 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f999 	bl	8003a9e <UART_EndTransmit_IT>
    return;
 800376c:	e004      	b.n	8003778 <HAL_UART_IRQHandler+0x514>
    return;
 800376e:	bf00      	nop
 8003770:	e002      	b.n	8003778 <HAL_UART_IRQHandler+0x514>
      return;
 8003772:	bf00      	nop
 8003774:	e000      	b.n	8003778 <HAL_UART_IRQHandler+0x514>
      return;
 8003776:	bf00      	nop
  }
}
 8003778:	37e8      	adds	r7, #232	; 0xe8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop

08003780 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	460b      	mov	r3, r1
 80037b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b090      	sub	sp, #64	; 0x40
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	603b      	str	r3, [r7, #0]
 80037cc:	4613      	mov	r3, r2
 80037ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037d0:	e050      	b.n	8003874 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d8:	d04c      	beq.n	8003874 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80037da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d007      	beq.n	80037f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80037e0:	f7fd fffa 	bl	80017d8 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d241      	bcs.n	8003874 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	330c      	adds	r3, #12
 80037f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fa:	e853 3f00 	ldrex	r3, [r3]
 80037fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003806:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	330c      	adds	r3, #12
 800380e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003810:	637a      	str	r2, [r7, #52]	; 0x34
 8003812:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003814:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003816:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003818:	e841 2300 	strex	r3, r2, [r1]
 800381c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800381e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1e5      	bne.n	80037f0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	3314      	adds	r3, #20
 800382a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	e853 3f00 	ldrex	r3, [r3]
 8003832:	613b      	str	r3, [r7, #16]
   return(result);
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	f023 0301 	bic.w	r3, r3, #1
 800383a:	63bb      	str	r3, [r7, #56]	; 0x38
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	3314      	adds	r3, #20
 8003842:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003844:	623a      	str	r2, [r7, #32]
 8003846:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003848:	69f9      	ldr	r1, [r7, #28]
 800384a:	6a3a      	ldr	r2, [r7, #32]
 800384c:	e841 2300 	strex	r3, r2, [r1]
 8003850:	61bb      	str	r3, [r7, #24]
   return(result);
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1e5      	bne.n	8003824 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2220      	movs	r2, #32
 800385c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2220      	movs	r2, #32
 8003864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e00f      	b.n	8003894 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	4013      	ands	r3, r2
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	429a      	cmp	r2, r3
 8003882:	bf0c      	ite	eq
 8003884:	2301      	moveq	r3, #1
 8003886:	2300      	movne	r3, #0
 8003888:	b2db      	uxtb	r3, r3
 800388a:	461a      	mov	r2, r3
 800388c:	79fb      	ldrb	r3, [r7, #7]
 800388e:	429a      	cmp	r2, r3
 8003890:	d09f      	beq.n	80037d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3740      	adds	r7, #64	; 0x40
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	4613      	mov	r3, r2
 80038a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	88fa      	ldrh	r2, [r7, #6]
 80038b4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	88fa      	ldrh	r2, [r7, #6]
 80038ba:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2222      	movs	r2, #34	; 0x22
 80038c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68da      	ldr	r2, [r3, #12]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038e0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	695a      	ldr	r2, [r3, #20]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f042 0201 	orr.w	r2, r2, #1
 80038f0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68da      	ldr	r2, [r3, #12]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f042 0220 	orr.w	r2, r2, #32
 8003900:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003910:	b480      	push	{r7}
 8003912:	b095      	sub	sp, #84	; 0x54
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	330c      	adds	r3, #12
 800391e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003922:	e853 3f00 	ldrex	r3, [r3]
 8003926:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800392e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	330c      	adds	r3, #12
 8003936:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003938:	643a      	str	r2, [r7, #64]	; 0x40
 800393a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800393e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003940:	e841 2300 	strex	r3, r2, [r1]
 8003944:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1e5      	bne.n	8003918 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	3314      	adds	r3, #20
 8003952:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003954:	6a3b      	ldr	r3, [r7, #32]
 8003956:	e853 3f00 	ldrex	r3, [r3]
 800395a:	61fb      	str	r3, [r7, #28]
   return(result);
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f023 0301 	bic.w	r3, r3, #1
 8003962:	64bb      	str	r3, [r7, #72]	; 0x48
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	3314      	adds	r3, #20
 800396a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800396c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800396e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003970:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003972:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003974:	e841 2300 	strex	r3, r2, [r1]
 8003978:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1e5      	bne.n	800394c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003984:	2b01      	cmp	r3, #1
 8003986:	d119      	bne.n	80039bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	330c      	adds	r3, #12
 800398e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	e853 3f00 	ldrex	r3, [r3]
 8003996:	60bb      	str	r3, [r7, #8]
   return(result);
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	f023 0310 	bic.w	r3, r3, #16
 800399e:	647b      	str	r3, [r7, #68]	; 0x44
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	330c      	adds	r3, #12
 80039a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039a8:	61ba      	str	r2, [r7, #24]
 80039aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ac:	6979      	ldr	r1, [r7, #20]
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	e841 2300 	strex	r3, r2, [r1]
 80039b4:	613b      	str	r3, [r7, #16]
   return(result);
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1e5      	bne.n	8003988 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2220      	movs	r2, #32
 80039c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80039ca:	bf00      	nop
 80039cc:	3754      	adds	r7, #84	; 0x54
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr

080039d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b084      	sub	sp, #16
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f7ff fecf 	bl	8003794 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039f6:	bf00      	nop
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80039fe:	b480      	push	{r7}
 8003a00:	b085      	sub	sp, #20
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b21      	cmp	r3, #33	; 0x21
 8003a10:	d13e      	bne.n	8003a90 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a1a:	d114      	bne.n	8003a46 <UART_Transmit_IT+0x48>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d110      	bne.n	8003a46 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a1b      	ldr	r3, [r3, #32]
 8003a28:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a38:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	1c9a      	adds	r2, r3, #2
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	621a      	str	r2, [r3, #32]
 8003a44:	e008      	b.n	8003a58 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	1c59      	adds	r1, r3, #1
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	6211      	str	r1, [r2, #32]
 8003a50:	781a      	ldrb	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	4619      	mov	r1, r3
 8003a66:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10f      	bne.n	8003a8c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68da      	ldr	r2, [r3, #12]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a7a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68da      	ldr	r2, [r3, #12]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a8a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	e000      	b.n	8003a92 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a90:	2302      	movs	r3, #2
  }
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3714      	adds	r7, #20
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b082      	sub	sp, #8
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68da      	ldr	r2, [r3, #12]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ab4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2220      	movs	r2, #32
 8003aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7ff fe5e 	bl	8003780 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b08c      	sub	sp, #48	; 0x30
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b22      	cmp	r3, #34	; 0x22
 8003ae0:	f040 80ab 	bne.w	8003c3a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aec:	d117      	bne.n	8003b1e <UART_Receive_IT+0x50>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d113      	bne.n	8003b1e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003af6:	2300      	movs	r3, #0
 8003af8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b16:	1c9a      	adds	r2, r3, #2
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	629a      	str	r2, [r3, #40]	; 0x28
 8003b1c:	e026      	b.n	8003b6c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b22:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003b24:	2300      	movs	r3, #0
 8003b26:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b30:	d007      	beq.n	8003b42 <UART_Receive_IT+0x74>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10a      	bne.n	8003b50 <UART_Receive_IT+0x82>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d106      	bne.n	8003b50 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4c:	701a      	strb	r2, [r3, #0]
 8003b4e:	e008      	b.n	8003b62 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b60:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b66:	1c5a      	adds	r2, r3, #1
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	3b01      	subs	r3, #1
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	4619      	mov	r1, r3
 8003b7a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d15a      	bne.n	8003c36 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 0220 	bic.w	r2, r2, #32
 8003b8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68da      	ldr	r2, [r3, #12]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	695a      	ldr	r2, [r3, #20]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 0201 	bic.w	r2, r2, #1
 8003bae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d135      	bne.n	8003c2c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	330c      	adds	r3, #12
 8003bcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	e853 3f00 	ldrex	r3, [r3]
 8003bd4:	613b      	str	r3, [r7, #16]
   return(result);
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	f023 0310 	bic.w	r3, r3, #16
 8003bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	330c      	adds	r3, #12
 8003be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be6:	623a      	str	r2, [r7, #32]
 8003be8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bea:	69f9      	ldr	r1, [r7, #28]
 8003bec:	6a3a      	ldr	r2, [r7, #32]
 8003bee:	e841 2300 	strex	r3, r2, [r1]
 8003bf2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1e5      	bne.n	8003bc6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0310 	and.w	r3, r3, #16
 8003c04:	2b10      	cmp	r3, #16
 8003c06:	d10a      	bne.n	8003c1e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c08:	2300      	movs	r3, #0
 8003c0a:	60fb      	str	r3, [r7, #12]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c22:	4619      	mov	r1, r3
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f7ff fdbf 	bl	80037a8 <HAL_UARTEx_RxEventCallback>
 8003c2a:	e002      	b.n	8003c32 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f7fd fd15 	bl	800165c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003c32:	2300      	movs	r3, #0
 8003c34:	e002      	b.n	8003c3c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003c36:	2300      	movs	r3, #0
 8003c38:	e000      	b.n	8003c3c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003c3a:	2302      	movs	r3, #2
  }
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3730      	adds	r7, #48	; 0x30
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c48:	b09f      	sub	sp, #124	; 0x7c
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c5a:	68d9      	ldr	r1, [r3, #12]
 8003c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	ea40 0301 	orr.w	r3, r0, r1
 8003c64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c68:	689a      	ldr	r2, [r3, #8]
 8003c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	431a      	orrs	r2, r3
 8003c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c78:	69db      	ldr	r3, [r3, #28]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c88:	f021 010c 	bic.w	r1, r1, #12
 8003c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c92:	430b      	orrs	r3, r1
 8003c94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ca2:	6999      	ldr	r1, [r3, #24]
 8003ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	ea40 0301 	orr.w	r3, r0, r1
 8003cac:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	4bc5      	ldr	r3, [pc, #788]	; (8003fc8 <UART_SetConfig+0x384>)
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d004      	beq.n	8003cc2 <UART_SetConfig+0x7e>
 8003cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	4bc3      	ldr	r3, [pc, #780]	; (8003fcc <UART_SetConfig+0x388>)
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d103      	bne.n	8003cca <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cc2:	f7fe fd37 	bl	8002734 <HAL_RCC_GetPCLK2Freq>
 8003cc6:	6778      	str	r0, [r7, #116]	; 0x74
 8003cc8:	e002      	b.n	8003cd0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cca:	f7fe fd1f 	bl	800270c <HAL_RCC_GetPCLK1Freq>
 8003cce:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cd2:	69db      	ldr	r3, [r3, #28]
 8003cd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cd8:	f040 80b6 	bne.w	8003e48 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cde:	461c      	mov	r4, r3
 8003ce0:	f04f 0500 	mov.w	r5, #0
 8003ce4:	4622      	mov	r2, r4
 8003ce6:	462b      	mov	r3, r5
 8003ce8:	1891      	adds	r1, r2, r2
 8003cea:	6439      	str	r1, [r7, #64]	; 0x40
 8003cec:	415b      	adcs	r3, r3
 8003cee:	647b      	str	r3, [r7, #68]	; 0x44
 8003cf0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003cf4:	1912      	adds	r2, r2, r4
 8003cf6:	eb45 0303 	adc.w	r3, r5, r3
 8003cfa:	f04f 0000 	mov.w	r0, #0
 8003cfe:	f04f 0100 	mov.w	r1, #0
 8003d02:	00d9      	lsls	r1, r3, #3
 8003d04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d08:	00d0      	lsls	r0, r2, #3
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	1911      	adds	r1, r2, r4
 8003d10:	6639      	str	r1, [r7, #96]	; 0x60
 8003d12:	416b      	adcs	r3, r5
 8003d14:	667b      	str	r3, [r7, #100]	; 0x64
 8003d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	f04f 0300 	mov.w	r3, #0
 8003d20:	1891      	adds	r1, r2, r2
 8003d22:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d24:	415b      	adcs	r3, r3
 8003d26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d2c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003d30:	f7fc faa6 	bl	8000280 <__aeabi_uldivmod>
 8003d34:	4602      	mov	r2, r0
 8003d36:	460b      	mov	r3, r1
 8003d38:	4ba5      	ldr	r3, [pc, #660]	; (8003fd0 <UART_SetConfig+0x38c>)
 8003d3a:	fba3 2302 	umull	r2, r3, r3, r2
 8003d3e:	095b      	lsrs	r3, r3, #5
 8003d40:	011e      	lsls	r6, r3, #4
 8003d42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d44:	461c      	mov	r4, r3
 8003d46:	f04f 0500 	mov.w	r5, #0
 8003d4a:	4622      	mov	r2, r4
 8003d4c:	462b      	mov	r3, r5
 8003d4e:	1891      	adds	r1, r2, r2
 8003d50:	6339      	str	r1, [r7, #48]	; 0x30
 8003d52:	415b      	adcs	r3, r3
 8003d54:	637b      	str	r3, [r7, #52]	; 0x34
 8003d56:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003d5a:	1912      	adds	r2, r2, r4
 8003d5c:	eb45 0303 	adc.w	r3, r5, r3
 8003d60:	f04f 0000 	mov.w	r0, #0
 8003d64:	f04f 0100 	mov.w	r1, #0
 8003d68:	00d9      	lsls	r1, r3, #3
 8003d6a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d6e:	00d0      	lsls	r0, r2, #3
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	1911      	adds	r1, r2, r4
 8003d76:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d78:	416b      	adcs	r3, r5
 8003d7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	461a      	mov	r2, r3
 8003d82:	f04f 0300 	mov.w	r3, #0
 8003d86:	1891      	adds	r1, r2, r2
 8003d88:	62b9      	str	r1, [r7, #40]	; 0x28
 8003d8a:	415b      	adcs	r3, r3
 8003d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d92:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003d96:	f7fc fa73 	bl	8000280 <__aeabi_uldivmod>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	4b8c      	ldr	r3, [pc, #560]	; (8003fd0 <UART_SetConfig+0x38c>)
 8003da0:	fba3 1302 	umull	r1, r3, r3, r2
 8003da4:	095b      	lsrs	r3, r3, #5
 8003da6:	2164      	movs	r1, #100	; 0x64
 8003da8:	fb01 f303 	mul.w	r3, r1, r3
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	3332      	adds	r3, #50	; 0x32
 8003db2:	4a87      	ldr	r2, [pc, #540]	; (8003fd0 <UART_SetConfig+0x38c>)
 8003db4:	fba2 2303 	umull	r2, r3, r2, r3
 8003db8:	095b      	lsrs	r3, r3, #5
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003dc0:	441e      	add	r6, r3
 8003dc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f04f 0100 	mov.w	r1, #0
 8003dca:	4602      	mov	r2, r0
 8003dcc:	460b      	mov	r3, r1
 8003dce:	1894      	adds	r4, r2, r2
 8003dd0:	623c      	str	r4, [r7, #32]
 8003dd2:	415b      	adcs	r3, r3
 8003dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8003dd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003dda:	1812      	adds	r2, r2, r0
 8003ddc:	eb41 0303 	adc.w	r3, r1, r3
 8003de0:	f04f 0400 	mov.w	r4, #0
 8003de4:	f04f 0500 	mov.w	r5, #0
 8003de8:	00dd      	lsls	r5, r3, #3
 8003dea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003dee:	00d4      	lsls	r4, r2, #3
 8003df0:	4622      	mov	r2, r4
 8003df2:	462b      	mov	r3, r5
 8003df4:	1814      	adds	r4, r2, r0
 8003df6:	653c      	str	r4, [r7, #80]	; 0x50
 8003df8:	414b      	adcs	r3, r1
 8003dfa:	657b      	str	r3, [r7, #84]	; 0x54
 8003dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	461a      	mov	r2, r3
 8003e02:	f04f 0300 	mov.w	r3, #0
 8003e06:	1891      	adds	r1, r2, r2
 8003e08:	61b9      	str	r1, [r7, #24]
 8003e0a:	415b      	adcs	r3, r3
 8003e0c:	61fb      	str	r3, [r7, #28]
 8003e0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e12:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003e16:	f7fc fa33 	bl	8000280 <__aeabi_uldivmod>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	4b6c      	ldr	r3, [pc, #432]	; (8003fd0 <UART_SetConfig+0x38c>)
 8003e20:	fba3 1302 	umull	r1, r3, r3, r2
 8003e24:	095b      	lsrs	r3, r3, #5
 8003e26:	2164      	movs	r1, #100	; 0x64
 8003e28:	fb01 f303 	mul.w	r3, r1, r3
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	3332      	adds	r3, #50	; 0x32
 8003e32:	4a67      	ldr	r2, [pc, #412]	; (8003fd0 <UART_SetConfig+0x38c>)
 8003e34:	fba2 2303 	umull	r2, r3, r2, r3
 8003e38:	095b      	lsrs	r3, r3, #5
 8003e3a:	f003 0207 	and.w	r2, r3, #7
 8003e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4432      	add	r2, r6
 8003e44:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e46:	e0b9      	b.n	8003fbc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e4a:	461c      	mov	r4, r3
 8003e4c:	f04f 0500 	mov.w	r5, #0
 8003e50:	4622      	mov	r2, r4
 8003e52:	462b      	mov	r3, r5
 8003e54:	1891      	adds	r1, r2, r2
 8003e56:	6139      	str	r1, [r7, #16]
 8003e58:	415b      	adcs	r3, r3
 8003e5a:	617b      	str	r3, [r7, #20]
 8003e5c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e60:	1912      	adds	r2, r2, r4
 8003e62:	eb45 0303 	adc.w	r3, r5, r3
 8003e66:	f04f 0000 	mov.w	r0, #0
 8003e6a:	f04f 0100 	mov.w	r1, #0
 8003e6e:	00d9      	lsls	r1, r3, #3
 8003e70:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e74:	00d0      	lsls	r0, r2, #3
 8003e76:	4602      	mov	r2, r0
 8003e78:	460b      	mov	r3, r1
 8003e7a:	eb12 0804 	adds.w	r8, r2, r4
 8003e7e:	eb43 0905 	adc.w	r9, r3, r5
 8003e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f04f 0100 	mov.w	r1, #0
 8003e8c:	f04f 0200 	mov.w	r2, #0
 8003e90:	f04f 0300 	mov.w	r3, #0
 8003e94:	008b      	lsls	r3, r1, #2
 8003e96:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003e9a:	0082      	lsls	r2, r0, #2
 8003e9c:	4640      	mov	r0, r8
 8003e9e:	4649      	mov	r1, r9
 8003ea0:	f7fc f9ee 	bl	8000280 <__aeabi_uldivmod>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	4b49      	ldr	r3, [pc, #292]	; (8003fd0 <UART_SetConfig+0x38c>)
 8003eaa:	fba3 2302 	umull	r2, r3, r3, r2
 8003eae:	095b      	lsrs	r3, r3, #5
 8003eb0:	011e      	lsls	r6, r3, #4
 8003eb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f04f 0100 	mov.w	r1, #0
 8003eba:	4602      	mov	r2, r0
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	1894      	adds	r4, r2, r2
 8003ec0:	60bc      	str	r4, [r7, #8]
 8003ec2:	415b      	adcs	r3, r3
 8003ec4:	60fb      	str	r3, [r7, #12]
 8003ec6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003eca:	1812      	adds	r2, r2, r0
 8003ecc:	eb41 0303 	adc.w	r3, r1, r3
 8003ed0:	f04f 0400 	mov.w	r4, #0
 8003ed4:	f04f 0500 	mov.w	r5, #0
 8003ed8:	00dd      	lsls	r5, r3, #3
 8003eda:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ede:	00d4      	lsls	r4, r2, #3
 8003ee0:	4622      	mov	r2, r4
 8003ee2:	462b      	mov	r3, r5
 8003ee4:	1814      	adds	r4, r2, r0
 8003ee6:	64bc      	str	r4, [r7, #72]	; 0x48
 8003ee8:	414b      	adcs	r3, r1
 8003eea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f04f 0100 	mov.w	r1, #0
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	f04f 0300 	mov.w	r3, #0
 8003efe:	008b      	lsls	r3, r1, #2
 8003f00:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f04:	0082      	lsls	r2, r0, #2
 8003f06:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003f0a:	f7fc f9b9 	bl	8000280 <__aeabi_uldivmod>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	460b      	mov	r3, r1
 8003f12:	4b2f      	ldr	r3, [pc, #188]	; (8003fd0 <UART_SetConfig+0x38c>)
 8003f14:	fba3 1302 	umull	r1, r3, r3, r2
 8003f18:	095b      	lsrs	r3, r3, #5
 8003f1a:	2164      	movs	r1, #100	; 0x64
 8003f1c:	fb01 f303 	mul.w	r3, r1, r3
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	011b      	lsls	r3, r3, #4
 8003f24:	3332      	adds	r3, #50	; 0x32
 8003f26:	4a2a      	ldr	r2, [pc, #168]	; (8003fd0 <UART_SetConfig+0x38c>)
 8003f28:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2c:	095b      	lsrs	r3, r3, #5
 8003f2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f32:	441e      	add	r6, r3
 8003f34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f36:	4618      	mov	r0, r3
 8003f38:	f04f 0100 	mov.w	r1, #0
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	460b      	mov	r3, r1
 8003f40:	1894      	adds	r4, r2, r2
 8003f42:	603c      	str	r4, [r7, #0]
 8003f44:	415b      	adcs	r3, r3
 8003f46:	607b      	str	r3, [r7, #4]
 8003f48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f4c:	1812      	adds	r2, r2, r0
 8003f4e:	eb41 0303 	adc.w	r3, r1, r3
 8003f52:	f04f 0400 	mov.w	r4, #0
 8003f56:	f04f 0500 	mov.w	r5, #0
 8003f5a:	00dd      	lsls	r5, r3, #3
 8003f5c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f60:	00d4      	lsls	r4, r2, #3
 8003f62:	4622      	mov	r2, r4
 8003f64:	462b      	mov	r3, r5
 8003f66:	eb12 0a00 	adds.w	sl, r2, r0
 8003f6a:	eb43 0b01 	adc.w	fp, r3, r1
 8003f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f04f 0100 	mov.w	r1, #0
 8003f78:	f04f 0200 	mov.w	r2, #0
 8003f7c:	f04f 0300 	mov.w	r3, #0
 8003f80:	008b      	lsls	r3, r1, #2
 8003f82:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f86:	0082      	lsls	r2, r0, #2
 8003f88:	4650      	mov	r0, sl
 8003f8a:	4659      	mov	r1, fp
 8003f8c:	f7fc f978 	bl	8000280 <__aeabi_uldivmod>
 8003f90:	4602      	mov	r2, r0
 8003f92:	460b      	mov	r3, r1
 8003f94:	4b0e      	ldr	r3, [pc, #56]	; (8003fd0 <UART_SetConfig+0x38c>)
 8003f96:	fba3 1302 	umull	r1, r3, r3, r2
 8003f9a:	095b      	lsrs	r3, r3, #5
 8003f9c:	2164      	movs	r1, #100	; 0x64
 8003f9e:	fb01 f303 	mul.w	r3, r1, r3
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	011b      	lsls	r3, r3, #4
 8003fa6:	3332      	adds	r3, #50	; 0x32
 8003fa8:	4a09      	ldr	r2, [pc, #36]	; (8003fd0 <UART_SetConfig+0x38c>)
 8003faa:	fba2 2303 	umull	r2, r3, r2, r3
 8003fae:	095b      	lsrs	r3, r3, #5
 8003fb0:	f003 020f 	and.w	r2, r3, #15
 8003fb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4432      	add	r2, r6
 8003fba:	609a      	str	r2, [r3, #8]
}
 8003fbc:	bf00      	nop
 8003fbe:	377c      	adds	r7, #124	; 0x7c
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fc6:	bf00      	nop
 8003fc8:	40011000 	.word	0x40011000
 8003fcc:	40011400 	.word	0x40011400
 8003fd0:	51eb851f 	.word	0x51eb851f

08003fd4 <__errno>:
 8003fd4:	4b01      	ldr	r3, [pc, #4]	; (8003fdc <__errno+0x8>)
 8003fd6:	6818      	ldr	r0, [r3, #0]
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	2000000c 	.word	0x2000000c

08003fe0 <__libc_init_array>:
 8003fe0:	b570      	push	{r4, r5, r6, lr}
 8003fe2:	4d0d      	ldr	r5, [pc, #52]	; (8004018 <__libc_init_array+0x38>)
 8003fe4:	4c0d      	ldr	r4, [pc, #52]	; (800401c <__libc_init_array+0x3c>)
 8003fe6:	1b64      	subs	r4, r4, r5
 8003fe8:	10a4      	asrs	r4, r4, #2
 8003fea:	2600      	movs	r6, #0
 8003fec:	42a6      	cmp	r6, r4
 8003fee:	d109      	bne.n	8004004 <__libc_init_array+0x24>
 8003ff0:	4d0b      	ldr	r5, [pc, #44]	; (8004020 <__libc_init_array+0x40>)
 8003ff2:	4c0c      	ldr	r4, [pc, #48]	; (8004024 <__libc_init_array+0x44>)
 8003ff4:	f001 f858 	bl	80050a8 <_init>
 8003ff8:	1b64      	subs	r4, r4, r5
 8003ffa:	10a4      	asrs	r4, r4, #2
 8003ffc:	2600      	movs	r6, #0
 8003ffe:	42a6      	cmp	r6, r4
 8004000:	d105      	bne.n	800400e <__libc_init_array+0x2e>
 8004002:	bd70      	pop	{r4, r5, r6, pc}
 8004004:	f855 3b04 	ldr.w	r3, [r5], #4
 8004008:	4798      	blx	r3
 800400a:	3601      	adds	r6, #1
 800400c:	e7ee      	b.n	8003fec <__libc_init_array+0xc>
 800400e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004012:	4798      	blx	r3
 8004014:	3601      	adds	r6, #1
 8004016:	e7f2      	b.n	8003ffe <__libc_init_array+0x1e>
 8004018:	0800557c 	.word	0x0800557c
 800401c:	0800557c 	.word	0x0800557c
 8004020:	0800557c 	.word	0x0800557c
 8004024:	08005580 	.word	0x08005580

08004028 <memcpy>:
 8004028:	440a      	add	r2, r1
 800402a:	4291      	cmp	r1, r2
 800402c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004030:	d100      	bne.n	8004034 <memcpy+0xc>
 8004032:	4770      	bx	lr
 8004034:	b510      	push	{r4, lr}
 8004036:	f811 4b01 	ldrb.w	r4, [r1], #1
 800403a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800403e:	4291      	cmp	r1, r2
 8004040:	d1f9      	bne.n	8004036 <memcpy+0xe>
 8004042:	bd10      	pop	{r4, pc}

08004044 <memset>:
 8004044:	4402      	add	r2, r0
 8004046:	4603      	mov	r3, r0
 8004048:	4293      	cmp	r3, r2
 800404a:	d100      	bne.n	800404e <memset+0xa>
 800404c:	4770      	bx	lr
 800404e:	f803 1b01 	strb.w	r1, [r3], #1
 8004052:	e7f9      	b.n	8004048 <memset+0x4>

08004054 <iprintf>:
 8004054:	b40f      	push	{r0, r1, r2, r3}
 8004056:	4b0a      	ldr	r3, [pc, #40]	; (8004080 <iprintf+0x2c>)
 8004058:	b513      	push	{r0, r1, r4, lr}
 800405a:	681c      	ldr	r4, [r3, #0]
 800405c:	b124      	cbz	r4, 8004068 <iprintf+0x14>
 800405e:	69a3      	ldr	r3, [r4, #24]
 8004060:	b913      	cbnz	r3, 8004068 <iprintf+0x14>
 8004062:	4620      	mov	r0, r4
 8004064:	f000 fa74 	bl	8004550 <__sinit>
 8004068:	ab05      	add	r3, sp, #20
 800406a:	9a04      	ldr	r2, [sp, #16]
 800406c:	68a1      	ldr	r1, [r4, #8]
 800406e:	9301      	str	r3, [sp, #4]
 8004070:	4620      	mov	r0, r4
 8004072:	f000 fc45 	bl	8004900 <_vfiprintf_r>
 8004076:	b002      	add	sp, #8
 8004078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800407c:	b004      	add	sp, #16
 800407e:	4770      	bx	lr
 8004080:	2000000c 	.word	0x2000000c

08004084 <putchar>:
 8004084:	4b09      	ldr	r3, [pc, #36]	; (80040ac <putchar+0x28>)
 8004086:	b513      	push	{r0, r1, r4, lr}
 8004088:	681c      	ldr	r4, [r3, #0]
 800408a:	4601      	mov	r1, r0
 800408c:	b134      	cbz	r4, 800409c <putchar+0x18>
 800408e:	69a3      	ldr	r3, [r4, #24]
 8004090:	b923      	cbnz	r3, 800409c <putchar+0x18>
 8004092:	9001      	str	r0, [sp, #4]
 8004094:	4620      	mov	r0, r4
 8004096:	f000 fa5b 	bl	8004550 <__sinit>
 800409a:	9901      	ldr	r1, [sp, #4]
 800409c:	68a2      	ldr	r2, [r4, #8]
 800409e:	4620      	mov	r0, r4
 80040a0:	b002      	add	sp, #8
 80040a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040a6:	f000 beef 	b.w	8004e88 <_putc_r>
 80040aa:	bf00      	nop
 80040ac:	2000000c 	.word	0x2000000c

080040b0 <_puts_r>:
 80040b0:	b570      	push	{r4, r5, r6, lr}
 80040b2:	460e      	mov	r6, r1
 80040b4:	4605      	mov	r5, r0
 80040b6:	b118      	cbz	r0, 80040c0 <_puts_r+0x10>
 80040b8:	6983      	ldr	r3, [r0, #24]
 80040ba:	b90b      	cbnz	r3, 80040c0 <_puts_r+0x10>
 80040bc:	f000 fa48 	bl	8004550 <__sinit>
 80040c0:	69ab      	ldr	r3, [r5, #24]
 80040c2:	68ac      	ldr	r4, [r5, #8]
 80040c4:	b913      	cbnz	r3, 80040cc <_puts_r+0x1c>
 80040c6:	4628      	mov	r0, r5
 80040c8:	f000 fa42 	bl	8004550 <__sinit>
 80040cc:	4b2c      	ldr	r3, [pc, #176]	; (8004180 <_puts_r+0xd0>)
 80040ce:	429c      	cmp	r4, r3
 80040d0:	d120      	bne.n	8004114 <_puts_r+0x64>
 80040d2:	686c      	ldr	r4, [r5, #4]
 80040d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040d6:	07db      	lsls	r3, r3, #31
 80040d8:	d405      	bmi.n	80040e6 <_puts_r+0x36>
 80040da:	89a3      	ldrh	r3, [r4, #12]
 80040dc:	0598      	lsls	r0, r3, #22
 80040de:	d402      	bmi.n	80040e6 <_puts_r+0x36>
 80040e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040e2:	f000 fad3 	bl	800468c <__retarget_lock_acquire_recursive>
 80040e6:	89a3      	ldrh	r3, [r4, #12]
 80040e8:	0719      	lsls	r1, r3, #28
 80040ea:	d51d      	bpl.n	8004128 <_puts_r+0x78>
 80040ec:	6923      	ldr	r3, [r4, #16]
 80040ee:	b1db      	cbz	r3, 8004128 <_puts_r+0x78>
 80040f0:	3e01      	subs	r6, #1
 80040f2:	68a3      	ldr	r3, [r4, #8]
 80040f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80040f8:	3b01      	subs	r3, #1
 80040fa:	60a3      	str	r3, [r4, #8]
 80040fc:	bb39      	cbnz	r1, 800414e <_puts_r+0x9e>
 80040fe:	2b00      	cmp	r3, #0
 8004100:	da38      	bge.n	8004174 <_puts_r+0xc4>
 8004102:	4622      	mov	r2, r4
 8004104:	210a      	movs	r1, #10
 8004106:	4628      	mov	r0, r5
 8004108:	f000 f848 	bl	800419c <__swbuf_r>
 800410c:	3001      	adds	r0, #1
 800410e:	d011      	beq.n	8004134 <_puts_r+0x84>
 8004110:	250a      	movs	r5, #10
 8004112:	e011      	b.n	8004138 <_puts_r+0x88>
 8004114:	4b1b      	ldr	r3, [pc, #108]	; (8004184 <_puts_r+0xd4>)
 8004116:	429c      	cmp	r4, r3
 8004118:	d101      	bne.n	800411e <_puts_r+0x6e>
 800411a:	68ac      	ldr	r4, [r5, #8]
 800411c:	e7da      	b.n	80040d4 <_puts_r+0x24>
 800411e:	4b1a      	ldr	r3, [pc, #104]	; (8004188 <_puts_r+0xd8>)
 8004120:	429c      	cmp	r4, r3
 8004122:	bf08      	it	eq
 8004124:	68ec      	ldreq	r4, [r5, #12]
 8004126:	e7d5      	b.n	80040d4 <_puts_r+0x24>
 8004128:	4621      	mov	r1, r4
 800412a:	4628      	mov	r0, r5
 800412c:	f000 f888 	bl	8004240 <__swsetup_r>
 8004130:	2800      	cmp	r0, #0
 8004132:	d0dd      	beq.n	80040f0 <_puts_r+0x40>
 8004134:	f04f 35ff 	mov.w	r5, #4294967295
 8004138:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800413a:	07da      	lsls	r2, r3, #31
 800413c:	d405      	bmi.n	800414a <_puts_r+0x9a>
 800413e:	89a3      	ldrh	r3, [r4, #12]
 8004140:	059b      	lsls	r3, r3, #22
 8004142:	d402      	bmi.n	800414a <_puts_r+0x9a>
 8004144:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004146:	f000 faa2 	bl	800468e <__retarget_lock_release_recursive>
 800414a:	4628      	mov	r0, r5
 800414c:	bd70      	pop	{r4, r5, r6, pc}
 800414e:	2b00      	cmp	r3, #0
 8004150:	da04      	bge.n	800415c <_puts_r+0xac>
 8004152:	69a2      	ldr	r2, [r4, #24]
 8004154:	429a      	cmp	r2, r3
 8004156:	dc06      	bgt.n	8004166 <_puts_r+0xb6>
 8004158:	290a      	cmp	r1, #10
 800415a:	d004      	beq.n	8004166 <_puts_r+0xb6>
 800415c:	6823      	ldr	r3, [r4, #0]
 800415e:	1c5a      	adds	r2, r3, #1
 8004160:	6022      	str	r2, [r4, #0]
 8004162:	7019      	strb	r1, [r3, #0]
 8004164:	e7c5      	b.n	80040f2 <_puts_r+0x42>
 8004166:	4622      	mov	r2, r4
 8004168:	4628      	mov	r0, r5
 800416a:	f000 f817 	bl	800419c <__swbuf_r>
 800416e:	3001      	adds	r0, #1
 8004170:	d1bf      	bne.n	80040f2 <_puts_r+0x42>
 8004172:	e7df      	b.n	8004134 <_puts_r+0x84>
 8004174:	6823      	ldr	r3, [r4, #0]
 8004176:	250a      	movs	r5, #10
 8004178:	1c5a      	adds	r2, r3, #1
 800417a:	6022      	str	r2, [r4, #0]
 800417c:	701d      	strb	r5, [r3, #0]
 800417e:	e7db      	b.n	8004138 <_puts_r+0x88>
 8004180:	08005500 	.word	0x08005500
 8004184:	08005520 	.word	0x08005520
 8004188:	080054e0 	.word	0x080054e0

0800418c <puts>:
 800418c:	4b02      	ldr	r3, [pc, #8]	; (8004198 <puts+0xc>)
 800418e:	4601      	mov	r1, r0
 8004190:	6818      	ldr	r0, [r3, #0]
 8004192:	f7ff bf8d 	b.w	80040b0 <_puts_r>
 8004196:	bf00      	nop
 8004198:	2000000c 	.word	0x2000000c

0800419c <__swbuf_r>:
 800419c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800419e:	460e      	mov	r6, r1
 80041a0:	4614      	mov	r4, r2
 80041a2:	4605      	mov	r5, r0
 80041a4:	b118      	cbz	r0, 80041ae <__swbuf_r+0x12>
 80041a6:	6983      	ldr	r3, [r0, #24]
 80041a8:	b90b      	cbnz	r3, 80041ae <__swbuf_r+0x12>
 80041aa:	f000 f9d1 	bl	8004550 <__sinit>
 80041ae:	4b21      	ldr	r3, [pc, #132]	; (8004234 <__swbuf_r+0x98>)
 80041b0:	429c      	cmp	r4, r3
 80041b2:	d12b      	bne.n	800420c <__swbuf_r+0x70>
 80041b4:	686c      	ldr	r4, [r5, #4]
 80041b6:	69a3      	ldr	r3, [r4, #24]
 80041b8:	60a3      	str	r3, [r4, #8]
 80041ba:	89a3      	ldrh	r3, [r4, #12]
 80041bc:	071a      	lsls	r2, r3, #28
 80041be:	d52f      	bpl.n	8004220 <__swbuf_r+0x84>
 80041c0:	6923      	ldr	r3, [r4, #16]
 80041c2:	b36b      	cbz	r3, 8004220 <__swbuf_r+0x84>
 80041c4:	6923      	ldr	r3, [r4, #16]
 80041c6:	6820      	ldr	r0, [r4, #0]
 80041c8:	1ac0      	subs	r0, r0, r3
 80041ca:	6963      	ldr	r3, [r4, #20]
 80041cc:	b2f6      	uxtb	r6, r6
 80041ce:	4283      	cmp	r3, r0
 80041d0:	4637      	mov	r7, r6
 80041d2:	dc04      	bgt.n	80041de <__swbuf_r+0x42>
 80041d4:	4621      	mov	r1, r4
 80041d6:	4628      	mov	r0, r5
 80041d8:	f000 f926 	bl	8004428 <_fflush_r>
 80041dc:	bb30      	cbnz	r0, 800422c <__swbuf_r+0x90>
 80041de:	68a3      	ldr	r3, [r4, #8]
 80041e0:	3b01      	subs	r3, #1
 80041e2:	60a3      	str	r3, [r4, #8]
 80041e4:	6823      	ldr	r3, [r4, #0]
 80041e6:	1c5a      	adds	r2, r3, #1
 80041e8:	6022      	str	r2, [r4, #0]
 80041ea:	701e      	strb	r6, [r3, #0]
 80041ec:	6963      	ldr	r3, [r4, #20]
 80041ee:	3001      	adds	r0, #1
 80041f0:	4283      	cmp	r3, r0
 80041f2:	d004      	beq.n	80041fe <__swbuf_r+0x62>
 80041f4:	89a3      	ldrh	r3, [r4, #12]
 80041f6:	07db      	lsls	r3, r3, #31
 80041f8:	d506      	bpl.n	8004208 <__swbuf_r+0x6c>
 80041fa:	2e0a      	cmp	r6, #10
 80041fc:	d104      	bne.n	8004208 <__swbuf_r+0x6c>
 80041fe:	4621      	mov	r1, r4
 8004200:	4628      	mov	r0, r5
 8004202:	f000 f911 	bl	8004428 <_fflush_r>
 8004206:	b988      	cbnz	r0, 800422c <__swbuf_r+0x90>
 8004208:	4638      	mov	r0, r7
 800420a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800420c:	4b0a      	ldr	r3, [pc, #40]	; (8004238 <__swbuf_r+0x9c>)
 800420e:	429c      	cmp	r4, r3
 8004210:	d101      	bne.n	8004216 <__swbuf_r+0x7a>
 8004212:	68ac      	ldr	r4, [r5, #8]
 8004214:	e7cf      	b.n	80041b6 <__swbuf_r+0x1a>
 8004216:	4b09      	ldr	r3, [pc, #36]	; (800423c <__swbuf_r+0xa0>)
 8004218:	429c      	cmp	r4, r3
 800421a:	bf08      	it	eq
 800421c:	68ec      	ldreq	r4, [r5, #12]
 800421e:	e7ca      	b.n	80041b6 <__swbuf_r+0x1a>
 8004220:	4621      	mov	r1, r4
 8004222:	4628      	mov	r0, r5
 8004224:	f000 f80c 	bl	8004240 <__swsetup_r>
 8004228:	2800      	cmp	r0, #0
 800422a:	d0cb      	beq.n	80041c4 <__swbuf_r+0x28>
 800422c:	f04f 37ff 	mov.w	r7, #4294967295
 8004230:	e7ea      	b.n	8004208 <__swbuf_r+0x6c>
 8004232:	bf00      	nop
 8004234:	08005500 	.word	0x08005500
 8004238:	08005520 	.word	0x08005520
 800423c:	080054e0 	.word	0x080054e0

08004240 <__swsetup_r>:
 8004240:	4b32      	ldr	r3, [pc, #200]	; (800430c <__swsetup_r+0xcc>)
 8004242:	b570      	push	{r4, r5, r6, lr}
 8004244:	681d      	ldr	r5, [r3, #0]
 8004246:	4606      	mov	r6, r0
 8004248:	460c      	mov	r4, r1
 800424a:	b125      	cbz	r5, 8004256 <__swsetup_r+0x16>
 800424c:	69ab      	ldr	r3, [r5, #24]
 800424e:	b913      	cbnz	r3, 8004256 <__swsetup_r+0x16>
 8004250:	4628      	mov	r0, r5
 8004252:	f000 f97d 	bl	8004550 <__sinit>
 8004256:	4b2e      	ldr	r3, [pc, #184]	; (8004310 <__swsetup_r+0xd0>)
 8004258:	429c      	cmp	r4, r3
 800425a:	d10f      	bne.n	800427c <__swsetup_r+0x3c>
 800425c:	686c      	ldr	r4, [r5, #4]
 800425e:	89a3      	ldrh	r3, [r4, #12]
 8004260:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004264:	0719      	lsls	r1, r3, #28
 8004266:	d42c      	bmi.n	80042c2 <__swsetup_r+0x82>
 8004268:	06dd      	lsls	r5, r3, #27
 800426a:	d411      	bmi.n	8004290 <__swsetup_r+0x50>
 800426c:	2309      	movs	r3, #9
 800426e:	6033      	str	r3, [r6, #0]
 8004270:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004274:	81a3      	strh	r3, [r4, #12]
 8004276:	f04f 30ff 	mov.w	r0, #4294967295
 800427a:	e03e      	b.n	80042fa <__swsetup_r+0xba>
 800427c:	4b25      	ldr	r3, [pc, #148]	; (8004314 <__swsetup_r+0xd4>)
 800427e:	429c      	cmp	r4, r3
 8004280:	d101      	bne.n	8004286 <__swsetup_r+0x46>
 8004282:	68ac      	ldr	r4, [r5, #8]
 8004284:	e7eb      	b.n	800425e <__swsetup_r+0x1e>
 8004286:	4b24      	ldr	r3, [pc, #144]	; (8004318 <__swsetup_r+0xd8>)
 8004288:	429c      	cmp	r4, r3
 800428a:	bf08      	it	eq
 800428c:	68ec      	ldreq	r4, [r5, #12]
 800428e:	e7e6      	b.n	800425e <__swsetup_r+0x1e>
 8004290:	0758      	lsls	r0, r3, #29
 8004292:	d512      	bpl.n	80042ba <__swsetup_r+0x7a>
 8004294:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004296:	b141      	cbz	r1, 80042aa <__swsetup_r+0x6a>
 8004298:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800429c:	4299      	cmp	r1, r3
 800429e:	d002      	beq.n	80042a6 <__swsetup_r+0x66>
 80042a0:	4630      	mov	r0, r6
 80042a2:	f000 fa59 	bl	8004758 <_free_r>
 80042a6:	2300      	movs	r3, #0
 80042a8:	6363      	str	r3, [r4, #52]	; 0x34
 80042aa:	89a3      	ldrh	r3, [r4, #12]
 80042ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80042b0:	81a3      	strh	r3, [r4, #12]
 80042b2:	2300      	movs	r3, #0
 80042b4:	6063      	str	r3, [r4, #4]
 80042b6:	6923      	ldr	r3, [r4, #16]
 80042b8:	6023      	str	r3, [r4, #0]
 80042ba:	89a3      	ldrh	r3, [r4, #12]
 80042bc:	f043 0308 	orr.w	r3, r3, #8
 80042c0:	81a3      	strh	r3, [r4, #12]
 80042c2:	6923      	ldr	r3, [r4, #16]
 80042c4:	b94b      	cbnz	r3, 80042da <__swsetup_r+0x9a>
 80042c6:	89a3      	ldrh	r3, [r4, #12]
 80042c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80042cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042d0:	d003      	beq.n	80042da <__swsetup_r+0x9a>
 80042d2:	4621      	mov	r1, r4
 80042d4:	4630      	mov	r0, r6
 80042d6:	f000 f9ff 	bl	80046d8 <__smakebuf_r>
 80042da:	89a0      	ldrh	r0, [r4, #12]
 80042dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80042e0:	f010 0301 	ands.w	r3, r0, #1
 80042e4:	d00a      	beq.n	80042fc <__swsetup_r+0xbc>
 80042e6:	2300      	movs	r3, #0
 80042e8:	60a3      	str	r3, [r4, #8]
 80042ea:	6963      	ldr	r3, [r4, #20]
 80042ec:	425b      	negs	r3, r3
 80042ee:	61a3      	str	r3, [r4, #24]
 80042f0:	6923      	ldr	r3, [r4, #16]
 80042f2:	b943      	cbnz	r3, 8004306 <__swsetup_r+0xc6>
 80042f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80042f8:	d1ba      	bne.n	8004270 <__swsetup_r+0x30>
 80042fa:	bd70      	pop	{r4, r5, r6, pc}
 80042fc:	0781      	lsls	r1, r0, #30
 80042fe:	bf58      	it	pl
 8004300:	6963      	ldrpl	r3, [r4, #20]
 8004302:	60a3      	str	r3, [r4, #8]
 8004304:	e7f4      	b.n	80042f0 <__swsetup_r+0xb0>
 8004306:	2000      	movs	r0, #0
 8004308:	e7f7      	b.n	80042fa <__swsetup_r+0xba>
 800430a:	bf00      	nop
 800430c:	2000000c 	.word	0x2000000c
 8004310:	08005500 	.word	0x08005500
 8004314:	08005520 	.word	0x08005520
 8004318:	080054e0 	.word	0x080054e0

0800431c <__sflush_r>:
 800431c:	898a      	ldrh	r2, [r1, #12]
 800431e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004322:	4605      	mov	r5, r0
 8004324:	0710      	lsls	r0, r2, #28
 8004326:	460c      	mov	r4, r1
 8004328:	d458      	bmi.n	80043dc <__sflush_r+0xc0>
 800432a:	684b      	ldr	r3, [r1, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	dc05      	bgt.n	800433c <__sflush_r+0x20>
 8004330:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004332:	2b00      	cmp	r3, #0
 8004334:	dc02      	bgt.n	800433c <__sflush_r+0x20>
 8004336:	2000      	movs	r0, #0
 8004338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800433c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800433e:	2e00      	cmp	r6, #0
 8004340:	d0f9      	beq.n	8004336 <__sflush_r+0x1a>
 8004342:	2300      	movs	r3, #0
 8004344:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004348:	682f      	ldr	r7, [r5, #0]
 800434a:	602b      	str	r3, [r5, #0]
 800434c:	d032      	beq.n	80043b4 <__sflush_r+0x98>
 800434e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004350:	89a3      	ldrh	r3, [r4, #12]
 8004352:	075a      	lsls	r2, r3, #29
 8004354:	d505      	bpl.n	8004362 <__sflush_r+0x46>
 8004356:	6863      	ldr	r3, [r4, #4]
 8004358:	1ac0      	subs	r0, r0, r3
 800435a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800435c:	b10b      	cbz	r3, 8004362 <__sflush_r+0x46>
 800435e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004360:	1ac0      	subs	r0, r0, r3
 8004362:	2300      	movs	r3, #0
 8004364:	4602      	mov	r2, r0
 8004366:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004368:	6a21      	ldr	r1, [r4, #32]
 800436a:	4628      	mov	r0, r5
 800436c:	47b0      	blx	r6
 800436e:	1c43      	adds	r3, r0, #1
 8004370:	89a3      	ldrh	r3, [r4, #12]
 8004372:	d106      	bne.n	8004382 <__sflush_r+0x66>
 8004374:	6829      	ldr	r1, [r5, #0]
 8004376:	291d      	cmp	r1, #29
 8004378:	d82c      	bhi.n	80043d4 <__sflush_r+0xb8>
 800437a:	4a2a      	ldr	r2, [pc, #168]	; (8004424 <__sflush_r+0x108>)
 800437c:	40ca      	lsrs	r2, r1
 800437e:	07d6      	lsls	r6, r2, #31
 8004380:	d528      	bpl.n	80043d4 <__sflush_r+0xb8>
 8004382:	2200      	movs	r2, #0
 8004384:	6062      	str	r2, [r4, #4]
 8004386:	04d9      	lsls	r1, r3, #19
 8004388:	6922      	ldr	r2, [r4, #16]
 800438a:	6022      	str	r2, [r4, #0]
 800438c:	d504      	bpl.n	8004398 <__sflush_r+0x7c>
 800438e:	1c42      	adds	r2, r0, #1
 8004390:	d101      	bne.n	8004396 <__sflush_r+0x7a>
 8004392:	682b      	ldr	r3, [r5, #0]
 8004394:	b903      	cbnz	r3, 8004398 <__sflush_r+0x7c>
 8004396:	6560      	str	r0, [r4, #84]	; 0x54
 8004398:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800439a:	602f      	str	r7, [r5, #0]
 800439c:	2900      	cmp	r1, #0
 800439e:	d0ca      	beq.n	8004336 <__sflush_r+0x1a>
 80043a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043a4:	4299      	cmp	r1, r3
 80043a6:	d002      	beq.n	80043ae <__sflush_r+0x92>
 80043a8:	4628      	mov	r0, r5
 80043aa:	f000 f9d5 	bl	8004758 <_free_r>
 80043ae:	2000      	movs	r0, #0
 80043b0:	6360      	str	r0, [r4, #52]	; 0x34
 80043b2:	e7c1      	b.n	8004338 <__sflush_r+0x1c>
 80043b4:	6a21      	ldr	r1, [r4, #32]
 80043b6:	2301      	movs	r3, #1
 80043b8:	4628      	mov	r0, r5
 80043ba:	47b0      	blx	r6
 80043bc:	1c41      	adds	r1, r0, #1
 80043be:	d1c7      	bne.n	8004350 <__sflush_r+0x34>
 80043c0:	682b      	ldr	r3, [r5, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0c4      	beq.n	8004350 <__sflush_r+0x34>
 80043c6:	2b1d      	cmp	r3, #29
 80043c8:	d001      	beq.n	80043ce <__sflush_r+0xb2>
 80043ca:	2b16      	cmp	r3, #22
 80043cc:	d101      	bne.n	80043d2 <__sflush_r+0xb6>
 80043ce:	602f      	str	r7, [r5, #0]
 80043d0:	e7b1      	b.n	8004336 <__sflush_r+0x1a>
 80043d2:	89a3      	ldrh	r3, [r4, #12]
 80043d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043d8:	81a3      	strh	r3, [r4, #12]
 80043da:	e7ad      	b.n	8004338 <__sflush_r+0x1c>
 80043dc:	690f      	ldr	r7, [r1, #16]
 80043de:	2f00      	cmp	r7, #0
 80043e0:	d0a9      	beq.n	8004336 <__sflush_r+0x1a>
 80043e2:	0793      	lsls	r3, r2, #30
 80043e4:	680e      	ldr	r6, [r1, #0]
 80043e6:	bf08      	it	eq
 80043e8:	694b      	ldreq	r3, [r1, #20]
 80043ea:	600f      	str	r7, [r1, #0]
 80043ec:	bf18      	it	ne
 80043ee:	2300      	movne	r3, #0
 80043f0:	eba6 0807 	sub.w	r8, r6, r7
 80043f4:	608b      	str	r3, [r1, #8]
 80043f6:	f1b8 0f00 	cmp.w	r8, #0
 80043fa:	dd9c      	ble.n	8004336 <__sflush_r+0x1a>
 80043fc:	6a21      	ldr	r1, [r4, #32]
 80043fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004400:	4643      	mov	r3, r8
 8004402:	463a      	mov	r2, r7
 8004404:	4628      	mov	r0, r5
 8004406:	47b0      	blx	r6
 8004408:	2800      	cmp	r0, #0
 800440a:	dc06      	bgt.n	800441a <__sflush_r+0xfe>
 800440c:	89a3      	ldrh	r3, [r4, #12]
 800440e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004412:	81a3      	strh	r3, [r4, #12]
 8004414:	f04f 30ff 	mov.w	r0, #4294967295
 8004418:	e78e      	b.n	8004338 <__sflush_r+0x1c>
 800441a:	4407      	add	r7, r0
 800441c:	eba8 0800 	sub.w	r8, r8, r0
 8004420:	e7e9      	b.n	80043f6 <__sflush_r+0xda>
 8004422:	bf00      	nop
 8004424:	20400001 	.word	0x20400001

08004428 <_fflush_r>:
 8004428:	b538      	push	{r3, r4, r5, lr}
 800442a:	690b      	ldr	r3, [r1, #16]
 800442c:	4605      	mov	r5, r0
 800442e:	460c      	mov	r4, r1
 8004430:	b913      	cbnz	r3, 8004438 <_fflush_r+0x10>
 8004432:	2500      	movs	r5, #0
 8004434:	4628      	mov	r0, r5
 8004436:	bd38      	pop	{r3, r4, r5, pc}
 8004438:	b118      	cbz	r0, 8004442 <_fflush_r+0x1a>
 800443a:	6983      	ldr	r3, [r0, #24]
 800443c:	b90b      	cbnz	r3, 8004442 <_fflush_r+0x1a>
 800443e:	f000 f887 	bl	8004550 <__sinit>
 8004442:	4b14      	ldr	r3, [pc, #80]	; (8004494 <_fflush_r+0x6c>)
 8004444:	429c      	cmp	r4, r3
 8004446:	d11b      	bne.n	8004480 <_fflush_r+0x58>
 8004448:	686c      	ldr	r4, [r5, #4]
 800444a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d0ef      	beq.n	8004432 <_fflush_r+0xa>
 8004452:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004454:	07d0      	lsls	r0, r2, #31
 8004456:	d404      	bmi.n	8004462 <_fflush_r+0x3a>
 8004458:	0599      	lsls	r1, r3, #22
 800445a:	d402      	bmi.n	8004462 <_fflush_r+0x3a>
 800445c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800445e:	f000 f915 	bl	800468c <__retarget_lock_acquire_recursive>
 8004462:	4628      	mov	r0, r5
 8004464:	4621      	mov	r1, r4
 8004466:	f7ff ff59 	bl	800431c <__sflush_r>
 800446a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800446c:	07da      	lsls	r2, r3, #31
 800446e:	4605      	mov	r5, r0
 8004470:	d4e0      	bmi.n	8004434 <_fflush_r+0xc>
 8004472:	89a3      	ldrh	r3, [r4, #12]
 8004474:	059b      	lsls	r3, r3, #22
 8004476:	d4dd      	bmi.n	8004434 <_fflush_r+0xc>
 8004478:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800447a:	f000 f908 	bl	800468e <__retarget_lock_release_recursive>
 800447e:	e7d9      	b.n	8004434 <_fflush_r+0xc>
 8004480:	4b05      	ldr	r3, [pc, #20]	; (8004498 <_fflush_r+0x70>)
 8004482:	429c      	cmp	r4, r3
 8004484:	d101      	bne.n	800448a <_fflush_r+0x62>
 8004486:	68ac      	ldr	r4, [r5, #8]
 8004488:	e7df      	b.n	800444a <_fflush_r+0x22>
 800448a:	4b04      	ldr	r3, [pc, #16]	; (800449c <_fflush_r+0x74>)
 800448c:	429c      	cmp	r4, r3
 800448e:	bf08      	it	eq
 8004490:	68ec      	ldreq	r4, [r5, #12]
 8004492:	e7da      	b.n	800444a <_fflush_r+0x22>
 8004494:	08005500 	.word	0x08005500
 8004498:	08005520 	.word	0x08005520
 800449c:	080054e0 	.word	0x080054e0

080044a0 <std>:
 80044a0:	2300      	movs	r3, #0
 80044a2:	b510      	push	{r4, lr}
 80044a4:	4604      	mov	r4, r0
 80044a6:	e9c0 3300 	strd	r3, r3, [r0]
 80044aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80044ae:	6083      	str	r3, [r0, #8]
 80044b0:	8181      	strh	r1, [r0, #12]
 80044b2:	6643      	str	r3, [r0, #100]	; 0x64
 80044b4:	81c2      	strh	r2, [r0, #14]
 80044b6:	6183      	str	r3, [r0, #24]
 80044b8:	4619      	mov	r1, r3
 80044ba:	2208      	movs	r2, #8
 80044bc:	305c      	adds	r0, #92	; 0x5c
 80044be:	f7ff fdc1 	bl	8004044 <memset>
 80044c2:	4b05      	ldr	r3, [pc, #20]	; (80044d8 <std+0x38>)
 80044c4:	6263      	str	r3, [r4, #36]	; 0x24
 80044c6:	4b05      	ldr	r3, [pc, #20]	; (80044dc <std+0x3c>)
 80044c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80044ca:	4b05      	ldr	r3, [pc, #20]	; (80044e0 <std+0x40>)
 80044cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80044ce:	4b05      	ldr	r3, [pc, #20]	; (80044e4 <std+0x44>)
 80044d0:	6224      	str	r4, [r4, #32]
 80044d2:	6323      	str	r3, [r4, #48]	; 0x30
 80044d4:	bd10      	pop	{r4, pc}
 80044d6:	bf00      	nop
 80044d8:	08004f39 	.word	0x08004f39
 80044dc:	08004f5b 	.word	0x08004f5b
 80044e0:	08004f93 	.word	0x08004f93
 80044e4:	08004fb7 	.word	0x08004fb7

080044e8 <_cleanup_r>:
 80044e8:	4901      	ldr	r1, [pc, #4]	; (80044f0 <_cleanup_r+0x8>)
 80044ea:	f000 b8af 	b.w	800464c <_fwalk_reent>
 80044ee:	bf00      	nop
 80044f0:	08004429 	.word	0x08004429

080044f4 <__sfmoreglue>:
 80044f4:	b570      	push	{r4, r5, r6, lr}
 80044f6:	1e4a      	subs	r2, r1, #1
 80044f8:	2568      	movs	r5, #104	; 0x68
 80044fa:	4355      	muls	r5, r2
 80044fc:	460e      	mov	r6, r1
 80044fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004502:	f000 f979 	bl	80047f8 <_malloc_r>
 8004506:	4604      	mov	r4, r0
 8004508:	b140      	cbz	r0, 800451c <__sfmoreglue+0x28>
 800450a:	2100      	movs	r1, #0
 800450c:	e9c0 1600 	strd	r1, r6, [r0]
 8004510:	300c      	adds	r0, #12
 8004512:	60a0      	str	r0, [r4, #8]
 8004514:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004518:	f7ff fd94 	bl	8004044 <memset>
 800451c:	4620      	mov	r0, r4
 800451e:	bd70      	pop	{r4, r5, r6, pc}

08004520 <__sfp_lock_acquire>:
 8004520:	4801      	ldr	r0, [pc, #4]	; (8004528 <__sfp_lock_acquire+0x8>)
 8004522:	f000 b8b3 	b.w	800468c <__retarget_lock_acquire_recursive>
 8004526:	bf00      	nop
 8004528:	2000099c 	.word	0x2000099c

0800452c <__sfp_lock_release>:
 800452c:	4801      	ldr	r0, [pc, #4]	; (8004534 <__sfp_lock_release+0x8>)
 800452e:	f000 b8ae 	b.w	800468e <__retarget_lock_release_recursive>
 8004532:	bf00      	nop
 8004534:	2000099c 	.word	0x2000099c

08004538 <__sinit_lock_acquire>:
 8004538:	4801      	ldr	r0, [pc, #4]	; (8004540 <__sinit_lock_acquire+0x8>)
 800453a:	f000 b8a7 	b.w	800468c <__retarget_lock_acquire_recursive>
 800453e:	bf00      	nop
 8004540:	20000997 	.word	0x20000997

08004544 <__sinit_lock_release>:
 8004544:	4801      	ldr	r0, [pc, #4]	; (800454c <__sinit_lock_release+0x8>)
 8004546:	f000 b8a2 	b.w	800468e <__retarget_lock_release_recursive>
 800454a:	bf00      	nop
 800454c:	20000997 	.word	0x20000997

08004550 <__sinit>:
 8004550:	b510      	push	{r4, lr}
 8004552:	4604      	mov	r4, r0
 8004554:	f7ff fff0 	bl	8004538 <__sinit_lock_acquire>
 8004558:	69a3      	ldr	r3, [r4, #24]
 800455a:	b11b      	cbz	r3, 8004564 <__sinit+0x14>
 800455c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004560:	f7ff bff0 	b.w	8004544 <__sinit_lock_release>
 8004564:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004568:	6523      	str	r3, [r4, #80]	; 0x50
 800456a:	4b13      	ldr	r3, [pc, #76]	; (80045b8 <__sinit+0x68>)
 800456c:	4a13      	ldr	r2, [pc, #76]	; (80045bc <__sinit+0x6c>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	62a2      	str	r2, [r4, #40]	; 0x28
 8004572:	42a3      	cmp	r3, r4
 8004574:	bf04      	itt	eq
 8004576:	2301      	moveq	r3, #1
 8004578:	61a3      	streq	r3, [r4, #24]
 800457a:	4620      	mov	r0, r4
 800457c:	f000 f820 	bl	80045c0 <__sfp>
 8004580:	6060      	str	r0, [r4, #4]
 8004582:	4620      	mov	r0, r4
 8004584:	f000 f81c 	bl	80045c0 <__sfp>
 8004588:	60a0      	str	r0, [r4, #8]
 800458a:	4620      	mov	r0, r4
 800458c:	f000 f818 	bl	80045c0 <__sfp>
 8004590:	2200      	movs	r2, #0
 8004592:	60e0      	str	r0, [r4, #12]
 8004594:	2104      	movs	r1, #4
 8004596:	6860      	ldr	r0, [r4, #4]
 8004598:	f7ff ff82 	bl	80044a0 <std>
 800459c:	68a0      	ldr	r0, [r4, #8]
 800459e:	2201      	movs	r2, #1
 80045a0:	2109      	movs	r1, #9
 80045a2:	f7ff ff7d 	bl	80044a0 <std>
 80045a6:	68e0      	ldr	r0, [r4, #12]
 80045a8:	2202      	movs	r2, #2
 80045aa:	2112      	movs	r1, #18
 80045ac:	f7ff ff78 	bl	80044a0 <std>
 80045b0:	2301      	movs	r3, #1
 80045b2:	61a3      	str	r3, [r4, #24]
 80045b4:	e7d2      	b.n	800455c <__sinit+0xc>
 80045b6:	bf00      	nop
 80045b8:	080054dc 	.word	0x080054dc
 80045bc:	080044e9 	.word	0x080044e9

080045c0 <__sfp>:
 80045c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045c2:	4607      	mov	r7, r0
 80045c4:	f7ff ffac 	bl	8004520 <__sfp_lock_acquire>
 80045c8:	4b1e      	ldr	r3, [pc, #120]	; (8004644 <__sfp+0x84>)
 80045ca:	681e      	ldr	r6, [r3, #0]
 80045cc:	69b3      	ldr	r3, [r6, #24]
 80045ce:	b913      	cbnz	r3, 80045d6 <__sfp+0x16>
 80045d0:	4630      	mov	r0, r6
 80045d2:	f7ff ffbd 	bl	8004550 <__sinit>
 80045d6:	3648      	adds	r6, #72	; 0x48
 80045d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80045dc:	3b01      	subs	r3, #1
 80045de:	d503      	bpl.n	80045e8 <__sfp+0x28>
 80045e0:	6833      	ldr	r3, [r6, #0]
 80045e2:	b30b      	cbz	r3, 8004628 <__sfp+0x68>
 80045e4:	6836      	ldr	r6, [r6, #0]
 80045e6:	e7f7      	b.n	80045d8 <__sfp+0x18>
 80045e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80045ec:	b9d5      	cbnz	r5, 8004624 <__sfp+0x64>
 80045ee:	4b16      	ldr	r3, [pc, #88]	; (8004648 <__sfp+0x88>)
 80045f0:	60e3      	str	r3, [r4, #12]
 80045f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80045f6:	6665      	str	r5, [r4, #100]	; 0x64
 80045f8:	f000 f847 	bl	800468a <__retarget_lock_init_recursive>
 80045fc:	f7ff ff96 	bl	800452c <__sfp_lock_release>
 8004600:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004604:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004608:	6025      	str	r5, [r4, #0]
 800460a:	61a5      	str	r5, [r4, #24]
 800460c:	2208      	movs	r2, #8
 800460e:	4629      	mov	r1, r5
 8004610:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004614:	f7ff fd16 	bl	8004044 <memset>
 8004618:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800461c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004620:	4620      	mov	r0, r4
 8004622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004624:	3468      	adds	r4, #104	; 0x68
 8004626:	e7d9      	b.n	80045dc <__sfp+0x1c>
 8004628:	2104      	movs	r1, #4
 800462a:	4638      	mov	r0, r7
 800462c:	f7ff ff62 	bl	80044f4 <__sfmoreglue>
 8004630:	4604      	mov	r4, r0
 8004632:	6030      	str	r0, [r6, #0]
 8004634:	2800      	cmp	r0, #0
 8004636:	d1d5      	bne.n	80045e4 <__sfp+0x24>
 8004638:	f7ff ff78 	bl	800452c <__sfp_lock_release>
 800463c:	230c      	movs	r3, #12
 800463e:	603b      	str	r3, [r7, #0]
 8004640:	e7ee      	b.n	8004620 <__sfp+0x60>
 8004642:	bf00      	nop
 8004644:	080054dc 	.word	0x080054dc
 8004648:	ffff0001 	.word	0xffff0001

0800464c <_fwalk_reent>:
 800464c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004650:	4606      	mov	r6, r0
 8004652:	4688      	mov	r8, r1
 8004654:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004658:	2700      	movs	r7, #0
 800465a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800465e:	f1b9 0901 	subs.w	r9, r9, #1
 8004662:	d505      	bpl.n	8004670 <_fwalk_reent+0x24>
 8004664:	6824      	ldr	r4, [r4, #0]
 8004666:	2c00      	cmp	r4, #0
 8004668:	d1f7      	bne.n	800465a <_fwalk_reent+0xe>
 800466a:	4638      	mov	r0, r7
 800466c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004670:	89ab      	ldrh	r3, [r5, #12]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d907      	bls.n	8004686 <_fwalk_reent+0x3a>
 8004676:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800467a:	3301      	adds	r3, #1
 800467c:	d003      	beq.n	8004686 <_fwalk_reent+0x3a>
 800467e:	4629      	mov	r1, r5
 8004680:	4630      	mov	r0, r6
 8004682:	47c0      	blx	r8
 8004684:	4307      	orrs	r7, r0
 8004686:	3568      	adds	r5, #104	; 0x68
 8004688:	e7e9      	b.n	800465e <_fwalk_reent+0x12>

0800468a <__retarget_lock_init_recursive>:
 800468a:	4770      	bx	lr

0800468c <__retarget_lock_acquire_recursive>:
 800468c:	4770      	bx	lr

0800468e <__retarget_lock_release_recursive>:
 800468e:	4770      	bx	lr

08004690 <__swhatbuf_r>:
 8004690:	b570      	push	{r4, r5, r6, lr}
 8004692:	460e      	mov	r6, r1
 8004694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004698:	2900      	cmp	r1, #0
 800469a:	b096      	sub	sp, #88	; 0x58
 800469c:	4614      	mov	r4, r2
 800469e:	461d      	mov	r5, r3
 80046a0:	da07      	bge.n	80046b2 <__swhatbuf_r+0x22>
 80046a2:	2300      	movs	r3, #0
 80046a4:	602b      	str	r3, [r5, #0]
 80046a6:	89b3      	ldrh	r3, [r6, #12]
 80046a8:	061a      	lsls	r2, r3, #24
 80046aa:	d410      	bmi.n	80046ce <__swhatbuf_r+0x3e>
 80046ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046b0:	e00e      	b.n	80046d0 <__swhatbuf_r+0x40>
 80046b2:	466a      	mov	r2, sp
 80046b4:	f000 fca6 	bl	8005004 <_fstat_r>
 80046b8:	2800      	cmp	r0, #0
 80046ba:	dbf2      	blt.n	80046a2 <__swhatbuf_r+0x12>
 80046bc:	9a01      	ldr	r2, [sp, #4]
 80046be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80046c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80046c6:	425a      	negs	r2, r3
 80046c8:	415a      	adcs	r2, r3
 80046ca:	602a      	str	r2, [r5, #0]
 80046cc:	e7ee      	b.n	80046ac <__swhatbuf_r+0x1c>
 80046ce:	2340      	movs	r3, #64	; 0x40
 80046d0:	2000      	movs	r0, #0
 80046d2:	6023      	str	r3, [r4, #0]
 80046d4:	b016      	add	sp, #88	; 0x58
 80046d6:	bd70      	pop	{r4, r5, r6, pc}

080046d8 <__smakebuf_r>:
 80046d8:	898b      	ldrh	r3, [r1, #12]
 80046da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80046dc:	079d      	lsls	r5, r3, #30
 80046de:	4606      	mov	r6, r0
 80046e0:	460c      	mov	r4, r1
 80046e2:	d507      	bpl.n	80046f4 <__smakebuf_r+0x1c>
 80046e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80046e8:	6023      	str	r3, [r4, #0]
 80046ea:	6123      	str	r3, [r4, #16]
 80046ec:	2301      	movs	r3, #1
 80046ee:	6163      	str	r3, [r4, #20]
 80046f0:	b002      	add	sp, #8
 80046f2:	bd70      	pop	{r4, r5, r6, pc}
 80046f4:	ab01      	add	r3, sp, #4
 80046f6:	466a      	mov	r2, sp
 80046f8:	f7ff ffca 	bl	8004690 <__swhatbuf_r>
 80046fc:	9900      	ldr	r1, [sp, #0]
 80046fe:	4605      	mov	r5, r0
 8004700:	4630      	mov	r0, r6
 8004702:	f000 f879 	bl	80047f8 <_malloc_r>
 8004706:	b948      	cbnz	r0, 800471c <__smakebuf_r+0x44>
 8004708:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800470c:	059a      	lsls	r2, r3, #22
 800470e:	d4ef      	bmi.n	80046f0 <__smakebuf_r+0x18>
 8004710:	f023 0303 	bic.w	r3, r3, #3
 8004714:	f043 0302 	orr.w	r3, r3, #2
 8004718:	81a3      	strh	r3, [r4, #12]
 800471a:	e7e3      	b.n	80046e4 <__smakebuf_r+0xc>
 800471c:	4b0d      	ldr	r3, [pc, #52]	; (8004754 <__smakebuf_r+0x7c>)
 800471e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004720:	89a3      	ldrh	r3, [r4, #12]
 8004722:	6020      	str	r0, [r4, #0]
 8004724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004728:	81a3      	strh	r3, [r4, #12]
 800472a:	9b00      	ldr	r3, [sp, #0]
 800472c:	6163      	str	r3, [r4, #20]
 800472e:	9b01      	ldr	r3, [sp, #4]
 8004730:	6120      	str	r0, [r4, #16]
 8004732:	b15b      	cbz	r3, 800474c <__smakebuf_r+0x74>
 8004734:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004738:	4630      	mov	r0, r6
 800473a:	f000 fc75 	bl	8005028 <_isatty_r>
 800473e:	b128      	cbz	r0, 800474c <__smakebuf_r+0x74>
 8004740:	89a3      	ldrh	r3, [r4, #12]
 8004742:	f023 0303 	bic.w	r3, r3, #3
 8004746:	f043 0301 	orr.w	r3, r3, #1
 800474a:	81a3      	strh	r3, [r4, #12]
 800474c:	89a0      	ldrh	r0, [r4, #12]
 800474e:	4305      	orrs	r5, r0
 8004750:	81a5      	strh	r5, [r4, #12]
 8004752:	e7cd      	b.n	80046f0 <__smakebuf_r+0x18>
 8004754:	080044e9 	.word	0x080044e9

08004758 <_free_r>:
 8004758:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800475a:	2900      	cmp	r1, #0
 800475c:	d048      	beq.n	80047f0 <_free_r+0x98>
 800475e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004762:	9001      	str	r0, [sp, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	f1a1 0404 	sub.w	r4, r1, #4
 800476a:	bfb8      	it	lt
 800476c:	18e4      	addlt	r4, r4, r3
 800476e:	f000 fc7d 	bl	800506c <__malloc_lock>
 8004772:	4a20      	ldr	r2, [pc, #128]	; (80047f4 <_free_r+0x9c>)
 8004774:	9801      	ldr	r0, [sp, #4]
 8004776:	6813      	ldr	r3, [r2, #0]
 8004778:	4615      	mov	r5, r2
 800477a:	b933      	cbnz	r3, 800478a <_free_r+0x32>
 800477c:	6063      	str	r3, [r4, #4]
 800477e:	6014      	str	r4, [r2, #0]
 8004780:	b003      	add	sp, #12
 8004782:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004786:	f000 bc77 	b.w	8005078 <__malloc_unlock>
 800478a:	42a3      	cmp	r3, r4
 800478c:	d90b      	bls.n	80047a6 <_free_r+0x4e>
 800478e:	6821      	ldr	r1, [r4, #0]
 8004790:	1862      	adds	r2, r4, r1
 8004792:	4293      	cmp	r3, r2
 8004794:	bf04      	itt	eq
 8004796:	681a      	ldreq	r2, [r3, #0]
 8004798:	685b      	ldreq	r3, [r3, #4]
 800479a:	6063      	str	r3, [r4, #4]
 800479c:	bf04      	itt	eq
 800479e:	1852      	addeq	r2, r2, r1
 80047a0:	6022      	streq	r2, [r4, #0]
 80047a2:	602c      	str	r4, [r5, #0]
 80047a4:	e7ec      	b.n	8004780 <_free_r+0x28>
 80047a6:	461a      	mov	r2, r3
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	b10b      	cbz	r3, 80047b0 <_free_r+0x58>
 80047ac:	42a3      	cmp	r3, r4
 80047ae:	d9fa      	bls.n	80047a6 <_free_r+0x4e>
 80047b0:	6811      	ldr	r1, [r2, #0]
 80047b2:	1855      	adds	r5, r2, r1
 80047b4:	42a5      	cmp	r5, r4
 80047b6:	d10b      	bne.n	80047d0 <_free_r+0x78>
 80047b8:	6824      	ldr	r4, [r4, #0]
 80047ba:	4421      	add	r1, r4
 80047bc:	1854      	adds	r4, r2, r1
 80047be:	42a3      	cmp	r3, r4
 80047c0:	6011      	str	r1, [r2, #0]
 80047c2:	d1dd      	bne.n	8004780 <_free_r+0x28>
 80047c4:	681c      	ldr	r4, [r3, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	6053      	str	r3, [r2, #4]
 80047ca:	4421      	add	r1, r4
 80047cc:	6011      	str	r1, [r2, #0]
 80047ce:	e7d7      	b.n	8004780 <_free_r+0x28>
 80047d0:	d902      	bls.n	80047d8 <_free_r+0x80>
 80047d2:	230c      	movs	r3, #12
 80047d4:	6003      	str	r3, [r0, #0]
 80047d6:	e7d3      	b.n	8004780 <_free_r+0x28>
 80047d8:	6825      	ldr	r5, [r4, #0]
 80047da:	1961      	adds	r1, r4, r5
 80047dc:	428b      	cmp	r3, r1
 80047de:	bf04      	itt	eq
 80047e0:	6819      	ldreq	r1, [r3, #0]
 80047e2:	685b      	ldreq	r3, [r3, #4]
 80047e4:	6063      	str	r3, [r4, #4]
 80047e6:	bf04      	itt	eq
 80047e8:	1949      	addeq	r1, r1, r5
 80047ea:	6021      	streq	r1, [r4, #0]
 80047ec:	6054      	str	r4, [r2, #4]
 80047ee:	e7c7      	b.n	8004780 <_free_r+0x28>
 80047f0:	b003      	add	sp, #12
 80047f2:	bd30      	pop	{r4, r5, pc}
 80047f4:	200004b0 	.word	0x200004b0

080047f8 <_malloc_r>:
 80047f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047fa:	1ccd      	adds	r5, r1, #3
 80047fc:	f025 0503 	bic.w	r5, r5, #3
 8004800:	3508      	adds	r5, #8
 8004802:	2d0c      	cmp	r5, #12
 8004804:	bf38      	it	cc
 8004806:	250c      	movcc	r5, #12
 8004808:	2d00      	cmp	r5, #0
 800480a:	4606      	mov	r6, r0
 800480c:	db01      	blt.n	8004812 <_malloc_r+0x1a>
 800480e:	42a9      	cmp	r1, r5
 8004810:	d903      	bls.n	800481a <_malloc_r+0x22>
 8004812:	230c      	movs	r3, #12
 8004814:	6033      	str	r3, [r6, #0]
 8004816:	2000      	movs	r0, #0
 8004818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800481a:	f000 fc27 	bl	800506c <__malloc_lock>
 800481e:	4921      	ldr	r1, [pc, #132]	; (80048a4 <_malloc_r+0xac>)
 8004820:	680a      	ldr	r2, [r1, #0]
 8004822:	4614      	mov	r4, r2
 8004824:	b99c      	cbnz	r4, 800484e <_malloc_r+0x56>
 8004826:	4f20      	ldr	r7, [pc, #128]	; (80048a8 <_malloc_r+0xb0>)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	b923      	cbnz	r3, 8004836 <_malloc_r+0x3e>
 800482c:	4621      	mov	r1, r4
 800482e:	4630      	mov	r0, r6
 8004830:	f000 fb72 	bl	8004f18 <_sbrk_r>
 8004834:	6038      	str	r0, [r7, #0]
 8004836:	4629      	mov	r1, r5
 8004838:	4630      	mov	r0, r6
 800483a:	f000 fb6d 	bl	8004f18 <_sbrk_r>
 800483e:	1c43      	adds	r3, r0, #1
 8004840:	d123      	bne.n	800488a <_malloc_r+0x92>
 8004842:	230c      	movs	r3, #12
 8004844:	6033      	str	r3, [r6, #0]
 8004846:	4630      	mov	r0, r6
 8004848:	f000 fc16 	bl	8005078 <__malloc_unlock>
 800484c:	e7e3      	b.n	8004816 <_malloc_r+0x1e>
 800484e:	6823      	ldr	r3, [r4, #0]
 8004850:	1b5b      	subs	r3, r3, r5
 8004852:	d417      	bmi.n	8004884 <_malloc_r+0x8c>
 8004854:	2b0b      	cmp	r3, #11
 8004856:	d903      	bls.n	8004860 <_malloc_r+0x68>
 8004858:	6023      	str	r3, [r4, #0]
 800485a:	441c      	add	r4, r3
 800485c:	6025      	str	r5, [r4, #0]
 800485e:	e004      	b.n	800486a <_malloc_r+0x72>
 8004860:	6863      	ldr	r3, [r4, #4]
 8004862:	42a2      	cmp	r2, r4
 8004864:	bf0c      	ite	eq
 8004866:	600b      	streq	r3, [r1, #0]
 8004868:	6053      	strne	r3, [r2, #4]
 800486a:	4630      	mov	r0, r6
 800486c:	f000 fc04 	bl	8005078 <__malloc_unlock>
 8004870:	f104 000b 	add.w	r0, r4, #11
 8004874:	1d23      	adds	r3, r4, #4
 8004876:	f020 0007 	bic.w	r0, r0, #7
 800487a:	1ac2      	subs	r2, r0, r3
 800487c:	d0cc      	beq.n	8004818 <_malloc_r+0x20>
 800487e:	1a1b      	subs	r3, r3, r0
 8004880:	50a3      	str	r3, [r4, r2]
 8004882:	e7c9      	b.n	8004818 <_malloc_r+0x20>
 8004884:	4622      	mov	r2, r4
 8004886:	6864      	ldr	r4, [r4, #4]
 8004888:	e7cc      	b.n	8004824 <_malloc_r+0x2c>
 800488a:	1cc4      	adds	r4, r0, #3
 800488c:	f024 0403 	bic.w	r4, r4, #3
 8004890:	42a0      	cmp	r0, r4
 8004892:	d0e3      	beq.n	800485c <_malloc_r+0x64>
 8004894:	1a21      	subs	r1, r4, r0
 8004896:	4630      	mov	r0, r6
 8004898:	f000 fb3e 	bl	8004f18 <_sbrk_r>
 800489c:	3001      	adds	r0, #1
 800489e:	d1dd      	bne.n	800485c <_malloc_r+0x64>
 80048a0:	e7cf      	b.n	8004842 <_malloc_r+0x4a>
 80048a2:	bf00      	nop
 80048a4:	200004b0 	.word	0x200004b0
 80048a8:	200004b4 	.word	0x200004b4

080048ac <__sfputc_r>:
 80048ac:	6893      	ldr	r3, [r2, #8]
 80048ae:	3b01      	subs	r3, #1
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	b410      	push	{r4}
 80048b4:	6093      	str	r3, [r2, #8]
 80048b6:	da08      	bge.n	80048ca <__sfputc_r+0x1e>
 80048b8:	6994      	ldr	r4, [r2, #24]
 80048ba:	42a3      	cmp	r3, r4
 80048bc:	db01      	blt.n	80048c2 <__sfputc_r+0x16>
 80048be:	290a      	cmp	r1, #10
 80048c0:	d103      	bne.n	80048ca <__sfputc_r+0x1e>
 80048c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048c6:	f7ff bc69 	b.w	800419c <__swbuf_r>
 80048ca:	6813      	ldr	r3, [r2, #0]
 80048cc:	1c58      	adds	r0, r3, #1
 80048ce:	6010      	str	r0, [r2, #0]
 80048d0:	7019      	strb	r1, [r3, #0]
 80048d2:	4608      	mov	r0, r1
 80048d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048d8:	4770      	bx	lr

080048da <__sfputs_r>:
 80048da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048dc:	4606      	mov	r6, r0
 80048de:	460f      	mov	r7, r1
 80048e0:	4614      	mov	r4, r2
 80048e2:	18d5      	adds	r5, r2, r3
 80048e4:	42ac      	cmp	r4, r5
 80048e6:	d101      	bne.n	80048ec <__sfputs_r+0x12>
 80048e8:	2000      	movs	r0, #0
 80048ea:	e007      	b.n	80048fc <__sfputs_r+0x22>
 80048ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048f0:	463a      	mov	r2, r7
 80048f2:	4630      	mov	r0, r6
 80048f4:	f7ff ffda 	bl	80048ac <__sfputc_r>
 80048f8:	1c43      	adds	r3, r0, #1
 80048fa:	d1f3      	bne.n	80048e4 <__sfputs_r+0xa>
 80048fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004900 <_vfiprintf_r>:
 8004900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004904:	460d      	mov	r5, r1
 8004906:	b09d      	sub	sp, #116	; 0x74
 8004908:	4614      	mov	r4, r2
 800490a:	4698      	mov	r8, r3
 800490c:	4606      	mov	r6, r0
 800490e:	b118      	cbz	r0, 8004918 <_vfiprintf_r+0x18>
 8004910:	6983      	ldr	r3, [r0, #24]
 8004912:	b90b      	cbnz	r3, 8004918 <_vfiprintf_r+0x18>
 8004914:	f7ff fe1c 	bl	8004550 <__sinit>
 8004918:	4b89      	ldr	r3, [pc, #548]	; (8004b40 <_vfiprintf_r+0x240>)
 800491a:	429d      	cmp	r5, r3
 800491c:	d11b      	bne.n	8004956 <_vfiprintf_r+0x56>
 800491e:	6875      	ldr	r5, [r6, #4]
 8004920:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004922:	07d9      	lsls	r1, r3, #31
 8004924:	d405      	bmi.n	8004932 <_vfiprintf_r+0x32>
 8004926:	89ab      	ldrh	r3, [r5, #12]
 8004928:	059a      	lsls	r2, r3, #22
 800492a:	d402      	bmi.n	8004932 <_vfiprintf_r+0x32>
 800492c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800492e:	f7ff fead 	bl	800468c <__retarget_lock_acquire_recursive>
 8004932:	89ab      	ldrh	r3, [r5, #12]
 8004934:	071b      	lsls	r3, r3, #28
 8004936:	d501      	bpl.n	800493c <_vfiprintf_r+0x3c>
 8004938:	692b      	ldr	r3, [r5, #16]
 800493a:	b9eb      	cbnz	r3, 8004978 <_vfiprintf_r+0x78>
 800493c:	4629      	mov	r1, r5
 800493e:	4630      	mov	r0, r6
 8004940:	f7ff fc7e 	bl	8004240 <__swsetup_r>
 8004944:	b1c0      	cbz	r0, 8004978 <_vfiprintf_r+0x78>
 8004946:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004948:	07dc      	lsls	r4, r3, #31
 800494a:	d50e      	bpl.n	800496a <_vfiprintf_r+0x6a>
 800494c:	f04f 30ff 	mov.w	r0, #4294967295
 8004950:	b01d      	add	sp, #116	; 0x74
 8004952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004956:	4b7b      	ldr	r3, [pc, #492]	; (8004b44 <_vfiprintf_r+0x244>)
 8004958:	429d      	cmp	r5, r3
 800495a:	d101      	bne.n	8004960 <_vfiprintf_r+0x60>
 800495c:	68b5      	ldr	r5, [r6, #8]
 800495e:	e7df      	b.n	8004920 <_vfiprintf_r+0x20>
 8004960:	4b79      	ldr	r3, [pc, #484]	; (8004b48 <_vfiprintf_r+0x248>)
 8004962:	429d      	cmp	r5, r3
 8004964:	bf08      	it	eq
 8004966:	68f5      	ldreq	r5, [r6, #12]
 8004968:	e7da      	b.n	8004920 <_vfiprintf_r+0x20>
 800496a:	89ab      	ldrh	r3, [r5, #12]
 800496c:	0598      	lsls	r0, r3, #22
 800496e:	d4ed      	bmi.n	800494c <_vfiprintf_r+0x4c>
 8004970:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004972:	f7ff fe8c 	bl	800468e <__retarget_lock_release_recursive>
 8004976:	e7e9      	b.n	800494c <_vfiprintf_r+0x4c>
 8004978:	2300      	movs	r3, #0
 800497a:	9309      	str	r3, [sp, #36]	; 0x24
 800497c:	2320      	movs	r3, #32
 800497e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004982:	f8cd 800c 	str.w	r8, [sp, #12]
 8004986:	2330      	movs	r3, #48	; 0x30
 8004988:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004b4c <_vfiprintf_r+0x24c>
 800498c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004990:	f04f 0901 	mov.w	r9, #1
 8004994:	4623      	mov	r3, r4
 8004996:	469a      	mov	sl, r3
 8004998:	f813 2b01 	ldrb.w	r2, [r3], #1
 800499c:	b10a      	cbz	r2, 80049a2 <_vfiprintf_r+0xa2>
 800499e:	2a25      	cmp	r2, #37	; 0x25
 80049a0:	d1f9      	bne.n	8004996 <_vfiprintf_r+0x96>
 80049a2:	ebba 0b04 	subs.w	fp, sl, r4
 80049a6:	d00b      	beq.n	80049c0 <_vfiprintf_r+0xc0>
 80049a8:	465b      	mov	r3, fp
 80049aa:	4622      	mov	r2, r4
 80049ac:	4629      	mov	r1, r5
 80049ae:	4630      	mov	r0, r6
 80049b0:	f7ff ff93 	bl	80048da <__sfputs_r>
 80049b4:	3001      	adds	r0, #1
 80049b6:	f000 80aa 	beq.w	8004b0e <_vfiprintf_r+0x20e>
 80049ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049bc:	445a      	add	r2, fp
 80049be:	9209      	str	r2, [sp, #36]	; 0x24
 80049c0:	f89a 3000 	ldrb.w	r3, [sl]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f000 80a2 	beq.w	8004b0e <_vfiprintf_r+0x20e>
 80049ca:	2300      	movs	r3, #0
 80049cc:	f04f 32ff 	mov.w	r2, #4294967295
 80049d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049d4:	f10a 0a01 	add.w	sl, sl, #1
 80049d8:	9304      	str	r3, [sp, #16]
 80049da:	9307      	str	r3, [sp, #28]
 80049dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80049e0:	931a      	str	r3, [sp, #104]	; 0x68
 80049e2:	4654      	mov	r4, sl
 80049e4:	2205      	movs	r2, #5
 80049e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049ea:	4858      	ldr	r0, [pc, #352]	; (8004b4c <_vfiprintf_r+0x24c>)
 80049ec:	f7fb fbf8 	bl	80001e0 <memchr>
 80049f0:	9a04      	ldr	r2, [sp, #16]
 80049f2:	b9d8      	cbnz	r0, 8004a2c <_vfiprintf_r+0x12c>
 80049f4:	06d1      	lsls	r1, r2, #27
 80049f6:	bf44      	itt	mi
 80049f8:	2320      	movmi	r3, #32
 80049fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049fe:	0713      	lsls	r3, r2, #28
 8004a00:	bf44      	itt	mi
 8004a02:	232b      	movmi	r3, #43	; 0x2b
 8004a04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a08:	f89a 3000 	ldrb.w	r3, [sl]
 8004a0c:	2b2a      	cmp	r3, #42	; 0x2a
 8004a0e:	d015      	beq.n	8004a3c <_vfiprintf_r+0x13c>
 8004a10:	9a07      	ldr	r2, [sp, #28]
 8004a12:	4654      	mov	r4, sl
 8004a14:	2000      	movs	r0, #0
 8004a16:	f04f 0c0a 	mov.w	ip, #10
 8004a1a:	4621      	mov	r1, r4
 8004a1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a20:	3b30      	subs	r3, #48	; 0x30
 8004a22:	2b09      	cmp	r3, #9
 8004a24:	d94e      	bls.n	8004ac4 <_vfiprintf_r+0x1c4>
 8004a26:	b1b0      	cbz	r0, 8004a56 <_vfiprintf_r+0x156>
 8004a28:	9207      	str	r2, [sp, #28]
 8004a2a:	e014      	b.n	8004a56 <_vfiprintf_r+0x156>
 8004a2c:	eba0 0308 	sub.w	r3, r0, r8
 8004a30:	fa09 f303 	lsl.w	r3, r9, r3
 8004a34:	4313      	orrs	r3, r2
 8004a36:	9304      	str	r3, [sp, #16]
 8004a38:	46a2      	mov	sl, r4
 8004a3a:	e7d2      	b.n	80049e2 <_vfiprintf_r+0xe2>
 8004a3c:	9b03      	ldr	r3, [sp, #12]
 8004a3e:	1d19      	adds	r1, r3, #4
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	9103      	str	r1, [sp, #12]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	bfbb      	ittet	lt
 8004a48:	425b      	neglt	r3, r3
 8004a4a:	f042 0202 	orrlt.w	r2, r2, #2
 8004a4e:	9307      	strge	r3, [sp, #28]
 8004a50:	9307      	strlt	r3, [sp, #28]
 8004a52:	bfb8      	it	lt
 8004a54:	9204      	strlt	r2, [sp, #16]
 8004a56:	7823      	ldrb	r3, [r4, #0]
 8004a58:	2b2e      	cmp	r3, #46	; 0x2e
 8004a5a:	d10c      	bne.n	8004a76 <_vfiprintf_r+0x176>
 8004a5c:	7863      	ldrb	r3, [r4, #1]
 8004a5e:	2b2a      	cmp	r3, #42	; 0x2a
 8004a60:	d135      	bne.n	8004ace <_vfiprintf_r+0x1ce>
 8004a62:	9b03      	ldr	r3, [sp, #12]
 8004a64:	1d1a      	adds	r2, r3, #4
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	9203      	str	r2, [sp, #12]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	bfb8      	it	lt
 8004a6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a72:	3402      	adds	r4, #2
 8004a74:	9305      	str	r3, [sp, #20]
 8004a76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004b5c <_vfiprintf_r+0x25c>
 8004a7a:	7821      	ldrb	r1, [r4, #0]
 8004a7c:	2203      	movs	r2, #3
 8004a7e:	4650      	mov	r0, sl
 8004a80:	f7fb fbae 	bl	80001e0 <memchr>
 8004a84:	b140      	cbz	r0, 8004a98 <_vfiprintf_r+0x198>
 8004a86:	2340      	movs	r3, #64	; 0x40
 8004a88:	eba0 000a 	sub.w	r0, r0, sl
 8004a8c:	fa03 f000 	lsl.w	r0, r3, r0
 8004a90:	9b04      	ldr	r3, [sp, #16]
 8004a92:	4303      	orrs	r3, r0
 8004a94:	3401      	adds	r4, #1
 8004a96:	9304      	str	r3, [sp, #16]
 8004a98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a9c:	482c      	ldr	r0, [pc, #176]	; (8004b50 <_vfiprintf_r+0x250>)
 8004a9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004aa2:	2206      	movs	r2, #6
 8004aa4:	f7fb fb9c 	bl	80001e0 <memchr>
 8004aa8:	2800      	cmp	r0, #0
 8004aaa:	d03f      	beq.n	8004b2c <_vfiprintf_r+0x22c>
 8004aac:	4b29      	ldr	r3, [pc, #164]	; (8004b54 <_vfiprintf_r+0x254>)
 8004aae:	bb1b      	cbnz	r3, 8004af8 <_vfiprintf_r+0x1f8>
 8004ab0:	9b03      	ldr	r3, [sp, #12]
 8004ab2:	3307      	adds	r3, #7
 8004ab4:	f023 0307 	bic.w	r3, r3, #7
 8004ab8:	3308      	adds	r3, #8
 8004aba:	9303      	str	r3, [sp, #12]
 8004abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004abe:	443b      	add	r3, r7
 8004ac0:	9309      	str	r3, [sp, #36]	; 0x24
 8004ac2:	e767      	b.n	8004994 <_vfiprintf_r+0x94>
 8004ac4:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ac8:	460c      	mov	r4, r1
 8004aca:	2001      	movs	r0, #1
 8004acc:	e7a5      	b.n	8004a1a <_vfiprintf_r+0x11a>
 8004ace:	2300      	movs	r3, #0
 8004ad0:	3401      	adds	r4, #1
 8004ad2:	9305      	str	r3, [sp, #20]
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	f04f 0c0a 	mov.w	ip, #10
 8004ada:	4620      	mov	r0, r4
 8004adc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ae0:	3a30      	subs	r2, #48	; 0x30
 8004ae2:	2a09      	cmp	r2, #9
 8004ae4:	d903      	bls.n	8004aee <_vfiprintf_r+0x1ee>
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d0c5      	beq.n	8004a76 <_vfiprintf_r+0x176>
 8004aea:	9105      	str	r1, [sp, #20]
 8004aec:	e7c3      	b.n	8004a76 <_vfiprintf_r+0x176>
 8004aee:	fb0c 2101 	mla	r1, ip, r1, r2
 8004af2:	4604      	mov	r4, r0
 8004af4:	2301      	movs	r3, #1
 8004af6:	e7f0      	b.n	8004ada <_vfiprintf_r+0x1da>
 8004af8:	ab03      	add	r3, sp, #12
 8004afa:	9300      	str	r3, [sp, #0]
 8004afc:	462a      	mov	r2, r5
 8004afe:	4b16      	ldr	r3, [pc, #88]	; (8004b58 <_vfiprintf_r+0x258>)
 8004b00:	a904      	add	r1, sp, #16
 8004b02:	4630      	mov	r0, r6
 8004b04:	f3af 8000 	nop.w
 8004b08:	4607      	mov	r7, r0
 8004b0a:	1c78      	adds	r0, r7, #1
 8004b0c:	d1d6      	bne.n	8004abc <_vfiprintf_r+0x1bc>
 8004b0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b10:	07d9      	lsls	r1, r3, #31
 8004b12:	d405      	bmi.n	8004b20 <_vfiprintf_r+0x220>
 8004b14:	89ab      	ldrh	r3, [r5, #12]
 8004b16:	059a      	lsls	r2, r3, #22
 8004b18:	d402      	bmi.n	8004b20 <_vfiprintf_r+0x220>
 8004b1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b1c:	f7ff fdb7 	bl	800468e <__retarget_lock_release_recursive>
 8004b20:	89ab      	ldrh	r3, [r5, #12]
 8004b22:	065b      	lsls	r3, r3, #25
 8004b24:	f53f af12 	bmi.w	800494c <_vfiprintf_r+0x4c>
 8004b28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b2a:	e711      	b.n	8004950 <_vfiprintf_r+0x50>
 8004b2c:	ab03      	add	r3, sp, #12
 8004b2e:	9300      	str	r3, [sp, #0]
 8004b30:	462a      	mov	r2, r5
 8004b32:	4b09      	ldr	r3, [pc, #36]	; (8004b58 <_vfiprintf_r+0x258>)
 8004b34:	a904      	add	r1, sp, #16
 8004b36:	4630      	mov	r0, r6
 8004b38:	f000 f880 	bl	8004c3c <_printf_i>
 8004b3c:	e7e4      	b.n	8004b08 <_vfiprintf_r+0x208>
 8004b3e:	bf00      	nop
 8004b40:	08005500 	.word	0x08005500
 8004b44:	08005520 	.word	0x08005520
 8004b48:	080054e0 	.word	0x080054e0
 8004b4c:	08005540 	.word	0x08005540
 8004b50:	0800554a 	.word	0x0800554a
 8004b54:	00000000 	.word	0x00000000
 8004b58:	080048db 	.word	0x080048db
 8004b5c:	08005546 	.word	0x08005546

08004b60 <_printf_common>:
 8004b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b64:	4616      	mov	r6, r2
 8004b66:	4699      	mov	r9, r3
 8004b68:	688a      	ldr	r2, [r1, #8]
 8004b6a:	690b      	ldr	r3, [r1, #16]
 8004b6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b70:	4293      	cmp	r3, r2
 8004b72:	bfb8      	it	lt
 8004b74:	4613      	movlt	r3, r2
 8004b76:	6033      	str	r3, [r6, #0]
 8004b78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b7c:	4607      	mov	r7, r0
 8004b7e:	460c      	mov	r4, r1
 8004b80:	b10a      	cbz	r2, 8004b86 <_printf_common+0x26>
 8004b82:	3301      	adds	r3, #1
 8004b84:	6033      	str	r3, [r6, #0]
 8004b86:	6823      	ldr	r3, [r4, #0]
 8004b88:	0699      	lsls	r1, r3, #26
 8004b8a:	bf42      	ittt	mi
 8004b8c:	6833      	ldrmi	r3, [r6, #0]
 8004b8e:	3302      	addmi	r3, #2
 8004b90:	6033      	strmi	r3, [r6, #0]
 8004b92:	6825      	ldr	r5, [r4, #0]
 8004b94:	f015 0506 	ands.w	r5, r5, #6
 8004b98:	d106      	bne.n	8004ba8 <_printf_common+0x48>
 8004b9a:	f104 0a19 	add.w	sl, r4, #25
 8004b9e:	68e3      	ldr	r3, [r4, #12]
 8004ba0:	6832      	ldr	r2, [r6, #0]
 8004ba2:	1a9b      	subs	r3, r3, r2
 8004ba4:	42ab      	cmp	r3, r5
 8004ba6:	dc26      	bgt.n	8004bf6 <_printf_common+0x96>
 8004ba8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004bac:	1e13      	subs	r3, r2, #0
 8004bae:	6822      	ldr	r2, [r4, #0]
 8004bb0:	bf18      	it	ne
 8004bb2:	2301      	movne	r3, #1
 8004bb4:	0692      	lsls	r2, r2, #26
 8004bb6:	d42b      	bmi.n	8004c10 <_printf_common+0xb0>
 8004bb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bbc:	4649      	mov	r1, r9
 8004bbe:	4638      	mov	r0, r7
 8004bc0:	47c0      	blx	r8
 8004bc2:	3001      	adds	r0, #1
 8004bc4:	d01e      	beq.n	8004c04 <_printf_common+0xa4>
 8004bc6:	6823      	ldr	r3, [r4, #0]
 8004bc8:	68e5      	ldr	r5, [r4, #12]
 8004bca:	6832      	ldr	r2, [r6, #0]
 8004bcc:	f003 0306 	and.w	r3, r3, #6
 8004bd0:	2b04      	cmp	r3, #4
 8004bd2:	bf08      	it	eq
 8004bd4:	1aad      	subeq	r5, r5, r2
 8004bd6:	68a3      	ldr	r3, [r4, #8]
 8004bd8:	6922      	ldr	r2, [r4, #16]
 8004bda:	bf0c      	ite	eq
 8004bdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004be0:	2500      	movne	r5, #0
 8004be2:	4293      	cmp	r3, r2
 8004be4:	bfc4      	itt	gt
 8004be6:	1a9b      	subgt	r3, r3, r2
 8004be8:	18ed      	addgt	r5, r5, r3
 8004bea:	2600      	movs	r6, #0
 8004bec:	341a      	adds	r4, #26
 8004bee:	42b5      	cmp	r5, r6
 8004bf0:	d11a      	bne.n	8004c28 <_printf_common+0xc8>
 8004bf2:	2000      	movs	r0, #0
 8004bf4:	e008      	b.n	8004c08 <_printf_common+0xa8>
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	4652      	mov	r2, sl
 8004bfa:	4649      	mov	r1, r9
 8004bfc:	4638      	mov	r0, r7
 8004bfe:	47c0      	blx	r8
 8004c00:	3001      	adds	r0, #1
 8004c02:	d103      	bne.n	8004c0c <_printf_common+0xac>
 8004c04:	f04f 30ff 	mov.w	r0, #4294967295
 8004c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c0c:	3501      	adds	r5, #1
 8004c0e:	e7c6      	b.n	8004b9e <_printf_common+0x3e>
 8004c10:	18e1      	adds	r1, r4, r3
 8004c12:	1c5a      	adds	r2, r3, #1
 8004c14:	2030      	movs	r0, #48	; 0x30
 8004c16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c1a:	4422      	add	r2, r4
 8004c1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c24:	3302      	adds	r3, #2
 8004c26:	e7c7      	b.n	8004bb8 <_printf_common+0x58>
 8004c28:	2301      	movs	r3, #1
 8004c2a:	4622      	mov	r2, r4
 8004c2c:	4649      	mov	r1, r9
 8004c2e:	4638      	mov	r0, r7
 8004c30:	47c0      	blx	r8
 8004c32:	3001      	adds	r0, #1
 8004c34:	d0e6      	beq.n	8004c04 <_printf_common+0xa4>
 8004c36:	3601      	adds	r6, #1
 8004c38:	e7d9      	b.n	8004bee <_printf_common+0x8e>
	...

08004c3c <_printf_i>:
 8004c3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c40:	460c      	mov	r4, r1
 8004c42:	4691      	mov	r9, r2
 8004c44:	7e27      	ldrb	r7, [r4, #24]
 8004c46:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004c48:	2f78      	cmp	r7, #120	; 0x78
 8004c4a:	4680      	mov	r8, r0
 8004c4c:	469a      	mov	sl, r3
 8004c4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c52:	d807      	bhi.n	8004c64 <_printf_i+0x28>
 8004c54:	2f62      	cmp	r7, #98	; 0x62
 8004c56:	d80a      	bhi.n	8004c6e <_printf_i+0x32>
 8004c58:	2f00      	cmp	r7, #0
 8004c5a:	f000 80d8 	beq.w	8004e0e <_printf_i+0x1d2>
 8004c5e:	2f58      	cmp	r7, #88	; 0x58
 8004c60:	f000 80a3 	beq.w	8004daa <_printf_i+0x16e>
 8004c64:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004c68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c6c:	e03a      	b.n	8004ce4 <_printf_i+0xa8>
 8004c6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c72:	2b15      	cmp	r3, #21
 8004c74:	d8f6      	bhi.n	8004c64 <_printf_i+0x28>
 8004c76:	a001      	add	r0, pc, #4	; (adr r0, 8004c7c <_printf_i+0x40>)
 8004c78:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004c7c:	08004cd5 	.word	0x08004cd5
 8004c80:	08004ce9 	.word	0x08004ce9
 8004c84:	08004c65 	.word	0x08004c65
 8004c88:	08004c65 	.word	0x08004c65
 8004c8c:	08004c65 	.word	0x08004c65
 8004c90:	08004c65 	.word	0x08004c65
 8004c94:	08004ce9 	.word	0x08004ce9
 8004c98:	08004c65 	.word	0x08004c65
 8004c9c:	08004c65 	.word	0x08004c65
 8004ca0:	08004c65 	.word	0x08004c65
 8004ca4:	08004c65 	.word	0x08004c65
 8004ca8:	08004df5 	.word	0x08004df5
 8004cac:	08004d19 	.word	0x08004d19
 8004cb0:	08004dd7 	.word	0x08004dd7
 8004cb4:	08004c65 	.word	0x08004c65
 8004cb8:	08004c65 	.word	0x08004c65
 8004cbc:	08004e17 	.word	0x08004e17
 8004cc0:	08004c65 	.word	0x08004c65
 8004cc4:	08004d19 	.word	0x08004d19
 8004cc8:	08004c65 	.word	0x08004c65
 8004ccc:	08004c65 	.word	0x08004c65
 8004cd0:	08004ddf 	.word	0x08004ddf
 8004cd4:	680b      	ldr	r3, [r1, #0]
 8004cd6:	1d1a      	adds	r2, r3, #4
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	600a      	str	r2, [r1, #0]
 8004cdc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ce0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e0a3      	b.n	8004e30 <_printf_i+0x1f4>
 8004ce8:	6825      	ldr	r5, [r4, #0]
 8004cea:	6808      	ldr	r0, [r1, #0]
 8004cec:	062e      	lsls	r6, r5, #24
 8004cee:	f100 0304 	add.w	r3, r0, #4
 8004cf2:	d50a      	bpl.n	8004d0a <_printf_i+0xce>
 8004cf4:	6805      	ldr	r5, [r0, #0]
 8004cf6:	600b      	str	r3, [r1, #0]
 8004cf8:	2d00      	cmp	r5, #0
 8004cfa:	da03      	bge.n	8004d04 <_printf_i+0xc8>
 8004cfc:	232d      	movs	r3, #45	; 0x2d
 8004cfe:	426d      	negs	r5, r5
 8004d00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d04:	485e      	ldr	r0, [pc, #376]	; (8004e80 <_printf_i+0x244>)
 8004d06:	230a      	movs	r3, #10
 8004d08:	e019      	b.n	8004d3e <_printf_i+0x102>
 8004d0a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004d0e:	6805      	ldr	r5, [r0, #0]
 8004d10:	600b      	str	r3, [r1, #0]
 8004d12:	bf18      	it	ne
 8004d14:	b22d      	sxthne	r5, r5
 8004d16:	e7ef      	b.n	8004cf8 <_printf_i+0xbc>
 8004d18:	680b      	ldr	r3, [r1, #0]
 8004d1a:	6825      	ldr	r5, [r4, #0]
 8004d1c:	1d18      	adds	r0, r3, #4
 8004d1e:	6008      	str	r0, [r1, #0]
 8004d20:	0628      	lsls	r0, r5, #24
 8004d22:	d501      	bpl.n	8004d28 <_printf_i+0xec>
 8004d24:	681d      	ldr	r5, [r3, #0]
 8004d26:	e002      	b.n	8004d2e <_printf_i+0xf2>
 8004d28:	0669      	lsls	r1, r5, #25
 8004d2a:	d5fb      	bpl.n	8004d24 <_printf_i+0xe8>
 8004d2c:	881d      	ldrh	r5, [r3, #0]
 8004d2e:	4854      	ldr	r0, [pc, #336]	; (8004e80 <_printf_i+0x244>)
 8004d30:	2f6f      	cmp	r7, #111	; 0x6f
 8004d32:	bf0c      	ite	eq
 8004d34:	2308      	moveq	r3, #8
 8004d36:	230a      	movne	r3, #10
 8004d38:	2100      	movs	r1, #0
 8004d3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d3e:	6866      	ldr	r6, [r4, #4]
 8004d40:	60a6      	str	r6, [r4, #8]
 8004d42:	2e00      	cmp	r6, #0
 8004d44:	bfa2      	ittt	ge
 8004d46:	6821      	ldrge	r1, [r4, #0]
 8004d48:	f021 0104 	bicge.w	r1, r1, #4
 8004d4c:	6021      	strge	r1, [r4, #0]
 8004d4e:	b90d      	cbnz	r5, 8004d54 <_printf_i+0x118>
 8004d50:	2e00      	cmp	r6, #0
 8004d52:	d04d      	beq.n	8004df0 <_printf_i+0x1b4>
 8004d54:	4616      	mov	r6, r2
 8004d56:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d5a:	fb03 5711 	mls	r7, r3, r1, r5
 8004d5e:	5dc7      	ldrb	r7, [r0, r7]
 8004d60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d64:	462f      	mov	r7, r5
 8004d66:	42bb      	cmp	r3, r7
 8004d68:	460d      	mov	r5, r1
 8004d6a:	d9f4      	bls.n	8004d56 <_printf_i+0x11a>
 8004d6c:	2b08      	cmp	r3, #8
 8004d6e:	d10b      	bne.n	8004d88 <_printf_i+0x14c>
 8004d70:	6823      	ldr	r3, [r4, #0]
 8004d72:	07df      	lsls	r7, r3, #31
 8004d74:	d508      	bpl.n	8004d88 <_printf_i+0x14c>
 8004d76:	6923      	ldr	r3, [r4, #16]
 8004d78:	6861      	ldr	r1, [r4, #4]
 8004d7a:	4299      	cmp	r1, r3
 8004d7c:	bfde      	ittt	le
 8004d7e:	2330      	movle	r3, #48	; 0x30
 8004d80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d84:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d88:	1b92      	subs	r2, r2, r6
 8004d8a:	6122      	str	r2, [r4, #16]
 8004d8c:	f8cd a000 	str.w	sl, [sp]
 8004d90:	464b      	mov	r3, r9
 8004d92:	aa03      	add	r2, sp, #12
 8004d94:	4621      	mov	r1, r4
 8004d96:	4640      	mov	r0, r8
 8004d98:	f7ff fee2 	bl	8004b60 <_printf_common>
 8004d9c:	3001      	adds	r0, #1
 8004d9e:	d14c      	bne.n	8004e3a <_printf_i+0x1fe>
 8004da0:	f04f 30ff 	mov.w	r0, #4294967295
 8004da4:	b004      	add	sp, #16
 8004da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004daa:	4835      	ldr	r0, [pc, #212]	; (8004e80 <_printf_i+0x244>)
 8004dac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004db0:	6823      	ldr	r3, [r4, #0]
 8004db2:	680e      	ldr	r6, [r1, #0]
 8004db4:	061f      	lsls	r7, r3, #24
 8004db6:	f856 5b04 	ldr.w	r5, [r6], #4
 8004dba:	600e      	str	r6, [r1, #0]
 8004dbc:	d514      	bpl.n	8004de8 <_printf_i+0x1ac>
 8004dbe:	07d9      	lsls	r1, r3, #31
 8004dc0:	bf44      	itt	mi
 8004dc2:	f043 0320 	orrmi.w	r3, r3, #32
 8004dc6:	6023      	strmi	r3, [r4, #0]
 8004dc8:	b91d      	cbnz	r5, 8004dd2 <_printf_i+0x196>
 8004dca:	6823      	ldr	r3, [r4, #0]
 8004dcc:	f023 0320 	bic.w	r3, r3, #32
 8004dd0:	6023      	str	r3, [r4, #0]
 8004dd2:	2310      	movs	r3, #16
 8004dd4:	e7b0      	b.n	8004d38 <_printf_i+0xfc>
 8004dd6:	6823      	ldr	r3, [r4, #0]
 8004dd8:	f043 0320 	orr.w	r3, r3, #32
 8004ddc:	6023      	str	r3, [r4, #0]
 8004dde:	2378      	movs	r3, #120	; 0x78
 8004de0:	4828      	ldr	r0, [pc, #160]	; (8004e84 <_printf_i+0x248>)
 8004de2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004de6:	e7e3      	b.n	8004db0 <_printf_i+0x174>
 8004de8:	065e      	lsls	r6, r3, #25
 8004dea:	bf48      	it	mi
 8004dec:	b2ad      	uxthmi	r5, r5
 8004dee:	e7e6      	b.n	8004dbe <_printf_i+0x182>
 8004df0:	4616      	mov	r6, r2
 8004df2:	e7bb      	b.n	8004d6c <_printf_i+0x130>
 8004df4:	680b      	ldr	r3, [r1, #0]
 8004df6:	6826      	ldr	r6, [r4, #0]
 8004df8:	6960      	ldr	r0, [r4, #20]
 8004dfa:	1d1d      	adds	r5, r3, #4
 8004dfc:	600d      	str	r5, [r1, #0]
 8004dfe:	0635      	lsls	r5, r6, #24
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	d501      	bpl.n	8004e08 <_printf_i+0x1cc>
 8004e04:	6018      	str	r0, [r3, #0]
 8004e06:	e002      	b.n	8004e0e <_printf_i+0x1d2>
 8004e08:	0671      	lsls	r1, r6, #25
 8004e0a:	d5fb      	bpl.n	8004e04 <_printf_i+0x1c8>
 8004e0c:	8018      	strh	r0, [r3, #0]
 8004e0e:	2300      	movs	r3, #0
 8004e10:	6123      	str	r3, [r4, #16]
 8004e12:	4616      	mov	r6, r2
 8004e14:	e7ba      	b.n	8004d8c <_printf_i+0x150>
 8004e16:	680b      	ldr	r3, [r1, #0]
 8004e18:	1d1a      	adds	r2, r3, #4
 8004e1a:	600a      	str	r2, [r1, #0]
 8004e1c:	681e      	ldr	r6, [r3, #0]
 8004e1e:	6862      	ldr	r2, [r4, #4]
 8004e20:	2100      	movs	r1, #0
 8004e22:	4630      	mov	r0, r6
 8004e24:	f7fb f9dc 	bl	80001e0 <memchr>
 8004e28:	b108      	cbz	r0, 8004e2e <_printf_i+0x1f2>
 8004e2a:	1b80      	subs	r0, r0, r6
 8004e2c:	6060      	str	r0, [r4, #4]
 8004e2e:	6863      	ldr	r3, [r4, #4]
 8004e30:	6123      	str	r3, [r4, #16]
 8004e32:	2300      	movs	r3, #0
 8004e34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e38:	e7a8      	b.n	8004d8c <_printf_i+0x150>
 8004e3a:	6923      	ldr	r3, [r4, #16]
 8004e3c:	4632      	mov	r2, r6
 8004e3e:	4649      	mov	r1, r9
 8004e40:	4640      	mov	r0, r8
 8004e42:	47d0      	blx	sl
 8004e44:	3001      	adds	r0, #1
 8004e46:	d0ab      	beq.n	8004da0 <_printf_i+0x164>
 8004e48:	6823      	ldr	r3, [r4, #0]
 8004e4a:	079b      	lsls	r3, r3, #30
 8004e4c:	d413      	bmi.n	8004e76 <_printf_i+0x23a>
 8004e4e:	68e0      	ldr	r0, [r4, #12]
 8004e50:	9b03      	ldr	r3, [sp, #12]
 8004e52:	4298      	cmp	r0, r3
 8004e54:	bfb8      	it	lt
 8004e56:	4618      	movlt	r0, r3
 8004e58:	e7a4      	b.n	8004da4 <_printf_i+0x168>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	4632      	mov	r2, r6
 8004e5e:	4649      	mov	r1, r9
 8004e60:	4640      	mov	r0, r8
 8004e62:	47d0      	blx	sl
 8004e64:	3001      	adds	r0, #1
 8004e66:	d09b      	beq.n	8004da0 <_printf_i+0x164>
 8004e68:	3501      	adds	r5, #1
 8004e6a:	68e3      	ldr	r3, [r4, #12]
 8004e6c:	9903      	ldr	r1, [sp, #12]
 8004e6e:	1a5b      	subs	r3, r3, r1
 8004e70:	42ab      	cmp	r3, r5
 8004e72:	dcf2      	bgt.n	8004e5a <_printf_i+0x21e>
 8004e74:	e7eb      	b.n	8004e4e <_printf_i+0x212>
 8004e76:	2500      	movs	r5, #0
 8004e78:	f104 0619 	add.w	r6, r4, #25
 8004e7c:	e7f5      	b.n	8004e6a <_printf_i+0x22e>
 8004e7e:	bf00      	nop
 8004e80:	08005551 	.word	0x08005551
 8004e84:	08005562 	.word	0x08005562

08004e88 <_putc_r>:
 8004e88:	b570      	push	{r4, r5, r6, lr}
 8004e8a:	460d      	mov	r5, r1
 8004e8c:	4614      	mov	r4, r2
 8004e8e:	4606      	mov	r6, r0
 8004e90:	b118      	cbz	r0, 8004e9a <_putc_r+0x12>
 8004e92:	6983      	ldr	r3, [r0, #24]
 8004e94:	b90b      	cbnz	r3, 8004e9a <_putc_r+0x12>
 8004e96:	f7ff fb5b 	bl	8004550 <__sinit>
 8004e9a:	4b1c      	ldr	r3, [pc, #112]	; (8004f0c <_putc_r+0x84>)
 8004e9c:	429c      	cmp	r4, r3
 8004e9e:	d124      	bne.n	8004eea <_putc_r+0x62>
 8004ea0:	6874      	ldr	r4, [r6, #4]
 8004ea2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ea4:	07d8      	lsls	r0, r3, #31
 8004ea6:	d405      	bmi.n	8004eb4 <_putc_r+0x2c>
 8004ea8:	89a3      	ldrh	r3, [r4, #12]
 8004eaa:	0599      	lsls	r1, r3, #22
 8004eac:	d402      	bmi.n	8004eb4 <_putc_r+0x2c>
 8004eae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004eb0:	f7ff fbec 	bl	800468c <__retarget_lock_acquire_recursive>
 8004eb4:	68a3      	ldr	r3, [r4, #8]
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	60a3      	str	r3, [r4, #8]
 8004ebc:	da05      	bge.n	8004eca <_putc_r+0x42>
 8004ebe:	69a2      	ldr	r2, [r4, #24]
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	db1c      	blt.n	8004efe <_putc_r+0x76>
 8004ec4:	b2eb      	uxtb	r3, r5
 8004ec6:	2b0a      	cmp	r3, #10
 8004ec8:	d019      	beq.n	8004efe <_putc_r+0x76>
 8004eca:	6823      	ldr	r3, [r4, #0]
 8004ecc:	1c5a      	adds	r2, r3, #1
 8004ece:	6022      	str	r2, [r4, #0]
 8004ed0:	701d      	strb	r5, [r3, #0]
 8004ed2:	b2ed      	uxtb	r5, r5
 8004ed4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ed6:	07da      	lsls	r2, r3, #31
 8004ed8:	d405      	bmi.n	8004ee6 <_putc_r+0x5e>
 8004eda:	89a3      	ldrh	r3, [r4, #12]
 8004edc:	059b      	lsls	r3, r3, #22
 8004ede:	d402      	bmi.n	8004ee6 <_putc_r+0x5e>
 8004ee0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ee2:	f7ff fbd4 	bl	800468e <__retarget_lock_release_recursive>
 8004ee6:	4628      	mov	r0, r5
 8004ee8:	bd70      	pop	{r4, r5, r6, pc}
 8004eea:	4b09      	ldr	r3, [pc, #36]	; (8004f10 <_putc_r+0x88>)
 8004eec:	429c      	cmp	r4, r3
 8004eee:	d101      	bne.n	8004ef4 <_putc_r+0x6c>
 8004ef0:	68b4      	ldr	r4, [r6, #8]
 8004ef2:	e7d6      	b.n	8004ea2 <_putc_r+0x1a>
 8004ef4:	4b07      	ldr	r3, [pc, #28]	; (8004f14 <_putc_r+0x8c>)
 8004ef6:	429c      	cmp	r4, r3
 8004ef8:	bf08      	it	eq
 8004efa:	68f4      	ldreq	r4, [r6, #12]
 8004efc:	e7d1      	b.n	8004ea2 <_putc_r+0x1a>
 8004efe:	4629      	mov	r1, r5
 8004f00:	4622      	mov	r2, r4
 8004f02:	4630      	mov	r0, r6
 8004f04:	f7ff f94a 	bl	800419c <__swbuf_r>
 8004f08:	4605      	mov	r5, r0
 8004f0a:	e7e3      	b.n	8004ed4 <_putc_r+0x4c>
 8004f0c:	08005500 	.word	0x08005500
 8004f10:	08005520 	.word	0x08005520
 8004f14:	080054e0 	.word	0x080054e0

08004f18 <_sbrk_r>:
 8004f18:	b538      	push	{r3, r4, r5, lr}
 8004f1a:	4d06      	ldr	r5, [pc, #24]	; (8004f34 <_sbrk_r+0x1c>)
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	4604      	mov	r4, r0
 8004f20:	4608      	mov	r0, r1
 8004f22:	602b      	str	r3, [r5, #0]
 8004f24:	f7fc fb52 	bl	80015cc <_sbrk>
 8004f28:	1c43      	adds	r3, r0, #1
 8004f2a:	d102      	bne.n	8004f32 <_sbrk_r+0x1a>
 8004f2c:	682b      	ldr	r3, [r5, #0]
 8004f2e:	b103      	cbz	r3, 8004f32 <_sbrk_r+0x1a>
 8004f30:	6023      	str	r3, [r4, #0]
 8004f32:	bd38      	pop	{r3, r4, r5, pc}
 8004f34:	200009a0 	.word	0x200009a0

08004f38 <__sread>:
 8004f38:	b510      	push	{r4, lr}
 8004f3a:	460c      	mov	r4, r1
 8004f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f40:	f000 f8a0 	bl	8005084 <_read_r>
 8004f44:	2800      	cmp	r0, #0
 8004f46:	bfab      	itete	ge
 8004f48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f4a:	89a3      	ldrhlt	r3, [r4, #12]
 8004f4c:	181b      	addge	r3, r3, r0
 8004f4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f52:	bfac      	ite	ge
 8004f54:	6563      	strge	r3, [r4, #84]	; 0x54
 8004f56:	81a3      	strhlt	r3, [r4, #12]
 8004f58:	bd10      	pop	{r4, pc}

08004f5a <__swrite>:
 8004f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f5e:	461f      	mov	r7, r3
 8004f60:	898b      	ldrh	r3, [r1, #12]
 8004f62:	05db      	lsls	r3, r3, #23
 8004f64:	4605      	mov	r5, r0
 8004f66:	460c      	mov	r4, r1
 8004f68:	4616      	mov	r6, r2
 8004f6a:	d505      	bpl.n	8004f78 <__swrite+0x1e>
 8004f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f70:	2302      	movs	r3, #2
 8004f72:	2200      	movs	r2, #0
 8004f74:	f000 f868 	bl	8005048 <_lseek_r>
 8004f78:	89a3      	ldrh	r3, [r4, #12]
 8004f7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f82:	81a3      	strh	r3, [r4, #12]
 8004f84:	4632      	mov	r2, r6
 8004f86:	463b      	mov	r3, r7
 8004f88:	4628      	mov	r0, r5
 8004f8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f8e:	f000 b817 	b.w	8004fc0 <_write_r>

08004f92 <__sseek>:
 8004f92:	b510      	push	{r4, lr}
 8004f94:	460c      	mov	r4, r1
 8004f96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f9a:	f000 f855 	bl	8005048 <_lseek_r>
 8004f9e:	1c43      	adds	r3, r0, #1
 8004fa0:	89a3      	ldrh	r3, [r4, #12]
 8004fa2:	bf15      	itete	ne
 8004fa4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004fa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004faa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004fae:	81a3      	strheq	r3, [r4, #12]
 8004fb0:	bf18      	it	ne
 8004fb2:	81a3      	strhne	r3, [r4, #12]
 8004fb4:	bd10      	pop	{r4, pc}

08004fb6 <__sclose>:
 8004fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fba:	f000 b813 	b.w	8004fe4 <_close_r>
	...

08004fc0 <_write_r>:
 8004fc0:	b538      	push	{r3, r4, r5, lr}
 8004fc2:	4d07      	ldr	r5, [pc, #28]	; (8004fe0 <_write_r+0x20>)
 8004fc4:	4604      	mov	r4, r0
 8004fc6:	4608      	mov	r0, r1
 8004fc8:	4611      	mov	r1, r2
 8004fca:	2200      	movs	r2, #0
 8004fcc:	602a      	str	r2, [r5, #0]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	f7fc faab 	bl	800152a <_write>
 8004fd4:	1c43      	adds	r3, r0, #1
 8004fd6:	d102      	bne.n	8004fde <_write_r+0x1e>
 8004fd8:	682b      	ldr	r3, [r5, #0]
 8004fda:	b103      	cbz	r3, 8004fde <_write_r+0x1e>
 8004fdc:	6023      	str	r3, [r4, #0]
 8004fde:	bd38      	pop	{r3, r4, r5, pc}
 8004fe0:	200009a0 	.word	0x200009a0

08004fe4 <_close_r>:
 8004fe4:	b538      	push	{r3, r4, r5, lr}
 8004fe6:	4d06      	ldr	r5, [pc, #24]	; (8005000 <_close_r+0x1c>)
 8004fe8:	2300      	movs	r3, #0
 8004fea:	4604      	mov	r4, r0
 8004fec:	4608      	mov	r0, r1
 8004fee:	602b      	str	r3, [r5, #0]
 8004ff0:	f7fc fab7 	bl	8001562 <_close>
 8004ff4:	1c43      	adds	r3, r0, #1
 8004ff6:	d102      	bne.n	8004ffe <_close_r+0x1a>
 8004ff8:	682b      	ldr	r3, [r5, #0]
 8004ffa:	b103      	cbz	r3, 8004ffe <_close_r+0x1a>
 8004ffc:	6023      	str	r3, [r4, #0]
 8004ffe:	bd38      	pop	{r3, r4, r5, pc}
 8005000:	200009a0 	.word	0x200009a0

08005004 <_fstat_r>:
 8005004:	b538      	push	{r3, r4, r5, lr}
 8005006:	4d07      	ldr	r5, [pc, #28]	; (8005024 <_fstat_r+0x20>)
 8005008:	2300      	movs	r3, #0
 800500a:	4604      	mov	r4, r0
 800500c:	4608      	mov	r0, r1
 800500e:	4611      	mov	r1, r2
 8005010:	602b      	str	r3, [r5, #0]
 8005012:	f7fc fab2 	bl	800157a <_fstat>
 8005016:	1c43      	adds	r3, r0, #1
 8005018:	d102      	bne.n	8005020 <_fstat_r+0x1c>
 800501a:	682b      	ldr	r3, [r5, #0]
 800501c:	b103      	cbz	r3, 8005020 <_fstat_r+0x1c>
 800501e:	6023      	str	r3, [r4, #0]
 8005020:	bd38      	pop	{r3, r4, r5, pc}
 8005022:	bf00      	nop
 8005024:	200009a0 	.word	0x200009a0

08005028 <_isatty_r>:
 8005028:	b538      	push	{r3, r4, r5, lr}
 800502a:	4d06      	ldr	r5, [pc, #24]	; (8005044 <_isatty_r+0x1c>)
 800502c:	2300      	movs	r3, #0
 800502e:	4604      	mov	r4, r0
 8005030:	4608      	mov	r0, r1
 8005032:	602b      	str	r3, [r5, #0]
 8005034:	f7fc fab1 	bl	800159a <_isatty>
 8005038:	1c43      	adds	r3, r0, #1
 800503a:	d102      	bne.n	8005042 <_isatty_r+0x1a>
 800503c:	682b      	ldr	r3, [r5, #0]
 800503e:	b103      	cbz	r3, 8005042 <_isatty_r+0x1a>
 8005040:	6023      	str	r3, [r4, #0]
 8005042:	bd38      	pop	{r3, r4, r5, pc}
 8005044:	200009a0 	.word	0x200009a0

08005048 <_lseek_r>:
 8005048:	b538      	push	{r3, r4, r5, lr}
 800504a:	4d07      	ldr	r5, [pc, #28]	; (8005068 <_lseek_r+0x20>)
 800504c:	4604      	mov	r4, r0
 800504e:	4608      	mov	r0, r1
 8005050:	4611      	mov	r1, r2
 8005052:	2200      	movs	r2, #0
 8005054:	602a      	str	r2, [r5, #0]
 8005056:	461a      	mov	r2, r3
 8005058:	f7fc faaa 	bl	80015b0 <_lseek>
 800505c:	1c43      	adds	r3, r0, #1
 800505e:	d102      	bne.n	8005066 <_lseek_r+0x1e>
 8005060:	682b      	ldr	r3, [r5, #0]
 8005062:	b103      	cbz	r3, 8005066 <_lseek_r+0x1e>
 8005064:	6023      	str	r3, [r4, #0]
 8005066:	bd38      	pop	{r3, r4, r5, pc}
 8005068:	200009a0 	.word	0x200009a0

0800506c <__malloc_lock>:
 800506c:	4801      	ldr	r0, [pc, #4]	; (8005074 <__malloc_lock+0x8>)
 800506e:	f7ff bb0d 	b.w	800468c <__retarget_lock_acquire_recursive>
 8005072:	bf00      	nop
 8005074:	20000998 	.word	0x20000998

08005078 <__malloc_unlock>:
 8005078:	4801      	ldr	r0, [pc, #4]	; (8005080 <__malloc_unlock+0x8>)
 800507a:	f7ff bb08 	b.w	800468e <__retarget_lock_release_recursive>
 800507e:	bf00      	nop
 8005080:	20000998 	.word	0x20000998

08005084 <_read_r>:
 8005084:	b538      	push	{r3, r4, r5, lr}
 8005086:	4d07      	ldr	r5, [pc, #28]	; (80050a4 <_read_r+0x20>)
 8005088:	4604      	mov	r4, r0
 800508a:	4608      	mov	r0, r1
 800508c:	4611      	mov	r1, r2
 800508e:	2200      	movs	r2, #0
 8005090:	602a      	str	r2, [r5, #0]
 8005092:	461a      	mov	r2, r3
 8005094:	f7fc fa2c 	bl	80014f0 <_read>
 8005098:	1c43      	adds	r3, r0, #1
 800509a:	d102      	bne.n	80050a2 <_read_r+0x1e>
 800509c:	682b      	ldr	r3, [r5, #0]
 800509e:	b103      	cbz	r3, 80050a2 <_read_r+0x1e>
 80050a0:	6023      	str	r3, [r4, #0]
 80050a2:	bd38      	pop	{r3, r4, r5, pc}
 80050a4:	200009a0 	.word	0x200009a0

080050a8 <_init>:
 80050a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050aa:	bf00      	nop
 80050ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ae:	bc08      	pop	{r3}
 80050b0:	469e      	mov	lr, r3
 80050b2:	4770      	bx	lr

080050b4 <_fini>:
 80050b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050b6:	bf00      	nop
 80050b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ba:	bc08      	pop	{r3}
 80050bc:	469e      	mov	lr, r3
 80050be:	4770      	bx	lr
