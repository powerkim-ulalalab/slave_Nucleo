
DAQ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d00  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008e0  08004ea0  08004ea0  00014ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005780  08005780  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005780  08005780  00015780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005788  08005788  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005788  08005788  00015788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800578c  0800578c  0001578c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005790  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000934  20000070  08005800  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009a4  08005800  000209a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013be8  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002872  00000000  00000000  00033c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df8  00000000  00000000  00036500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d10  00000000  00000000  000372f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000180c9  00000000  00000000  00038008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010552  00000000  00000000  000500d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fe0e  00000000  00000000  00060623  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f0431  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004250  00000000  00000000  000f0484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004e88 	.word	0x08004e88

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004e88 	.word	0x08004e88

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <crc16>:
EMPTY,	//[SlaveID : 0]
FULL,	//[SlaveID : 1]

};
static uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	460b      	mov	r3, r1
 8000582:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8000584:	23ff      	movs	r3, #255	; 0xff
 8000586:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8000588:	23ff      	movs	r3, #255	; 0xff
 800058a:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 800058c:	e013      	b.n	80005b6 <crc16+0x3e>
        i = crc_hi ^ *buffer++; /* calculate the CRC  */
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	1c5a      	adds	r2, r3, #1
 8000592:	607a      	str	r2, [r7, #4]
 8000594:	781a      	ldrb	r2, [r3, #0]
 8000596:	7bfb      	ldrb	r3, [r7, #15]
 8000598:	4053      	eors	r3, r2
 800059a:	b2db      	uxtb	r3, r3
 800059c:	60bb      	str	r3, [r7, #8]
        crc_hi = crc_lo ^ table_crc_hi[i];
 800059e:	4a0f      	ldr	r2, [pc, #60]	; (80005dc <crc16+0x64>)
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	4413      	add	r3, r2
 80005a4:	781a      	ldrb	r2, [r3, #0]
 80005a6:	7bbb      	ldrb	r3, [r7, #14]
 80005a8:	4053      	eors	r3, r2
 80005aa:	73fb      	strb	r3, [r7, #15]
        crc_lo = table_crc_lo[i];
 80005ac:	4a0c      	ldr	r2, [pc, #48]	; (80005e0 <crc16+0x68>)
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	4413      	add	r3, r2
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	73bb      	strb	r3, [r7, #14]
    while (buffer_length--) {
 80005b6:	887b      	ldrh	r3, [r7, #2]
 80005b8:	1e5a      	subs	r2, r3, #1
 80005ba:	807a      	strh	r2, [r7, #2]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d1e6      	bne.n	800058e <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 80005c0:	7bfb      	ldrb	r3, [r7, #15]
 80005c2:	021b      	lsls	r3, r3, #8
 80005c4:	b21a      	sxth	r2, r3
 80005c6:	7bbb      	ldrb	r3, [r7, #14]
 80005c8:	b21b      	sxth	r3, r3
 80005ca:	4313      	orrs	r3, r2
 80005cc:	b21b      	sxth	r3, r3
 80005ce:	b29b      	uxth	r3, r3
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3714      	adds	r7, #20
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	080054cc 	.word	0x080054cc
 80005e0:	080055cc 	.word	0x080055cc

080005e4 <Search_ID>:
MB_Handle packetHandle;
TABLE table;
extern UART_HandleTypeDef huart2;

uint8_t Search_ID(uint8_t taget)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
	if(Table_SlaveID[taget] == FULL)
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	4a06      	ldr	r2, [pc, #24]	; (800060c <Search_ID+0x28>)
 80005f2:	5cd3      	ldrb	r3, [r2, r3]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d101      	bne.n	80005fc <Search_ID+0x18>
	{

		return TURE;
 80005f8:	2301      	movs	r3, #1
 80005fa:	e000      	b.n	80005fe <Search_ID+0x1a>
	}
	else
	{
		return FALSE;
 80005fc:	2300      	movs	r3, #0
	}
}
 80005fe:	4618      	mov	r0, r3
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	080056cc 	.word	0x080056cc

08000610 <MB_Slave>:

void MB_Slave()
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
	Rx_TimerStartStop();
 8000616:	f000 fb0b 	bl	8000c30 <Rx_TimerStartStop>
	frameCplt();
 800061a:	f000 f84d 	bl	80006b8 <frameCplt>

	uint8_t mode = SelectMode(packetHandle.RX_Flag ,packetHandle.TX_Flag );
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <MB_Slave+0x48>)
 8000620:	f893 33f0 	ldrb.w	r3, [r3, #1008]	; 0x3f0
 8000624:	4a0c      	ldr	r2, [pc, #48]	; (8000658 <MB_Slave+0x48>)
 8000626:	f892 23f1 	ldrb.w	r2, [r2, #1009]	; 0x3f1
 800062a:	4611      	mov	r1, r2
 800062c:	4618      	mov	r0, r3
 800062e:	f000 f815 	bl	800065c <SelectMode>
 8000632:	4603      	mov	r3, r0
 8000634:	71fb      	strb	r3, [r7, #7]

	switch(mode)
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	2b01      	cmp	r3, #1
 800063a:	d002      	beq.n	8000642 <MB_Slave+0x32>
 800063c:	2b02      	cmp	r3, #2
 800063e:	d003      	beq.n	8000648 <MB_Slave+0x38>
			break;
		}

	}

}
 8000640:	e005      	b.n	800064e <MB_Slave+0x3e>
			GetRX_Packet();
 8000642:	f000 f8a1 	bl	8000788 <GetRX_Packet>
			break;
 8000646:	e002      	b.n	800064e <MB_Slave+0x3e>
			GetTX_Packet();
 8000648:	f000 f932 	bl	80008b0 <GetTX_Packet>
			break;
 800064c:	bf00      	nop
}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	200004b8 	.word	0x200004b8

0800065c <SelectMode>:

uint8_t SelectMode(uint8_t RX_Flag , uint8_t TX_Flag)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	460a      	mov	r2, r1
 8000666:	71fb      	strb	r3, [r7, #7]
 8000668:	4613      	mov	r3, r2
 800066a:	71bb      	strb	r3, [r7, #6]
	if(RX_Flag == ON)
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	2b01      	cmp	r3, #1
 8000670:	d101      	bne.n	8000676 <SelectMode+0x1a>
	{
		return RXMODE;
 8000672:	2301      	movs	r3, #1
 8000674:	e004      	b.n	8000680 <SelectMode+0x24>
	}

	if(TX_Flag == ON)
 8000676:	79bb      	ldrb	r3, [r7, #6]
 8000678:	2b01      	cmp	r3, #1
 800067a:	d101      	bne.n	8000680 <SelectMode+0x24>
	{
		return TXMODE;
 800067c:	2302      	movs	r3, #2
 800067e:	e7ff      	b.n	8000680 <SelectMode+0x24>
	}
}
 8000680:	4618      	mov	r0, r3
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr

0800068c <RX_Buf_Init>:
	packetHandle.RX_Flag = OFF;
	packetHandle.TX_Flag = OFF;
}

void RX_Buf_Init()
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	memset(MB_RxBuf,0,RXBUFLEN);
 8000690:	2214      	movs	r2, #20
 8000692:	2100      	movs	r1, #0
 8000694:	4805      	ldr	r0, [pc, #20]	; (80006ac <RX_Buf_Init+0x20>)
 8000696:	f003 fbc5 	bl	8003e24 <memset>
	RX_Data = 0;
 800069a:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <RX_Buf_Init+0x24>)
 800069c:	2200      	movs	r2, #0
 800069e:	701a      	strb	r2, [r3, #0]
	RX_DataCnt =0;
 80006a0:	4b04      	ldr	r3, [pc, #16]	; (80006b4 <RX_Buf_Init+0x28>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	801a      	strh	r2, [r3, #0]
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000090 	.word	0x20000090
 80006b0:	200004a4 	.word	0x200004a4
 80006b4:	2000008c 	.word	0x2000008c

080006b8 <frameCplt>:

void frameCplt()
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	if(RX_DataCnt == 8)
 80006bc:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <frameCplt+0x30>)
 80006be:	881b      	ldrh	r3, [r3, #0]
 80006c0:	b29b      	uxth	r3, r3
 80006c2:	2b08      	cmp	r3, #8
 80006c4:	d104      	bne.n	80006d0 <frameCplt+0x18>
	{
		SetHandleFlag(&packetHandle.RX_Flag , ON);
 80006c6:	2101      	movs	r1, #1
 80006c8:	4808      	ldr	r0, [pc, #32]	; (80006ec <frameCplt+0x34>)
 80006ca:	f000 f811 	bl	80006f0 <SetHandleFlag>
	else if(RX_DataCnt == 0)
	{
		SetHandleFlag(&packetHandle.RX_Flag , OFF);
	}

}
 80006ce:	e008      	b.n	80006e2 <frameCplt+0x2a>
	else if(RX_DataCnt == 0)
 80006d0:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <frameCplt+0x30>)
 80006d2:	881b      	ldrh	r3, [r3, #0]
 80006d4:	b29b      	uxth	r3, r3
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d103      	bne.n	80006e2 <frameCplt+0x2a>
		SetHandleFlag(&packetHandle.RX_Flag , OFF);
 80006da:	2100      	movs	r1, #0
 80006dc:	4803      	ldr	r0, [pc, #12]	; (80006ec <frameCplt+0x34>)
 80006de:	f000 f807 	bl	80006f0 <SetHandleFlag>
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	2000008c 	.word	0x2000008c
 80006ec:	200008a8 	.word	0x200008a8

080006f0 <SetHandleFlag>:

bool SetHandleFlag(uint8_t *flag , uint8_t onOff)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b087      	sub	sp, #28
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	460b      	mov	r3, r1
 80006fa:	70fb      	strb	r3, [r7, #3]

	uint8_t *RxAdr = &packetHandle.RX_Flag;
 80006fc:	4b20      	ldr	r3, [pc, #128]	; (8000780 <SetHandleFlag+0x90>)
 80006fe:	613b      	str	r3, [r7, #16]
	uint8_t *TxAdr = &packetHandle.TX_Flag;
 8000700:	4b20      	ldr	r3, [pc, #128]	; (8000784 <SetHandleFlag+0x94>)
 8000702:	60fb      	str	r3, [r7, #12]
	uint8_t flagAdr = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	75fb      	strb	r3, [r7, #23]
	uint8_t state = onOff;
 8000708:	78fb      	ldrb	r3, [r7, #3]
 800070a:	72fb      	strb	r3, [r7, #11]

	if(flag == RxAdr)
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	693b      	ldr	r3, [r7, #16]
 8000710:	429a      	cmp	r2, r3
 8000712:	d102      	bne.n	800071a <SetHandleFlag+0x2a>
	{
		flagAdr = RXADR;
 8000714:	2301      	movs	r3, #1
 8000716:	75fb      	strb	r3, [r7, #23]
 8000718:	e005      	b.n	8000726 <SetHandleFlag+0x36>
	}

	else if(flag == TxAdr)
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	429a      	cmp	r2, r3
 8000720:	d101      	bne.n	8000726 <SetHandleFlag+0x36>
	{
		flagAdr = TXADR;
 8000722:	2302      	movs	r3, #2
 8000724:	75fb      	strb	r3, [r7, #23]
	}

	switch(flagAdr)
 8000726:	7dfb      	ldrb	r3, [r7, #23]
 8000728:	2b01      	cmp	r3, #1
 800072a:	d002      	beq.n	8000732 <SetHandleFlag+0x42>
 800072c:	2b02      	cmp	r3, #2
 800072e:	d010      	beq.n	8000752 <SetHandleFlag+0x62>
 8000730:	e01f      	b.n	8000772 <SetHandleFlag+0x82>
	{
		case RXADR:
		{
			if(state == ON)
 8000732:	7afb      	ldrb	r3, [r7, #11]
 8000734:	2b01      	cmp	r3, #1
 8000736:	d104      	bne.n	8000742 <SetHandleFlag+0x52>
			{
				*flag = ON;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2201      	movs	r2, #1
 800073c:	701a      	strb	r2, [r3, #0]
				return TURE;
 800073e:	2301      	movs	r3, #1
 8000740:	e017      	b.n	8000772 <SetHandleFlag+0x82>
				break;
			}
			else if(state == OFF)
 8000742:	7afb      	ldrb	r3, [r7, #11]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d104      	bne.n	8000752 <SetHandleFlag+0x62>
			{
				*flag = OFF;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2200      	movs	r2, #0
 800074c:	701a      	strb	r2, [r3, #0]
				return FALSE;
 800074e:	2300      	movs	r3, #0
 8000750:	e00f      	b.n	8000772 <SetHandleFlag+0x82>
			}
		}

		case TXADR:
		{
			if(state == ON)
 8000752:	7afb      	ldrb	r3, [r7, #11]
 8000754:	2b01      	cmp	r3, #1
 8000756:	d104      	bne.n	8000762 <SetHandleFlag+0x72>
			{
				*flag = ON;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2201      	movs	r2, #1
 800075c:	701a      	strb	r2, [r3, #0]
				return TURE;
 800075e:	2301      	movs	r3, #1
 8000760:	e007      	b.n	8000772 <SetHandleFlag+0x82>
				break;
			}
			else if(state == OFF)
 8000762:	7afb      	ldrb	r3, [r7, #11]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d104      	bne.n	8000772 <SetHandleFlag+0x82>
			{
				*flag = OFF;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2200      	movs	r2, #0
 800076c:	701a      	strb	r2, [r3, #0]
				return FALSE;
 800076e:	2300      	movs	r3, #0
 8000770:	e7ff      	b.n	8000772 <SetHandleFlag+0x82>
				break;
			}
		}
	}
}
 8000772:	4618      	mov	r0, r3
 8000774:	371c      	adds	r7, #28
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	200008a8 	.word	0x200008a8
 8000784:	200008a9 	.word	0x200008a9

08000788 <GetRX_Packet>:

uint8_t GetRX_Packet()
{
 8000788:	b5b0      	push	{r4, r5, r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af04      	add	r7, sp, #16
	static uint8_t RX_State = Ready;

	switch(RX_State)
 800078e:	4b43      	ldr	r3, [pc, #268]	; (800089c <GetRX_Packet+0x114>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b05      	cmp	r3, #5
 8000794:	d87f      	bhi.n	8000896 <GetRX_Packet+0x10e>
 8000796:	a201      	add	r2, pc, #4	; (adr r2, 800079c <GetRX_Packet+0x14>)
 8000798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800079c:	080007b5 	.word	0x080007b5
 80007a0:	080007e1 	.word	0x080007e1
 80007a4:	080007f1 	.word	0x080007f1
 80007a8:	08000801 	.word	0x08000801
 80007ac:	0800081b 	.word	0x0800081b
 80007b0:	08000835 	.word	0x08000835
	{
		case Ready:
		{
			if( Search_ID(MB_RxBuf[SlaveID]) == TURE  )
 80007b4:	4b3a      	ldr	r3, [pc, #232]	; (80008a0 <GetRX_Packet+0x118>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ff13 	bl	80005e4 <Search_ID>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d103      	bne.n	80007cc <GetRX_Packet+0x44>
			{
				RX_State = GetID;
 80007c4:	4b35      	ldr	r3, [pc, #212]	; (800089c <GetRX_Packet+0x114>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	701a      	strb	r2, [r3, #0]
			{
				RX_Buf_Init();
				packetHandle.RX_Flag = OFF;
				RX_State = Ready;
			}
			break;
 80007ca:	e064      	b.n	8000896 <GetRX_Packet+0x10e>
				RX_Buf_Init();
 80007cc:	f7ff ff5e 	bl	800068c <RX_Buf_Init>
				packetHandle.RX_Flag = OFF;
 80007d0:	4b34      	ldr	r3, [pc, #208]	; (80008a4 <GetRX_Packet+0x11c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
				RX_State = Ready;
 80007d8:	4b30      	ldr	r3, [pc, #192]	; (800089c <GetRX_Packet+0x114>)
 80007da:	2200      	movs	r2, #0
 80007dc:	701a      	strb	r2, [r3, #0]
			break;
 80007de:	e05a      	b.n	8000896 <GetRX_Packet+0x10e>
		}
		case GetID:
		{

			packetHandle.id = MB_RxBuf[SlaveID];
 80007e0:	4b2f      	ldr	r3, [pc, #188]	; (80008a0 <GetRX_Packet+0x118>)
 80007e2:	781a      	ldrb	r2, [r3, #0]
 80007e4:	4b2f      	ldr	r3, [pc, #188]	; (80008a4 <GetRX_Packet+0x11c>)
 80007e6:	701a      	strb	r2, [r3, #0]
			RX_State = GetFunCode;
 80007e8:	4b2c      	ldr	r3, [pc, #176]	; (800089c <GetRX_Packet+0x114>)
 80007ea:	2202      	movs	r2, #2
 80007ec:	701a      	strb	r2, [r3, #0]
			break;
 80007ee:	e052      	b.n	8000896 <GetRX_Packet+0x10e>
		}
		case GetFunCode:
		{
			packetHandle.FuncCode = MB_RxBuf[FuncCode];
 80007f0:	4b2b      	ldr	r3, [pc, #172]	; (80008a0 <GetRX_Packet+0x118>)
 80007f2:	785a      	ldrb	r2, [r3, #1]
 80007f4:	4b2b      	ldr	r3, [pc, #172]	; (80008a4 <GetRX_Packet+0x11c>)
 80007f6:	705a      	strb	r2, [r3, #1]
			RX_State = GetAdr;
 80007f8:	4b28      	ldr	r3, [pc, #160]	; (800089c <GetRX_Packet+0x114>)
 80007fa:	2203      	movs	r2, #3
 80007fc:	701a      	strb	r2, [r3, #0]
			break;
 80007fe:	e04a      	b.n	8000896 <GetRX_Packet+0x10e>
		}
		case GetAdr:
		{
			packetHandle.adr = (uint16_t)( MB_RxBuf[AdrHigh] | MB_RxBuf[AdrLow] );
 8000800:	4b27      	ldr	r3, [pc, #156]	; (80008a0 <GetRX_Packet+0x118>)
 8000802:	789a      	ldrb	r2, [r3, #2]
 8000804:	4b26      	ldr	r3, [pc, #152]	; (80008a0 <GetRX_Packet+0x118>)
 8000806:	78db      	ldrb	r3, [r3, #3]
 8000808:	4313      	orrs	r3, r2
 800080a:	b2db      	uxtb	r3, r3
 800080c:	b29a      	uxth	r2, r3
 800080e:	4b25      	ldr	r3, [pc, #148]	; (80008a4 <GetRX_Packet+0x11c>)
 8000810:	805a      	strh	r2, [r3, #2]
			RX_State = Getlen;
 8000812:	4b22      	ldr	r3, [pc, #136]	; (800089c <GetRX_Packet+0x114>)
 8000814:	2204      	movs	r2, #4
 8000816:	701a      	strb	r2, [r3, #0]
			break;
 8000818:	e03d      	b.n	8000896 <GetRX_Packet+0x10e>
		}
		case Getlen:
		{
			packetHandle.len = (uint16_t)( MB_RxBuf[LenHigh] | MB_RxBuf[LenLow] );
 800081a:	4b21      	ldr	r3, [pc, #132]	; (80008a0 <GetRX_Packet+0x118>)
 800081c:	791a      	ldrb	r2, [r3, #4]
 800081e:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <GetRX_Packet+0x118>)
 8000820:	795b      	ldrb	r3, [r3, #5]
 8000822:	4313      	orrs	r3, r2
 8000824:	b2db      	uxtb	r3, r3
 8000826:	b29a      	uxth	r2, r3
 8000828:	4b1e      	ldr	r3, [pc, #120]	; (80008a4 <GetRX_Packet+0x11c>)
 800082a:	809a      	strh	r2, [r3, #4]
			RX_State = GetCrc;
 800082c:	4b1b      	ldr	r3, [pc, #108]	; (800089c <GetRX_Packet+0x114>)
 800082e:	2205      	movs	r2, #5
 8000830:	701a      	strb	r2, [r3, #0]
			break;
 8000832:	e030      	b.n	8000896 <GetRX_Packet+0x10e>
		}
		case GetCrc:
		{
			packetHandle.crc_high = MB_RxBuf[CrcHigh];
 8000834:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <GetRX_Packet+0x118>)
 8000836:	799a      	ldrb	r2, [r3, #6]
 8000838:	4b1a      	ldr	r3, [pc, #104]	; (80008a4 <GetRX_Packet+0x11c>)
 800083a:	f883 23ee 	strb.w	r2, [r3, #1006]	; 0x3ee
			packetHandle.crc_low = MB_RxBuf[CrcLow];
 800083e:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <GetRX_Packet+0x118>)
 8000840:	79da      	ldrb	r2, [r3, #7]
 8000842:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <GetRX_Packet+0x11c>)
 8000844:	f883 23ef 	strb.w	r2, [r3, #1007]	; 0x3ef

			SetHandleFlag(&packetHandle.TX_Flag , ON);
 8000848:	2101      	movs	r1, #1
 800084a:	4817      	ldr	r0, [pc, #92]	; (80008a8 <GetRX_Packet+0x120>)
 800084c:	f7ff ff50 	bl	80006f0 <SetHandleFlag>
			RX_Buf_Init();
 8000850:	f7ff ff1c 	bl	800068c <RX_Buf_Init>
printf("TX-%02x %02x %02x %02x %02x %02x\n",
		packetHandle.id, packetHandle.FuncCode, packetHandle.adr, packetHandle.len , packetHandle.crc_high, packetHandle.crc_low);
 8000854:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <GetRX_Packet+0x11c>)
 8000856:	781b      	ldrb	r3, [r3, #0]
printf("TX-%02x %02x %02x %02x %02x %02x\n",
 8000858:	4618      	mov	r0, r3
		packetHandle.id, packetHandle.FuncCode, packetHandle.adr, packetHandle.len , packetHandle.crc_high, packetHandle.crc_low);
 800085a:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <GetRX_Packet+0x11c>)
 800085c:	785b      	ldrb	r3, [r3, #1]
printf("TX-%02x %02x %02x %02x %02x %02x\n",
 800085e:	461c      	mov	r4, r3
		packetHandle.id, packetHandle.FuncCode, packetHandle.adr, packetHandle.len , packetHandle.crc_high, packetHandle.crc_low);
 8000860:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <GetRX_Packet+0x11c>)
 8000862:	885b      	ldrh	r3, [r3, #2]
printf("TX-%02x %02x %02x %02x %02x %02x\n",
 8000864:	461d      	mov	r5, r3
		packetHandle.id, packetHandle.FuncCode, packetHandle.adr, packetHandle.len , packetHandle.crc_high, packetHandle.crc_low);
 8000866:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <GetRX_Packet+0x11c>)
 8000868:	889b      	ldrh	r3, [r3, #4]
printf("TX-%02x %02x %02x %02x %02x %02x\n",
 800086a:	461a      	mov	r2, r3
		packetHandle.id, packetHandle.FuncCode, packetHandle.adr, packetHandle.len , packetHandle.crc_high, packetHandle.crc_low);
 800086c:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <GetRX_Packet+0x11c>)
 800086e:	f893 33ee 	ldrb.w	r3, [r3, #1006]	; 0x3ee
printf("TX-%02x %02x %02x %02x %02x %02x\n",
 8000872:	4619      	mov	r1, r3
		packetHandle.id, packetHandle.FuncCode, packetHandle.adr, packetHandle.len , packetHandle.crc_high, packetHandle.crc_low);
 8000874:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <GetRX_Packet+0x11c>)
 8000876:	f893 33ef 	ldrb.w	r3, [r3, #1007]	; 0x3ef
printf("TX-%02x %02x %02x %02x %02x %02x\n",
 800087a:	9302      	str	r3, [sp, #8]
 800087c:	9101      	str	r1, [sp, #4]
 800087e:	9200      	str	r2, [sp, #0]
 8000880:	462b      	mov	r3, r5
 8000882:	4622      	mov	r2, r4
 8000884:	4601      	mov	r1, r0
 8000886:	4809      	ldr	r0, [pc, #36]	; (80008ac <GetRX_Packet+0x124>)
 8000888:	f003 fad4 	bl	8003e34 <iprintf>
			RX_State = Ready;
 800088c:	4b03      	ldr	r3, [pc, #12]	; (800089c <GetRX_Packet+0x114>)
 800088e:	2200      	movs	r2, #0
 8000890:	701a      	strb	r2, [r3, #0]
			return RX_OK;
 8000892:	2301      	movs	r3, #1
 8000894:	e7ff      	b.n	8000896 <GetRX_Packet+0x10e>
			break;
		}
	}
}
 8000896:	4618      	mov	r0, r3
 8000898:	46bd      	mov	sp, r7
 800089a:	bdb0      	pop	{r4, r5, r7, pc}
 800089c:	200004a5 	.word	0x200004a5
 80008a0:	20000090 	.word	0x20000090
 80008a4:	200004b8 	.word	0x200004b8
 80008a8:	200008a9 	.word	0x200008a9
 80008ac:	08004ea0 	.word	0x08004ea0

080008b0 <GetTX_Packet>:

void GetTX_Packet()
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0

	static uint8_t TX_State = Ready;

	switch(TX_State)
 80008b6:	4b40      	ldr	r3, [pc, #256]	; (80009b8 <GetTX_Packet+0x108>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	2b06      	cmp	r3, #6
 80008bc:	d877      	bhi.n	80009ae <GetTX_Packet+0xfe>
 80008be:	a201      	add	r2, pc, #4	; (adr r2, 80008c4 <GetTX_Packet+0x14>)
 80008c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008c4:	080008e1 	.word	0x080008e1
 80008c8:	080008e9 	.word	0x080008e9
 80008cc:	080008f9 	.word	0x080008f9
 80008d0:	080009af 	.word	0x080009af
 80008d4:	08000909 	.word	0x08000909
 80008d8:	0800092d 	.word	0x0800092d
 80008dc:	08000921 	.word	0x08000921
	{
		case Ready:
		{
			TX_State = GetID;
 80008e0:	4b35      	ldr	r3, [pc, #212]	; (80009b8 <GetTX_Packet+0x108>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	701a      	strb	r2, [r3, #0]
			break;
 80008e6:	e062      	b.n	80009ae <GetTX_Packet+0xfe>
		}

		case GetID:
		{
			MB_TXBuf[SlaveID] = packetHandle.id;
 80008e8:	4b34      	ldr	r3, [pc, #208]	; (80009bc <GetTX_Packet+0x10c>)
 80008ea:	781a      	ldrb	r2, [r3, #0]
 80008ec:	4b34      	ldr	r3, [pc, #208]	; (80009c0 <GetTX_Packet+0x110>)
 80008ee:	701a      	strb	r2, [r3, #0]
			TX_State = GetFunCode;
 80008f0:	4b31      	ldr	r3, [pc, #196]	; (80009b8 <GetTX_Packet+0x108>)
 80008f2:	2202      	movs	r2, #2
 80008f4:	701a      	strb	r2, [r3, #0]

			break;
 80008f6:	e05a      	b.n	80009ae <GetTX_Packet+0xfe>
		}

		case GetFunCode:
		{
			MB_TXBuf[FuncCode] = packetHandle.FuncCode;
 80008f8:	4b30      	ldr	r3, [pc, #192]	; (80009bc <GetTX_Packet+0x10c>)
 80008fa:	785a      	ldrb	r2, [r3, #1]
 80008fc:	4b30      	ldr	r3, [pc, #192]	; (80009c0 <GetTX_Packet+0x110>)
 80008fe:	705a      	strb	r2, [r3, #1]
			TX_State = Getlen;
 8000900:	4b2d      	ldr	r3, [pc, #180]	; (80009b8 <GetTX_Packet+0x108>)
 8000902:	2204      	movs	r2, #4
 8000904:	701a      	strb	r2, [r3, #0]

			break;
 8000906:	e052      	b.n	80009ae <GetTX_Packet+0xfe>
		}

		case Getlen:
		{
			uint16_t getLen = packetHandle.len * 2;
 8000908:	4b2c      	ldr	r3, [pc, #176]	; (80009bc <GetTX_Packet+0x10c>)
 800090a:	889b      	ldrh	r3, [r3, #4]
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	807b      	strh	r3, [r7, #2]
			MB_TXBuf[TxLen] = getLen;
 8000910:	887b      	ldrh	r3, [r7, #2]
 8000912:	b2da      	uxtb	r2, r3
 8000914:	4b2a      	ldr	r3, [pc, #168]	; (80009c0 <GetTX_Packet+0x110>)
 8000916:	709a      	strb	r2, [r3, #2]
			TX_State = GetData;
 8000918:	4b27      	ldr	r3, [pc, #156]	; (80009b8 <GetTX_Packet+0x108>)
 800091a:	2206      	movs	r2, #6
 800091c:	701a      	strb	r2, [r3, #0]
			break;
 800091e:	e046      	b.n	80009ae <GetTX_Packet+0xfe>
		}

		case GetData:
		{
			GetCoilRegData();
 8000920:	f000 f854 	bl	80009cc <GetCoilRegData>
			TX_State = GetCrc;
 8000924:	4b24      	ldr	r3, [pc, #144]	; (80009b8 <GetTX_Packet+0x108>)
 8000926:	2205      	movs	r2, #5
 8000928:	701a      	strb	r2, [r3, #0]
			break;
 800092a:	e040      	b.n	80009ae <GetTX_Packet+0xfe>
		}

		case GetCrc:
		{	uint16_t TxCrc = crc16(MB_TXBuf,MB_TXBuf[TxLen] + 3 );
 800092c:	4b24      	ldr	r3, [pc, #144]	; (80009c0 <GetTX_Packet+0x110>)
 800092e:	789b      	ldrb	r3, [r3, #2]
 8000930:	b29b      	uxth	r3, r3
 8000932:	3303      	adds	r3, #3
 8000934:	b29b      	uxth	r3, r3
 8000936:	4619      	mov	r1, r3
 8000938:	4821      	ldr	r0, [pc, #132]	; (80009c0 <GetTX_Packet+0x110>)
 800093a:	f7ff fe1d 	bl	8000578 <crc16>
 800093e:	4603      	mov	r3, r0
 8000940:	80fb      	strh	r3, [r7, #6]

			uint8_t crcHighIndex = MB_TXBuf[TxLen] + 3;
 8000942:	4b1f      	ldr	r3, [pc, #124]	; (80009c0 <GetTX_Packet+0x110>)
 8000944:	789b      	ldrb	r3, [r3, #2]
 8000946:	3303      	adds	r3, #3
 8000948:	717b      	strb	r3, [r7, #5]
			uint8_t crcLowIndex = MB_TXBuf[TxLen] + 4;
 800094a:	4b1d      	ldr	r3, [pc, #116]	; (80009c0 <GetTX_Packet+0x110>)
 800094c:	789b      	ldrb	r3, [r3, #2]
 800094e:	3304      	adds	r3, #4
 8000950:	713b      	strb	r3, [r7, #4]

			MB_TXBuf[crcHighIndex] = TxCrc >> 8;
 8000952:	88fb      	ldrh	r3, [r7, #6]
 8000954:	0a1b      	lsrs	r3, r3, #8
 8000956:	b29a      	uxth	r2, r3
 8000958:	797b      	ldrb	r3, [r7, #5]
 800095a:	b2d1      	uxtb	r1, r2
 800095c:	4a18      	ldr	r2, [pc, #96]	; (80009c0 <GetTX_Packet+0x110>)
 800095e:	54d1      	strb	r1, [r2, r3]
			MB_TXBuf[crcLowIndex] = TxCrc;
 8000960:	793b      	ldrb	r3, [r7, #4]
 8000962:	88fa      	ldrh	r2, [r7, #6]
 8000964:	b2d1      	uxtb	r1, r2
 8000966:	4a16      	ldr	r2, [pc, #88]	; (80009c0 <GetTX_Packet+0x110>)
 8000968:	54d1      	strb	r1, [r2, r3]
showPacket(MB_TXBuf, MB_TXBuf[TxLen]+5);
 800096a:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <GetTX_Packet+0x110>)
 800096c:	789b      	ldrb	r3, [r3, #2]
 800096e:	b29b      	uxth	r3, r3
 8000970:	3305      	adds	r3, #5
 8000972:	b29b      	uxth	r3, r3
 8000974:	4619      	mov	r1, r3
 8000976:	4812      	ldr	r0, [pc, #72]	; (80009c0 <GetTX_Packet+0x110>)
 8000978:	f000 f8ec 	bl	8000b54 <showPacket>
			SetHandleFlag(&packetHandle.TX_Flag , OFF);
 800097c:	2100      	movs	r1, #0
 800097e:	4811      	ldr	r0, [pc, #68]	; (80009c4 <GetTX_Packet+0x114>)
 8000980:	f7ff feb6 	bl	80006f0 <SetHandleFlag>
			HAL_UART_Transmit(&huart2, MB_TXBuf, MB_TXBuf[TxLen]+5, 0xffff);
 8000984:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <GetTX_Packet+0x110>)
 8000986:	789b      	ldrb	r3, [r3, #2]
 8000988:	b29b      	uxth	r3, r3
 800098a:	3305      	adds	r3, #5
 800098c:	b29a      	uxth	r2, r3
 800098e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000992:	490b      	ldr	r1, [pc, #44]	; (80009c0 <GetTX_Packet+0x110>)
 8000994:	480c      	ldr	r0, [pc, #48]	; (80009c8 <GetTX_Packet+0x118>)
 8000996:	f002 fa92 	bl	8002ebe <HAL_UART_Transmit>
			memset(MB_TXBuf,0,1024);
 800099a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800099e:	2100      	movs	r1, #0
 80009a0:	4807      	ldr	r0, [pc, #28]	; (80009c0 <GetTX_Packet+0x110>)
 80009a2:	f003 fa3f 	bl	8003e24 <memset>

			TX_State = Ready;
 80009a6:	4b04      	ldr	r3, [pc, #16]	; (80009b8 <GetTX_Packet+0x108>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	701a      	strb	r2, [r3, #0]
			break;
 80009ac:	bf00      	nop
		}

	}

}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	200004a6 	.word	0x200004a6
 80009bc:	200004b8 	.word	0x200004b8
 80009c0:	200000a4 	.word	0x200000a4
 80009c4:	200008a9 	.word	0x200008a9
 80009c8:	2000094c 	.word	0x2000094c

080009cc <GetCoilRegData>:


void GetCoilRegData()//copy packHandle.data[] -> MB_TXBuf[data]
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
		GetHandleData();
 80009d2:	f000 f837 	bl	8000a44 <GetHandleData>

		uint8_t *bufPtr = &MB_TXBuf[3];
 80009d6:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <GetCoilRegData+0x6c>)
 80009d8:	60fb      	str	r3, [r7, #12]
		uint16_t *packetPtr = packetHandle.data;
 80009da:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <GetCoilRegData+0x70>)
 80009dc:	60bb      	str	r3, [r7, #8]

		int cnt = packetHandle.adr - packetHandle.len ;
 80009de:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <GetCoilRegData+0x74>)
 80009e0:	885b      	ldrh	r3, [r3, #2]
 80009e2:	461a      	mov	r2, r3
 80009e4:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <GetCoilRegData+0x74>)
 80009e6:	889b      	ldrh	r3, [r3, #4]
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	607b      	str	r3, [r7, #4]
		if(cnt < 0)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	da19      	bge.n	8000a26 <GetCoilRegData+0x5a>
		{
			cnt = cnt * -1;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	425b      	negs	r3, r3
 80009f6:	607b      	str	r3, [r7, #4]
		}

		while(cnt >= 0)
 80009f8:	e015      	b.n	8000a26 <GetCoilRegData+0x5a>
		{
			*bufPtr ++= *packetPtr >> 8;
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	881b      	ldrh	r3, [r3, #0]
 80009fe:	0a1b      	lsrs	r3, r3, #8
 8000a00:	b299      	uxth	r1, r3
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	1c5a      	adds	r2, r3, #1
 8000a06:	60fa      	str	r2, [r7, #12]
 8000a08:	b2ca      	uxtb	r2, r1
 8000a0a:	701a      	strb	r2, [r3, #0]
			*bufPtr ++= *packetPtr;
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	8819      	ldrh	r1, [r3, #0]
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	1c5a      	adds	r2, r3, #1
 8000a14:	60fa      	str	r2, [r7, #12]
 8000a16:	b2ca      	uxtb	r2, r1
 8000a18:	701a      	strb	r2, [r3, #0]
			packetPtr++;
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	3302      	adds	r3, #2
 8000a1e:	60bb      	str	r3, [r7, #8]
			cnt--;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	3b01      	subs	r3, #1
 8000a24:	607b      	str	r3, [r7, #4]
		while(cnt >= 0)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	dae6      	bge.n	80009fa <GetCoilRegData+0x2e>
		}
}
 8000a2c:	bf00      	nop
 8000a2e:	bf00      	nop
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200000a7 	.word	0x200000a7
 8000a3c:	200004be 	.word	0x200004be
 8000a40:	200004b8 	.word	0x200004b8

08000a44 <GetHandleData>:

void GetHandleData()//copy CoilRegData -> packHandle.data[]
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
	uint16_t *dataPtr = GetCoilRegTable();
 8000a4a:	f000 f823 	bl	8000a94 <GetCoilRegTable>
 8000a4e:	60b8      	str	r0, [r7, #8]
	uint16_t headIndex = packetHandle.adr;
 8000a50:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <GetHandleData+0x48>)
 8000a52:	885b      	ldrh	r3, [r3, #2]
 8000a54:	80fb      	strh	r3, [r7, #6]
	uint16_t tailIndex = packetHandle.len;
 8000a56:	4b0d      	ldr	r3, [pc, #52]	; (8000a8c <GetHandleData+0x48>)
 8000a58:	889b      	ldrh	r3, [r3, #4]
 8000a5a:	80bb      	strh	r3, [r7, #4]

	int len = headIndex - tailIndex;
 8000a5c:	88fa      	ldrh	r2, [r7, #6]
 8000a5e:	88bb      	ldrh	r3, [r7, #4]
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	60fb      	str	r3, [r7, #12]

	if(len < 0)
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	da02      	bge.n	8000a70 <GetHandleData+0x2c>
	{
		len = len * -1;
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	425b      	negs	r3, r3
 8000a6e:	60fb      	str	r3, [r7, #12]
	}

	memcpy(packetHandle.data , &dataPtr[headIndex] , len * 2);// why len * 2 : sizeof = 1byte
 8000a70:	88fb      	ldrh	r3, [r7, #6]
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	68ba      	ldr	r2, [r7, #8]
 8000a76:	18d1      	adds	r1, r2, r3
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4804      	ldr	r0, [pc, #16]	; (8000a90 <GetHandleData+0x4c>)
 8000a80:	f003 f9c2 	bl	8003e08 <memcpy>
}
 8000a84:	bf00      	nop
 8000a86:	3710      	adds	r7, #16
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	200004b8 	.word	0x200004b8
 8000a90:	200004be 	.word	0x200004be

08000a94 <GetCoilRegTable>:

uint16_t* GetCoilRegTable()
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
	uint16_t coilRegAdr = GetTableAdr();
 8000a9a:	f000 f827 	bl	8000aec <GetTableAdr>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	80fb      	strh	r3, [r7, #6]

	switch(coilRegAdr)
 8000aa2:	88fb      	ldrh	r3, [r7, #6]
 8000aa4:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d015      	beq.n	8000ad8 <GetCoilRegTable+0x44>
 8000aac:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	dc13      	bgt.n	8000adc <GetCoilRegTable+0x48>
 8000ab4:	f247 5230 	movw	r2, #30000	; 0x7530
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d00b      	beq.n	8000ad4 <GetCoilRegTable+0x40>
 8000abc:	f247 5230 	movw	r2, #30000	; 0x7530
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	dc0b      	bgt.n	8000adc <GetCoilRegTable+0x48>
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d003      	beq.n	8000ad0 <GetCoilRegTable+0x3c>
 8000ac8:	f242 7210 	movw	r2, #10000	; 0x2710
 8000acc:	4293      	cmp	r3, r2
		}

		case Coil_10000:
		{
			//return CoilTable_1;
			break;
 8000ace:	e005      	b.n	8000adc <GetCoilRegTable+0x48>
			return &CoilTable_1[0];
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <GetCoilRegTable+0x50>)
 8000ad2:	e003      	b.n	8000adc <GetCoilRegTable+0x48>
		}

		case Reg_30000:
		{
			return &RegTable_30000[0];
 8000ad4:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <GetCoilRegTable+0x54>)
 8000ad6:	e001      	b.n	8000adc <GetCoilRegTable+0x48>
			break;
		}

		case Reg_40000:
		{
			return &RegTable_30000[0];
 8000ad8:	4b03      	ldr	r3, [pc, #12]	; (8000ae8 <GetCoilRegTable+0x54>)
 8000ada:	e7ff      	b.n	8000adc <GetCoilRegTable+0x48>
			break;
		}
	}

}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	08004ef0 	.word	0x08004ef0
 8000ae8:	080050e4 	.word	0x080050e4

08000aec <GetTableAdr>:

uint16_t GetTableAdr()
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
	if(MB_TXBuf[FuncCode] == 1 || MB_TXBuf[FuncCode] == 5 || MB_TXBuf[FuncCode] == 15)
 8000af0:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <GetTableAdr+0x64>)
 8000af2:	785b      	ldrb	r3, [r3, #1]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d007      	beq.n	8000b08 <GetTableAdr+0x1c>
 8000af8:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <GetTableAdr+0x64>)
 8000afa:	785b      	ldrb	r3, [r3, #1]
 8000afc:	2b05      	cmp	r3, #5
 8000afe:	d003      	beq.n	8000b08 <GetTableAdr+0x1c>
 8000b00:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <GetTableAdr+0x64>)
 8000b02:	785b      	ldrb	r3, [r3, #1]
 8000b04:	2b0f      	cmp	r3, #15
 8000b06:	d101      	bne.n	8000b0c <GetTableAdr+0x20>
	{
		return Coil_1;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	e01c      	b.n	8000b46 <GetTableAdr+0x5a>
	}
	else if(MB_TXBuf[FuncCode] == 2)
 8000b0c:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <GetTableAdr+0x64>)
 8000b0e:	785b      	ldrb	r3, [r3, #1]
 8000b10:	2b02      	cmp	r3, #2
 8000b12:	d102      	bne.n	8000b1a <GetTableAdr+0x2e>
	{
		return Coil_10000;
 8000b14:	f242 7310 	movw	r3, #10000	; 0x2710
 8000b18:	e015      	b.n	8000b46 <GetTableAdr+0x5a>
	}
	else if(MB_TXBuf[FuncCode] == 4)
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <GetTableAdr+0x64>)
 8000b1c:	785b      	ldrb	r3, [r3, #1]
 8000b1e:	2b04      	cmp	r3, #4
 8000b20:	d102      	bne.n	8000b28 <GetTableAdr+0x3c>
	{
		return Reg_30000;
 8000b22:	f247 5330 	movw	r3, #30000	; 0x7530
 8000b26:	e00e      	b.n	8000b46 <GetTableAdr+0x5a>
	}
	else if(MB_TXBuf[FuncCode] == 3 || MB_TXBuf[FuncCode] == 6 || MB_TXBuf[FuncCode] == 16)
 8000b28:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <GetTableAdr+0x64>)
 8000b2a:	785b      	ldrb	r3, [r3, #1]
 8000b2c:	2b03      	cmp	r3, #3
 8000b2e:	d007      	beq.n	8000b40 <GetTableAdr+0x54>
 8000b30:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <GetTableAdr+0x64>)
 8000b32:	785b      	ldrb	r3, [r3, #1]
 8000b34:	2b06      	cmp	r3, #6
 8000b36:	d003      	beq.n	8000b40 <GetTableAdr+0x54>
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <GetTableAdr+0x64>)
 8000b3a:	785b      	ldrb	r3, [r3, #1]
 8000b3c:	2b10      	cmp	r3, #16
 8000b3e:	d102      	bne.n	8000b46 <GetTableAdr+0x5a>
	{
		return Reg_30000;//Reg_40000
 8000b40:	f247 5330 	movw	r3, #30000	; 0x7530
 8000b44:	e7ff      	b.n	8000b46 <GetTableAdr+0x5a>
	}
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	200000a4 	.word	0x200000a4

08000b54 <showPacket>:

void showPacket(uint8_t *packet , uint16_t len)
{
 8000b54:	b5b0      	push	{r4, r5, r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	807b      	strh	r3, [r7, #2]
 8000b60:	466b      	mov	r3, sp
 8000b62:	461d      	mov	r5, r3
	uint8_t buf[len];
 8000b64:	887c      	ldrh	r4, [r7, #2]
 8000b66:	4623      	mov	r3, r4
 8000b68:	3b01      	subs	r3, #1
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	b2a0      	uxth	r0, r4
 8000b6e:	f04f 0100 	mov.w	r1, #0
 8000b72:	f04f 0200 	mov.w	r2, #0
 8000b76:	f04f 0300 	mov.w	r3, #0
 8000b7a:	00cb      	lsls	r3, r1, #3
 8000b7c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000b80:	00c2      	lsls	r2, r0, #3
 8000b82:	b2a0      	uxth	r0, r4
 8000b84:	f04f 0100 	mov.w	r1, #0
 8000b88:	f04f 0200 	mov.w	r2, #0
 8000b8c:	f04f 0300 	mov.w	r3, #0
 8000b90:	00cb      	lsls	r3, r1, #3
 8000b92:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000b96:	00c2      	lsls	r2, r0, #3
 8000b98:	4623      	mov	r3, r4
 8000b9a:	3307      	adds	r3, #7
 8000b9c:	08db      	lsrs	r3, r3, #3
 8000b9e:	00db      	lsls	r3, r3, #3
 8000ba0:	ebad 0d03 	sub.w	sp, sp, r3
 8000ba4:	466b      	mov	r3, sp
 8000ba6:	3300      	adds	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]

	memcpy(buf,packet,len);
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	887a      	ldrh	r2, [r7, #2]
 8000bae:	6879      	ldr	r1, [r7, #4]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f003 f929 	bl	8003e08 <memcpy>
	RX_Buf_Init();
 8000bb6:	f7ff fd69 	bl	800068c <RX_Buf_Init>

	if(len <= 8)// if intput packet RX.
 8000bba:	887b      	ldrh	r3, [r7, #2]
 8000bbc:	2b08      	cmp	r3, #8
 8000bbe:	d803      	bhi.n	8000bc8 <showPacket+0x74>
	{
		printf("TX_Packet:");
 8000bc0:	4817      	ldr	r0, [pc, #92]	; (8000c20 <showPacket+0xcc>)
 8000bc2:	f003 f937 	bl	8003e34 <iprintf>
 8000bc6:	e002      	b.n	8000bce <showPacket+0x7a>
	}
	else
	{
		printf("RX_Packet:");
 8000bc8:	4816      	ldr	r0, [pc, #88]	; (8000c24 <showPacket+0xd0>)
 8000bca:	f003 f933 	bl	8003e34 <iprintf>
	}

	for (int i = 0; i < len; i++)
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
 8000bd2:	e019      	b.n	8000c08 <showPacket+0xb4>
	{
		if (buf[i] <= 0x0A)
 8000bd4:	68fa      	ldr	r2, [r7, #12]
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	4413      	add	r3, r2
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b0a      	cmp	r3, #10
 8000bde:	d808      	bhi.n	8000bf2 <showPacket+0x9e>
		{
			printf("0%x ", buf[i]);
 8000be0:	68fa      	ldr	r2, [r7, #12]
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	4413      	add	r3, r2
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	4619      	mov	r1, r3
 8000bea:	480f      	ldr	r0, [pc, #60]	; (8000c28 <showPacket+0xd4>)
 8000bec:	f003 f922 	bl	8003e34 <iprintf>
 8000bf0:	e007      	b.n	8000c02 <showPacket+0xae>
		}
		else
		{
			printf("%x ", buf[i]);
 8000bf2:	68fa      	ldr	r2, [r7, #12]
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480b      	ldr	r0, [pc, #44]	; (8000c2c <showPacket+0xd8>)
 8000bfe:	f003 f919 	bl	8003e34 <iprintf>
	for (int i = 0; i < len; i++)
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	3301      	adds	r3, #1
 8000c06:	617b      	str	r3, [r7, #20]
 8000c08:	887b      	ldrh	r3, [r7, #2]
 8000c0a:	697a      	ldr	r2, [r7, #20]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	dbe1      	blt.n	8000bd4 <showPacket+0x80>
		}
	}
	printf("\n");
 8000c10:	200a      	movs	r0, #10
 8000c12:	f003 f927 	bl	8003e64 <putchar>
 8000c16:	46ad      	mov	sp, r5

}
 8000c18:	bf00      	nop
 8000c1a:	3718      	adds	r7, #24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bdb0      	pop	{r4, r5, r7, pc}
 8000c20:	08004ec4 	.word	0x08004ec4
 8000c24:	08004ed0 	.word	0x08004ed0
 8000c28:	08004edc 	.word	0x08004edc
 8000c2c:	08004ee4 	.word	0x08004ee4

08000c30 <Rx_TimerStartStop>:
uint8_t RxTimerFlag = 0;
volatile uint16_t RxTimerCnt = 0;


void Rx_TimerStartStop()
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
	if(RxTimerFlag)
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <Rx_TimerStartStop+0x20>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d003      	beq.n	8000c44 <Rx_TimerStartStop+0x14>
	{
		HAL_TIM_Base_Start_IT(&htim1);
 8000c3c:	4805      	ldr	r0, [pc, #20]	; (8000c54 <Rx_TimerStartStop+0x24>)
 8000c3e:	f001 fccd 	bl	80025dc <HAL_TIM_Base_Start_IT>
	else
	{
		HAL_TIM_Base_Stop_IT(&htim1);
	}

}
 8000c42:	e002      	b.n	8000c4a <Rx_TimerStartStop+0x1a>
		HAL_TIM_Base_Stop_IT(&htim1);
 8000c44:	4803      	ldr	r0, [pc, #12]	; (8000c54 <Rx_TimerStartStop+0x24>)
 8000c46:	f001 fd2b 	bl	80026a0 <HAL_TIM_Base_Stop_IT>
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	200004a7 	.word	0x200004a7
 8000c54:	200008c0 	.word	0x200008c0

08000c58 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)//0.1ms
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  if(htim == &htim1)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a0c      	ldr	r2, [pc, #48]	; (8000c94 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d10f      	bne.n	8000c88 <HAL_TIM_PeriodElapsedCallback+0x30>
  {
	  if(RxTimerCnt++ > 600)
 8000c68:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000c6a:	881b      	ldrh	r3, [r3, #0]
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	1c5a      	adds	r2, r3, #1
 8000c70:	b291      	uxth	r1, r2
 8000c72:	4a09      	ldr	r2, [pc, #36]	; (8000c98 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000c74:	8011      	strh	r1, [r2, #0]
 8000c76:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000c7a:	d905      	bls.n	8000c88 <HAL_TIM_PeriodElapsedCallback+0x30>
	  {

		  RxTimerCnt = 0;
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	801a      	strh	r2, [r3, #0]
		  RxTimerFlag = 0;
 8000c82:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	701a      	strb	r2, [r3, #0]

	  }
  }

}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	200008c0 	.word	0x200008c0
 8000c98:	200004a8 	.word	0x200004a8
 8000c9c:	200004a7 	.word	0x200004a7

08000ca0 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart6, (uint8_t *)&ch, 1, 0xFFFF);
 8000ca8:	1d39      	adds	r1, r7, #4
 8000caa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cae:	2201      	movs	r2, #1
 8000cb0:	4803      	ldr	r0, [pc, #12]	; (8000cc0 <__io_putchar+0x20>)
 8000cb2:	f002 f904 	bl	8002ebe <HAL_UART_Transmit>

  return ch;
 8000cb6:	687b      	ldr	r3, [r7, #4]

}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20000908 	.word	0x20000908

08000cc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cc8:	f000 fc10 	bl	80014ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ccc:	f000 f81c 	bl	8000d08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cd0:	f000 f95c 	bl	8000f8c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000cd4:	f000 f8b6 	bl	8000e44 <MX_TIM1_Init>
  MX_USART6_UART_Init();
 8000cd8:	f000 f92e 	bl	8000f38 <MX_USART6_UART_Init>
  MX_USART2_UART_Init();
 8000cdc:	f000 f902 	bl	8000ee4 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000ce0:	f000 f87c 	bl	8000ddc <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &RX_Data, 1);
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	4905      	ldr	r1, [pc, #20]	; (8000cfc <main+0x38>)
 8000ce8:	4805      	ldr	r0, [pc, #20]	; (8000d00 <main+0x3c>)
 8000cea:	f002 f97a 	bl	8002fe2 <HAL_UART_Receive_IT>
  printf("UART6!!\n");
 8000cee:	4805      	ldr	r0, [pc, #20]	; (8000d04 <main+0x40>)
 8000cf0:	f003 f93c 	bl	8003f6c <puts>
  while (1)
  {


    /* USER CODE END WHILE */
	  MB_Slave();
 8000cf4:	f7ff fc8c 	bl	8000610 <MB_Slave>
 8000cf8:	e7fc      	b.n	8000cf4 <main+0x30>
 8000cfa:	bf00      	nop
 8000cfc:	200004a4 	.word	0x200004a4
 8000d00:	2000094c 	.word	0x2000094c
 8000d04:	08004ee8 	.word	0x08004ee8

08000d08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b094      	sub	sp, #80	; 0x50
 8000d0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d0e:	f107 0320 	add.w	r3, r7, #32
 8000d12:	2230      	movs	r2, #48	; 0x30
 8000d14:	2100      	movs	r1, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f003 f884 	bl	8003e24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d1c:	f107 030c 	add.w	r3, r7, #12
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	4b28      	ldr	r3, [pc, #160]	; (8000dd4 <SystemClock_Config+0xcc>)
 8000d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d34:	4a27      	ldr	r2, [pc, #156]	; (8000dd4 <SystemClock_Config+0xcc>)
 8000d36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3c:	4b25      	ldr	r3, [pc, #148]	; (8000dd4 <SystemClock_Config+0xcc>)
 8000d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d44:	60bb      	str	r3, [r7, #8]
 8000d46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d48:	2300      	movs	r3, #0
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	4b22      	ldr	r3, [pc, #136]	; (8000dd8 <SystemClock_Config+0xd0>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a21      	ldr	r2, [pc, #132]	; (8000dd8 <SystemClock_Config+0xd0>)
 8000d52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d56:	6013      	str	r3, [r2, #0]
 8000d58:	4b1f      	ldr	r3, [pc, #124]	; (8000dd8 <SystemClock_Config+0xd0>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d64:	2302      	movs	r3, #2
 8000d66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d6c:	2310      	movs	r3, #16
 8000d6e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d70:	2302      	movs	r3, #2
 8000d72:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d74:	2300      	movs	r3, #0
 8000d76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000d78:	2310      	movs	r3, #16
 8000d7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d7c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000d80:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000d82:	2304      	movs	r3, #4
 8000d84:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d86:	2304      	movs	r3, #4
 8000d88:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d8a:	f107 0320 	add.w	r3, r7, #32
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 ff60 	bl	8001c54 <HAL_RCC_OscConfig>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d9a:	f000 f965 	bl	8001068 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d9e:	230f      	movs	r3, #15
 8000da0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000da2:	2302      	movs	r3, #2
 8000da4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000daa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000db4:	f107 030c 	add.w	r3, r7, #12
 8000db8:	2102      	movs	r1, #2
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f001 f9c2 	bl	8002144 <HAL_RCC_ClockConfig>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000dc6:	f000 f94f 	bl	8001068 <Error_Handler>
  }
}
 8000dca:	bf00      	nop
 8000dcc:	3750      	adds	r7, #80	; 0x50
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40007000 	.word	0x40007000

08000ddc <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000de0:	2200      	movs	r2, #0
 8000de2:	2100      	movs	r1, #0
 8000de4:	2026      	movs	r0, #38	; 0x26
 8000de6:	f000 fcce 	bl	8001786 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000dea:	2026      	movs	r0, #38	; 0x26
 8000dec:	f000 fce7 	bl	80017be <HAL_NVIC_EnableIRQ>
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000df0:	2200      	movs	r2, #0
 8000df2:	2100      	movs	r1, #0
 8000df4:	2047      	movs	r0, #71	; 0x47
 8000df6:	f000 fcc6 	bl	8001786 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000dfa:	2047      	movs	r0, #71	; 0x47
 8000dfc:	f000 fcdf 	bl	80017be <HAL_NVIC_EnableIRQ>
  /* TIM1_CC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2100      	movs	r1, #0
 8000e04:	201b      	movs	r0, #27
 8000e06:	f000 fcbe 	bl	8001786 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000e0a:	201b      	movs	r0, #27
 8000e0c:	f000 fcd7 	bl	80017be <HAL_NVIC_EnableIRQ>
  /* TIM1_TRG_COM_TIM11_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000e10:	2200      	movs	r2, #0
 8000e12:	2100      	movs	r1, #0
 8000e14:	201a      	movs	r0, #26
 8000e16:	f000 fcb6 	bl	8001786 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000e1a:	201a      	movs	r0, #26
 8000e1c:	f000 fccf 	bl	80017be <HAL_NVIC_EnableIRQ>
  /* TIM1_UP_TIM10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2100      	movs	r1, #0
 8000e24:	2019      	movs	r0, #25
 8000e26:	f000 fcae 	bl	8001786 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e2a:	2019      	movs	r0, #25
 8000e2c:	f000 fcc7 	bl	80017be <HAL_NVIC_EnableIRQ>
  /* TIM1_BRK_TIM9_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8000e30:	2200      	movs	r2, #0
 8000e32:	2100      	movs	r1, #0
 8000e34:	2018      	movs	r0, #24
 8000e36:	f000 fca6 	bl	8001786 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000e3a:	2018      	movs	r0, #24
 8000e3c:	f000 fcbf 	bl	80017be <HAL_NVIC_EnableIRQ>
}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e4a:	f107 0308 	add.w	r3, r7, #8
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e58:	463b      	mov	r3, r7
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e60:	4b1e      	ldr	r3, [pc, #120]	; (8000edc <MX_TIM1_Init+0x98>)
 8000e62:	4a1f      	ldr	r2, [pc, #124]	; (8000ee0 <MX_TIM1_Init+0x9c>)
 8000e64:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 840-1;
 8000e66:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <MX_TIM1_Init+0x98>)
 8000e68:	f240 3247 	movw	r2, #839	; 0x347
 8000e6c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e6e:	4b1b      	ldr	r3, [pc, #108]	; (8000edc <MX_TIM1_Init+0x98>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000e74:	4b19      	ldr	r3, [pc, #100]	; (8000edc <MX_TIM1_Init+0x98>)
 8000e76:	2263      	movs	r2, #99	; 0x63
 8000e78:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e7a:	4b18      	ldr	r3, [pc, #96]	; (8000edc <MX_TIM1_Init+0x98>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e80:	4b16      	ldr	r3, [pc, #88]	; (8000edc <MX_TIM1_Init+0x98>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e86:	4b15      	ldr	r3, [pc, #84]	; (8000edc <MX_TIM1_Init+0x98>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e8c:	4813      	ldr	r0, [pc, #76]	; (8000edc <MX_TIM1_Init+0x98>)
 8000e8e:	f001 fb55 	bl	800253c <HAL_TIM_Base_Init>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000e98:	f000 f8e6 	bl	8001068 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ea2:	f107 0308 	add.w	r3, r7, #8
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	480c      	ldr	r0, [pc, #48]	; (8000edc <MX_TIM1_Init+0x98>)
 8000eaa:	f001 fd30 	bl	800290e <HAL_TIM_ConfigClockSource>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000eb4:	f000 f8d8 	bl	8001068 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ec0:	463b      	mov	r3, r7
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4805      	ldr	r0, [pc, #20]	; (8000edc <MX_TIM1_Init+0x98>)
 8000ec6:	f001 ff2b 	bl	8002d20 <HAL_TIMEx_MasterConfigSynchronization>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000ed0:	f000 f8ca 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ed4:	bf00      	nop
 8000ed6:	3718      	adds	r7, #24
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	200008c0 	.word	0x200008c0
 8000ee0:	40010000 	.word	0x40010000

08000ee4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <MX_USART2_UART_Init+0x4c>)
 8000eea:	4a12      	ldr	r2, [pc, #72]	; (8000f34 <MX_USART2_UART_Init+0x50>)
 8000eec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000eee:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <MX_USART2_UART_Init+0x4c>)
 8000ef0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ef4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <MX_USART2_UART_Init+0x4c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <MX_USART2_UART_Init+0x4c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f02:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <MX_USART2_UART_Init+0x4c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f08:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <MX_USART2_UART_Init+0x4c>)
 8000f0a:	220c      	movs	r2, #12
 8000f0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f0e:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <MX_USART2_UART_Init+0x4c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <MX_USART2_UART_Init+0x4c>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f1a:	4805      	ldr	r0, [pc, #20]	; (8000f30 <MX_USART2_UART_Init+0x4c>)
 8000f1c:	f001 ff82 	bl	8002e24 <HAL_UART_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f26:	f000 f89f 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	2000094c 	.word	0x2000094c
 8000f34:	40004400 	.word	0x40004400

08000f38 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000f3c:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <MX_USART6_UART_Init+0x4c>)
 8000f3e:	4a12      	ldr	r2, [pc, #72]	; (8000f88 <MX_USART6_UART_Init+0x50>)
 8000f40:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000f42:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <MX_USART6_UART_Init+0x4c>)
 8000f44:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f48:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <MX_USART6_UART_Init+0x4c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <MX_USART6_UART_Init+0x4c>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000f56:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <MX_USART6_UART_Init+0x4c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000f5c:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <MX_USART6_UART_Init+0x4c>)
 8000f5e:	220c      	movs	r2, #12
 8000f60:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f62:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <MX_USART6_UART_Init+0x4c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <MX_USART6_UART_Init+0x4c>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000f6e:	4805      	ldr	r0, [pc, #20]	; (8000f84 <MX_USART6_UART_Init+0x4c>)
 8000f70:	f001 ff58 	bl	8002e24 <HAL_UART_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000f7a:	f000 f875 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000908 	.word	0x20000908
 8000f88:	40011400 	.word	0x40011400

08000f8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	; 0x28
 8000f90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f92:	f107 0314 	add.w	r3, r7, #20
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
 8000fa0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	4b2d      	ldr	r3, [pc, #180]	; (800105c <MX_GPIO_Init+0xd0>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a2c      	ldr	r2, [pc, #176]	; (800105c <MX_GPIO_Init+0xd0>)
 8000fac:	f043 0304 	orr.w	r3, r3, #4
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b2a      	ldr	r3, [pc, #168]	; (800105c <MX_GPIO_Init+0xd0>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0304 	and.w	r3, r3, #4
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	4b26      	ldr	r3, [pc, #152]	; (800105c <MX_GPIO_Init+0xd0>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a25      	ldr	r2, [pc, #148]	; (800105c <MX_GPIO_Init+0xd0>)
 8000fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b23      	ldr	r3, [pc, #140]	; (800105c <MX_GPIO_Init+0xd0>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	4b1f      	ldr	r3, [pc, #124]	; (800105c <MX_GPIO_Init+0xd0>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a1e      	ldr	r2, [pc, #120]	; (800105c <MX_GPIO_Init+0xd0>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b1c      	ldr	r3, [pc, #112]	; (800105c <MX_GPIO_Init+0xd0>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	60bb      	str	r3, [r7, #8]
 8000ff4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	4b18      	ldr	r3, [pc, #96]	; (800105c <MX_GPIO_Init+0xd0>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a17      	ldr	r2, [pc, #92]	; (800105c <MX_GPIO_Init+0xd0>)
 8001000:	f043 0302 	orr.w	r3, r3, #2
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b15      	ldr	r3, [pc, #84]	; (800105c <MX_GPIO_Init+0xd0>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	2120      	movs	r1, #32
 8001016:	4812      	ldr	r0, [pc, #72]	; (8001060 <MX_GPIO_Init+0xd4>)
 8001018:	f000 fe02 	bl	8001c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800101c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001020:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001022:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001026:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	4619      	mov	r1, r3
 8001032:	480c      	ldr	r0, [pc, #48]	; (8001064 <MX_GPIO_Init+0xd8>)
 8001034:	f000 fc70 	bl	8001918 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001038:	2320      	movs	r3, #32
 800103a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103c:	2301      	movs	r3, #1
 800103e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2300      	movs	r3, #0
 8001046:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	4619      	mov	r1, r3
 800104e:	4804      	ldr	r0, [pc, #16]	; (8001060 <MX_GPIO_Init+0xd4>)
 8001050:	f000 fc62 	bl	8001918 <HAL_GPIO_Init>

}
 8001054:	bf00      	nop
 8001056:	3728      	adds	r7, #40	; 0x28
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40023800 	.word	0x40023800
 8001060:	40020000 	.word	0x40020000
 8001064:	40020800 	.word	0x40020800

08001068 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800106c:	b672      	cpsid	i
}
 800106e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001070:	e7fe      	b.n	8001070 <Error_Handler+0x8>
	...

08001074 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	607b      	str	r3, [r7, #4]
 800107e:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <HAL_MspInit+0x4c>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001082:	4a0f      	ldr	r2, [pc, #60]	; (80010c0 <HAL_MspInit+0x4c>)
 8001084:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001088:	6453      	str	r3, [r2, #68]	; 0x44
 800108a:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <HAL_MspInit+0x4c>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	603b      	str	r3, [r7, #0]
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <HAL_MspInit+0x4c>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	4a08      	ldr	r2, [pc, #32]	; (80010c0 <HAL_MspInit+0x4c>)
 80010a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a4:	6413      	str	r3, [r2, #64]	; 0x40
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_MspInit+0x4c>)
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ae:	603b      	str	r3, [r7, #0]
 80010b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010b2:	2007      	movs	r0, #7
 80010b4:	f000 fb5c 	bl	8001770 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40023800 	.word	0x40023800

080010c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a0b      	ldr	r2, [pc, #44]	; (8001100 <HAL_TIM_Base_MspInit+0x3c>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d10d      	bne.n	80010f2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <HAL_TIM_Base_MspInit+0x40>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	4a09      	ldr	r2, [pc, #36]	; (8001104 <HAL_TIM_Base_MspInit+0x40>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	6453      	str	r3, [r2, #68]	; 0x44
 80010e6:	4b07      	ldr	r3, [pc, #28]	; (8001104 <HAL_TIM_Base_MspInit+0x40>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80010f2:	bf00      	nop
 80010f4:	3714      	adds	r7, #20
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	40010000 	.word	0x40010000
 8001104:	40023800 	.word	0x40023800

08001108 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08c      	sub	sp, #48	; 0x30
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 031c 	add.w	r3, r7, #28
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a32      	ldr	r2, [pc, #200]	; (80011f0 <HAL_UART_MspInit+0xe8>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d12c      	bne.n	8001184 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	61bb      	str	r3, [r7, #24]
 800112e:	4b31      	ldr	r3, [pc, #196]	; (80011f4 <HAL_UART_MspInit+0xec>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	4a30      	ldr	r2, [pc, #192]	; (80011f4 <HAL_UART_MspInit+0xec>)
 8001134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001138:	6413      	str	r3, [r2, #64]	; 0x40
 800113a:	4b2e      	ldr	r3, [pc, #184]	; (80011f4 <HAL_UART_MspInit+0xec>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001142:	61bb      	str	r3, [r7, #24]
 8001144:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
 800114a:	4b2a      	ldr	r3, [pc, #168]	; (80011f4 <HAL_UART_MspInit+0xec>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a29      	ldr	r2, [pc, #164]	; (80011f4 <HAL_UART_MspInit+0xec>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b27      	ldr	r3, [pc, #156]	; (80011f4 <HAL_UART_MspInit+0xec>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001162:	230c      	movs	r3, #12
 8001164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	2302      	movs	r3, #2
 8001168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116e:	2303      	movs	r3, #3
 8001170:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001172:	2307      	movs	r3, #7
 8001174:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001176:	f107 031c 	add.w	r3, r7, #28
 800117a:	4619      	mov	r1, r3
 800117c:	481e      	ldr	r0, [pc, #120]	; (80011f8 <HAL_UART_MspInit+0xf0>)
 800117e:	f000 fbcb 	bl	8001918 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001182:	e030      	b.n	80011e6 <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a1c      	ldr	r2, [pc, #112]	; (80011fc <HAL_UART_MspInit+0xf4>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d12b      	bne.n	80011e6 <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	4b18      	ldr	r3, [pc, #96]	; (80011f4 <HAL_UART_MspInit+0xec>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	4a17      	ldr	r2, [pc, #92]	; (80011f4 <HAL_UART_MspInit+0xec>)
 8001198:	f043 0320 	orr.w	r3, r3, #32
 800119c:	6453      	str	r3, [r2, #68]	; 0x44
 800119e:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <HAL_UART_MspInit+0xec>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a2:	f003 0320 	and.w	r3, r3, #32
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <HAL_UART_MspInit+0xec>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a10      	ldr	r2, [pc, #64]	; (80011f4 <HAL_UART_MspInit+0xec>)
 80011b4:	f043 0304 	orr.w	r3, r3, #4
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <HAL_UART_MspInit+0xec>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0304 	and.w	r3, r3, #4
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011c6:	23c0      	movs	r3, #192	; 0xc0
 80011c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	2302      	movs	r3, #2
 80011cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d2:	2303      	movs	r3, #3
 80011d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80011d6:	2308      	movs	r3, #8
 80011d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011da:	f107 031c 	add.w	r3, r7, #28
 80011de:	4619      	mov	r1, r3
 80011e0:	4807      	ldr	r0, [pc, #28]	; (8001200 <HAL_UART_MspInit+0xf8>)
 80011e2:	f000 fb99 	bl	8001918 <HAL_GPIO_Init>
}
 80011e6:	bf00      	nop
 80011e8:	3730      	adds	r7, #48	; 0x30
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40004400 	.word	0x40004400
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40020000 	.word	0x40020000
 80011fc:	40011400 	.word	0x40011400
 8001200:	40020800 	.word	0x40020800

08001204 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001208:	e7fe      	b.n	8001208 <NMI_Handler+0x4>

0800120a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800120e:	e7fe      	b.n	800120e <HardFault_Handler+0x4>

08001210 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <MemManage_Handler+0x4>

08001216 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800121a:	e7fe      	b.n	800121a <BusFault_Handler+0x4>

0800121c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <UsageFault_Handler+0x4>

08001222 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001250:	f000 f99e 	bl	8001590 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}

08001258 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800125c:	4802      	ldr	r0, [pc, #8]	; (8001268 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800125e:	f001 fa4e 	bl	80026fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	200008c0 	.word	0x200008c0

0800126c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001270:	4802      	ldr	r0, [pc, #8]	; (800127c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001272:	f001 fa44 	bl	80026fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200008c0 	.word	0x200008c0

08001280 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001284:	4802      	ldr	r0, [pc, #8]	; (8001290 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001286:	f001 fa3a 	bl	80026fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200008c0 	.word	0x200008c0

08001294 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001298:	4802      	ldr	r0, [pc, #8]	; (80012a4 <TIM1_CC_IRQHandler+0x10>)
 800129a:	f001 fa30 	bl	80026fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	200008c0 	.word	0x200008c0

080012a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012ac:	4802      	ldr	r0, [pc, #8]	; (80012b8 <USART2_IRQHandler+0x10>)
 80012ae:	f001 fec9 	bl	8003044 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	2000094c 	.word	0x2000094c

080012bc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80012c0:	4802      	ldr	r0, [pc, #8]	; (80012cc <USART6_IRQHandler+0x10>)
 80012c2:	f001 febf 	bl	8003044 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000908 	.word	0x20000908

080012d0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	e00a      	b.n	80012f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012e2:	f3af 8000 	nop.w
 80012e6:	4601      	mov	r1, r0
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	1c5a      	adds	r2, r3, #1
 80012ec:	60ba      	str	r2, [r7, #8]
 80012ee:	b2ca      	uxtb	r2, r1
 80012f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	3301      	adds	r3, #1
 80012f6:	617b      	str	r3, [r7, #20]
 80012f8:	697a      	ldr	r2, [r7, #20]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	dbf0      	blt.n	80012e2 <_read+0x12>
	}

return len;
 8001300:	687b      	ldr	r3, [r7, #4]
}
 8001302:	4618      	mov	r0, r3
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b086      	sub	sp, #24
 800130e:	af00      	add	r7, sp, #0
 8001310:	60f8      	str	r0, [r7, #12]
 8001312:	60b9      	str	r1, [r7, #8]
 8001314:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
 800131a:	e009      	b.n	8001330 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	1c5a      	adds	r2, r3, #1
 8001320:	60ba      	str	r2, [r7, #8]
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff fcbb 	bl	8000ca0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	3301      	adds	r3, #1
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	697a      	ldr	r2, [r7, #20]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	429a      	cmp	r2, r3
 8001336:	dbf1      	blt.n	800131c <_write+0x12>
	}
	return len;
 8001338:	687b      	ldr	r3, [r7, #4]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <_close>:

int _close(int file)
{
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
	return -1;
 800134a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800134e:	4618      	mov	r0, r3
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800136a:	605a      	str	r2, [r3, #4]
	return 0;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <_isatty>:

int _isatty(int file)
{
 800137a:	b480      	push	{r7}
 800137c:	b083      	sub	sp, #12
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
	return 1;
 8001382:	2301      	movs	r3, #1
}
 8001384:	4618      	mov	r0, r3
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
	return 0;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
	...

080013ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013b4:	4a14      	ldr	r2, [pc, #80]	; (8001408 <_sbrk+0x5c>)
 80013b6:	4b15      	ldr	r3, [pc, #84]	; (800140c <_sbrk+0x60>)
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013c0:	4b13      	ldr	r3, [pc, #76]	; (8001410 <_sbrk+0x64>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d102      	bne.n	80013ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <_sbrk+0x64>)
 80013ca:	4a12      	ldr	r2, [pc, #72]	; (8001414 <_sbrk+0x68>)
 80013cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ce:	4b10      	ldr	r3, [pc, #64]	; (8001410 <_sbrk+0x64>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4413      	add	r3, r2
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d207      	bcs.n	80013ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013dc:	f002 fcea 	bl	8003db4 <__errno>
 80013e0:	4603      	mov	r3, r0
 80013e2:	220c      	movs	r2, #12
 80013e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013e6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ea:	e009      	b.n	8001400 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013ec:	4b08      	ldr	r3, [pc, #32]	; (8001410 <_sbrk+0x64>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013f2:	4b07      	ldr	r3, [pc, #28]	; (8001410 <_sbrk+0x64>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	4a05      	ldr	r2, [pc, #20]	; (8001410 <_sbrk+0x64>)
 80013fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013fe:	68fb      	ldr	r3, [r7, #12]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20020000 	.word	0x20020000
 800140c:	00000400 	.word	0x00000400
 8001410:	200004ac 	.word	0x200004ac
 8001414:	200009a8 	.word	0x200009a8

08001418 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800141c:	4b06      	ldr	r3, [pc, #24]	; (8001438 <SystemInit+0x20>)
 800141e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001422:	4a05      	ldr	r2, [pc, #20]	; (8001438 <SystemInit+0x20>)
 8001424:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001428:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <HAL_UART_RxCpltCallback>:
extern uint8_t RxTimerFlag;

extern UART_HandleTypeDef huart2;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	if(huart == &huart2) // Modbus Slave TX
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a0f      	ldr	r2, [pc, #60]	; (8001484 <HAL_UART_RxCpltCallback+0x48>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d117      	bne.n	800147c <HAL_UART_RxCpltCallback+0x40>
	{
		RxTimerFlag = ON;
 800144c:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <HAL_UART_RxCpltCallback+0x4c>)
 800144e:	2201      	movs	r2, #1
 8001450:	701a      	strb	r2, [r3, #0]

		if(RxTimerFlag)
 8001452:	4b0d      	ldr	r3, [pc, #52]	; (8001488 <HAL_UART_RxCpltCallback+0x4c>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d00b      	beq.n	8001472 <HAL_UART_RxCpltCallback+0x36>
		{
			MB_RxBuf[RX_DataCnt++] = RX_Data;
 800145a:	4b0c      	ldr	r3, [pc, #48]	; (800148c <HAL_UART_RxCpltCallback+0x50>)
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	b29b      	uxth	r3, r3
 8001460:	1c5a      	adds	r2, r3, #1
 8001462:	b291      	uxth	r1, r2
 8001464:	4a09      	ldr	r2, [pc, #36]	; (800148c <HAL_UART_RxCpltCallback+0x50>)
 8001466:	8011      	strh	r1, [r2, #0]
 8001468:	461a      	mov	r2, r3
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <HAL_UART_RxCpltCallback+0x54>)
 800146c:	7819      	ldrb	r1, [r3, #0]
 800146e:	4b09      	ldr	r3, [pc, #36]	; (8001494 <HAL_UART_RxCpltCallback+0x58>)
 8001470:	5499      	strb	r1, [r3, r2]
		}

		HAL_UART_Receive_IT(&huart2, &RX_Data, 1);
 8001472:	2201      	movs	r2, #1
 8001474:	4906      	ldr	r1, [pc, #24]	; (8001490 <HAL_UART_RxCpltCallback+0x54>)
 8001476:	4803      	ldr	r0, [pc, #12]	; (8001484 <HAL_UART_RxCpltCallback+0x48>)
 8001478:	f001 fdb3 	bl	8002fe2 <HAL_UART_Receive_IT>
	}

}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	2000094c 	.word	0x2000094c
 8001488:	200004a7 	.word	0x200004a7
 800148c:	2000008c 	.word	0x2000008c
 8001490:	200004a4 	.word	0x200004a4
 8001494:	20000090 	.word	0x20000090

08001498 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001498:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800149c:	480d      	ldr	r0, [pc, #52]	; (80014d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800149e:	490e      	ldr	r1, [pc, #56]	; (80014d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014a0:	4a0e      	ldr	r2, [pc, #56]	; (80014dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a4:	e002      	b.n	80014ac <LoopCopyDataInit>

080014a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014aa:	3304      	adds	r3, #4

080014ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b0:	d3f9      	bcc.n	80014a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014b2:	4a0b      	ldr	r2, [pc, #44]	; (80014e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014b4:	4c0b      	ldr	r4, [pc, #44]	; (80014e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b8:	e001      	b.n	80014be <LoopFillZerobss>

080014ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014bc:	3204      	adds	r2, #4

080014be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c0:	d3fb      	bcc.n	80014ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014c2:	f7ff ffa9 	bl	8001418 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014c6:	f002 fc7b 	bl	8003dc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ca:	f7ff fbfb 	bl	8000cc4 <main>
  bx  lr    
 80014ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80014d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014d8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80014dc:	08005790 	.word	0x08005790
  ldr r2, =_sbss
 80014e0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80014e4:	200009a4 	.word	0x200009a4

080014e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014e8:	e7fe      	b.n	80014e8 <ADC_IRQHandler>
	...

080014ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014f0:	4b0e      	ldr	r3, [pc, #56]	; (800152c <HAL_Init+0x40>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a0d      	ldr	r2, [pc, #52]	; (800152c <HAL_Init+0x40>)
 80014f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014fc:	4b0b      	ldr	r3, [pc, #44]	; (800152c <HAL_Init+0x40>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a0a      	ldr	r2, [pc, #40]	; (800152c <HAL_Init+0x40>)
 8001502:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001506:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001508:	4b08      	ldr	r3, [pc, #32]	; (800152c <HAL_Init+0x40>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a07      	ldr	r2, [pc, #28]	; (800152c <HAL_Init+0x40>)
 800150e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001512:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001514:	2003      	movs	r0, #3
 8001516:	f000 f92b 	bl	8001770 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800151a:	2000      	movs	r0, #0
 800151c:	f000 f808 	bl	8001530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001520:	f7ff fda8 	bl	8001074 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40023c00 	.word	0x40023c00

08001530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001538:	4b12      	ldr	r3, [pc, #72]	; (8001584 <HAL_InitTick+0x54>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	4b12      	ldr	r3, [pc, #72]	; (8001588 <HAL_InitTick+0x58>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	4619      	mov	r1, r3
 8001542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001546:	fbb3 f3f1 	udiv	r3, r3, r1
 800154a:	fbb2 f3f3 	udiv	r3, r2, r3
 800154e:	4618      	mov	r0, r3
 8001550:	f000 f943 	bl	80017da <HAL_SYSTICK_Config>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e00e      	b.n	800157c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2b0f      	cmp	r3, #15
 8001562:	d80a      	bhi.n	800157a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001564:	2200      	movs	r2, #0
 8001566:	6879      	ldr	r1, [r7, #4]
 8001568:	f04f 30ff 	mov.w	r0, #4294967295
 800156c:	f000 f90b 	bl	8001786 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001570:	4a06      	ldr	r2, [pc, #24]	; (800158c <HAL_InitTick+0x5c>)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001576:	2300      	movs	r3, #0
 8001578:	e000      	b.n	800157c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
}
 800157c:	4618      	mov	r0, r3
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000000 	.word	0x20000000
 8001588:	20000008 	.word	0x20000008
 800158c:	20000004 	.word	0x20000004

08001590 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <HAL_IncTick+0x20>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	461a      	mov	r2, r3
 800159a:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <HAL_IncTick+0x24>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4413      	add	r3, r2
 80015a0:	4a04      	ldr	r2, [pc, #16]	; (80015b4 <HAL_IncTick+0x24>)
 80015a2:	6013      	str	r3, [r2, #0]
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	20000008 	.word	0x20000008
 80015b4:	20000990 	.word	0x20000990

080015b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  return uwTick;
 80015bc:	4b03      	ldr	r3, [pc, #12]	; (80015cc <HAL_GetTick+0x14>)
 80015be:	681b      	ldr	r3, [r3, #0]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	20000990 	.word	0x20000990

080015d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015e0:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <__NVIC_SetPriorityGrouping+0x44>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015e6:	68ba      	ldr	r2, [r7, #8]
 80015e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015ec:	4013      	ands	r3, r2
 80015ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001602:	4a04      	ldr	r2, [pc, #16]	; (8001614 <__NVIC_SetPriorityGrouping+0x44>)
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	60d3      	str	r3, [r2, #12]
}
 8001608:	bf00      	nop
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800161c:	4b04      	ldr	r3, [pc, #16]	; (8001630 <__NVIC_GetPriorityGrouping+0x18>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	0a1b      	lsrs	r3, r3, #8
 8001622:	f003 0307 	and.w	r3, r3, #7
}
 8001626:	4618      	mov	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	2b00      	cmp	r3, #0
 8001644:	db0b      	blt.n	800165e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	f003 021f 	and.w	r2, r3, #31
 800164c:	4907      	ldr	r1, [pc, #28]	; (800166c <__NVIC_EnableIRQ+0x38>)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	095b      	lsrs	r3, r3, #5
 8001654:	2001      	movs	r0, #1
 8001656:	fa00 f202 	lsl.w	r2, r0, r2
 800165a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	e000e100 	.word	0xe000e100

08001670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	6039      	str	r1, [r7, #0]
 800167a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800167c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001680:	2b00      	cmp	r3, #0
 8001682:	db0a      	blt.n	800169a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	b2da      	uxtb	r2, r3
 8001688:	490c      	ldr	r1, [pc, #48]	; (80016bc <__NVIC_SetPriority+0x4c>)
 800168a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168e:	0112      	lsls	r2, r2, #4
 8001690:	b2d2      	uxtb	r2, r2
 8001692:	440b      	add	r3, r1
 8001694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001698:	e00a      	b.n	80016b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	b2da      	uxtb	r2, r3
 800169e:	4908      	ldr	r1, [pc, #32]	; (80016c0 <__NVIC_SetPriority+0x50>)
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	f003 030f 	and.w	r3, r3, #15
 80016a6:	3b04      	subs	r3, #4
 80016a8:	0112      	lsls	r2, r2, #4
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	440b      	add	r3, r1
 80016ae:	761a      	strb	r2, [r3, #24]
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	e000e100 	.word	0xe000e100
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b089      	sub	sp, #36	; 0x24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	f1c3 0307 	rsb	r3, r3, #7
 80016de:	2b04      	cmp	r3, #4
 80016e0:	bf28      	it	cs
 80016e2:	2304      	movcs	r3, #4
 80016e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3304      	adds	r3, #4
 80016ea:	2b06      	cmp	r3, #6
 80016ec:	d902      	bls.n	80016f4 <NVIC_EncodePriority+0x30>
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	3b03      	subs	r3, #3
 80016f2:	e000      	b.n	80016f6 <NVIC_EncodePriority+0x32>
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f8:	f04f 32ff 	mov.w	r2, #4294967295
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	43da      	mvns	r2, r3
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	401a      	ands	r2, r3
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800170c:	f04f 31ff 	mov.w	r1, #4294967295
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	fa01 f303 	lsl.w	r3, r1, r3
 8001716:	43d9      	mvns	r1, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800171c:	4313      	orrs	r3, r2
         );
}
 800171e:	4618      	mov	r0, r3
 8001720:	3724      	adds	r7, #36	; 0x24
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
	...

0800172c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3b01      	subs	r3, #1
 8001738:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800173c:	d301      	bcc.n	8001742 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800173e:	2301      	movs	r3, #1
 8001740:	e00f      	b.n	8001762 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001742:	4a0a      	ldr	r2, [pc, #40]	; (800176c <SysTick_Config+0x40>)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3b01      	subs	r3, #1
 8001748:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800174a:	210f      	movs	r1, #15
 800174c:	f04f 30ff 	mov.w	r0, #4294967295
 8001750:	f7ff ff8e 	bl	8001670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001754:	4b05      	ldr	r3, [pc, #20]	; (800176c <SysTick_Config+0x40>)
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800175a:	4b04      	ldr	r3, [pc, #16]	; (800176c <SysTick_Config+0x40>)
 800175c:	2207      	movs	r2, #7
 800175e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	e000e010 	.word	0xe000e010

08001770 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff ff29 	bl	80015d0 <__NVIC_SetPriorityGrouping>
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001786:	b580      	push	{r7, lr}
 8001788:	b086      	sub	sp, #24
 800178a:	af00      	add	r7, sp, #0
 800178c:	4603      	mov	r3, r0
 800178e:	60b9      	str	r1, [r7, #8]
 8001790:	607a      	str	r2, [r7, #4]
 8001792:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001798:	f7ff ff3e 	bl	8001618 <__NVIC_GetPriorityGrouping>
 800179c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	68b9      	ldr	r1, [r7, #8]
 80017a2:	6978      	ldr	r0, [r7, #20]
 80017a4:	f7ff ff8e 	bl	80016c4 <NVIC_EncodePriority>
 80017a8:	4602      	mov	r2, r0
 80017aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ae:	4611      	mov	r1, r2
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff ff5d 	bl	8001670 <__NVIC_SetPriority>
}
 80017b6:	bf00      	nop
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	4603      	mov	r3, r0
 80017c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff ff31 	bl	8001634 <__NVIC_EnableIRQ>
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b082      	sub	sp, #8
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f7ff ffa2 	bl	800172c <SysTick_Config>
 80017e8:	4603      	mov	r3, r0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b084      	sub	sp, #16
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001800:	f7ff feda 	bl	80015b8 <HAL_GetTick>
 8001804:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d008      	beq.n	8001824 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2280      	movs	r2, #128	; 0x80
 8001816:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e052      	b.n	80018ca <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f022 0216 	bic.w	r2, r2, #22
 8001832:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	695a      	ldr	r2, [r3, #20]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001842:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001848:	2b00      	cmp	r3, #0
 800184a:	d103      	bne.n	8001854 <HAL_DMA_Abort+0x62>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001850:	2b00      	cmp	r3, #0
 8001852:	d007      	beq.n	8001864 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f022 0208 	bic.w	r2, r2, #8
 8001862:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f022 0201 	bic.w	r2, r2, #1
 8001872:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001874:	e013      	b.n	800189e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001876:	f7ff fe9f 	bl	80015b8 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b05      	cmp	r3, #5
 8001882:	d90c      	bls.n	800189e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2220      	movs	r2, #32
 8001888:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2203      	movs	r2, #3
 800188e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e015      	b.n	80018ca <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1e4      	bne.n	8001876 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b0:	223f      	movs	r2, #63	; 0x3f
 80018b2:	409a      	lsls	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b083      	sub	sp, #12
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d004      	beq.n	80018f0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2280      	movs	r2, #128	; 0x80
 80018ea:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e00c      	b.n	800190a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2205      	movs	r2, #5
 80018f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 0201 	bic.w	r2, r2, #1
 8001906:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
	...

08001918 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001918:	b480      	push	{r7}
 800191a:	b089      	sub	sp, #36	; 0x24
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001926:	2300      	movs	r3, #0
 8001928:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800192a:	2300      	movs	r3, #0
 800192c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800192e:	2300      	movs	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]
 8001932:	e159      	b.n	8001be8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001934:	2201      	movs	r2, #1
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	4013      	ands	r3, r2
 8001946:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	429a      	cmp	r2, r3
 800194e:	f040 8148 	bne.w	8001be2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f003 0303 	and.w	r3, r3, #3
 800195a:	2b01      	cmp	r3, #1
 800195c:	d005      	beq.n	800196a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001966:	2b02      	cmp	r3, #2
 8001968:	d130      	bne.n	80019cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	2203      	movs	r2, #3
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43db      	mvns	r3, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4013      	ands	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	68da      	ldr	r2, [r3, #12]
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4313      	orrs	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019a0:	2201      	movs	r2, #1
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4013      	ands	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	091b      	lsrs	r3, r3, #4
 80019b6:	f003 0201 	and.w	r2, r3, #1
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 0303 	and.w	r3, r3, #3
 80019d4:	2b03      	cmp	r3, #3
 80019d6:	d017      	beq.n	8001a08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	2203      	movs	r2, #3
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 0303 	and.w	r3, r3, #3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d123      	bne.n	8001a5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	08da      	lsrs	r2, r3, #3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3208      	adds	r2, #8
 8001a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	f003 0307 	and.w	r3, r3, #7
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	220f      	movs	r2, #15
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4013      	ands	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	691a      	ldr	r2, [r3, #16]
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	08da      	lsrs	r2, r3, #3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	3208      	adds	r2, #8
 8001a56:	69b9      	ldr	r1, [r7, #24]
 8001a58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	2203      	movs	r2, #3
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4013      	ands	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f003 0203 	and.w	r2, r3, #3
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f000 80a2 	beq.w	8001be2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	4b57      	ldr	r3, [pc, #348]	; (8001c00 <HAL_GPIO_Init+0x2e8>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa6:	4a56      	ldr	r2, [pc, #344]	; (8001c00 <HAL_GPIO_Init+0x2e8>)
 8001aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aac:	6453      	str	r3, [r2, #68]	; 0x44
 8001aae:	4b54      	ldr	r3, [pc, #336]	; (8001c00 <HAL_GPIO_Init+0x2e8>)
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aba:	4a52      	ldr	r2, [pc, #328]	; (8001c04 <HAL_GPIO_Init+0x2ec>)
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	089b      	lsrs	r3, r3, #2
 8001ac0:	3302      	adds	r3, #2
 8001ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f003 0303 	and.w	r3, r3, #3
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	220f      	movs	r2, #15
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4013      	ands	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a49      	ldr	r2, [pc, #292]	; (8001c08 <HAL_GPIO_Init+0x2f0>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d019      	beq.n	8001b1a <HAL_GPIO_Init+0x202>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a48      	ldr	r2, [pc, #288]	; (8001c0c <HAL_GPIO_Init+0x2f4>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d013      	beq.n	8001b16 <HAL_GPIO_Init+0x1fe>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a47      	ldr	r2, [pc, #284]	; (8001c10 <HAL_GPIO_Init+0x2f8>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d00d      	beq.n	8001b12 <HAL_GPIO_Init+0x1fa>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a46      	ldr	r2, [pc, #280]	; (8001c14 <HAL_GPIO_Init+0x2fc>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d007      	beq.n	8001b0e <HAL_GPIO_Init+0x1f6>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a45      	ldr	r2, [pc, #276]	; (8001c18 <HAL_GPIO_Init+0x300>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d101      	bne.n	8001b0a <HAL_GPIO_Init+0x1f2>
 8001b06:	2304      	movs	r3, #4
 8001b08:	e008      	b.n	8001b1c <HAL_GPIO_Init+0x204>
 8001b0a:	2307      	movs	r3, #7
 8001b0c:	e006      	b.n	8001b1c <HAL_GPIO_Init+0x204>
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e004      	b.n	8001b1c <HAL_GPIO_Init+0x204>
 8001b12:	2302      	movs	r3, #2
 8001b14:	e002      	b.n	8001b1c <HAL_GPIO_Init+0x204>
 8001b16:	2301      	movs	r3, #1
 8001b18:	e000      	b.n	8001b1c <HAL_GPIO_Init+0x204>
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	69fa      	ldr	r2, [r7, #28]
 8001b1e:	f002 0203 	and.w	r2, r2, #3
 8001b22:	0092      	lsls	r2, r2, #2
 8001b24:	4093      	lsls	r3, r2
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b2c:	4935      	ldr	r1, [pc, #212]	; (8001c04 <HAL_GPIO_Init+0x2ec>)
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	089b      	lsrs	r3, r3, #2
 8001b32:	3302      	adds	r3, #2
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b3a:	4b38      	ldr	r3, [pc, #224]	; (8001c1c <HAL_GPIO_Init+0x304>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	43db      	mvns	r3, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4013      	ands	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b5e:	4a2f      	ldr	r2, [pc, #188]	; (8001c1c <HAL_GPIO_Init+0x304>)
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b64:	4b2d      	ldr	r3, [pc, #180]	; (8001c1c <HAL_GPIO_Init+0x304>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4013      	ands	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d003      	beq.n	8001b88 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b88:	4a24      	ldr	r2, [pc, #144]	; (8001c1c <HAL_GPIO_Init+0x304>)
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b8e:	4b23      	ldr	r3, [pc, #140]	; (8001c1c <HAL_GPIO_Init+0x304>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	43db      	mvns	r3, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bb2:	4a1a      	ldr	r2, [pc, #104]	; (8001c1c <HAL_GPIO_Init+0x304>)
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bb8:	4b18      	ldr	r3, [pc, #96]	; (8001c1c <HAL_GPIO_Init+0x304>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bdc:	4a0f      	ldr	r2, [pc, #60]	; (8001c1c <HAL_GPIO_Init+0x304>)
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	3301      	adds	r3, #1
 8001be6:	61fb      	str	r3, [r7, #28]
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	2b0f      	cmp	r3, #15
 8001bec:	f67f aea2 	bls.w	8001934 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bf0:	bf00      	nop
 8001bf2:	bf00      	nop
 8001bf4:	3724      	adds	r7, #36	; 0x24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	40023800 	.word	0x40023800
 8001c04:	40013800 	.word	0x40013800
 8001c08:	40020000 	.word	0x40020000
 8001c0c:	40020400 	.word	0x40020400
 8001c10:	40020800 	.word	0x40020800
 8001c14:	40020c00 	.word	0x40020c00
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40013c00 	.word	0x40013c00

08001c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	807b      	strh	r3, [r7, #2]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c30:	787b      	ldrb	r3, [r7, #1]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c36:	887a      	ldrh	r2, [r7, #2]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c3c:	e003      	b.n	8001c46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c3e:	887b      	ldrh	r3, [r7, #2]
 8001c40:	041a      	lsls	r2, r3, #16
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	619a      	str	r2, [r3, #24]
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e264      	b.n	8002130 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d075      	beq.n	8001d5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c72:	4ba3      	ldr	r3, [pc, #652]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 030c 	and.w	r3, r3, #12
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	d00c      	beq.n	8001c98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c7e:	4ba0      	ldr	r3, [pc, #640]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c86:	2b08      	cmp	r3, #8
 8001c88:	d112      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c8a:	4b9d      	ldr	r3, [pc, #628]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c96:	d10b      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c98:	4b99      	ldr	r3, [pc, #612]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d05b      	beq.n	8001d5c <HAL_RCC_OscConfig+0x108>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d157      	bne.n	8001d5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e23f      	b.n	8002130 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb8:	d106      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x74>
 8001cba:	4b91      	ldr	r3, [pc, #580]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a90      	ldr	r2, [pc, #576]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc4:	6013      	str	r3, [r2, #0]
 8001cc6:	e01d      	b.n	8001d04 <HAL_RCC_OscConfig+0xb0>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cd0:	d10c      	bne.n	8001cec <HAL_RCC_OscConfig+0x98>
 8001cd2:	4b8b      	ldr	r3, [pc, #556]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a8a      	ldr	r2, [pc, #552]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001cd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	4b88      	ldr	r3, [pc, #544]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a87      	ldr	r2, [pc, #540]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce8:	6013      	str	r3, [r2, #0]
 8001cea:	e00b      	b.n	8001d04 <HAL_RCC_OscConfig+0xb0>
 8001cec:	4b84      	ldr	r3, [pc, #528]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a83      	ldr	r2, [pc, #524]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cf6:	6013      	str	r3, [r2, #0]
 8001cf8:	4b81      	ldr	r3, [pc, #516]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a80      	ldr	r2, [pc, #512]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001cfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d013      	beq.n	8001d34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0c:	f7ff fc54 	bl	80015b8 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d14:	f7ff fc50 	bl	80015b8 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b64      	cmp	r3, #100	; 0x64
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e204      	b.n	8002130 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d26:	4b76      	ldr	r3, [pc, #472]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0f0      	beq.n	8001d14 <HAL_RCC_OscConfig+0xc0>
 8001d32:	e014      	b.n	8001d5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d34:	f7ff fc40 	bl	80015b8 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d3c:	f7ff fc3c 	bl	80015b8 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b64      	cmp	r3, #100	; 0x64
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e1f0      	b.n	8002130 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d4e:	4b6c      	ldr	r3, [pc, #432]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f0      	bne.n	8001d3c <HAL_RCC_OscConfig+0xe8>
 8001d5a:	e000      	b.n	8001d5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d063      	beq.n	8001e32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d6a:	4b65      	ldr	r3, [pc, #404]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 030c 	and.w	r3, r3, #12
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00b      	beq.n	8001d8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d76:	4b62      	ldr	r3, [pc, #392]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d7e:	2b08      	cmp	r3, #8
 8001d80:	d11c      	bne.n	8001dbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d82:	4b5f      	ldr	r3, [pc, #380]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d116      	bne.n	8001dbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d8e:	4b5c      	ldr	r3, [pc, #368]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d005      	beq.n	8001da6 <HAL_RCC_OscConfig+0x152>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d001      	beq.n	8001da6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e1c4      	b.n	8002130 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da6:	4b56      	ldr	r3, [pc, #344]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	4952      	ldr	r1, [pc, #328]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dba:	e03a      	b.n	8001e32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d020      	beq.n	8001e06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dc4:	4b4f      	ldr	r3, [pc, #316]	; (8001f04 <HAL_RCC_OscConfig+0x2b0>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dca:	f7ff fbf5 	bl	80015b8 <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dd2:	f7ff fbf1 	bl	80015b8 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e1a5      	b.n	8002130 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de4:	4b46      	ldr	r3, [pc, #280]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0f0      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df0:	4b43      	ldr	r3, [pc, #268]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	4940      	ldr	r1, [pc, #256]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	600b      	str	r3, [r1, #0]
 8001e04:	e015      	b.n	8001e32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e06:	4b3f      	ldr	r3, [pc, #252]	; (8001f04 <HAL_RCC_OscConfig+0x2b0>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0c:	f7ff fbd4 	bl	80015b8 <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e14:	f7ff fbd0 	bl	80015b8 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e184      	b.n	8002130 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e26:	4b36      	ldr	r3, [pc, #216]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f0      	bne.n	8001e14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d030      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d016      	beq.n	8001e74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e46:	4b30      	ldr	r3, [pc, #192]	; (8001f08 <HAL_RCC_OscConfig+0x2b4>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e4c:	f7ff fbb4 	bl	80015b8 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e54:	f7ff fbb0 	bl	80015b8 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e164      	b.n	8002130 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e66:	4b26      	ldr	r3, [pc, #152]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d0f0      	beq.n	8001e54 <HAL_RCC_OscConfig+0x200>
 8001e72:	e015      	b.n	8001ea0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e74:	4b24      	ldr	r3, [pc, #144]	; (8001f08 <HAL_RCC_OscConfig+0x2b4>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7a:	f7ff fb9d 	bl	80015b8 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e82:	f7ff fb99 	bl	80015b8 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e14d      	b.n	8002130 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e94:	4b1a      	ldr	r3, [pc, #104]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001e96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1f0      	bne.n	8001e82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 80a0 	beq.w	8001fee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eb2:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10f      	bne.n	8001ede <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60bb      	str	r3, [r7, #8]
 8001ec2:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	4a0e      	ldr	r2, [pc, #56]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ece:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed6:	60bb      	str	r3, [r7, #8]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eda:	2301      	movs	r3, #1
 8001edc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ede:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <HAL_RCC_OscConfig+0x2b8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d121      	bne.n	8001f2e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eea:	4b08      	ldr	r3, [pc, #32]	; (8001f0c <HAL_RCC_OscConfig+0x2b8>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a07      	ldr	r2, [pc, #28]	; (8001f0c <HAL_RCC_OscConfig+0x2b8>)
 8001ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ef6:	f7ff fb5f 	bl	80015b8 <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001efc:	e011      	b.n	8001f22 <HAL_RCC_OscConfig+0x2ce>
 8001efe:	bf00      	nop
 8001f00:	40023800 	.word	0x40023800
 8001f04:	42470000 	.word	0x42470000
 8001f08:	42470e80 	.word	0x42470e80
 8001f0c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f10:	f7ff fb52 	bl	80015b8 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e106      	b.n	8002130 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f22:	4b85      	ldr	r3, [pc, #532]	; (8002138 <HAL_RCC_OscConfig+0x4e4>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d106      	bne.n	8001f44 <HAL_RCC_OscConfig+0x2f0>
 8001f36:	4b81      	ldr	r3, [pc, #516]	; (800213c <HAL_RCC_OscConfig+0x4e8>)
 8001f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3a:	4a80      	ldr	r2, [pc, #512]	; (800213c <HAL_RCC_OscConfig+0x4e8>)
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	6713      	str	r3, [r2, #112]	; 0x70
 8001f42:	e01c      	b.n	8001f7e <HAL_RCC_OscConfig+0x32a>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	2b05      	cmp	r3, #5
 8001f4a:	d10c      	bne.n	8001f66 <HAL_RCC_OscConfig+0x312>
 8001f4c:	4b7b      	ldr	r3, [pc, #492]	; (800213c <HAL_RCC_OscConfig+0x4e8>)
 8001f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f50:	4a7a      	ldr	r2, [pc, #488]	; (800213c <HAL_RCC_OscConfig+0x4e8>)
 8001f52:	f043 0304 	orr.w	r3, r3, #4
 8001f56:	6713      	str	r3, [r2, #112]	; 0x70
 8001f58:	4b78      	ldr	r3, [pc, #480]	; (800213c <HAL_RCC_OscConfig+0x4e8>)
 8001f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f5c:	4a77      	ldr	r2, [pc, #476]	; (800213c <HAL_RCC_OscConfig+0x4e8>)
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	6713      	str	r3, [r2, #112]	; 0x70
 8001f64:	e00b      	b.n	8001f7e <HAL_RCC_OscConfig+0x32a>
 8001f66:	4b75      	ldr	r3, [pc, #468]	; (800213c <HAL_RCC_OscConfig+0x4e8>)
 8001f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6a:	4a74      	ldr	r2, [pc, #464]	; (800213c <HAL_RCC_OscConfig+0x4e8>)
 8001f6c:	f023 0301 	bic.w	r3, r3, #1
 8001f70:	6713      	str	r3, [r2, #112]	; 0x70
 8001f72:	4b72      	ldr	r3, [pc, #456]	; (800213c <HAL_RCC_OscConfig+0x4e8>)
 8001f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f76:	4a71      	ldr	r2, [pc, #452]	; (800213c <HAL_RCC_OscConfig+0x4e8>)
 8001f78:	f023 0304 	bic.w	r3, r3, #4
 8001f7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d015      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f86:	f7ff fb17 	bl	80015b8 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f8c:	e00a      	b.n	8001fa4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f8e:	f7ff fb13 	bl	80015b8 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e0c5      	b.n	8002130 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa4:	4b65      	ldr	r3, [pc, #404]	; (800213c <HAL_RCC_OscConfig+0x4e8>)
 8001fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d0ee      	beq.n	8001f8e <HAL_RCC_OscConfig+0x33a>
 8001fb0:	e014      	b.n	8001fdc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb2:	f7ff fb01 	bl	80015b8 <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb8:	e00a      	b.n	8001fd0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fba:	f7ff fafd 	bl	80015b8 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e0af      	b.n	8002130 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd0:	4b5a      	ldr	r3, [pc, #360]	; (800213c <HAL_RCC_OscConfig+0x4e8>)
 8001fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1ee      	bne.n	8001fba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fdc:	7dfb      	ldrb	r3, [r7, #23]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d105      	bne.n	8001fee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fe2:	4b56      	ldr	r3, [pc, #344]	; (800213c <HAL_RCC_OscConfig+0x4e8>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	4a55      	ldr	r2, [pc, #340]	; (800213c <HAL_RCC_OscConfig+0x4e8>)
 8001fe8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f000 809b 	beq.w	800212e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ff8:	4b50      	ldr	r3, [pc, #320]	; (800213c <HAL_RCC_OscConfig+0x4e8>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f003 030c 	and.w	r3, r3, #12
 8002000:	2b08      	cmp	r3, #8
 8002002:	d05c      	beq.n	80020be <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	2b02      	cmp	r3, #2
 800200a:	d141      	bne.n	8002090 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800200c:	4b4c      	ldr	r3, [pc, #304]	; (8002140 <HAL_RCC_OscConfig+0x4ec>)
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002012:	f7ff fad1 	bl	80015b8 <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800201a:	f7ff facd 	bl	80015b8 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e081      	b.n	8002130 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800202c:	4b43      	ldr	r3, [pc, #268]	; (800213c <HAL_RCC_OscConfig+0x4e8>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1f0      	bne.n	800201a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	69da      	ldr	r2, [r3, #28]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	431a      	orrs	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002046:	019b      	lsls	r3, r3, #6
 8002048:	431a      	orrs	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204e:	085b      	lsrs	r3, r3, #1
 8002050:	3b01      	subs	r3, #1
 8002052:	041b      	lsls	r3, r3, #16
 8002054:	431a      	orrs	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205a:	061b      	lsls	r3, r3, #24
 800205c:	4937      	ldr	r1, [pc, #220]	; (800213c <HAL_RCC_OscConfig+0x4e8>)
 800205e:	4313      	orrs	r3, r2
 8002060:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002062:	4b37      	ldr	r3, [pc, #220]	; (8002140 <HAL_RCC_OscConfig+0x4ec>)
 8002064:	2201      	movs	r2, #1
 8002066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002068:	f7ff faa6 	bl	80015b8 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002070:	f7ff faa2 	bl	80015b8 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e056      	b.n	8002130 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002082:	4b2e      	ldr	r3, [pc, #184]	; (800213c <HAL_RCC_OscConfig+0x4e8>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d0f0      	beq.n	8002070 <HAL_RCC_OscConfig+0x41c>
 800208e:	e04e      	b.n	800212e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002090:	4b2b      	ldr	r3, [pc, #172]	; (8002140 <HAL_RCC_OscConfig+0x4ec>)
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002096:	f7ff fa8f 	bl	80015b8 <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800209c:	e008      	b.n	80020b0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800209e:	f7ff fa8b 	bl	80015b8 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e03f      	b.n	8002130 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b0:	4b22      	ldr	r3, [pc, #136]	; (800213c <HAL_RCC_OscConfig+0x4e8>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1f0      	bne.n	800209e <HAL_RCC_OscConfig+0x44a>
 80020bc:	e037      	b.n	800212e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d101      	bne.n	80020ca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e032      	b.n	8002130 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020ca:	4b1c      	ldr	r3, [pc, #112]	; (800213c <HAL_RCC_OscConfig+0x4e8>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d028      	beq.n	800212a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d121      	bne.n	800212a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d11a      	bne.n	800212a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020fa:	4013      	ands	r3, r2
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002100:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002102:	4293      	cmp	r3, r2
 8002104:	d111      	bne.n	800212a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002110:	085b      	lsrs	r3, r3, #1
 8002112:	3b01      	subs	r3, #1
 8002114:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002116:	429a      	cmp	r2, r3
 8002118:	d107      	bne.n	800212a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002124:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002126:	429a      	cmp	r2, r3
 8002128:	d001      	beq.n	800212e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e000      	b.n	8002130 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40007000 	.word	0x40007000
 800213c:	40023800 	.word	0x40023800
 8002140:	42470060 	.word	0x42470060

08002144 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e0cc      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002158:	4b68      	ldr	r3, [pc, #416]	; (80022fc <HAL_RCC_ClockConfig+0x1b8>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	d90c      	bls.n	8002180 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002166:	4b65      	ldr	r3, [pc, #404]	; (80022fc <HAL_RCC_ClockConfig+0x1b8>)
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800216e:	4b63      	ldr	r3, [pc, #396]	; (80022fc <HAL_RCC_ClockConfig+0x1b8>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	429a      	cmp	r2, r3
 800217a:	d001      	beq.n	8002180 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e0b8      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d020      	beq.n	80021ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	2b00      	cmp	r3, #0
 8002196:	d005      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002198:	4b59      	ldr	r3, [pc, #356]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	4a58      	ldr	r2, [pc, #352]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 800219e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0308 	and.w	r3, r3, #8
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d005      	beq.n	80021bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021b0:	4b53      	ldr	r3, [pc, #332]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	4a52      	ldr	r2, [pc, #328]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80021b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021bc:	4b50      	ldr	r3, [pc, #320]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	494d      	ldr	r1, [pc, #308]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d044      	beq.n	8002264 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d107      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e2:	4b47      	ldr	r3, [pc, #284]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d119      	bne.n	8002222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e07f      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d003      	beq.n	8002202 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021fe:	2b03      	cmp	r3, #3
 8002200:	d107      	bne.n	8002212 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002202:	4b3f      	ldr	r3, [pc, #252]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d109      	bne.n	8002222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e06f      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002212:	4b3b      	ldr	r3, [pc, #236]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e067      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002222:	4b37      	ldr	r3, [pc, #220]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f023 0203 	bic.w	r2, r3, #3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	4934      	ldr	r1, [pc, #208]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 8002230:	4313      	orrs	r3, r2
 8002232:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002234:	f7ff f9c0 	bl	80015b8 <HAL_GetTick>
 8002238:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223a:	e00a      	b.n	8002252 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800223c:	f7ff f9bc 	bl	80015b8 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	f241 3288 	movw	r2, #5000	; 0x1388
 800224a:	4293      	cmp	r3, r2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e04f      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002252:	4b2b      	ldr	r3, [pc, #172]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 020c 	and.w	r2, r3, #12
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	429a      	cmp	r2, r3
 8002262:	d1eb      	bne.n	800223c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002264:	4b25      	ldr	r3, [pc, #148]	; (80022fc <HAL_RCC_ClockConfig+0x1b8>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	429a      	cmp	r2, r3
 8002270:	d20c      	bcs.n	800228c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002272:	4b22      	ldr	r3, [pc, #136]	; (80022fc <HAL_RCC_ClockConfig+0x1b8>)
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	b2d2      	uxtb	r2, r2
 8002278:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800227a:	4b20      	ldr	r3, [pc, #128]	; (80022fc <HAL_RCC_ClockConfig+0x1b8>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	429a      	cmp	r2, r3
 8002286:	d001      	beq.n	800228c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e032      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b00      	cmp	r3, #0
 8002296:	d008      	beq.n	80022aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002298:	4b19      	ldr	r3, [pc, #100]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	4916      	ldr	r1, [pc, #88]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d009      	beq.n	80022ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022b6:	4b12      	ldr	r3, [pc, #72]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	490e      	ldr	r1, [pc, #56]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022ca:	f000 f821 	bl	8002310 <HAL_RCC_GetSysClockFreq>
 80022ce:	4602      	mov	r2, r0
 80022d0:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	091b      	lsrs	r3, r3, #4
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	490a      	ldr	r1, [pc, #40]	; (8002304 <HAL_RCC_ClockConfig+0x1c0>)
 80022dc:	5ccb      	ldrb	r3, [r1, r3]
 80022de:	fa22 f303 	lsr.w	r3, r2, r3
 80022e2:	4a09      	ldr	r2, [pc, #36]	; (8002308 <HAL_RCC_ClockConfig+0x1c4>)
 80022e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022e6:	4b09      	ldr	r3, [pc, #36]	; (800230c <HAL_RCC_ClockConfig+0x1c8>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff f920 	bl	8001530 <HAL_InitTick>

  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40023c00 	.word	0x40023c00
 8002300:	40023800 	.word	0x40023800
 8002304:	080056d0 	.word	0x080056d0
 8002308:	20000000 	.word	0x20000000
 800230c:	20000004 	.word	0x20000004

08002310 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002310:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002314:	b084      	sub	sp, #16
 8002316:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002318:	2300      	movs	r3, #0
 800231a:	607b      	str	r3, [r7, #4]
 800231c:	2300      	movs	r3, #0
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	2300      	movs	r3, #0
 8002322:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002324:	2300      	movs	r3, #0
 8002326:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002328:	4b67      	ldr	r3, [pc, #412]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 030c 	and.w	r3, r3, #12
 8002330:	2b08      	cmp	r3, #8
 8002332:	d00d      	beq.n	8002350 <HAL_RCC_GetSysClockFreq+0x40>
 8002334:	2b08      	cmp	r3, #8
 8002336:	f200 80bd 	bhi.w	80024b4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800233a:	2b00      	cmp	r3, #0
 800233c:	d002      	beq.n	8002344 <HAL_RCC_GetSysClockFreq+0x34>
 800233e:	2b04      	cmp	r3, #4
 8002340:	d003      	beq.n	800234a <HAL_RCC_GetSysClockFreq+0x3a>
 8002342:	e0b7      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002344:	4b61      	ldr	r3, [pc, #388]	; (80024cc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002346:	60bb      	str	r3, [r7, #8]
       break;
 8002348:	e0b7      	b.n	80024ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800234a:	4b61      	ldr	r3, [pc, #388]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800234c:	60bb      	str	r3, [r7, #8]
      break;
 800234e:	e0b4      	b.n	80024ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002350:	4b5d      	ldr	r3, [pc, #372]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002358:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800235a:	4b5b      	ldr	r3, [pc, #364]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d04d      	beq.n	8002402 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002366:	4b58      	ldr	r3, [pc, #352]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	099b      	lsrs	r3, r3, #6
 800236c:	461a      	mov	r2, r3
 800236e:	f04f 0300 	mov.w	r3, #0
 8002372:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002376:	f04f 0100 	mov.w	r1, #0
 800237a:	ea02 0800 	and.w	r8, r2, r0
 800237e:	ea03 0901 	and.w	r9, r3, r1
 8002382:	4640      	mov	r0, r8
 8002384:	4649      	mov	r1, r9
 8002386:	f04f 0200 	mov.w	r2, #0
 800238a:	f04f 0300 	mov.w	r3, #0
 800238e:	014b      	lsls	r3, r1, #5
 8002390:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002394:	0142      	lsls	r2, r0, #5
 8002396:	4610      	mov	r0, r2
 8002398:	4619      	mov	r1, r3
 800239a:	ebb0 0008 	subs.w	r0, r0, r8
 800239e:	eb61 0109 	sbc.w	r1, r1, r9
 80023a2:	f04f 0200 	mov.w	r2, #0
 80023a6:	f04f 0300 	mov.w	r3, #0
 80023aa:	018b      	lsls	r3, r1, #6
 80023ac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80023b0:	0182      	lsls	r2, r0, #6
 80023b2:	1a12      	subs	r2, r2, r0
 80023b4:	eb63 0301 	sbc.w	r3, r3, r1
 80023b8:	f04f 0000 	mov.w	r0, #0
 80023bc:	f04f 0100 	mov.w	r1, #0
 80023c0:	00d9      	lsls	r1, r3, #3
 80023c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80023c6:	00d0      	lsls	r0, r2, #3
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	eb12 0208 	adds.w	r2, r2, r8
 80023d0:	eb43 0309 	adc.w	r3, r3, r9
 80023d4:	f04f 0000 	mov.w	r0, #0
 80023d8:	f04f 0100 	mov.w	r1, #0
 80023dc:	0259      	lsls	r1, r3, #9
 80023de:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80023e2:	0250      	lsls	r0, r2, #9
 80023e4:	4602      	mov	r2, r0
 80023e6:	460b      	mov	r3, r1
 80023e8:	4610      	mov	r0, r2
 80023ea:	4619      	mov	r1, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	461a      	mov	r2, r3
 80023f0:	f04f 0300 	mov.w	r3, #0
 80023f4:	f7fd ff44 	bl	8000280 <__aeabi_uldivmod>
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	4613      	mov	r3, r2
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	e04a      	b.n	8002498 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002402:	4b31      	ldr	r3, [pc, #196]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	099b      	lsrs	r3, r3, #6
 8002408:	461a      	mov	r2, r3
 800240a:	f04f 0300 	mov.w	r3, #0
 800240e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002412:	f04f 0100 	mov.w	r1, #0
 8002416:	ea02 0400 	and.w	r4, r2, r0
 800241a:	ea03 0501 	and.w	r5, r3, r1
 800241e:	4620      	mov	r0, r4
 8002420:	4629      	mov	r1, r5
 8002422:	f04f 0200 	mov.w	r2, #0
 8002426:	f04f 0300 	mov.w	r3, #0
 800242a:	014b      	lsls	r3, r1, #5
 800242c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002430:	0142      	lsls	r2, r0, #5
 8002432:	4610      	mov	r0, r2
 8002434:	4619      	mov	r1, r3
 8002436:	1b00      	subs	r0, r0, r4
 8002438:	eb61 0105 	sbc.w	r1, r1, r5
 800243c:	f04f 0200 	mov.w	r2, #0
 8002440:	f04f 0300 	mov.w	r3, #0
 8002444:	018b      	lsls	r3, r1, #6
 8002446:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800244a:	0182      	lsls	r2, r0, #6
 800244c:	1a12      	subs	r2, r2, r0
 800244e:	eb63 0301 	sbc.w	r3, r3, r1
 8002452:	f04f 0000 	mov.w	r0, #0
 8002456:	f04f 0100 	mov.w	r1, #0
 800245a:	00d9      	lsls	r1, r3, #3
 800245c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002460:	00d0      	lsls	r0, r2, #3
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	1912      	adds	r2, r2, r4
 8002468:	eb45 0303 	adc.w	r3, r5, r3
 800246c:	f04f 0000 	mov.w	r0, #0
 8002470:	f04f 0100 	mov.w	r1, #0
 8002474:	0299      	lsls	r1, r3, #10
 8002476:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800247a:	0290      	lsls	r0, r2, #10
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4610      	mov	r0, r2
 8002482:	4619      	mov	r1, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	461a      	mov	r2, r3
 8002488:	f04f 0300 	mov.w	r3, #0
 800248c:	f7fd fef8 	bl	8000280 <__aeabi_uldivmod>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4613      	mov	r3, r2
 8002496:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002498:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	0c1b      	lsrs	r3, r3, #16
 800249e:	f003 0303 	and.w	r3, r3, #3
 80024a2:	3301      	adds	r3, #1
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b0:	60bb      	str	r3, [r7, #8]
      break;
 80024b2:	e002      	b.n	80024ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024b4:	4b05      	ldr	r3, [pc, #20]	; (80024cc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80024b6:	60bb      	str	r3, [r7, #8]
      break;
 80024b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024ba:	68bb      	ldr	r3, [r7, #8]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80024c6:	bf00      	nop
 80024c8:	40023800 	.word	0x40023800
 80024cc:	00f42400 	.word	0x00f42400
 80024d0:	007a1200 	.word	0x007a1200

080024d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024d8:	4b03      	ldr	r3, [pc, #12]	; (80024e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80024da:	681b      	ldr	r3, [r3, #0]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	20000000 	.word	0x20000000

080024ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024f0:	f7ff fff0 	bl	80024d4 <HAL_RCC_GetHCLKFreq>
 80024f4:	4602      	mov	r2, r0
 80024f6:	4b05      	ldr	r3, [pc, #20]	; (800250c <HAL_RCC_GetPCLK1Freq+0x20>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	0a9b      	lsrs	r3, r3, #10
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	4903      	ldr	r1, [pc, #12]	; (8002510 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002502:	5ccb      	ldrb	r3, [r1, r3]
 8002504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002508:	4618      	mov	r0, r3
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40023800 	.word	0x40023800
 8002510:	080056e0 	.word	0x080056e0

08002514 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002518:	f7ff ffdc 	bl	80024d4 <HAL_RCC_GetHCLKFreq>
 800251c:	4602      	mov	r2, r0
 800251e:	4b05      	ldr	r3, [pc, #20]	; (8002534 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	0b5b      	lsrs	r3, r3, #13
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	4903      	ldr	r1, [pc, #12]	; (8002538 <HAL_RCC_GetPCLK2Freq+0x24>)
 800252a:	5ccb      	ldrb	r3, [r1, r3]
 800252c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002530:	4618      	mov	r0, r3
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40023800 	.word	0x40023800
 8002538:	080056e0 	.word	0x080056e0

0800253c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e041      	b.n	80025d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d106      	bne.n	8002568 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7fe fdae 	bl	80010c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2202      	movs	r2, #2
 800256c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3304      	adds	r3, #4
 8002578:	4619      	mov	r1, r3
 800257a:	4610      	mov	r0, r2
 800257c:	f000 fab6 	bl	8002aec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
	...

080025dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d001      	beq.n	80025f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e044      	b.n	800267e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2202      	movs	r2, #2
 80025f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68da      	ldr	r2, [r3, #12]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f042 0201 	orr.w	r2, r2, #1
 800260a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a1e      	ldr	r2, [pc, #120]	; (800268c <HAL_TIM_Base_Start_IT+0xb0>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d018      	beq.n	8002648 <HAL_TIM_Base_Start_IT+0x6c>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800261e:	d013      	beq.n	8002648 <HAL_TIM_Base_Start_IT+0x6c>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a1a      	ldr	r2, [pc, #104]	; (8002690 <HAL_TIM_Base_Start_IT+0xb4>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d00e      	beq.n	8002648 <HAL_TIM_Base_Start_IT+0x6c>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a19      	ldr	r2, [pc, #100]	; (8002694 <HAL_TIM_Base_Start_IT+0xb8>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d009      	beq.n	8002648 <HAL_TIM_Base_Start_IT+0x6c>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a17      	ldr	r2, [pc, #92]	; (8002698 <HAL_TIM_Base_Start_IT+0xbc>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d004      	beq.n	8002648 <HAL_TIM_Base_Start_IT+0x6c>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a16      	ldr	r2, [pc, #88]	; (800269c <HAL_TIM_Base_Start_IT+0xc0>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d111      	bne.n	800266c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2b06      	cmp	r3, #6
 8002658:	d010      	beq.n	800267c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f042 0201 	orr.w	r2, r2, #1
 8002668:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800266a:	e007      	b.n	800267c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0201 	orr.w	r2, r2, #1
 800267a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	40010000 	.word	0x40010000
 8002690:	40000400 	.word	0x40000400
 8002694:	40000800 	.word	0x40000800
 8002698:	40000c00 	.word	0x40000c00
 800269c:	40014000 	.word	0x40014000

080026a0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68da      	ldr	r2, [r3, #12]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 0201 	bic.w	r2, r2, #1
 80026b6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6a1a      	ldr	r2, [r3, #32]
 80026be:	f241 1311 	movw	r3, #4369	; 0x1111
 80026c2:	4013      	ands	r3, r2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10f      	bne.n	80026e8 <HAL_TIM_Base_Stop_IT+0x48>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6a1a      	ldr	r2, [r3, #32]
 80026ce:	f240 4344 	movw	r3, #1092	; 0x444
 80026d2:	4013      	ands	r3, r2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d107      	bne.n	80026e8 <HAL_TIM_Base_Stop_IT+0x48>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 0201 	bic.w	r2, r2, #1
 80026e6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr

080026fe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b082      	sub	sp, #8
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b02      	cmp	r3, #2
 8002712:	d122      	bne.n	800275a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b02      	cmp	r3, #2
 8002720:	d11b      	bne.n	800275a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f06f 0202 	mvn.w	r2, #2
 800272a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	f003 0303 	and.w	r3, r3, #3
 800273c:	2b00      	cmp	r3, #0
 800273e:	d003      	beq.n	8002748 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 f9b5 	bl	8002ab0 <HAL_TIM_IC_CaptureCallback>
 8002746:	e005      	b.n	8002754 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f000 f9a7 	bl	8002a9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 f9b8 	bl	8002ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b04      	cmp	r3, #4
 8002766:	d122      	bne.n	80027ae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	f003 0304 	and.w	r3, r3, #4
 8002772:	2b04      	cmp	r3, #4
 8002774:	d11b      	bne.n	80027ae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f06f 0204 	mvn.w	r2, #4
 800277e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2202      	movs	r2, #2
 8002784:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002790:	2b00      	cmp	r3, #0
 8002792:	d003      	beq.n	800279c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 f98b 	bl	8002ab0 <HAL_TIM_IC_CaptureCallback>
 800279a:	e005      	b.n	80027a8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 f97d 	bl	8002a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 f98e 	bl	8002ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	f003 0308 	and.w	r3, r3, #8
 80027b8:	2b08      	cmp	r3, #8
 80027ba:	d122      	bne.n	8002802 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	f003 0308 	and.w	r3, r3, #8
 80027c6:	2b08      	cmp	r3, #8
 80027c8:	d11b      	bne.n	8002802 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f06f 0208 	mvn.w	r2, #8
 80027d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2204      	movs	r2, #4
 80027d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	69db      	ldr	r3, [r3, #28]
 80027e0:	f003 0303 	and.w	r3, r3, #3
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d003      	beq.n	80027f0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 f961 	bl	8002ab0 <HAL_TIM_IC_CaptureCallback>
 80027ee:	e005      	b.n	80027fc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 f953 	bl	8002a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f964 	bl	8002ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	f003 0310 	and.w	r3, r3, #16
 800280c:	2b10      	cmp	r3, #16
 800280e:	d122      	bne.n	8002856 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	f003 0310 	and.w	r3, r3, #16
 800281a:	2b10      	cmp	r3, #16
 800281c:	d11b      	bne.n	8002856 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f06f 0210 	mvn.w	r2, #16
 8002826:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2208      	movs	r2, #8
 800282c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	69db      	ldr	r3, [r3, #28]
 8002834:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002838:	2b00      	cmp	r3, #0
 800283a:	d003      	beq.n	8002844 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 f937 	bl	8002ab0 <HAL_TIM_IC_CaptureCallback>
 8002842:	e005      	b.n	8002850 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 f929 	bl	8002a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f93a 	bl	8002ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	2b01      	cmp	r3, #1
 8002862:	d10e      	bne.n	8002882 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b01      	cmp	r3, #1
 8002870:	d107      	bne.n	8002882 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f06f 0201 	mvn.w	r2, #1
 800287a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f7fe f9eb 	bl	8000c58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800288c:	2b80      	cmp	r3, #128	; 0x80
 800288e:	d10e      	bne.n	80028ae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800289a:	2b80      	cmp	r3, #128	; 0x80
 800289c:	d107      	bne.n	80028ae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 fab1 	bl	8002e10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b8:	2b40      	cmp	r3, #64	; 0x40
 80028ba:	d10e      	bne.n	80028da <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c6:	2b40      	cmp	r3, #64	; 0x40
 80028c8:	d107      	bne.n	80028da <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 f8ff 	bl	8002ad8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	f003 0320 	and.w	r3, r3, #32
 80028e4:	2b20      	cmp	r3, #32
 80028e6:	d10e      	bne.n	8002906 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	f003 0320 	and.w	r3, r3, #32
 80028f2:	2b20      	cmp	r3, #32
 80028f4:	d107      	bne.n	8002906 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f06f 0220 	mvn.w	r2, #32
 80028fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 fa7b 	bl	8002dfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b084      	sub	sp, #16
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
 8002916:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002918:	2300      	movs	r3, #0
 800291a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002922:	2b01      	cmp	r3, #1
 8002924:	d101      	bne.n	800292a <HAL_TIM_ConfigClockSource+0x1c>
 8002926:	2302      	movs	r3, #2
 8002928:	e0b4      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x186>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2202      	movs	r2, #2
 8002936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002948:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002950:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002962:	d03e      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0xd4>
 8002964:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002968:	f200 8087 	bhi.w	8002a7a <HAL_TIM_ConfigClockSource+0x16c>
 800296c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002970:	f000 8086 	beq.w	8002a80 <HAL_TIM_ConfigClockSource+0x172>
 8002974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002978:	d87f      	bhi.n	8002a7a <HAL_TIM_ConfigClockSource+0x16c>
 800297a:	2b70      	cmp	r3, #112	; 0x70
 800297c:	d01a      	beq.n	80029b4 <HAL_TIM_ConfigClockSource+0xa6>
 800297e:	2b70      	cmp	r3, #112	; 0x70
 8002980:	d87b      	bhi.n	8002a7a <HAL_TIM_ConfigClockSource+0x16c>
 8002982:	2b60      	cmp	r3, #96	; 0x60
 8002984:	d050      	beq.n	8002a28 <HAL_TIM_ConfigClockSource+0x11a>
 8002986:	2b60      	cmp	r3, #96	; 0x60
 8002988:	d877      	bhi.n	8002a7a <HAL_TIM_ConfigClockSource+0x16c>
 800298a:	2b50      	cmp	r3, #80	; 0x50
 800298c:	d03c      	beq.n	8002a08 <HAL_TIM_ConfigClockSource+0xfa>
 800298e:	2b50      	cmp	r3, #80	; 0x50
 8002990:	d873      	bhi.n	8002a7a <HAL_TIM_ConfigClockSource+0x16c>
 8002992:	2b40      	cmp	r3, #64	; 0x40
 8002994:	d058      	beq.n	8002a48 <HAL_TIM_ConfigClockSource+0x13a>
 8002996:	2b40      	cmp	r3, #64	; 0x40
 8002998:	d86f      	bhi.n	8002a7a <HAL_TIM_ConfigClockSource+0x16c>
 800299a:	2b30      	cmp	r3, #48	; 0x30
 800299c:	d064      	beq.n	8002a68 <HAL_TIM_ConfigClockSource+0x15a>
 800299e:	2b30      	cmp	r3, #48	; 0x30
 80029a0:	d86b      	bhi.n	8002a7a <HAL_TIM_ConfigClockSource+0x16c>
 80029a2:	2b20      	cmp	r3, #32
 80029a4:	d060      	beq.n	8002a68 <HAL_TIM_ConfigClockSource+0x15a>
 80029a6:	2b20      	cmp	r3, #32
 80029a8:	d867      	bhi.n	8002a7a <HAL_TIM_ConfigClockSource+0x16c>
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d05c      	beq.n	8002a68 <HAL_TIM_ConfigClockSource+0x15a>
 80029ae:	2b10      	cmp	r3, #16
 80029b0:	d05a      	beq.n	8002a68 <HAL_TIM_ConfigClockSource+0x15a>
 80029b2:	e062      	b.n	8002a7a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6818      	ldr	r0, [r3, #0]
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	6899      	ldr	r1, [r3, #8]
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f000 f98c 	bl	8002ce0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80029d6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68ba      	ldr	r2, [r7, #8]
 80029de:	609a      	str	r2, [r3, #8]
      break;
 80029e0:	e04f      	b.n	8002a82 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6818      	ldr	r0, [r3, #0]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	6899      	ldr	r1, [r3, #8]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	f000 f975 	bl	8002ce0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a04:	609a      	str	r2, [r3, #8]
      break;
 8002a06:	e03c      	b.n	8002a82 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6818      	ldr	r0, [r3, #0]
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	6859      	ldr	r1, [r3, #4]
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	461a      	mov	r2, r3
 8002a16:	f000 f8e9 	bl	8002bec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2150      	movs	r1, #80	; 0x50
 8002a20:	4618      	mov	r0, r3
 8002a22:	f000 f942 	bl	8002caa <TIM_ITRx_SetConfig>
      break;
 8002a26:	e02c      	b.n	8002a82 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6818      	ldr	r0, [r3, #0]
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	6859      	ldr	r1, [r3, #4]
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	461a      	mov	r2, r3
 8002a36:	f000 f908 	bl	8002c4a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2160      	movs	r1, #96	; 0x60
 8002a40:	4618      	mov	r0, r3
 8002a42:	f000 f932 	bl	8002caa <TIM_ITRx_SetConfig>
      break;
 8002a46:	e01c      	b.n	8002a82 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6818      	ldr	r0, [r3, #0]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	6859      	ldr	r1, [r3, #4]
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	461a      	mov	r2, r3
 8002a56:	f000 f8c9 	bl	8002bec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2140      	movs	r1, #64	; 0x40
 8002a60:	4618      	mov	r0, r3
 8002a62:	f000 f922 	bl	8002caa <TIM_ITRx_SetConfig>
      break;
 8002a66:	e00c      	b.n	8002a82 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4619      	mov	r1, r3
 8002a72:	4610      	mov	r0, r2
 8002a74:	f000 f919 	bl	8002caa <TIM_ITRx_SetConfig>
      break;
 8002a78:	e003      	b.n	8002a82 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	73fb      	strb	r3, [r7, #15]
      break;
 8002a7e:	e000      	b.n	8002a82 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a80:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a34      	ldr	r2, [pc, #208]	; (8002bd0 <TIM_Base_SetConfig+0xe4>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d00f      	beq.n	8002b24 <TIM_Base_SetConfig+0x38>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b0a:	d00b      	beq.n	8002b24 <TIM_Base_SetConfig+0x38>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a31      	ldr	r2, [pc, #196]	; (8002bd4 <TIM_Base_SetConfig+0xe8>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d007      	beq.n	8002b24 <TIM_Base_SetConfig+0x38>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a30      	ldr	r2, [pc, #192]	; (8002bd8 <TIM_Base_SetConfig+0xec>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d003      	beq.n	8002b24 <TIM_Base_SetConfig+0x38>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a2f      	ldr	r2, [pc, #188]	; (8002bdc <TIM_Base_SetConfig+0xf0>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d108      	bne.n	8002b36 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a25      	ldr	r2, [pc, #148]	; (8002bd0 <TIM_Base_SetConfig+0xe4>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d01b      	beq.n	8002b76 <TIM_Base_SetConfig+0x8a>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b44:	d017      	beq.n	8002b76 <TIM_Base_SetConfig+0x8a>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a22      	ldr	r2, [pc, #136]	; (8002bd4 <TIM_Base_SetConfig+0xe8>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d013      	beq.n	8002b76 <TIM_Base_SetConfig+0x8a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a21      	ldr	r2, [pc, #132]	; (8002bd8 <TIM_Base_SetConfig+0xec>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d00f      	beq.n	8002b76 <TIM_Base_SetConfig+0x8a>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a20      	ldr	r2, [pc, #128]	; (8002bdc <TIM_Base_SetConfig+0xf0>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d00b      	beq.n	8002b76 <TIM_Base_SetConfig+0x8a>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a1f      	ldr	r2, [pc, #124]	; (8002be0 <TIM_Base_SetConfig+0xf4>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d007      	beq.n	8002b76 <TIM_Base_SetConfig+0x8a>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a1e      	ldr	r2, [pc, #120]	; (8002be4 <TIM_Base_SetConfig+0xf8>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d003      	beq.n	8002b76 <TIM_Base_SetConfig+0x8a>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a1d      	ldr	r2, [pc, #116]	; (8002be8 <TIM_Base_SetConfig+0xfc>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d108      	bne.n	8002b88 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a08      	ldr	r2, [pc, #32]	; (8002bd0 <TIM_Base_SetConfig+0xe4>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d103      	bne.n	8002bbc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	691a      	ldr	r2, [r3, #16]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	615a      	str	r2, [r3, #20]
}
 8002bc2:	bf00      	nop
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	40010000 	.word	0x40010000
 8002bd4:	40000400 	.word	0x40000400
 8002bd8:	40000800 	.word	0x40000800
 8002bdc:	40000c00 	.word	0x40000c00
 8002be0:	40014000 	.word	0x40014000
 8002be4:	40014400 	.word	0x40014400
 8002be8:	40014800 	.word	0x40014800

08002bec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b087      	sub	sp, #28
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	f023 0201 	bic.w	r2, r3, #1
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	011b      	lsls	r3, r3, #4
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	f023 030a 	bic.w	r3, r3, #10
 8002c28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	621a      	str	r2, [r3, #32]
}
 8002c3e:	bf00      	nop
 8002c40:	371c      	adds	r7, #28
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b087      	sub	sp, #28
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	60f8      	str	r0, [r7, #12]
 8002c52:	60b9      	str	r1, [r7, #8]
 8002c54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	f023 0210 	bic.w	r2, r3, #16
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	031b      	lsls	r3, r3, #12
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	011b      	lsls	r3, r3, #4
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	621a      	str	r2, [r3, #32]
}
 8002c9e:	bf00      	nop
 8002ca0:	371c      	adds	r7, #28
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b085      	sub	sp, #20
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
 8002cb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	f043 0307 	orr.w	r3, r3, #7
 8002ccc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	609a      	str	r2, [r3, #8]
}
 8002cd4:	bf00      	nop
 8002cd6:	3714      	adds	r7, #20
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b087      	sub	sp, #28
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
 8002cec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	021a      	lsls	r2, r3, #8
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	431a      	orrs	r2, r3
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	609a      	str	r2, [r3, #8]
}
 8002d14:	bf00      	nop
 8002d16:	371c      	adds	r7, #28
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d101      	bne.n	8002d38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d34:	2302      	movs	r3, #2
 8002d36:	e050      	b.n	8002dda <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2202      	movs	r2, #2
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a1c      	ldr	r2, [pc, #112]	; (8002de8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d018      	beq.n	8002dae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d84:	d013      	beq.n	8002dae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a18      	ldr	r2, [pc, #96]	; (8002dec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d00e      	beq.n	8002dae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a16      	ldr	r2, [pc, #88]	; (8002df0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d009      	beq.n	8002dae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a15      	ldr	r2, [pc, #84]	; (8002df4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d004      	beq.n	8002dae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a13      	ldr	r2, [pc, #76]	; (8002df8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d10c      	bne.n	8002dc8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002db4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68ba      	ldr	r2, [r7, #8]
 8002dc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3714      	adds	r7, #20
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40010000 	.word	0x40010000
 8002dec:	40000400 	.word	0x40000400
 8002df0:	40000800 	.word	0x40000800
 8002df4:	40000c00 	.word	0x40000c00
 8002df8:	40014000 	.word	0x40014000

08002dfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e03f      	b.n	8002eb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d106      	bne.n	8002e50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7fe f95c 	bl	8001108 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2224      	movs	r2, #36	; 0x24
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68da      	ldr	r2, [r3, #12]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 fddb 	bl	8003a24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	691a      	ldr	r2, [r3, #16]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	695a      	ldr	r2, [r3, #20]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68da      	ldr	r2, [r3, #12]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b08a      	sub	sp, #40	; 0x28
 8002ec2:	af02      	add	r7, sp, #8
 8002ec4:	60f8      	str	r0, [r7, #12]
 8002ec6:	60b9      	str	r1, [r7, #8]
 8002ec8:	603b      	str	r3, [r7, #0]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b20      	cmp	r3, #32
 8002edc:	d17c      	bne.n	8002fd8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d002      	beq.n	8002eea <HAL_UART_Transmit+0x2c>
 8002ee4:	88fb      	ldrh	r3, [r7, #6]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e075      	b.n	8002fda <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d101      	bne.n	8002efc <HAL_UART_Transmit+0x3e>
 8002ef8:	2302      	movs	r3, #2
 8002efa:	e06e      	b.n	8002fda <HAL_UART_Transmit+0x11c>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2221      	movs	r2, #33	; 0x21
 8002f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f12:	f7fe fb51 	bl	80015b8 <HAL_GetTick>
 8002f16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	88fa      	ldrh	r2, [r7, #6]
 8002f1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	88fa      	ldrh	r2, [r7, #6]
 8002f22:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f2c:	d108      	bne.n	8002f40 <HAL_UART_Transmit+0x82>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d104      	bne.n	8002f40 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002f36:	2300      	movs	r3, #0
 8002f38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	61bb      	str	r3, [r7, #24]
 8002f3e:	e003      	b.n	8002f48 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002f50:	e02a      	b.n	8002fa8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	2180      	movs	r1, #128	; 0x80
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f000 fb1f 	bl	80035a0 <UART_WaitOnFlagUntilTimeout>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e036      	b.n	8002fda <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10b      	bne.n	8002f8a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	881b      	ldrh	r3, [r3, #0]
 8002f76:	461a      	mov	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	3302      	adds	r3, #2
 8002f86:	61bb      	str	r3, [r7, #24]
 8002f88:	e007      	b.n	8002f9a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	781a      	ldrb	r2, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	3301      	adds	r3, #1
 8002f98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1cf      	bne.n	8002f52 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	2140      	movs	r1, #64	; 0x40
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f000 faef 	bl	80035a0 <UART_WaitOnFlagUntilTimeout>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e006      	b.n	8002fda <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	e000      	b.n	8002fda <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002fd8:	2302      	movs	r3, #2
  }
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3720      	adds	r7, #32
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b084      	sub	sp, #16
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	60f8      	str	r0, [r7, #12]
 8002fea:	60b9      	str	r1, [r7, #8]
 8002fec:	4613      	mov	r3, r2
 8002fee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b20      	cmp	r3, #32
 8002ffa:	d11d      	bne.n	8003038 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d002      	beq.n	8003008 <HAL_UART_Receive_IT+0x26>
 8003002:	88fb      	ldrh	r3, [r7, #6]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e016      	b.n	800303a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003012:	2b01      	cmp	r3, #1
 8003014:	d101      	bne.n	800301a <HAL_UART_Receive_IT+0x38>
 8003016:	2302      	movs	r3, #2
 8003018:	e00f      	b.n	800303a <HAL_UART_Receive_IT+0x58>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003028:	88fb      	ldrh	r3, [r7, #6]
 800302a:	461a      	mov	r2, r3
 800302c:	68b9      	ldr	r1, [r7, #8]
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f000 fb24 	bl	800367c <UART_Start_Receive_IT>
 8003034:	4603      	mov	r3, r0
 8003036:	e000      	b.n	800303a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003038:	2302      	movs	r3, #2
  }
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
	...

08003044 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b0ba      	sub	sp, #232	; 0xe8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800306a:	2300      	movs	r3, #0
 800306c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003070:	2300      	movs	r3, #0
 8003072:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003082:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10f      	bne.n	80030aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800308a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800308e:	f003 0320 	and.w	r3, r3, #32
 8003092:	2b00      	cmp	r3, #0
 8003094:	d009      	beq.n	80030aa <HAL_UART_IRQHandler+0x66>
 8003096:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800309a:	f003 0320 	and.w	r3, r3, #32
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 fc03 	bl	80038ae <UART_Receive_IT>
      return;
 80030a8:	e256      	b.n	8003558 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80030aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f000 80de 	beq.w	8003270 <HAL_UART_IRQHandler+0x22c>
 80030b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d106      	bne.n	80030ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80030c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 80d1 	beq.w	8003270 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80030ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00b      	beq.n	80030f2 <HAL_UART_IRQHandler+0xae>
 80030da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d005      	beq.n	80030f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	f043 0201 	orr.w	r2, r3, #1
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030f6:	f003 0304 	and.w	r3, r3, #4
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00b      	beq.n	8003116 <HAL_UART_IRQHandler+0xd2>
 80030fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	d005      	beq.n	8003116 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	f043 0202 	orr.w	r2, r3, #2
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00b      	beq.n	800313a <HAL_UART_IRQHandler+0xf6>
 8003122:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	d005      	beq.n	800313a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	f043 0204 	orr.w	r2, r3, #4
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800313a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800313e:	f003 0308 	and.w	r3, r3, #8
 8003142:	2b00      	cmp	r3, #0
 8003144:	d011      	beq.n	800316a <HAL_UART_IRQHandler+0x126>
 8003146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800314a:	f003 0320 	and.w	r3, r3, #32
 800314e:	2b00      	cmp	r3, #0
 8003150:	d105      	bne.n	800315e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003152:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d005      	beq.n	800316a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	f043 0208 	orr.w	r2, r3, #8
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	2b00      	cmp	r3, #0
 8003170:	f000 81ed 	beq.w	800354e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003178:	f003 0320 	and.w	r3, r3, #32
 800317c:	2b00      	cmp	r3, #0
 800317e:	d008      	beq.n	8003192 <HAL_UART_IRQHandler+0x14e>
 8003180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003184:	f003 0320 	and.w	r3, r3, #32
 8003188:	2b00      	cmp	r3, #0
 800318a:	d002      	beq.n	8003192 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 fb8e 	bl	80038ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319c:	2b40      	cmp	r3, #64	; 0x40
 800319e:	bf0c      	ite	eq
 80031a0:	2301      	moveq	r3, #1
 80031a2:	2300      	movne	r3, #0
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	f003 0308 	and.w	r3, r3, #8
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d103      	bne.n	80031be <HAL_UART_IRQHandler+0x17a>
 80031b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d04f      	beq.n	800325e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 fa96 	bl	80036f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ce:	2b40      	cmp	r3, #64	; 0x40
 80031d0:	d141      	bne.n	8003256 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	3314      	adds	r3, #20
 80031d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031e0:	e853 3f00 	ldrex	r3, [r3]
 80031e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80031e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80031ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	3314      	adds	r3, #20
 80031fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80031fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003202:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003206:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800320a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800320e:	e841 2300 	strex	r3, r2, [r1]
 8003212:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003216:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1d9      	bne.n	80031d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003222:	2b00      	cmp	r3, #0
 8003224:	d013      	beq.n	800324e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322a:	4a7d      	ldr	r2, [pc, #500]	; (8003420 <HAL_UART_IRQHandler+0x3dc>)
 800322c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003232:	4618      	mov	r0, r3
 8003234:	f7fe fb4d 	bl	80018d2 <HAL_DMA_Abort_IT>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d016      	beq.n	800326c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003248:	4610      	mov	r0, r2
 800324a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800324c:	e00e      	b.n	800326c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f990 	bl	8003574 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003254:	e00a      	b.n	800326c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f98c 	bl	8003574 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800325c:	e006      	b.n	800326c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f988 	bl	8003574 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800326a:	e170      	b.n	800354e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800326c:	bf00      	nop
    return;
 800326e:	e16e      	b.n	800354e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003274:	2b01      	cmp	r3, #1
 8003276:	f040 814a 	bne.w	800350e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800327a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800327e:	f003 0310 	and.w	r3, r3, #16
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 8143 	beq.w	800350e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800328c:	f003 0310 	and.w	r3, r3, #16
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 813c 	beq.w	800350e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003296:	2300      	movs	r3, #0
 8003298:	60bb      	str	r3, [r7, #8]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	60bb      	str	r3, [r7, #8]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	60bb      	str	r3, [r7, #8]
 80032aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b6:	2b40      	cmp	r3, #64	; 0x40
 80032b8:	f040 80b4 	bne.w	8003424 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80032c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 8140 	beq.w	8003552 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032da:	429a      	cmp	r2, r3
 80032dc:	f080 8139 	bcs.w	8003552 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032e6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032f2:	f000 8088 	beq.w	8003406 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	330c      	adds	r3, #12
 80032fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003300:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003304:	e853 3f00 	ldrex	r3, [r3]
 8003308:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800330c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003310:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003314:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	330c      	adds	r3, #12
 800331e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003322:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003326:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800332a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800332e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003332:	e841 2300 	strex	r3, r2, [r1]
 8003336:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800333a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1d9      	bne.n	80032f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	3314      	adds	r3, #20
 8003348:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800334a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800334c:	e853 3f00 	ldrex	r3, [r3]
 8003350:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003352:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003354:	f023 0301 	bic.w	r3, r3, #1
 8003358:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	3314      	adds	r3, #20
 8003362:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003366:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800336a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800336c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800336e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003372:	e841 2300 	strex	r3, r2, [r1]
 8003376:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003378:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1e1      	bne.n	8003342 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	3314      	adds	r3, #20
 8003384:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003386:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003388:	e853 3f00 	ldrex	r3, [r3]
 800338c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800338e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003390:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003394:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	3314      	adds	r3, #20
 800339e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80033a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80033a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80033a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80033aa:	e841 2300 	strex	r3, r2, [r1]
 80033ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80033b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1e3      	bne.n	800337e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2220      	movs	r2, #32
 80033ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	330c      	adds	r3, #12
 80033ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033ce:	e853 3f00 	ldrex	r3, [r3]
 80033d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80033d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033d6:	f023 0310 	bic.w	r3, r3, #16
 80033da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	330c      	adds	r3, #12
 80033e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80033e8:	65ba      	str	r2, [r7, #88]	; 0x58
 80033ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80033ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033f0:	e841 2300 	strex	r3, r2, [r1]
 80033f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80033f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1e3      	bne.n	80033c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003400:	4618      	mov	r0, r3
 8003402:	f7fe f9f6 	bl	80017f2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800340e:	b29b      	uxth	r3, r3
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	b29b      	uxth	r3, r3
 8003414:	4619      	mov	r1, r3
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f8b6 	bl	8003588 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800341c:	e099      	b.n	8003552 <HAL_UART_IRQHandler+0x50e>
 800341e:	bf00      	nop
 8003420:	080037b7 	.word	0x080037b7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800342c:	b29b      	uxth	r3, r3
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003438:	b29b      	uxth	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 808b 	beq.w	8003556 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003440:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 8086 	beq.w	8003556 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	330c      	adds	r3, #12
 8003450:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003454:	e853 3f00 	ldrex	r3, [r3]
 8003458:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800345a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800345c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003460:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	330c      	adds	r3, #12
 800346a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800346e:	647a      	str	r2, [r7, #68]	; 0x44
 8003470:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003472:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003474:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003476:	e841 2300 	strex	r3, r2, [r1]
 800347a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800347c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1e3      	bne.n	800344a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	3314      	adds	r3, #20
 8003488:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	e853 3f00 	ldrex	r3, [r3]
 8003490:	623b      	str	r3, [r7, #32]
   return(result);
 8003492:	6a3b      	ldr	r3, [r7, #32]
 8003494:	f023 0301 	bic.w	r3, r3, #1
 8003498:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	3314      	adds	r3, #20
 80034a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80034a6:	633a      	str	r2, [r7, #48]	; 0x30
 80034a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034ae:	e841 2300 	strex	r3, r2, [r1]
 80034b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80034b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1e3      	bne.n	8003482 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2220      	movs	r2, #32
 80034be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	330c      	adds	r3, #12
 80034ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	e853 3f00 	ldrex	r3, [r3]
 80034d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f023 0310 	bic.w	r3, r3, #16
 80034de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	330c      	adds	r3, #12
 80034e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80034ec:	61fa      	str	r2, [r7, #28]
 80034ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f0:	69b9      	ldr	r1, [r7, #24]
 80034f2:	69fa      	ldr	r2, [r7, #28]
 80034f4:	e841 2300 	strex	r3, r2, [r1]
 80034f8:	617b      	str	r3, [r7, #20]
   return(result);
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1e3      	bne.n	80034c8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003500:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003504:	4619      	mov	r1, r3
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f83e 	bl	8003588 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800350c:	e023      	b.n	8003556 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800350e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003516:	2b00      	cmp	r3, #0
 8003518:	d009      	beq.n	800352e <HAL_UART_IRQHandler+0x4ea>
 800351a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800351e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003522:	2b00      	cmp	r3, #0
 8003524:	d003      	beq.n	800352e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f959 	bl	80037de <UART_Transmit_IT>
    return;
 800352c:	e014      	b.n	8003558 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800352e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00e      	beq.n	8003558 <HAL_UART_IRQHandler+0x514>
 800353a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800353e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003542:	2b00      	cmp	r3, #0
 8003544:	d008      	beq.n	8003558 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f999 	bl	800387e <UART_EndTransmit_IT>
    return;
 800354c:	e004      	b.n	8003558 <HAL_UART_IRQHandler+0x514>
    return;
 800354e:	bf00      	nop
 8003550:	e002      	b.n	8003558 <HAL_UART_IRQHandler+0x514>
      return;
 8003552:	bf00      	nop
 8003554:	e000      	b.n	8003558 <HAL_UART_IRQHandler+0x514>
      return;
 8003556:	bf00      	nop
  }
}
 8003558:	37e8      	adds	r7, #232	; 0xe8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop

08003560 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	460b      	mov	r3, r1
 8003592:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b090      	sub	sp, #64	; 0x40
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	603b      	str	r3, [r7, #0]
 80035ac:	4613      	mov	r3, r2
 80035ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035b0:	e050      	b.n	8003654 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b8:	d04c      	beq.n	8003654 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d007      	beq.n	80035d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80035c0:	f7fd fffa 	bl	80015b8 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d241      	bcs.n	8003654 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	330c      	adds	r3, #12
 80035d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035da:	e853 3f00 	ldrex	r3, [r3]
 80035de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	330c      	adds	r3, #12
 80035ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035f0:	637a      	str	r2, [r7, #52]	; 0x34
 80035f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035f8:	e841 2300 	strex	r3, r2, [r1]
 80035fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80035fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1e5      	bne.n	80035d0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	3314      	adds	r3, #20
 800360a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	e853 3f00 	ldrex	r3, [r3]
 8003612:	613b      	str	r3, [r7, #16]
   return(result);
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	f023 0301 	bic.w	r3, r3, #1
 800361a:	63bb      	str	r3, [r7, #56]	; 0x38
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	3314      	adds	r3, #20
 8003622:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003624:	623a      	str	r2, [r7, #32]
 8003626:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003628:	69f9      	ldr	r1, [r7, #28]
 800362a:	6a3a      	ldr	r2, [r7, #32]
 800362c:	e841 2300 	strex	r3, r2, [r1]
 8003630:	61bb      	str	r3, [r7, #24]
   return(result);
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1e5      	bne.n	8003604 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2220      	movs	r2, #32
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2220      	movs	r2, #32
 8003644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e00f      	b.n	8003674 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	4013      	ands	r3, r2
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	429a      	cmp	r2, r3
 8003662:	bf0c      	ite	eq
 8003664:	2301      	moveq	r3, #1
 8003666:	2300      	movne	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	461a      	mov	r2, r3
 800366c:	79fb      	ldrb	r3, [r7, #7]
 800366e:	429a      	cmp	r2, r3
 8003670:	d09f      	beq.n	80035b2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3740      	adds	r7, #64	; 0x40
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	4613      	mov	r3, r2
 8003688:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	88fa      	ldrh	r2, [r7, #6]
 8003694:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	88fa      	ldrh	r2, [r7, #6]
 800369a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2222      	movs	r2, #34	; 0x22
 80036a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68da      	ldr	r2, [r3, #12]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036c0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695a      	ldr	r2, [r3, #20]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f042 0201 	orr.w	r2, r2, #1
 80036d0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68da      	ldr	r2, [r3, #12]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f042 0220 	orr.w	r2, r2, #32
 80036e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3714      	adds	r7, #20
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b095      	sub	sp, #84	; 0x54
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	330c      	adds	r3, #12
 80036fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003702:	e853 3f00 	ldrex	r3, [r3]
 8003706:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800370e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	330c      	adds	r3, #12
 8003716:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003718:	643a      	str	r2, [r7, #64]	; 0x40
 800371a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800371e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003720:	e841 2300 	strex	r3, r2, [r1]
 8003724:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1e5      	bne.n	80036f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	3314      	adds	r3, #20
 8003732:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	e853 3f00 	ldrex	r3, [r3]
 800373a:	61fb      	str	r3, [r7, #28]
   return(result);
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f023 0301 	bic.w	r3, r3, #1
 8003742:	64bb      	str	r3, [r7, #72]	; 0x48
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	3314      	adds	r3, #20
 800374a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800374c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800374e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003750:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003752:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003754:	e841 2300 	strex	r3, r2, [r1]
 8003758:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1e5      	bne.n	800372c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003764:	2b01      	cmp	r3, #1
 8003766:	d119      	bne.n	800379c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	330c      	adds	r3, #12
 800376e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	e853 3f00 	ldrex	r3, [r3]
 8003776:	60bb      	str	r3, [r7, #8]
   return(result);
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	f023 0310 	bic.w	r3, r3, #16
 800377e:	647b      	str	r3, [r7, #68]	; 0x44
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	330c      	adds	r3, #12
 8003786:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003788:	61ba      	str	r2, [r7, #24]
 800378a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800378c:	6979      	ldr	r1, [r7, #20]
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	e841 2300 	strex	r3, r2, [r1]
 8003794:	613b      	str	r3, [r7, #16]
   return(result);
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1e5      	bne.n	8003768 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2220      	movs	r2, #32
 80037a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80037aa:	bf00      	nop
 80037ac:	3754      	adds	r7, #84	; 0x54
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b084      	sub	sp, #16
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f7ff fecf 	bl	8003574 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037d6:	bf00      	nop
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80037de:	b480      	push	{r7}
 80037e0:	b085      	sub	sp, #20
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b21      	cmp	r3, #33	; 0x21
 80037f0:	d13e      	bne.n	8003870 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037fa:	d114      	bne.n	8003826 <UART_Transmit_IT+0x48>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d110      	bne.n	8003826 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a1b      	ldr	r3, [r3, #32]
 8003808:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	881b      	ldrh	r3, [r3, #0]
 800380e:	461a      	mov	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003818:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	1c9a      	adds	r2, r3, #2
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	621a      	str	r2, [r3, #32]
 8003824:	e008      	b.n	8003838 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	1c59      	adds	r1, r3, #1
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	6211      	str	r1, [r2, #32]
 8003830:	781a      	ldrb	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800383c:	b29b      	uxth	r3, r3
 800383e:	3b01      	subs	r3, #1
 8003840:	b29b      	uxth	r3, r3
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	4619      	mov	r1, r3
 8003846:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10f      	bne.n	800386c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68da      	ldr	r2, [r3, #12]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800385a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68da      	ldr	r2, [r3, #12]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800386a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800386c:	2300      	movs	r3, #0
 800386e:	e000      	b.n	8003872 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003870:	2302      	movs	r3, #2
  }
}
 8003872:	4618      	mov	r0, r3
 8003874:	3714      	adds	r7, #20
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b082      	sub	sp, #8
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68da      	ldr	r2, [r3, #12]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003894:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2220      	movs	r2, #32
 800389a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7ff fe5e 	bl	8003560 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b08c      	sub	sp, #48	; 0x30
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b22      	cmp	r3, #34	; 0x22
 80038c0:	f040 80ab 	bne.w	8003a1a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038cc:	d117      	bne.n	80038fe <UART_Receive_IT+0x50>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d113      	bne.n	80038fe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80038d6:	2300      	movs	r3, #0
 80038d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038de:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f6:	1c9a      	adds	r2, r3, #2
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	629a      	str	r2, [r3, #40]	; 0x28
 80038fc:	e026      	b.n	800394c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003902:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003904:	2300      	movs	r3, #0
 8003906:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003910:	d007      	beq.n	8003922 <UART_Receive_IT+0x74>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10a      	bne.n	8003930 <UART_Receive_IT+0x82>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d106      	bne.n	8003930 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	b2da      	uxtb	r2, r3
 800392a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392c:	701a      	strb	r2, [r3, #0]
 800392e:	e008      	b.n	8003942 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	b2db      	uxtb	r3, r3
 8003938:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800393c:	b2da      	uxtb	r2, r3
 800393e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003940:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003946:	1c5a      	adds	r2, r3, #1
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003950:	b29b      	uxth	r3, r3
 8003952:	3b01      	subs	r3, #1
 8003954:	b29b      	uxth	r3, r3
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	4619      	mov	r1, r3
 800395a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800395c:	2b00      	cmp	r3, #0
 800395e:	d15a      	bne.n	8003a16 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68da      	ldr	r2, [r3, #12]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0220 	bic.w	r2, r2, #32
 800396e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68da      	ldr	r2, [r3, #12]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800397e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	695a      	ldr	r2, [r3, #20]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 0201 	bic.w	r2, r2, #1
 800398e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2220      	movs	r2, #32
 8003994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399c:	2b01      	cmp	r3, #1
 800399e:	d135      	bne.n	8003a0c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	330c      	adds	r3, #12
 80039ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	e853 3f00 	ldrex	r3, [r3]
 80039b4:	613b      	str	r3, [r7, #16]
   return(result);
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	f023 0310 	bic.w	r3, r3, #16
 80039bc:	627b      	str	r3, [r7, #36]	; 0x24
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	330c      	adds	r3, #12
 80039c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c6:	623a      	str	r2, [r7, #32]
 80039c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ca:	69f9      	ldr	r1, [r7, #28]
 80039cc:	6a3a      	ldr	r2, [r7, #32]
 80039ce:	e841 2300 	strex	r3, r2, [r1]
 80039d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1e5      	bne.n	80039a6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0310 	and.w	r3, r3, #16
 80039e4:	2b10      	cmp	r3, #16
 80039e6:	d10a      	bne.n	80039fe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039e8:	2300      	movs	r3, #0
 80039ea:	60fb      	str	r3, [r7, #12]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	60fb      	str	r3, [r7, #12]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a02:	4619      	mov	r1, r3
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f7ff fdbf 	bl	8003588 <HAL_UARTEx_RxEventCallback>
 8003a0a:	e002      	b.n	8003a12 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f7fd fd15 	bl	800143c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a12:	2300      	movs	r3, #0
 8003a14:	e002      	b.n	8003a1c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003a16:	2300      	movs	r3, #0
 8003a18:	e000      	b.n	8003a1c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003a1a:	2302      	movs	r3, #2
  }
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3730      	adds	r7, #48	; 0x30
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a28:	b09f      	sub	sp, #124	; 0x7c
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a3a:	68d9      	ldr	r1, [r3, #12]
 8003a3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	ea40 0301 	orr.w	r3, r0, r1
 8003a44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a48:	689a      	ldr	r2, [r3, #8]
 8003a4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	431a      	orrs	r2, r3
 8003a56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a68:	f021 010c 	bic.w	r1, r1, #12
 8003a6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a72:	430b      	orrs	r3, r1
 8003a74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003a80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a82:	6999      	ldr	r1, [r3, #24]
 8003a84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	ea40 0301 	orr.w	r3, r0, r1
 8003a8c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	4bc5      	ldr	r3, [pc, #788]	; (8003da8 <UART_SetConfig+0x384>)
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d004      	beq.n	8003aa2 <UART_SetConfig+0x7e>
 8003a98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	4bc3      	ldr	r3, [pc, #780]	; (8003dac <UART_SetConfig+0x388>)
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d103      	bne.n	8003aaa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003aa2:	f7fe fd37 	bl	8002514 <HAL_RCC_GetPCLK2Freq>
 8003aa6:	6778      	str	r0, [r7, #116]	; 0x74
 8003aa8:	e002      	b.n	8003ab0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003aaa:	f7fe fd1f 	bl	80024ec <HAL_RCC_GetPCLK1Freq>
 8003aae:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ab2:	69db      	ldr	r3, [r3, #28]
 8003ab4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ab8:	f040 80b6 	bne.w	8003c28 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003abc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003abe:	461c      	mov	r4, r3
 8003ac0:	f04f 0500 	mov.w	r5, #0
 8003ac4:	4622      	mov	r2, r4
 8003ac6:	462b      	mov	r3, r5
 8003ac8:	1891      	adds	r1, r2, r2
 8003aca:	6439      	str	r1, [r7, #64]	; 0x40
 8003acc:	415b      	adcs	r3, r3
 8003ace:	647b      	str	r3, [r7, #68]	; 0x44
 8003ad0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ad4:	1912      	adds	r2, r2, r4
 8003ad6:	eb45 0303 	adc.w	r3, r5, r3
 8003ada:	f04f 0000 	mov.w	r0, #0
 8003ade:	f04f 0100 	mov.w	r1, #0
 8003ae2:	00d9      	lsls	r1, r3, #3
 8003ae4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ae8:	00d0      	lsls	r0, r2, #3
 8003aea:	4602      	mov	r2, r0
 8003aec:	460b      	mov	r3, r1
 8003aee:	1911      	adds	r1, r2, r4
 8003af0:	6639      	str	r1, [r7, #96]	; 0x60
 8003af2:	416b      	adcs	r3, r5
 8003af4:	667b      	str	r3, [r7, #100]	; 0x64
 8003af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	461a      	mov	r2, r3
 8003afc:	f04f 0300 	mov.w	r3, #0
 8003b00:	1891      	adds	r1, r2, r2
 8003b02:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b04:	415b      	adcs	r3, r3
 8003b06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b0c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003b10:	f7fc fbb6 	bl	8000280 <__aeabi_uldivmod>
 8003b14:	4602      	mov	r2, r0
 8003b16:	460b      	mov	r3, r1
 8003b18:	4ba5      	ldr	r3, [pc, #660]	; (8003db0 <UART_SetConfig+0x38c>)
 8003b1a:	fba3 2302 	umull	r2, r3, r3, r2
 8003b1e:	095b      	lsrs	r3, r3, #5
 8003b20:	011e      	lsls	r6, r3, #4
 8003b22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b24:	461c      	mov	r4, r3
 8003b26:	f04f 0500 	mov.w	r5, #0
 8003b2a:	4622      	mov	r2, r4
 8003b2c:	462b      	mov	r3, r5
 8003b2e:	1891      	adds	r1, r2, r2
 8003b30:	6339      	str	r1, [r7, #48]	; 0x30
 8003b32:	415b      	adcs	r3, r3
 8003b34:	637b      	str	r3, [r7, #52]	; 0x34
 8003b36:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003b3a:	1912      	adds	r2, r2, r4
 8003b3c:	eb45 0303 	adc.w	r3, r5, r3
 8003b40:	f04f 0000 	mov.w	r0, #0
 8003b44:	f04f 0100 	mov.w	r1, #0
 8003b48:	00d9      	lsls	r1, r3, #3
 8003b4a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b4e:	00d0      	lsls	r0, r2, #3
 8003b50:	4602      	mov	r2, r0
 8003b52:	460b      	mov	r3, r1
 8003b54:	1911      	adds	r1, r2, r4
 8003b56:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b58:	416b      	adcs	r3, r5
 8003b5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	461a      	mov	r2, r3
 8003b62:	f04f 0300 	mov.w	r3, #0
 8003b66:	1891      	adds	r1, r2, r2
 8003b68:	62b9      	str	r1, [r7, #40]	; 0x28
 8003b6a:	415b      	adcs	r3, r3
 8003b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b72:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003b76:	f7fc fb83 	bl	8000280 <__aeabi_uldivmod>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	4b8c      	ldr	r3, [pc, #560]	; (8003db0 <UART_SetConfig+0x38c>)
 8003b80:	fba3 1302 	umull	r1, r3, r3, r2
 8003b84:	095b      	lsrs	r3, r3, #5
 8003b86:	2164      	movs	r1, #100	; 0x64
 8003b88:	fb01 f303 	mul.w	r3, r1, r3
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	3332      	adds	r3, #50	; 0x32
 8003b92:	4a87      	ldr	r2, [pc, #540]	; (8003db0 <UART_SetConfig+0x38c>)
 8003b94:	fba2 2303 	umull	r2, r3, r2, r3
 8003b98:	095b      	lsrs	r3, r3, #5
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ba0:	441e      	add	r6, r3
 8003ba2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f04f 0100 	mov.w	r1, #0
 8003baa:	4602      	mov	r2, r0
 8003bac:	460b      	mov	r3, r1
 8003bae:	1894      	adds	r4, r2, r2
 8003bb0:	623c      	str	r4, [r7, #32]
 8003bb2:	415b      	adcs	r3, r3
 8003bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8003bb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bba:	1812      	adds	r2, r2, r0
 8003bbc:	eb41 0303 	adc.w	r3, r1, r3
 8003bc0:	f04f 0400 	mov.w	r4, #0
 8003bc4:	f04f 0500 	mov.w	r5, #0
 8003bc8:	00dd      	lsls	r5, r3, #3
 8003bca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003bce:	00d4      	lsls	r4, r2, #3
 8003bd0:	4622      	mov	r2, r4
 8003bd2:	462b      	mov	r3, r5
 8003bd4:	1814      	adds	r4, r2, r0
 8003bd6:	653c      	str	r4, [r7, #80]	; 0x50
 8003bd8:	414b      	adcs	r3, r1
 8003bda:	657b      	str	r3, [r7, #84]	; 0x54
 8003bdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	461a      	mov	r2, r3
 8003be2:	f04f 0300 	mov.w	r3, #0
 8003be6:	1891      	adds	r1, r2, r2
 8003be8:	61b9      	str	r1, [r7, #24]
 8003bea:	415b      	adcs	r3, r3
 8003bec:	61fb      	str	r3, [r7, #28]
 8003bee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bf2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003bf6:	f7fc fb43 	bl	8000280 <__aeabi_uldivmod>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	4b6c      	ldr	r3, [pc, #432]	; (8003db0 <UART_SetConfig+0x38c>)
 8003c00:	fba3 1302 	umull	r1, r3, r3, r2
 8003c04:	095b      	lsrs	r3, r3, #5
 8003c06:	2164      	movs	r1, #100	; 0x64
 8003c08:	fb01 f303 	mul.w	r3, r1, r3
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	3332      	adds	r3, #50	; 0x32
 8003c12:	4a67      	ldr	r2, [pc, #412]	; (8003db0 <UART_SetConfig+0x38c>)
 8003c14:	fba2 2303 	umull	r2, r3, r2, r3
 8003c18:	095b      	lsrs	r3, r3, #5
 8003c1a:	f003 0207 	and.w	r2, r3, #7
 8003c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4432      	add	r2, r6
 8003c24:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c26:	e0b9      	b.n	8003d9c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c2a:	461c      	mov	r4, r3
 8003c2c:	f04f 0500 	mov.w	r5, #0
 8003c30:	4622      	mov	r2, r4
 8003c32:	462b      	mov	r3, r5
 8003c34:	1891      	adds	r1, r2, r2
 8003c36:	6139      	str	r1, [r7, #16]
 8003c38:	415b      	adcs	r3, r3
 8003c3a:	617b      	str	r3, [r7, #20]
 8003c3c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003c40:	1912      	adds	r2, r2, r4
 8003c42:	eb45 0303 	adc.w	r3, r5, r3
 8003c46:	f04f 0000 	mov.w	r0, #0
 8003c4a:	f04f 0100 	mov.w	r1, #0
 8003c4e:	00d9      	lsls	r1, r3, #3
 8003c50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c54:	00d0      	lsls	r0, r2, #3
 8003c56:	4602      	mov	r2, r0
 8003c58:	460b      	mov	r3, r1
 8003c5a:	eb12 0804 	adds.w	r8, r2, r4
 8003c5e:	eb43 0905 	adc.w	r9, r3, r5
 8003c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f04f 0100 	mov.w	r1, #0
 8003c6c:	f04f 0200 	mov.w	r2, #0
 8003c70:	f04f 0300 	mov.w	r3, #0
 8003c74:	008b      	lsls	r3, r1, #2
 8003c76:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c7a:	0082      	lsls	r2, r0, #2
 8003c7c:	4640      	mov	r0, r8
 8003c7e:	4649      	mov	r1, r9
 8003c80:	f7fc fafe 	bl	8000280 <__aeabi_uldivmod>
 8003c84:	4602      	mov	r2, r0
 8003c86:	460b      	mov	r3, r1
 8003c88:	4b49      	ldr	r3, [pc, #292]	; (8003db0 <UART_SetConfig+0x38c>)
 8003c8a:	fba3 2302 	umull	r2, r3, r3, r2
 8003c8e:	095b      	lsrs	r3, r3, #5
 8003c90:	011e      	lsls	r6, r3, #4
 8003c92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c94:	4618      	mov	r0, r3
 8003c96:	f04f 0100 	mov.w	r1, #0
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	1894      	adds	r4, r2, r2
 8003ca0:	60bc      	str	r4, [r7, #8]
 8003ca2:	415b      	adcs	r3, r3
 8003ca4:	60fb      	str	r3, [r7, #12]
 8003ca6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003caa:	1812      	adds	r2, r2, r0
 8003cac:	eb41 0303 	adc.w	r3, r1, r3
 8003cb0:	f04f 0400 	mov.w	r4, #0
 8003cb4:	f04f 0500 	mov.w	r5, #0
 8003cb8:	00dd      	lsls	r5, r3, #3
 8003cba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003cbe:	00d4      	lsls	r4, r2, #3
 8003cc0:	4622      	mov	r2, r4
 8003cc2:	462b      	mov	r3, r5
 8003cc4:	1814      	adds	r4, r2, r0
 8003cc6:	64bc      	str	r4, [r7, #72]	; 0x48
 8003cc8:	414b      	adcs	r3, r1
 8003cca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f04f 0100 	mov.w	r1, #0
 8003cd6:	f04f 0200 	mov.w	r2, #0
 8003cda:	f04f 0300 	mov.w	r3, #0
 8003cde:	008b      	lsls	r3, r1, #2
 8003ce0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003ce4:	0082      	lsls	r2, r0, #2
 8003ce6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003cea:	f7fc fac9 	bl	8000280 <__aeabi_uldivmod>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	4b2f      	ldr	r3, [pc, #188]	; (8003db0 <UART_SetConfig+0x38c>)
 8003cf4:	fba3 1302 	umull	r1, r3, r3, r2
 8003cf8:	095b      	lsrs	r3, r3, #5
 8003cfa:	2164      	movs	r1, #100	; 0x64
 8003cfc:	fb01 f303 	mul.w	r3, r1, r3
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	011b      	lsls	r3, r3, #4
 8003d04:	3332      	adds	r3, #50	; 0x32
 8003d06:	4a2a      	ldr	r2, [pc, #168]	; (8003db0 <UART_SetConfig+0x38c>)
 8003d08:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0c:	095b      	lsrs	r3, r3, #5
 8003d0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d12:	441e      	add	r6, r3
 8003d14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d16:	4618      	mov	r0, r3
 8003d18:	f04f 0100 	mov.w	r1, #0
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	460b      	mov	r3, r1
 8003d20:	1894      	adds	r4, r2, r2
 8003d22:	603c      	str	r4, [r7, #0]
 8003d24:	415b      	adcs	r3, r3
 8003d26:	607b      	str	r3, [r7, #4]
 8003d28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d2c:	1812      	adds	r2, r2, r0
 8003d2e:	eb41 0303 	adc.w	r3, r1, r3
 8003d32:	f04f 0400 	mov.w	r4, #0
 8003d36:	f04f 0500 	mov.w	r5, #0
 8003d3a:	00dd      	lsls	r5, r3, #3
 8003d3c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003d40:	00d4      	lsls	r4, r2, #3
 8003d42:	4622      	mov	r2, r4
 8003d44:	462b      	mov	r3, r5
 8003d46:	eb12 0a00 	adds.w	sl, r2, r0
 8003d4a:	eb43 0b01 	adc.w	fp, r3, r1
 8003d4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f04f 0100 	mov.w	r1, #0
 8003d58:	f04f 0200 	mov.w	r2, #0
 8003d5c:	f04f 0300 	mov.w	r3, #0
 8003d60:	008b      	lsls	r3, r1, #2
 8003d62:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003d66:	0082      	lsls	r2, r0, #2
 8003d68:	4650      	mov	r0, sl
 8003d6a:	4659      	mov	r1, fp
 8003d6c:	f7fc fa88 	bl	8000280 <__aeabi_uldivmod>
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	4b0e      	ldr	r3, [pc, #56]	; (8003db0 <UART_SetConfig+0x38c>)
 8003d76:	fba3 1302 	umull	r1, r3, r3, r2
 8003d7a:	095b      	lsrs	r3, r3, #5
 8003d7c:	2164      	movs	r1, #100	; 0x64
 8003d7e:	fb01 f303 	mul.w	r3, r1, r3
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	011b      	lsls	r3, r3, #4
 8003d86:	3332      	adds	r3, #50	; 0x32
 8003d88:	4a09      	ldr	r2, [pc, #36]	; (8003db0 <UART_SetConfig+0x38c>)
 8003d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8e:	095b      	lsrs	r3, r3, #5
 8003d90:	f003 020f 	and.w	r2, r3, #15
 8003d94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4432      	add	r2, r6
 8003d9a:	609a      	str	r2, [r3, #8]
}
 8003d9c:	bf00      	nop
 8003d9e:	377c      	adds	r7, #124	; 0x7c
 8003da0:	46bd      	mov	sp, r7
 8003da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003da6:	bf00      	nop
 8003da8:	40011000 	.word	0x40011000
 8003dac:	40011400 	.word	0x40011400
 8003db0:	51eb851f 	.word	0x51eb851f

08003db4 <__errno>:
 8003db4:	4b01      	ldr	r3, [pc, #4]	; (8003dbc <__errno+0x8>)
 8003db6:	6818      	ldr	r0, [r3, #0]
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	2000000c 	.word	0x2000000c

08003dc0 <__libc_init_array>:
 8003dc0:	b570      	push	{r4, r5, r6, lr}
 8003dc2:	4d0d      	ldr	r5, [pc, #52]	; (8003df8 <__libc_init_array+0x38>)
 8003dc4:	4c0d      	ldr	r4, [pc, #52]	; (8003dfc <__libc_init_array+0x3c>)
 8003dc6:	1b64      	subs	r4, r4, r5
 8003dc8:	10a4      	asrs	r4, r4, #2
 8003dca:	2600      	movs	r6, #0
 8003dcc:	42a6      	cmp	r6, r4
 8003dce:	d109      	bne.n	8003de4 <__libc_init_array+0x24>
 8003dd0:	4d0b      	ldr	r5, [pc, #44]	; (8003e00 <__libc_init_array+0x40>)
 8003dd2:	4c0c      	ldr	r4, [pc, #48]	; (8003e04 <__libc_init_array+0x44>)
 8003dd4:	f001 f858 	bl	8004e88 <_init>
 8003dd8:	1b64      	subs	r4, r4, r5
 8003dda:	10a4      	asrs	r4, r4, #2
 8003ddc:	2600      	movs	r6, #0
 8003dde:	42a6      	cmp	r6, r4
 8003de0:	d105      	bne.n	8003dee <__libc_init_array+0x2e>
 8003de2:	bd70      	pop	{r4, r5, r6, pc}
 8003de4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003de8:	4798      	blx	r3
 8003dea:	3601      	adds	r6, #1
 8003dec:	e7ee      	b.n	8003dcc <__libc_init_array+0xc>
 8003dee:	f855 3b04 	ldr.w	r3, [r5], #4
 8003df2:	4798      	blx	r3
 8003df4:	3601      	adds	r6, #1
 8003df6:	e7f2      	b.n	8003dde <__libc_init_array+0x1e>
 8003df8:	08005788 	.word	0x08005788
 8003dfc:	08005788 	.word	0x08005788
 8003e00:	08005788 	.word	0x08005788
 8003e04:	0800578c 	.word	0x0800578c

08003e08 <memcpy>:
 8003e08:	440a      	add	r2, r1
 8003e0a:	4291      	cmp	r1, r2
 8003e0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e10:	d100      	bne.n	8003e14 <memcpy+0xc>
 8003e12:	4770      	bx	lr
 8003e14:	b510      	push	{r4, lr}
 8003e16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e1e:	4291      	cmp	r1, r2
 8003e20:	d1f9      	bne.n	8003e16 <memcpy+0xe>
 8003e22:	bd10      	pop	{r4, pc}

08003e24 <memset>:
 8003e24:	4402      	add	r2, r0
 8003e26:	4603      	mov	r3, r0
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d100      	bne.n	8003e2e <memset+0xa>
 8003e2c:	4770      	bx	lr
 8003e2e:	f803 1b01 	strb.w	r1, [r3], #1
 8003e32:	e7f9      	b.n	8003e28 <memset+0x4>

08003e34 <iprintf>:
 8003e34:	b40f      	push	{r0, r1, r2, r3}
 8003e36:	4b0a      	ldr	r3, [pc, #40]	; (8003e60 <iprintf+0x2c>)
 8003e38:	b513      	push	{r0, r1, r4, lr}
 8003e3a:	681c      	ldr	r4, [r3, #0]
 8003e3c:	b124      	cbz	r4, 8003e48 <iprintf+0x14>
 8003e3e:	69a3      	ldr	r3, [r4, #24]
 8003e40:	b913      	cbnz	r3, 8003e48 <iprintf+0x14>
 8003e42:	4620      	mov	r0, r4
 8003e44:	f000 fa74 	bl	8004330 <__sinit>
 8003e48:	ab05      	add	r3, sp, #20
 8003e4a:	9a04      	ldr	r2, [sp, #16]
 8003e4c:	68a1      	ldr	r1, [r4, #8]
 8003e4e:	9301      	str	r3, [sp, #4]
 8003e50:	4620      	mov	r0, r4
 8003e52:	f000 fc45 	bl	80046e0 <_vfiprintf_r>
 8003e56:	b002      	add	sp, #8
 8003e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e5c:	b004      	add	sp, #16
 8003e5e:	4770      	bx	lr
 8003e60:	2000000c 	.word	0x2000000c

08003e64 <putchar>:
 8003e64:	4b09      	ldr	r3, [pc, #36]	; (8003e8c <putchar+0x28>)
 8003e66:	b513      	push	{r0, r1, r4, lr}
 8003e68:	681c      	ldr	r4, [r3, #0]
 8003e6a:	4601      	mov	r1, r0
 8003e6c:	b134      	cbz	r4, 8003e7c <putchar+0x18>
 8003e6e:	69a3      	ldr	r3, [r4, #24]
 8003e70:	b923      	cbnz	r3, 8003e7c <putchar+0x18>
 8003e72:	9001      	str	r0, [sp, #4]
 8003e74:	4620      	mov	r0, r4
 8003e76:	f000 fa5b 	bl	8004330 <__sinit>
 8003e7a:	9901      	ldr	r1, [sp, #4]
 8003e7c:	68a2      	ldr	r2, [r4, #8]
 8003e7e:	4620      	mov	r0, r4
 8003e80:	b002      	add	sp, #8
 8003e82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e86:	f000 beef 	b.w	8004c68 <_putc_r>
 8003e8a:	bf00      	nop
 8003e8c:	2000000c 	.word	0x2000000c

08003e90 <_puts_r>:
 8003e90:	b570      	push	{r4, r5, r6, lr}
 8003e92:	460e      	mov	r6, r1
 8003e94:	4605      	mov	r5, r0
 8003e96:	b118      	cbz	r0, 8003ea0 <_puts_r+0x10>
 8003e98:	6983      	ldr	r3, [r0, #24]
 8003e9a:	b90b      	cbnz	r3, 8003ea0 <_puts_r+0x10>
 8003e9c:	f000 fa48 	bl	8004330 <__sinit>
 8003ea0:	69ab      	ldr	r3, [r5, #24]
 8003ea2:	68ac      	ldr	r4, [r5, #8]
 8003ea4:	b913      	cbnz	r3, 8003eac <_puts_r+0x1c>
 8003ea6:	4628      	mov	r0, r5
 8003ea8:	f000 fa42 	bl	8004330 <__sinit>
 8003eac:	4b2c      	ldr	r3, [pc, #176]	; (8003f60 <_puts_r+0xd0>)
 8003eae:	429c      	cmp	r4, r3
 8003eb0:	d120      	bne.n	8003ef4 <_puts_r+0x64>
 8003eb2:	686c      	ldr	r4, [r5, #4]
 8003eb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003eb6:	07db      	lsls	r3, r3, #31
 8003eb8:	d405      	bmi.n	8003ec6 <_puts_r+0x36>
 8003eba:	89a3      	ldrh	r3, [r4, #12]
 8003ebc:	0598      	lsls	r0, r3, #22
 8003ebe:	d402      	bmi.n	8003ec6 <_puts_r+0x36>
 8003ec0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ec2:	f000 fad3 	bl	800446c <__retarget_lock_acquire_recursive>
 8003ec6:	89a3      	ldrh	r3, [r4, #12]
 8003ec8:	0719      	lsls	r1, r3, #28
 8003eca:	d51d      	bpl.n	8003f08 <_puts_r+0x78>
 8003ecc:	6923      	ldr	r3, [r4, #16]
 8003ece:	b1db      	cbz	r3, 8003f08 <_puts_r+0x78>
 8003ed0:	3e01      	subs	r6, #1
 8003ed2:	68a3      	ldr	r3, [r4, #8]
 8003ed4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	60a3      	str	r3, [r4, #8]
 8003edc:	bb39      	cbnz	r1, 8003f2e <_puts_r+0x9e>
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	da38      	bge.n	8003f54 <_puts_r+0xc4>
 8003ee2:	4622      	mov	r2, r4
 8003ee4:	210a      	movs	r1, #10
 8003ee6:	4628      	mov	r0, r5
 8003ee8:	f000 f848 	bl	8003f7c <__swbuf_r>
 8003eec:	3001      	adds	r0, #1
 8003eee:	d011      	beq.n	8003f14 <_puts_r+0x84>
 8003ef0:	250a      	movs	r5, #10
 8003ef2:	e011      	b.n	8003f18 <_puts_r+0x88>
 8003ef4:	4b1b      	ldr	r3, [pc, #108]	; (8003f64 <_puts_r+0xd4>)
 8003ef6:	429c      	cmp	r4, r3
 8003ef8:	d101      	bne.n	8003efe <_puts_r+0x6e>
 8003efa:	68ac      	ldr	r4, [r5, #8]
 8003efc:	e7da      	b.n	8003eb4 <_puts_r+0x24>
 8003efe:	4b1a      	ldr	r3, [pc, #104]	; (8003f68 <_puts_r+0xd8>)
 8003f00:	429c      	cmp	r4, r3
 8003f02:	bf08      	it	eq
 8003f04:	68ec      	ldreq	r4, [r5, #12]
 8003f06:	e7d5      	b.n	8003eb4 <_puts_r+0x24>
 8003f08:	4621      	mov	r1, r4
 8003f0a:	4628      	mov	r0, r5
 8003f0c:	f000 f888 	bl	8004020 <__swsetup_r>
 8003f10:	2800      	cmp	r0, #0
 8003f12:	d0dd      	beq.n	8003ed0 <_puts_r+0x40>
 8003f14:	f04f 35ff 	mov.w	r5, #4294967295
 8003f18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f1a:	07da      	lsls	r2, r3, #31
 8003f1c:	d405      	bmi.n	8003f2a <_puts_r+0x9a>
 8003f1e:	89a3      	ldrh	r3, [r4, #12]
 8003f20:	059b      	lsls	r3, r3, #22
 8003f22:	d402      	bmi.n	8003f2a <_puts_r+0x9a>
 8003f24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f26:	f000 faa2 	bl	800446e <__retarget_lock_release_recursive>
 8003f2a:	4628      	mov	r0, r5
 8003f2c:	bd70      	pop	{r4, r5, r6, pc}
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	da04      	bge.n	8003f3c <_puts_r+0xac>
 8003f32:	69a2      	ldr	r2, [r4, #24]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	dc06      	bgt.n	8003f46 <_puts_r+0xb6>
 8003f38:	290a      	cmp	r1, #10
 8003f3a:	d004      	beq.n	8003f46 <_puts_r+0xb6>
 8003f3c:	6823      	ldr	r3, [r4, #0]
 8003f3e:	1c5a      	adds	r2, r3, #1
 8003f40:	6022      	str	r2, [r4, #0]
 8003f42:	7019      	strb	r1, [r3, #0]
 8003f44:	e7c5      	b.n	8003ed2 <_puts_r+0x42>
 8003f46:	4622      	mov	r2, r4
 8003f48:	4628      	mov	r0, r5
 8003f4a:	f000 f817 	bl	8003f7c <__swbuf_r>
 8003f4e:	3001      	adds	r0, #1
 8003f50:	d1bf      	bne.n	8003ed2 <_puts_r+0x42>
 8003f52:	e7df      	b.n	8003f14 <_puts_r+0x84>
 8003f54:	6823      	ldr	r3, [r4, #0]
 8003f56:	250a      	movs	r5, #10
 8003f58:	1c5a      	adds	r2, r3, #1
 8003f5a:	6022      	str	r2, [r4, #0]
 8003f5c:	701d      	strb	r5, [r3, #0]
 8003f5e:	e7db      	b.n	8003f18 <_puts_r+0x88>
 8003f60:	0800570c 	.word	0x0800570c
 8003f64:	0800572c 	.word	0x0800572c
 8003f68:	080056ec 	.word	0x080056ec

08003f6c <puts>:
 8003f6c:	4b02      	ldr	r3, [pc, #8]	; (8003f78 <puts+0xc>)
 8003f6e:	4601      	mov	r1, r0
 8003f70:	6818      	ldr	r0, [r3, #0]
 8003f72:	f7ff bf8d 	b.w	8003e90 <_puts_r>
 8003f76:	bf00      	nop
 8003f78:	2000000c 	.word	0x2000000c

08003f7c <__swbuf_r>:
 8003f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f7e:	460e      	mov	r6, r1
 8003f80:	4614      	mov	r4, r2
 8003f82:	4605      	mov	r5, r0
 8003f84:	b118      	cbz	r0, 8003f8e <__swbuf_r+0x12>
 8003f86:	6983      	ldr	r3, [r0, #24]
 8003f88:	b90b      	cbnz	r3, 8003f8e <__swbuf_r+0x12>
 8003f8a:	f000 f9d1 	bl	8004330 <__sinit>
 8003f8e:	4b21      	ldr	r3, [pc, #132]	; (8004014 <__swbuf_r+0x98>)
 8003f90:	429c      	cmp	r4, r3
 8003f92:	d12b      	bne.n	8003fec <__swbuf_r+0x70>
 8003f94:	686c      	ldr	r4, [r5, #4]
 8003f96:	69a3      	ldr	r3, [r4, #24]
 8003f98:	60a3      	str	r3, [r4, #8]
 8003f9a:	89a3      	ldrh	r3, [r4, #12]
 8003f9c:	071a      	lsls	r2, r3, #28
 8003f9e:	d52f      	bpl.n	8004000 <__swbuf_r+0x84>
 8003fa0:	6923      	ldr	r3, [r4, #16]
 8003fa2:	b36b      	cbz	r3, 8004000 <__swbuf_r+0x84>
 8003fa4:	6923      	ldr	r3, [r4, #16]
 8003fa6:	6820      	ldr	r0, [r4, #0]
 8003fa8:	1ac0      	subs	r0, r0, r3
 8003faa:	6963      	ldr	r3, [r4, #20]
 8003fac:	b2f6      	uxtb	r6, r6
 8003fae:	4283      	cmp	r3, r0
 8003fb0:	4637      	mov	r7, r6
 8003fb2:	dc04      	bgt.n	8003fbe <__swbuf_r+0x42>
 8003fb4:	4621      	mov	r1, r4
 8003fb6:	4628      	mov	r0, r5
 8003fb8:	f000 f926 	bl	8004208 <_fflush_r>
 8003fbc:	bb30      	cbnz	r0, 800400c <__swbuf_r+0x90>
 8003fbe:	68a3      	ldr	r3, [r4, #8]
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	60a3      	str	r3, [r4, #8]
 8003fc4:	6823      	ldr	r3, [r4, #0]
 8003fc6:	1c5a      	adds	r2, r3, #1
 8003fc8:	6022      	str	r2, [r4, #0]
 8003fca:	701e      	strb	r6, [r3, #0]
 8003fcc:	6963      	ldr	r3, [r4, #20]
 8003fce:	3001      	adds	r0, #1
 8003fd0:	4283      	cmp	r3, r0
 8003fd2:	d004      	beq.n	8003fde <__swbuf_r+0x62>
 8003fd4:	89a3      	ldrh	r3, [r4, #12]
 8003fd6:	07db      	lsls	r3, r3, #31
 8003fd8:	d506      	bpl.n	8003fe8 <__swbuf_r+0x6c>
 8003fda:	2e0a      	cmp	r6, #10
 8003fdc:	d104      	bne.n	8003fe8 <__swbuf_r+0x6c>
 8003fde:	4621      	mov	r1, r4
 8003fe0:	4628      	mov	r0, r5
 8003fe2:	f000 f911 	bl	8004208 <_fflush_r>
 8003fe6:	b988      	cbnz	r0, 800400c <__swbuf_r+0x90>
 8003fe8:	4638      	mov	r0, r7
 8003fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fec:	4b0a      	ldr	r3, [pc, #40]	; (8004018 <__swbuf_r+0x9c>)
 8003fee:	429c      	cmp	r4, r3
 8003ff0:	d101      	bne.n	8003ff6 <__swbuf_r+0x7a>
 8003ff2:	68ac      	ldr	r4, [r5, #8]
 8003ff4:	e7cf      	b.n	8003f96 <__swbuf_r+0x1a>
 8003ff6:	4b09      	ldr	r3, [pc, #36]	; (800401c <__swbuf_r+0xa0>)
 8003ff8:	429c      	cmp	r4, r3
 8003ffa:	bf08      	it	eq
 8003ffc:	68ec      	ldreq	r4, [r5, #12]
 8003ffe:	e7ca      	b.n	8003f96 <__swbuf_r+0x1a>
 8004000:	4621      	mov	r1, r4
 8004002:	4628      	mov	r0, r5
 8004004:	f000 f80c 	bl	8004020 <__swsetup_r>
 8004008:	2800      	cmp	r0, #0
 800400a:	d0cb      	beq.n	8003fa4 <__swbuf_r+0x28>
 800400c:	f04f 37ff 	mov.w	r7, #4294967295
 8004010:	e7ea      	b.n	8003fe8 <__swbuf_r+0x6c>
 8004012:	bf00      	nop
 8004014:	0800570c 	.word	0x0800570c
 8004018:	0800572c 	.word	0x0800572c
 800401c:	080056ec 	.word	0x080056ec

08004020 <__swsetup_r>:
 8004020:	4b32      	ldr	r3, [pc, #200]	; (80040ec <__swsetup_r+0xcc>)
 8004022:	b570      	push	{r4, r5, r6, lr}
 8004024:	681d      	ldr	r5, [r3, #0]
 8004026:	4606      	mov	r6, r0
 8004028:	460c      	mov	r4, r1
 800402a:	b125      	cbz	r5, 8004036 <__swsetup_r+0x16>
 800402c:	69ab      	ldr	r3, [r5, #24]
 800402e:	b913      	cbnz	r3, 8004036 <__swsetup_r+0x16>
 8004030:	4628      	mov	r0, r5
 8004032:	f000 f97d 	bl	8004330 <__sinit>
 8004036:	4b2e      	ldr	r3, [pc, #184]	; (80040f0 <__swsetup_r+0xd0>)
 8004038:	429c      	cmp	r4, r3
 800403a:	d10f      	bne.n	800405c <__swsetup_r+0x3c>
 800403c:	686c      	ldr	r4, [r5, #4]
 800403e:	89a3      	ldrh	r3, [r4, #12]
 8004040:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004044:	0719      	lsls	r1, r3, #28
 8004046:	d42c      	bmi.n	80040a2 <__swsetup_r+0x82>
 8004048:	06dd      	lsls	r5, r3, #27
 800404a:	d411      	bmi.n	8004070 <__swsetup_r+0x50>
 800404c:	2309      	movs	r3, #9
 800404e:	6033      	str	r3, [r6, #0]
 8004050:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004054:	81a3      	strh	r3, [r4, #12]
 8004056:	f04f 30ff 	mov.w	r0, #4294967295
 800405a:	e03e      	b.n	80040da <__swsetup_r+0xba>
 800405c:	4b25      	ldr	r3, [pc, #148]	; (80040f4 <__swsetup_r+0xd4>)
 800405e:	429c      	cmp	r4, r3
 8004060:	d101      	bne.n	8004066 <__swsetup_r+0x46>
 8004062:	68ac      	ldr	r4, [r5, #8]
 8004064:	e7eb      	b.n	800403e <__swsetup_r+0x1e>
 8004066:	4b24      	ldr	r3, [pc, #144]	; (80040f8 <__swsetup_r+0xd8>)
 8004068:	429c      	cmp	r4, r3
 800406a:	bf08      	it	eq
 800406c:	68ec      	ldreq	r4, [r5, #12]
 800406e:	e7e6      	b.n	800403e <__swsetup_r+0x1e>
 8004070:	0758      	lsls	r0, r3, #29
 8004072:	d512      	bpl.n	800409a <__swsetup_r+0x7a>
 8004074:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004076:	b141      	cbz	r1, 800408a <__swsetup_r+0x6a>
 8004078:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800407c:	4299      	cmp	r1, r3
 800407e:	d002      	beq.n	8004086 <__swsetup_r+0x66>
 8004080:	4630      	mov	r0, r6
 8004082:	f000 fa59 	bl	8004538 <_free_r>
 8004086:	2300      	movs	r3, #0
 8004088:	6363      	str	r3, [r4, #52]	; 0x34
 800408a:	89a3      	ldrh	r3, [r4, #12]
 800408c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004090:	81a3      	strh	r3, [r4, #12]
 8004092:	2300      	movs	r3, #0
 8004094:	6063      	str	r3, [r4, #4]
 8004096:	6923      	ldr	r3, [r4, #16]
 8004098:	6023      	str	r3, [r4, #0]
 800409a:	89a3      	ldrh	r3, [r4, #12]
 800409c:	f043 0308 	orr.w	r3, r3, #8
 80040a0:	81a3      	strh	r3, [r4, #12]
 80040a2:	6923      	ldr	r3, [r4, #16]
 80040a4:	b94b      	cbnz	r3, 80040ba <__swsetup_r+0x9a>
 80040a6:	89a3      	ldrh	r3, [r4, #12]
 80040a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80040ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040b0:	d003      	beq.n	80040ba <__swsetup_r+0x9a>
 80040b2:	4621      	mov	r1, r4
 80040b4:	4630      	mov	r0, r6
 80040b6:	f000 f9ff 	bl	80044b8 <__smakebuf_r>
 80040ba:	89a0      	ldrh	r0, [r4, #12]
 80040bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80040c0:	f010 0301 	ands.w	r3, r0, #1
 80040c4:	d00a      	beq.n	80040dc <__swsetup_r+0xbc>
 80040c6:	2300      	movs	r3, #0
 80040c8:	60a3      	str	r3, [r4, #8]
 80040ca:	6963      	ldr	r3, [r4, #20]
 80040cc:	425b      	negs	r3, r3
 80040ce:	61a3      	str	r3, [r4, #24]
 80040d0:	6923      	ldr	r3, [r4, #16]
 80040d2:	b943      	cbnz	r3, 80040e6 <__swsetup_r+0xc6>
 80040d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80040d8:	d1ba      	bne.n	8004050 <__swsetup_r+0x30>
 80040da:	bd70      	pop	{r4, r5, r6, pc}
 80040dc:	0781      	lsls	r1, r0, #30
 80040de:	bf58      	it	pl
 80040e0:	6963      	ldrpl	r3, [r4, #20]
 80040e2:	60a3      	str	r3, [r4, #8]
 80040e4:	e7f4      	b.n	80040d0 <__swsetup_r+0xb0>
 80040e6:	2000      	movs	r0, #0
 80040e8:	e7f7      	b.n	80040da <__swsetup_r+0xba>
 80040ea:	bf00      	nop
 80040ec:	2000000c 	.word	0x2000000c
 80040f0:	0800570c 	.word	0x0800570c
 80040f4:	0800572c 	.word	0x0800572c
 80040f8:	080056ec 	.word	0x080056ec

080040fc <__sflush_r>:
 80040fc:	898a      	ldrh	r2, [r1, #12]
 80040fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004102:	4605      	mov	r5, r0
 8004104:	0710      	lsls	r0, r2, #28
 8004106:	460c      	mov	r4, r1
 8004108:	d458      	bmi.n	80041bc <__sflush_r+0xc0>
 800410a:	684b      	ldr	r3, [r1, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	dc05      	bgt.n	800411c <__sflush_r+0x20>
 8004110:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004112:	2b00      	cmp	r3, #0
 8004114:	dc02      	bgt.n	800411c <__sflush_r+0x20>
 8004116:	2000      	movs	r0, #0
 8004118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800411c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800411e:	2e00      	cmp	r6, #0
 8004120:	d0f9      	beq.n	8004116 <__sflush_r+0x1a>
 8004122:	2300      	movs	r3, #0
 8004124:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004128:	682f      	ldr	r7, [r5, #0]
 800412a:	602b      	str	r3, [r5, #0]
 800412c:	d032      	beq.n	8004194 <__sflush_r+0x98>
 800412e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004130:	89a3      	ldrh	r3, [r4, #12]
 8004132:	075a      	lsls	r2, r3, #29
 8004134:	d505      	bpl.n	8004142 <__sflush_r+0x46>
 8004136:	6863      	ldr	r3, [r4, #4]
 8004138:	1ac0      	subs	r0, r0, r3
 800413a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800413c:	b10b      	cbz	r3, 8004142 <__sflush_r+0x46>
 800413e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004140:	1ac0      	subs	r0, r0, r3
 8004142:	2300      	movs	r3, #0
 8004144:	4602      	mov	r2, r0
 8004146:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004148:	6a21      	ldr	r1, [r4, #32]
 800414a:	4628      	mov	r0, r5
 800414c:	47b0      	blx	r6
 800414e:	1c43      	adds	r3, r0, #1
 8004150:	89a3      	ldrh	r3, [r4, #12]
 8004152:	d106      	bne.n	8004162 <__sflush_r+0x66>
 8004154:	6829      	ldr	r1, [r5, #0]
 8004156:	291d      	cmp	r1, #29
 8004158:	d82c      	bhi.n	80041b4 <__sflush_r+0xb8>
 800415a:	4a2a      	ldr	r2, [pc, #168]	; (8004204 <__sflush_r+0x108>)
 800415c:	40ca      	lsrs	r2, r1
 800415e:	07d6      	lsls	r6, r2, #31
 8004160:	d528      	bpl.n	80041b4 <__sflush_r+0xb8>
 8004162:	2200      	movs	r2, #0
 8004164:	6062      	str	r2, [r4, #4]
 8004166:	04d9      	lsls	r1, r3, #19
 8004168:	6922      	ldr	r2, [r4, #16]
 800416a:	6022      	str	r2, [r4, #0]
 800416c:	d504      	bpl.n	8004178 <__sflush_r+0x7c>
 800416e:	1c42      	adds	r2, r0, #1
 8004170:	d101      	bne.n	8004176 <__sflush_r+0x7a>
 8004172:	682b      	ldr	r3, [r5, #0]
 8004174:	b903      	cbnz	r3, 8004178 <__sflush_r+0x7c>
 8004176:	6560      	str	r0, [r4, #84]	; 0x54
 8004178:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800417a:	602f      	str	r7, [r5, #0]
 800417c:	2900      	cmp	r1, #0
 800417e:	d0ca      	beq.n	8004116 <__sflush_r+0x1a>
 8004180:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004184:	4299      	cmp	r1, r3
 8004186:	d002      	beq.n	800418e <__sflush_r+0x92>
 8004188:	4628      	mov	r0, r5
 800418a:	f000 f9d5 	bl	8004538 <_free_r>
 800418e:	2000      	movs	r0, #0
 8004190:	6360      	str	r0, [r4, #52]	; 0x34
 8004192:	e7c1      	b.n	8004118 <__sflush_r+0x1c>
 8004194:	6a21      	ldr	r1, [r4, #32]
 8004196:	2301      	movs	r3, #1
 8004198:	4628      	mov	r0, r5
 800419a:	47b0      	blx	r6
 800419c:	1c41      	adds	r1, r0, #1
 800419e:	d1c7      	bne.n	8004130 <__sflush_r+0x34>
 80041a0:	682b      	ldr	r3, [r5, #0]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d0c4      	beq.n	8004130 <__sflush_r+0x34>
 80041a6:	2b1d      	cmp	r3, #29
 80041a8:	d001      	beq.n	80041ae <__sflush_r+0xb2>
 80041aa:	2b16      	cmp	r3, #22
 80041ac:	d101      	bne.n	80041b2 <__sflush_r+0xb6>
 80041ae:	602f      	str	r7, [r5, #0]
 80041b0:	e7b1      	b.n	8004116 <__sflush_r+0x1a>
 80041b2:	89a3      	ldrh	r3, [r4, #12]
 80041b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041b8:	81a3      	strh	r3, [r4, #12]
 80041ba:	e7ad      	b.n	8004118 <__sflush_r+0x1c>
 80041bc:	690f      	ldr	r7, [r1, #16]
 80041be:	2f00      	cmp	r7, #0
 80041c0:	d0a9      	beq.n	8004116 <__sflush_r+0x1a>
 80041c2:	0793      	lsls	r3, r2, #30
 80041c4:	680e      	ldr	r6, [r1, #0]
 80041c6:	bf08      	it	eq
 80041c8:	694b      	ldreq	r3, [r1, #20]
 80041ca:	600f      	str	r7, [r1, #0]
 80041cc:	bf18      	it	ne
 80041ce:	2300      	movne	r3, #0
 80041d0:	eba6 0807 	sub.w	r8, r6, r7
 80041d4:	608b      	str	r3, [r1, #8]
 80041d6:	f1b8 0f00 	cmp.w	r8, #0
 80041da:	dd9c      	ble.n	8004116 <__sflush_r+0x1a>
 80041dc:	6a21      	ldr	r1, [r4, #32]
 80041de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80041e0:	4643      	mov	r3, r8
 80041e2:	463a      	mov	r2, r7
 80041e4:	4628      	mov	r0, r5
 80041e6:	47b0      	blx	r6
 80041e8:	2800      	cmp	r0, #0
 80041ea:	dc06      	bgt.n	80041fa <__sflush_r+0xfe>
 80041ec:	89a3      	ldrh	r3, [r4, #12]
 80041ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041f2:	81a3      	strh	r3, [r4, #12]
 80041f4:	f04f 30ff 	mov.w	r0, #4294967295
 80041f8:	e78e      	b.n	8004118 <__sflush_r+0x1c>
 80041fa:	4407      	add	r7, r0
 80041fc:	eba8 0800 	sub.w	r8, r8, r0
 8004200:	e7e9      	b.n	80041d6 <__sflush_r+0xda>
 8004202:	bf00      	nop
 8004204:	20400001 	.word	0x20400001

08004208 <_fflush_r>:
 8004208:	b538      	push	{r3, r4, r5, lr}
 800420a:	690b      	ldr	r3, [r1, #16]
 800420c:	4605      	mov	r5, r0
 800420e:	460c      	mov	r4, r1
 8004210:	b913      	cbnz	r3, 8004218 <_fflush_r+0x10>
 8004212:	2500      	movs	r5, #0
 8004214:	4628      	mov	r0, r5
 8004216:	bd38      	pop	{r3, r4, r5, pc}
 8004218:	b118      	cbz	r0, 8004222 <_fflush_r+0x1a>
 800421a:	6983      	ldr	r3, [r0, #24]
 800421c:	b90b      	cbnz	r3, 8004222 <_fflush_r+0x1a>
 800421e:	f000 f887 	bl	8004330 <__sinit>
 8004222:	4b14      	ldr	r3, [pc, #80]	; (8004274 <_fflush_r+0x6c>)
 8004224:	429c      	cmp	r4, r3
 8004226:	d11b      	bne.n	8004260 <_fflush_r+0x58>
 8004228:	686c      	ldr	r4, [r5, #4]
 800422a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d0ef      	beq.n	8004212 <_fflush_r+0xa>
 8004232:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004234:	07d0      	lsls	r0, r2, #31
 8004236:	d404      	bmi.n	8004242 <_fflush_r+0x3a>
 8004238:	0599      	lsls	r1, r3, #22
 800423a:	d402      	bmi.n	8004242 <_fflush_r+0x3a>
 800423c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800423e:	f000 f915 	bl	800446c <__retarget_lock_acquire_recursive>
 8004242:	4628      	mov	r0, r5
 8004244:	4621      	mov	r1, r4
 8004246:	f7ff ff59 	bl	80040fc <__sflush_r>
 800424a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800424c:	07da      	lsls	r2, r3, #31
 800424e:	4605      	mov	r5, r0
 8004250:	d4e0      	bmi.n	8004214 <_fflush_r+0xc>
 8004252:	89a3      	ldrh	r3, [r4, #12]
 8004254:	059b      	lsls	r3, r3, #22
 8004256:	d4dd      	bmi.n	8004214 <_fflush_r+0xc>
 8004258:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800425a:	f000 f908 	bl	800446e <__retarget_lock_release_recursive>
 800425e:	e7d9      	b.n	8004214 <_fflush_r+0xc>
 8004260:	4b05      	ldr	r3, [pc, #20]	; (8004278 <_fflush_r+0x70>)
 8004262:	429c      	cmp	r4, r3
 8004264:	d101      	bne.n	800426a <_fflush_r+0x62>
 8004266:	68ac      	ldr	r4, [r5, #8]
 8004268:	e7df      	b.n	800422a <_fflush_r+0x22>
 800426a:	4b04      	ldr	r3, [pc, #16]	; (800427c <_fflush_r+0x74>)
 800426c:	429c      	cmp	r4, r3
 800426e:	bf08      	it	eq
 8004270:	68ec      	ldreq	r4, [r5, #12]
 8004272:	e7da      	b.n	800422a <_fflush_r+0x22>
 8004274:	0800570c 	.word	0x0800570c
 8004278:	0800572c 	.word	0x0800572c
 800427c:	080056ec 	.word	0x080056ec

08004280 <std>:
 8004280:	2300      	movs	r3, #0
 8004282:	b510      	push	{r4, lr}
 8004284:	4604      	mov	r4, r0
 8004286:	e9c0 3300 	strd	r3, r3, [r0]
 800428a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800428e:	6083      	str	r3, [r0, #8]
 8004290:	8181      	strh	r1, [r0, #12]
 8004292:	6643      	str	r3, [r0, #100]	; 0x64
 8004294:	81c2      	strh	r2, [r0, #14]
 8004296:	6183      	str	r3, [r0, #24]
 8004298:	4619      	mov	r1, r3
 800429a:	2208      	movs	r2, #8
 800429c:	305c      	adds	r0, #92	; 0x5c
 800429e:	f7ff fdc1 	bl	8003e24 <memset>
 80042a2:	4b05      	ldr	r3, [pc, #20]	; (80042b8 <std+0x38>)
 80042a4:	6263      	str	r3, [r4, #36]	; 0x24
 80042a6:	4b05      	ldr	r3, [pc, #20]	; (80042bc <std+0x3c>)
 80042a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80042aa:	4b05      	ldr	r3, [pc, #20]	; (80042c0 <std+0x40>)
 80042ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80042ae:	4b05      	ldr	r3, [pc, #20]	; (80042c4 <std+0x44>)
 80042b0:	6224      	str	r4, [r4, #32]
 80042b2:	6323      	str	r3, [r4, #48]	; 0x30
 80042b4:	bd10      	pop	{r4, pc}
 80042b6:	bf00      	nop
 80042b8:	08004d19 	.word	0x08004d19
 80042bc:	08004d3b 	.word	0x08004d3b
 80042c0:	08004d73 	.word	0x08004d73
 80042c4:	08004d97 	.word	0x08004d97

080042c8 <_cleanup_r>:
 80042c8:	4901      	ldr	r1, [pc, #4]	; (80042d0 <_cleanup_r+0x8>)
 80042ca:	f000 b8af 	b.w	800442c <_fwalk_reent>
 80042ce:	bf00      	nop
 80042d0:	08004209 	.word	0x08004209

080042d4 <__sfmoreglue>:
 80042d4:	b570      	push	{r4, r5, r6, lr}
 80042d6:	1e4a      	subs	r2, r1, #1
 80042d8:	2568      	movs	r5, #104	; 0x68
 80042da:	4355      	muls	r5, r2
 80042dc:	460e      	mov	r6, r1
 80042de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80042e2:	f000 f979 	bl	80045d8 <_malloc_r>
 80042e6:	4604      	mov	r4, r0
 80042e8:	b140      	cbz	r0, 80042fc <__sfmoreglue+0x28>
 80042ea:	2100      	movs	r1, #0
 80042ec:	e9c0 1600 	strd	r1, r6, [r0]
 80042f0:	300c      	adds	r0, #12
 80042f2:	60a0      	str	r0, [r4, #8]
 80042f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80042f8:	f7ff fd94 	bl	8003e24 <memset>
 80042fc:	4620      	mov	r0, r4
 80042fe:	bd70      	pop	{r4, r5, r6, pc}

08004300 <__sfp_lock_acquire>:
 8004300:	4801      	ldr	r0, [pc, #4]	; (8004308 <__sfp_lock_acquire+0x8>)
 8004302:	f000 b8b3 	b.w	800446c <__retarget_lock_acquire_recursive>
 8004306:	bf00      	nop
 8004308:	2000099c 	.word	0x2000099c

0800430c <__sfp_lock_release>:
 800430c:	4801      	ldr	r0, [pc, #4]	; (8004314 <__sfp_lock_release+0x8>)
 800430e:	f000 b8ae 	b.w	800446e <__retarget_lock_release_recursive>
 8004312:	bf00      	nop
 8004314:	2000099c 	.word	0x2000099c

08004318 <__sinit_lock_acquire>:
 8004318:	4801      	ldr	r0, [pc, #4]	; (8004320 <__sinit_lock_acquire+0x8>)
 800431a:	f000 b8a7 	b.w	800446c <__retarget_lock_acquire_recursive>
 800431e:	bf00      	nop
 8004320:	20000997 	.word	0x20000997

08004324 <__sinit_lock_release>:
 8004324:	4801      	ldr	r0, [pc, #4]	; (800432c <__sinit_lock_release+0x8>)
 8004326:	f000 b8a2 	b.w	800446e <__retarget_lock_release_recursive>
 800432a:	bf00      	nop
 800432c:	20000997 	.word	0x20000997

08004330 <__sinit>:
 8004330:	b510      	push	{r4, lr}
 8004332:	4604      	mov	r4, r0
 8004334:	f7ff fff0 	bl	8004318 <__sinit_lock_acquire>
 8004338:	69a3      	ldr	r3, [r4, #24]
 800433a:	b11b      	cbz	r3, 8004344 <__sinit+0x14>
 800433c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004340:	f7ff bff0 	b.w	8004324 <__sinit_lock_release>
 8004344:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004348:	6523      	str	r3, [r4, #80]	; 0x50
 800434a:	4b13      	ldr	r3, [pc, #76]	; (8004398 <__sinit+0x68>)
 800434c:	4a13      	ldr	r2, [pc, #76]	; (800439c <__sinit+0x6c>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	62a2      	str	r2, [r4, #40]	; 0x28
 8004352:	42a3      	cmp	r3, r4
 8004354:	bf04      	itt	eq
 8004356:	2301      	moveq	r3, #1
 8004358:	61a3      	streq	r3, [r4, #24]
 800435a:	4620      	mov	r0, r4
 800435c:	f000 f820 	bl	80043a0 <__sfp>
 8004360:	6060      	str	r0, [r4, #4]
 8004362:	4620      	mov	r0, r4
 8004364:	f000 f81c 	bl	80043a0 <__sfp>
 8004368:	60a0      	str	r0, [r4, #8]
 800436a:	4620      	mov	r0, r4
 800436c:	f000 f818 	bl	80043a0 <__sfp>
 8004370:	2200      	movs	r2, #0
 8004372:	60e0      	str	r0, [r4, #12]
 8004374:	2104      	movs	r1, #4
 8004376:	6860      	ldr	r0, [r4, #4]
 8004378:	f7ff ff82 	bl	8004280 <std>
 800437c:	68a0      	ldr	r0, [r4, #8]
 800437e:	2201      	movs	r2, #1
 8004380:	2109      	movs	r1, #9
 8004382:	f7ff ff7d 	bl	8004280 <std>
 8004386:	68e0      	ldr	r0, [r4, #12]
 8004388:	2202      	movs	r2, #2
 800438a:	2112      	movs	r1, #18
 800438c:	f7ff ff78 	bl	8004280 <std>
 8004390:	2301      	movs	r3, #1
 8004392:	61a3      	str	r3, [r4, #24]
 8004394:	e7d2      	b.n	800433c <__sinit+0xc>
 8004396:	bf00      	nop
 8004398:	080056e8 	.word	0x080056e8
 800439c:	080042c9 	.word	0x080042c9

080043a0 <__sfp>:
 80043a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043a2:	4607      	mov	r7, r0
 80043a4:	f7ff ffac 	bl	8004300 <__sfp_lock_acquire>
 80043a8:	4b1e      	ldr	r3, [pc, #120]	; (8004424 <__sfp+0x84>)
 80043aa:	681e      	ldr	r6, [r3, #0]
 80043ac:	69b3      	ldr	r3, [r6, #24]
 80043ae:	b913      	cbnz	r3, 80043b6 <__sfp+0x16>
 80043b0:	4630      	mov	r0, r6
 80043b2:	f7ff ffbd 	bl	8004330 <__sinit>
 80043b6:	3648      	adds	r6, #72	; 0x48
 80043b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80043bc:	3b01      	subs	r3, #1
 80043be:	d503      	bpl.n	80043c8 <__sfp+0x28>
 80043c0:	6833      	ldr	r3, [r6, #0]
 80043c2:	b30b      	cbz	r3, 8004408 <__sfp+0x68>
 80043c4:	6836      	ldr	r6, [r6, #0]
 80043c6:	e7f7      	b.n	80043b8 <__sfp+0x18>
 80043c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80043cc:	b9d5      	cbnz	r5, 8004404 <__sfp+0x64>
 80043ce:	4b16      	ldr	r3, [pc, #88]	; (8004428 <__sfp+0x88>)
 80043d0:	60e3      	str	r3, [r4, #12]
 80043d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80043d6:	6665      	str	r5, [r4, #100]	; 0x64
 80043d8:	f000 f847 	bl	800446a <__retarget_lock_init_recursive>
 80043dc:	f7ff ff96 	bl	800430c <__sfp_lock_release>
 80043e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80043e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80043e8:	6025      	str	r5, [r4, #0]
 80043ea:	61a5      	str	r5, [r4, #24]
 80043ec:	2208      	movs	r2, #8
 80043ee:	4629      	mov	r1, r5
 80043f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80043f4:	f7ff fd16 	bl	8003e24 <memset>
 80043f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80043fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004400:	4620      	mov	r0, r4
 8004402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004404:	3468      	adds	r4, #104	; 0x68
 8004406:	e7d9      	b.n	80043bc <__sfp+0x1c>
 8004408:	2104      	movs	r1, #4
 800440a:	4638      	mov	r0, r7
 800440c:	f7ff ff62 	bl	80042d4 <__sfmoreglue>
 8004410:	4604      	mov	r4, r0
 8004412:	6030      	str	r0, [r6, #0]
 8004414:	2800      	cmp	r0, #0
 8004416:	d1d5      	bne.n	80043c4 <__sfp+0x24>
 8004418:	f7ff ff78 	bl	800430c <__sfp_lock_release>
 800441c:	230c      	movs	r3, #12
 800441e:	603b      	str	r3, [r7, #0]
 8004420:	e7ee      	b.n	8004400 <__sfp+0x60>
 8004422:	bf00      	nop
 8004424:	080056e8 	.word	0x080056e8
 8004428:	ffff0001 	.word	0xffff0001

0800442c <_fwalk_reent>:
 800442c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004430:	4606      	mov	r6, r0
 8004432:	4688      	mov	r8, r1
 8004434:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004438:	2700      	movs	r7, #0
 800443a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800443e:	f1b9 0901 	subs.w	r9, r9, #1
 8004442:	d505      	bpl.n	8004450 <_fwalk_reent+0x24>
 8004444:	6824      	ldr	r4, [r4, #0]
 8004446:	2c00      	cmp	r4, #0
 8004448:	d1f7      	bne.n	800443a <_fwalk_reent+0xe>
 800444a:	4638      	mov	r0, r7
 800444c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004450:	89ab      	ldrh	r3, [r5, #12]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d907      	bls.n	8004466 <_fwalk_reent+0x3a>
 8004456:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800445a:	3301      	adds	r3, #1
 800445c:	d003      	beq.n	8004466 <_fwalk_reent+0x3a>
 800445e:	4629      	mov	r1, r5
 8004460:	4630      	mov	r0, r6
 8004462:	47c0      	blx	r8
 8004464:	4307      	orrs	r7, r0
 8004466:	3568      	adds	r5, #104	; 0x68
 8004468:	e7e9      	b.n	800443e <_fwalk_reent+0x12>

0800446a <__retarget_lock_init_recursive>:
 800446a:	4770      	bx	lr

0800446c <__retarget_lock_acquire_recursive>:
 800446c:	4770      	bx	lr

0800446e <__retarget_lock_release_recursive>:
 800446e:	4770      	bx	lr

08004470 <__swhatbuf_r>:
 8004470:	b570      	push	{r4, r5, r6, lr}
 8004472:	460e      	mov	r6, r1
 8004474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004478:	2900      	cmp	r1, #0
 800447a:	b096      	sub	sp, #88	; 0x58
 800447c:	4614      	mov	r4, r2
 800447e:	461d      	mov	r5, r3
 8004480:	da07      	bge.n	8004492 <__swhatbuf_r+0x22>
 8004482:	2300      	movs	r3, #0
 8004484:	602b      	str	r3, [r5, #0]
 8004486:	89b3      	ldrh	r3, [r6, #12]
 8004488:	061a      	lsls	r2, r3, #24
 800448a:	d410      	bmi.n	80044ae <__swhatbuf_r+0x3e>
 800448c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004490:	e00e      	b.n	80044b0 <__swhatbuf_r+0x40>
 8004492:	466a      	mov	r2, sp
 8004494:	f000 fca6 	bl	8004de4 <_fstat_r>
 8004498:	2800      	cmp	r0, #0
 800449a:	dbf2      	blt.n	8004482 <__swhatbuf_r+0x12>
 800449c:	9a01      	ldr	r2, [sp, #4]
 800449e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80044a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80044a6:	425a      	negs	r2, r3
 80044a8:	415a      	adcs	r2, r3
 80044aa:	602a      	str	r2, [r5, #0]
 80044ac:	e7ee      	b.n	800448c <__swhatbuf_r+0x1c>
 80044ae:	2340      	movs	r3, #64	; 0x40
 80044b0:	2000      	movs	r0, #0
 80044b2:	6023      	str	r3, [r4, #0]
 80044b4:	b016      	add	sp, #88	; 0x58
 80044b6:	bd70      	pop	{r4, r5, r6, pc}

080044b8 <__smakebuf_r>:
 80044b8:	898b      	ldrh	r3, [r1, #12]
 80044ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80044bc:	079d      	lsls	r5, r3, #30
 80044be:	4606      	mov	r6, r0
 80044c0:	460c      	mov	r4, r1
 80044c2:	d507      	bpl.n	80044d4 <__smakebuf_r+0x1c>
 80044c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80044c8:	6023      	str	r3, [r4, #0]
 80044ca:	6123      	str	r3, [r4, #16]
 80044cc:	2301      	movs	r3, #1
 80044ce:	6163      	str	r3, [r4, #20]
 80044d0:	b002      	add	sp, #8
 80044d2:	bd70      	pop	{r4, r5, r6, pc}
 80044d4:	ab01      	add	r3, sp, #4
 80044d6:	466a      	mov	r2, sp
 80044d8:	f7ff ffca 	bl	8004470 <__swhatbuf_r>
 80044dc:	9900      	ldr	r1, [sp, #0]
 80044de:	4605      	mov	r5, r0
 80044e0:	4630      	mov	r0, r6
 80044e2:	f000 f879 	bl	80045d8 <_malloc_r>
 80044e6:	b948      	cbnz	r0, 80044fc <__smakebuf_r+0x44>
 80044e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044ec:	059a      	lsls	r2, r3, #22
 80044ee:	d4ef      	bmi.n	80044d0 <__smakebuf_r+0x18>
 80044f0:	f023 0303 	bic.w	r3, r3, #3
 80044f4:	f043 0302 	orr.w	r3, r3, #2
 80044f8:	81a3      	strh	r3, [r4, #12]
 80044fa:	e7e3      	b.n	80044c4 <__smakebuf_r+0xc>
 80044fc:	4b0d      	ldr	r3, [pc, #52]	; (8004534 <__smakebuf_r+0x7c>)
 80044fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8004500:	89a3      	ldrh	r3, [r4, #12]
 8004502:	6020      	str	r0, [r4, #0]
 8004504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004508:	81a3      	strh	r3, [r4, #12]
 800450a:	9b00      	ldr	r3, [sp, #0]
 800450c:	6163      	str	r3, [r4, #20]
 800450e:	9b01      	ldr	r3, [sp, #4]
 8004510:	6120      	str	r0, [r4, #16]
 8004512:	b15b      	cbz	r3, 800452c <__smakebuf_r+0x74>
 8004514:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004518:	4630      	mov	r0, r6
 800451a:	f000 fc75 	bl	8004e08 <_isatty_r>
 800451e:	b128      	cbz	r0, 800452c <__smakebuf_r+0x74>
 8004520:	89a3      	ldrh	r3, [r4, #12]
 8004522:	f023 0303 	bic.w	r3, r3, #3
 8004526:	f043 0301 	orr.w	r3, r3, #1
 800452a:	81a3      	strh	r3, [r4, #12]
 800452c:	89a0      	ldrh	r0, [r4, #12]
 800452e:	4305      	orrs	r5, r0
 8004530:	81a5      	strh	r5, [r4, #12]
 8004532:	e7cd      	b.n	80044d0 <__smakebuf_r+0x18>
 8004534:	080042c9 	.word	0x080042c9

08004538 <_free_r>:
 8004538:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800453a:	2900      	cmp	r1, #0
 800453c:	d048      	beq.n	80045d0 <_free_r+0x98>
 800453e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004542:	9001      	str	r0, [sp, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	f1a1 0404 	sub.w	r4, r1, #4
 800454a:	bfb8      	it	lt
 800454c:	18e4      	addlt	r4, r4, r3
 800454e:	f000 fc7d 	bl	8004e4c <__malloc_lock>
 8004552:	4a20      	ldr	r2, [pc, #128]	; (80045d4 <_free_r+0x9c>)
 8004554:	9801      	ldr	r0, [sp, #4]
 8004556:	6813      	ldr	r3, [r2, #0]
 8004558:	4615      	mov	r5, r2
 800455a:	b933      	cbnz	r3, 800456a <_free_r+0x32>
 800455c:	6063      	str	r3, [r4, #4]
 800455e:	6014      	str	r4, [r2, #0]
 8004560:	b003      	add	sp, #12
 8004562:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004566:	f000 bc77 	b.w	8004e58 <__malloc_unlock>
 800456a:	42a3      	cmp	r3, r4
 800456c:	d90b      	bls.n	8004586 <_free_r+0x4e>
 800456e:	6821      	ldr	r1, [r4, #0]
 8004570:	1862      	adds	r2, r4, r1
 8004572:	4293      	cmp	r3, r2
 8004574:	bf04      	itt	eq
 8004576:	681a      	ldreq	r2, [r3, #0]
 8004578:	685b      	ldreq	r3, [r3, #4]
 800457a:	6063      	str	r3, [r4, #4]
 800457c:	bf04      	itt	eq
 800457e:	1852      	addeq	r2, r2, r1
 8004580:	6022      	streq	r2, [r4, #0]
 8004582:	602c      	str	r4, [r5, #0]
 8004584:	e7ec      	b.n	8004560 <_free_r+0x28>
 8004586:	461a      	mov	r2, r3
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	b10b      	cbz	r3, 8004590 <_free_r+0x58>
 800458c:	42a3      	cmp	r3, r4
 800458e:	d9fa      	bls.n	8004586 <_free_r+0x4e>
 8004590:	6811      	ldr	r1, [r2, #0]
 8004592:	1855      	adds	r5, r2, r1
 8004594:	42a5      	cmp	r5, r4
 8004596:	d10b      	bne.n	80045b0 <_free_r+0x78>
 8004598:	6824      	ldr	r4, [r4, #0]
 800459a:	4421      	add	r1, r4
 800459c:	1854      	adds	r4, r2, r1
 800459e:	42a3      	cmp	r3, r4
 80045a0:	6011      	str	r1, [r2, #0]
 80045a2:	d1dd      	bne.n	8004560 <_free_r+0x28>
 80045a4:	681c      	ldr	r4, [r3, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	6053      	str	r3, [r2, #4]
 80045aa:	4421      	add	r1, r4
 80045ac:	6011      	str	r1, [r2, #0]
 80045ae:	e7d7      	b.n	8004560 <_free_r+0x28>
 80045b0:	d902      	bls.n	80045b8 <_free_r+0x80>
 80045b2:	230c      	movs	r3, #12
 80045b4:	6003      	str	r3, [r0, #0]
 80045b6:	e7d3      	b.n	8004560 <_free_r+0x28>
 80045b8:	6825      	ldr	r5, [r4, #0]
 80045ba:	1961      	adds	r1, r4, r5
 80045bc:	428b      	cmp	r3, r1
 80045be:	bf04      	itt	eq
 80045c0:	6819      	ldreq	r1, [r3, #0]
 80045c2:	685b      	ldreq	r3, [r3, #4]
 80045c4:	6063      	str	r3, [r4, #4]
 80045c6:	bf04      	itt	eq
 80045c8:	1949      	addeq	r1, r1, r5
 80045ca:	6021      	streq	r1, [r4, #0]
 80045cc:	6054      	str	r4, [r2, #4]
 80045ce:	e7c7      	b.n	8004560 <_free_r+0x28>
 80045d0:	b003      	add	sp, #12
 80045d2:	bd30      	pop	{r4, r5, pc}
 80045d4:	200004b0 	.word	0x200004b0

080045d8 <_malloc_r>:
 80045d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045da:	1ccd      	adds	r5, r1, #3
 80045dc:	f025 0503 	bic.w	r5, r5, #3
 80045e0:	3508      	adds	r5, #8
 80045e2:	2d0c      	cmp	r5, #12
 80045e4:	bf38      	it	cc
 80045e6:	250c      	movcc	r5, #12
 80045e8:	2d00      	cmp	r5, #0
 80045ea:	4606      	mov	r6, r0
 80045ec:	db01      	blt.n	80045f2 <_malloc_r+0x1a>
 80045ee:	42a9      	cmp	r1, r5
 80045f0:	d903      	bls.n	80045fa <_malloc_r+0x22>
 80045f2:	230c      	movs	r3, #12
 80045f4:	6033      	str	r3, [r6, #0]
 80045f6:	2000      	movs	r0, #0
 80045f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045fa:	f000 fc27 	bl	8004e4c <__malloc_lock>
 80045fe:	4921      	ldr	r1, [pc, #132]	; (8004684 <_malloc_r+0xac>)
 8004600:	680a      	ldr	r2, [r1, #0]
 8004602:	4614      	mov	r4, r2
 8004604:	b99c      	cbnz	r4, 800462e <_malloc_r+0x56>
 8004606:	4f20      	ldr	r7, [pc, #128]	; (8004688 <_malloc_r+0xb0>)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	b923      	cbnz	r3, 8004616 <_malloc_r+0x3e>
 800460c:	4621      	mov	r1, r4
 800460e:	4630      	mov	r0, r6
 8004610:	f000 fb72 	bl	8004cf8 <_sbrk_r>
 8004614:	6038      	str	r0, [r7, #0]
 8004616:	4629      	mov	r1, r5
 8004618:	4630      	mov	r0, r6
 800461a:	f000 fb6d 	bl	8004cf8 <_sbrk_r>
 800461e:	1c43      	adds	r3, r0, #1
 8004620:	d123      	bne.n	800466a <_malloc_r+0x92>
 8004622:	230c      	movs	r3, #12
 8004624:	6033      	str	r3, [r6, #0]
 8004626:	4630      	mov	r0, r6
 8004628:	f000 fc16 	bl	8004e58 <__malloc_unlock>
 800462c:	e7e3      	b.n	80045f6 <_malloc_r+0x1e>
 800462e:	6823      	ldr	r3, [r4, #0]
 8004630:	1b5b      	subs	r3, r3, r5
 8004632:	d417      	bmi.n	8004664 <_malloc_r+0x8c>
 8004634:	2b0b      	cmp	r3, #11
 8004636:	d903      	bls.n	8004640 <_malloc_r+0x68>
 8004638:	6023      	str	r3, [r4, #0]
 800463a:	441c      	add	r4, r3
 800463c:	6025      	str	r5, [r4, #0]
 800463e:	e004      	b.n	800464a <_malloc_r+0x72>
 8004640:	6863      	ldr	r3, [r4, #4]
 8004642:	42a2      	cmp	r2, r4
 8004644:	bf0c      	ite	eq
 8004646:	600b      	streq	r3, [r1, #0]
 8004648:	6053      	strne	r3, [r2, #4]
 800464a:	4630      	mov	r0, r6
 800464c:	f000 fc04 	bl	8004e58 <__malloc_unlock>
 8004650:	f104 000b 	add.w	r0, r4, #11
 8004654:	1d23      	adds	r3, r4, #4
 8004656:	f020 0007 	bic.w	r0, r0, #7
 800465a:	1ac2      	subs	r2, r0, r3
 800465c:	d0cc      	beq.n	80045f8 <_malloc_r+0x20>
 800465e:	1a1b      	subs	r3, r3, r0
 8004660:	50a3      	str	r3, [r4, r2]
 8004662:	e7c9      	b.n	80045f8 <_malloc_r+0x20>
 8004664:	4622      	mov	r2, r4
 8004666:	6864      	ldr	r4, [r4, #4]
 8004668:	e7cc      	b.n	8004604 <_malloc_r+0x2c>
 800466a:	1cc4      	adds	r4, r0, #3
 800466c:	f024 0403 	bic.w	r4, r4, #3
 8004670:	42a0      	cmp	r0, r4
 8004672:	d0e3      	beq.n	800463c <_malloc_r+0x64>
 8004674:	1a21      	subs	r1, r4, r0
 8004676:	4630      	mov	r0, r6
 8004678:	f000 fb3e 	bl	8004cf8 <_sbrk_r>
 800467c:	3001      	adds	r0, #1
 800467e:	d1dd      	bne.n	800463c <_malloc_r+0x64>
 8004680:	e7cf      	b.n	8004622 <_malloc_r+0x4a>
 8004682:	bf00      	nop
 8004684:	200004b0 	.word	0x200004b0
 8004688:	200004b4 	.word	0x200004b4

0800468c <__sfputc_r>:
 800468c:	6893      	ldr	r3, [r2, #8]
 800468e:	3b01      	subs	r3, #1
 8004690:	2b00      	cmp	r3, #0
 8004692:	b410      	push	{r4}
 8004694:	6093      	str	r3, [r2, #8]
 8004696:	da08      	bge.n	80046aa <__sfputc_r+0x1e>
 8004698:	6994      	ldr	r4, [r2, #24]
 800469a:	42a3      	cmp	r3, r4
 800469c:	db01      	blt.n	80046a2 <__sfputc_r+0x16>
 800469e:	290a      	cmp	r1, #10
 80046a0:	d103      	bne.n	80046aa <__sfputc_r+0x1e>
 80046a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046a6:	f7ff bc69 	b.w	8003f7c <__swbuf_r>
 80046aa:	6813      	ldr	r3, [r2, #0]
 80046ac:	1c58      	adds	r0, r3, #1
 80046ae:	6010      	str	r0, [r2, #0]
 80046b0:	7019      	strb	r1, [r3, #0]
 80046b2:	4608      	mov	r0, r1
 80046b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046b8:	4770      	bx	lr

080046ba <__sfputs_r>:
 80046ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046bc:	4606      	mov	r6, r0
 80046be:	460f      	mov	r7, r1
 80046c0:	4614      	mov	r4, r2
 80046c2:	18d5      	adds	r5, r2, r3
 80046c4:	42ac      	cmp	r4, r5
 80046c6:	d101      	bne.n	80046cc <__sfputs_r+0x12>
 80046c8:	2000      	movs	r0, #0
 80046ca:	e007      	b.n	80046dc <__sfputs_r+0x22>
 80046cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046d0:	463a      	mov	r2, r7
 80046d2:	4630      	mov	r0, r6
 80046d4:	f7ff ffda 	bl	800468c <__sfputc_r>
 80046d8:	1c43      	adds	r3, r0, #1
 80046da:	d1f3      	bne.n	80046c4 <__sfputs_r+0xa>
 80046dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080046e0 <_vfiprintf_r>:
 80046e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046e4:	460d      	mov	r5, r1
 80046e6:	b09d      	sub	sp, #116	; 0x74
 80046e8:	4614      	mov	r4, r2
 80046ea:	4698      	mov	r8, r3
 80046ec:	4606      	mov	r6, r0
 80046ee:	b118      	cbz	r0, 80046f8 <_vfiprintf_r+0x18>
 80046f0:	6983      	ldr	r3, [r0, #24]
 80046f2:	b90b      	cbnz	r3, 80046f8 <_vfiprintf_r+0x18>
 80046f4:	f7ff fe1c 	bl	8004330 <__sinit>
 80046f8:	4b89      	ldr	r3, [pc, #548]	; (8004920 <_vfiprintf_r+0x240>)
 80046fa:	429d      	cmp	r5, r3
 80046fc:	d11b      	bne.n	8004736 <_vfiprintf_r+0x56>
 80046fe:	6875      	ldr	r5, [r6, #4]
 8004700:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004702:	07d9      	lsls	r1, r3, #31
 8004704:	d405      	bmi.n	8004712 <_vfiprintf_r+0x32>
 8004706:	89ab      	ldrh	r3, [r5, #12]
 8004708:	059a      	lsls	r2, r3, #22
 800470a:	d402      	bmi.n	8004712 <_vfiprintf_r+0x32>
 800470c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800470e:	f7ff fead 	bl	800446c <__retarget_lock_acquire_recursive>
 8004712:	89ab      	ldrh	r3, [r5, #12]
 8004714:	071b      	lsls	r3, r3, #28
 8004716:	d501      	bpl.n	800471c <_vfiprintf_r+0x3c>
 8004718:	692b      	ldr	r3, [r5, #16]
 800471a:	b9eb      	cbnz	r3, 8004758 <_vfiprintf_r+0x78>
 800471c:	4629      	mov	r1, r5
 800471e:	4630      	mov	r0, r6
 8004720:	f7ff fc7e 	bl	8004020 <__swsetup_r>
 8004724:	b1c0      	cbz	r0, 8004758 <_vfiprintf_r+0x78>
 8004726:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004728:	07dc      	lsls	r4, r3, #31
 800472a:	d50e      	bpl.n	800474a <_vfiprintf_r+0x6a>
 800472c:	f04f 30ff 	mov.w	r0, #4294967295
 8004730:	b01d      	add	sp, #116	; 0x74
 8004732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004736:	4b7b      	ldr	r3, [pc, #492]	; (8004924 <_vfiprintf_r+0x244>)
 8004738:	429d      	cmp	r5, r3
 800473a:	d101      	bne.n	8004740 <_vfiprintf_r+0x60>
 800473c:	68b5      	ldr	r5, [r6, #8]
 800473e:	e7df      	b.n	8004700 <_vfiprintf_r+0x20>
 8004740:	4b79      	ldr	r3, [pc, #484]	; (8004928 <_vfiprintf_r+0x248>)
 8004742:	429d      	cmp	r5, r3
 8004744:	bf08      	it	eq
 8004746:	68f5      	ldreq	r5, [r6, #12]
 8004748:	e7da      	b.n	8004700 <_vfiprintf_r+0x20>
 800474a:	89ab      	ldrh	r3, [r5, #12]
 800474c:	0598      	lsls	r0, r3, #22
 800474e:	d4ed      	bmi.n	800472c <_vfiprintf_r+0x4c>
 8004750:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004752:	f7ff fe8c 	bl	800446e <__retarget_lock_release_recursive>
 8004756:	e7e9      	b.n	800472c <_vfiprintf_r+0x4c>
 8004758:	2300      	movs	r3, #0
 800475a:	9309      	str	r3, [sp, #36]	; 0x24
 800475c:	2320      	movs	r3, #32
 800475e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004762:	f8cd 800c 	str.w	r8, [sp, #12]
 8004766:	2330      	movs	r3, #48	; 0x30
 8004768:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800492c <_vfiprintf_r+0x24c>
 800476c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004770:	f04f 0901 	mov.w	r9, #1
 8004774:	4623      	mov	r3, r4
 8004776:	469a      	mov	sl, r3
 8004778:	f813 2b01 	ldrb.w	r2, [r3], #1
 800477c:	b10a      	cbz	r2, 8004782 <_vfiprintf_r+0xa2>
 800477e:	2a25      	cmp	r2, #37	; 0x25
 8004780:	d1f9      	bne.n	8004776 <_vfiprintf_r+0x96>
 8004782:	ebba 0b04 	subs.w	fp, sl, r4
 8004786:	d00b      	beq.n	80047a0 <_vfiprintf_r+0xc0>
 8004788:	465b      	mov	r3, fp
 800478a:	4622      	mov	r2, r4
 800478c:	4629      	mov	r1, r5
 800478e:	4630      	mov	r0, r6
 8004790:	f7ff ff93 	bl	80046ba <__sfputs_r>
 8004794:	3001      	adds	r0, #1
 8004796:	f000 80aa 	beq.w	80048ee <_vfiprintf_r+0x20e>
 800479a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800479c:	445a      	add	r2, fp
 800479e:	9209      	str	r2, [sp, #36]	; 0x24
 80047a0:	f89a 3000 	ldrb.w	r3, [sl]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 80a2 	beq.w	80048ee <_vfiprintf_r+0x20e>
 80047aa:	2300      	movs	r3, #0
 80047ac:	f04f 32ff 	mov.w	r2, #4294967295
 80047b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047b4:	f10a 0a01 	add.w	sl, sl, #1
 80047b8:	9304      	str	r3, [sp, #16]
 80047ba:	9307      	str	r3, [sp, #28]
 80047bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80047c0:	931a      	str	r3, [sp, #104]	; 0x68
 80047c2:	4654      	mov	r4, sl
 80047c4:	2205      	movs	r2, #5
 80047c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047ca:	4858      	ldr	r0, [pc, #352]	; (800492c <_vfiprintf_r+0x24c>)
 80047cc:	f7fb fd08 	bl	80001e0 <memchr>
 80047d0:	9a04      	ldr	r2, [sp, #16]
 80047d2:	b9d8      	cbnz	r0, 800480c <_vfiprintf_r+0x12c>
 80047d4:	06d1      	lsls	r1, r2, #27
 80047d6:	bf44      	itt	mi
 80047d8:	2320      	movmi	r3, #32
 80047da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047de:	0713      	lsls	r3, r2, #28
 80047e0:	bf44      	itt	mi
 80047e2:	232b      	movmi	r3, #43	; 0x2b
 80047e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047e8:	f89a 3000 	ldrb.w	r3, [sl]
 80047ec:	2b2a      	cmp	r3, #42	; 0x2a
 80047ee:	d015      	beq.n	800481c <_vfiprintf_r+0x13c>
 80047f0:	9a07      	ldr	r2, [sp, #28]
 80047f2:	4654      	mov	r4, sl
 80047f4:	2000      	movs	r0, #0
 80047f6:	f04f 0c0a 	mov.w	ip, #10
 80047fa:	4621      	mov	r1, r4
 80047fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004800:	3b30      	subs	r3, #48	; 0x30
 8004802:	2b09      	cmp	r3, #9
 8004804:	d94e      	bls.n	80048a4 <_vfiprintf_r+0x1c4>
 8004806:	b1b0      	cbz	r0, 8004836 <_vfiprintf_r+0x156>
 8004808:	9207      	str	r2, [sp, #28]
 800480a:	e014      	b.n	8004836 <_vfiprintf_r+0x156>
 800480c:	eba0 0308 	sub.w	r3, r0, r8
 8004810:	fa09 f303 	lsl.w	r3, r9, r3
 8004814:	4313      	orrs	r3, r2
 8004816:	9304      	str	r3, [sp, #16]
 8004818:	46a2      	mov	sl, r4
 800481a:	e7d2      	b.n	80047c2 <_vfiprintf_r+0xe2>
 800481c:	9b03      	ldr	r3, [sp, #12]
 800481e:	1d19      	adds	r1, r3, #4
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	9103      	str	r1, [sp, #12]
 8004824:	2b00      	cmp	r3, #0
 8004826:	bfbb      	ittet	lt
 8004828:	425b      	neglt	r3, r3
 800482a:	f042 0202 	orrlt.w	r2, r2, #2
 800482e:	9307      	strge	r3, [sp, #28]
 8004830:	9307      	strlt	r3, [sp, #28]
 8004832:	bfb8      	it	lt
 8004834:	9204      	strlt	r2, [sp, #16]
 8004836:	7823      	ldrb	r3, [r4, #0]
 8004838:	2b2e      	cmp	r3, #46	; 0x2e
 800483a:	d10c      	bne.n	8004856 <_vfiprintf_r+0x176>
 800483c:	7863      	ldrb	r3, [r4, #1]
 800483e:	2b2a      	cmp	r3, #42	; 0x2a
 8004840:	d135      	bne.n	80048ae <_vfiprintf_r+0x1ce>
 8004842:	9b03      	ldr	r3, [sp, #12]
 8004844:	1d1a      	adds	r2, r3, #4
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	9203      	str	r2, [sp, #12]
 800484a:	2b00      	cmp	r3, #0
 800484c:	bfb8      	it	lt
 800484e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004852:	3402      	adds	r4, #2
 8004854:	9305      	str	r3, [sp, #20]
 8004856:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800493c <_vfiprintf_r+0x25c>
 800485a:	7821      	ldrb	r1, [r4, #0]
 800485c:	2203      	movs	r2, #3
 800485e:	4650      	mov	r0, sl
 8004860:	f7fb fcbe 	bl	80001e0 <memchr>
 8004864:	b140      	cbz	r0, 8004878 <_vfiprintf_r+0x198>
 8004866:	2340      	movs	r3, #64	; 0x40
 8004868:	eba0 000a 	sub.w	r0, r0, sl
 800486c:	fa03 f000 	lsl.w	r0, r3, r0
 8004870:	9b04      	ldr	r3, [sp, #16]
 8004872:	4303      	orrs	r3, r0
 8004874:	3401      	adds	r4, #1
 8004876:	9304      	str	r3, [sp, #16]
 8004878:	f814 1b01 	ldrb.w	r1, [r4], #1
 800487c:	482c      	ldr	r0, [pc, #176]	; (8004930 <_vfiprintf_r+0x250>)
 800487e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004882:	2206      	movs	r2, #6
 8004884:	f7fb fcac 	bl	80001e0 <memchr>
 8004888:	2800      	cmp	r0, #0
 800488a:	d03f      	beq.n	800490c <_vfiprintf_r+0x22c>
 800488c:	4b29      	ldr	r3, [pc, #164]	; (8004934 <_vfiprintf_r+0x254>)
 800488e:	bb1b      	cbnz	r3, 80048d8 <_vfiprintf_r+0x1f8>
 8004890:	9b03      	ldr	r3, [sp, #12]
 8004892:	3307      	adds	r3, #7
 8004894:	f023 0307 	bic.w	r3, r3, #7
 8004898:	3308      	adds	r3, #8
 800489a:	9303      	str	r3, [sp, #12]
 800489c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800489e:	443b      	add	r3, r7
 80048a0:	9309      	str	r3, [sp, #36]	; 0x24
 80048a2:	e767      	b.n	8004774 <_vfiprintf_r+0x94>
 80048a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80048a8:	460c      	mov	r4, r1
 80048aa:	2001      	movs	r0, #1
 80048ac:	e7a5      	b.n	80047fa <_vfiprintf_r+0x11a>
 80048ae:	2300      	movs	r3, #0
 80048b0:	3401      	adds	r4, #1
 80048b2:	9305      	str	r3, [sp, #20]
 80048b4:	4619      	mov	r1, r3
 80048b6:	f04f 0c0a 	mov.w	ip, #10
 80048ba:	4620      	mov	r0, r4
 80048bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048c0:	3a30      	subs	r2, #48	; 0x30
 80048c2:	2a09      	cmp	r2, #9
 80048c4:	d903      	bls.n	80048ce <_vfiprintf_r+0x1ee>
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d0c5      	beq.n	8004856 <_vfiprintf_r+0x176>
 80048ca:	9105      	str	r1, [sp, #20]
 80048cc:	e7c3      	b.n	8004856 <_vfiprintf_r+0x176>
 80048ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80048d2:	4604      	mov	r4, r0
 80048d4:	2301      	movs	r3, #1
 80048d6:	e7f0      	b.n	80048ba <_vfiprintf_r+0x1da>
 80048d8:	ab03      	add	r3, sp, #12
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	462a      	mov	r2, r5
 80048de:	4b16      	ldr	r3, [pc, #88]	; (8004938 <_vfiprintf_r+0x258>)
 80048e0:	a904      	add	r1, sp, #16
 80048e2:	4630      	mov	r0, r6
 80048e4:	f3af 8000 	nop.w
 80048e8:	4607      	mov	r7, r0
 80048ea:	1c78      	adds	r0, r7, #1
 80048ec:	d1d6      	bne.n	800489c <_vfiprintf_r+0x1bc>
 80048ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048f0:	07d9      	lsls	r1, r3, #31
 80048f2:	d405      	bmi.n	8004900 <_vfiprintf_r+0x220>
 80048f4:	89ab      	ldrh	r3, [r5, #12]
 80048f6:	059a      	lsls	r2, r3, #22
 80048f8:	d402      	bmi.n	8004900 <_vfiprintf_r+0x220>
 80048fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80048fc:	f7ff fdb7 	bl	800446e <__retarget_lock_release_recursive>
 8004900:	89ab      	ldrh	r3, [r5, #12]
 8004902:	065b      	lsls	r3, r3, #25
 8004904:	f53f af12 	bmi.w	800472c <_vfiprintf_r+0x4c>
 8004908:	9809      	ldr	r0, [sp, #36]	; 0x24
 800490a:	e711      	b.n	8004730 <_vfiprintf_r+0x50>
 800490c:	ab03      	add	r3, sp, #12
 800490e:	9300      	str	r3, [sp, #0]
 8004910:	462a      	mov	r2, r5
 8004912:	4b09      	ldr	r3, [pc, #36]	; (8004938 <_vfiprintf_r+0x258>)
 8004914:	a904      	add	r1, sp, #16
 8004916:	4630      	mov	r0, r6
 8004918:	f000 f880 	bl	8004a1c <_printf_i>
 800491c:	e7e4      	b.n	80048e8 <_vfiprintf_r+0x208>
 800491e:	bf00      	nop
 8004920:	0800570c 	.word	0x0800570c
 8004924:	0800572c 	.word	0x0800572c
 8004928:	080056ec 	.word	0x080056ec
 800492c:	0800574c 	.word	0x0800574c
 8004930:	08005756 	.word	0x08005756
 8004934:	00000000 	.word	0x00000000
 8004938:	080046bb 	.word	0x080046bb
 800493c:	08005752 	.word	0x08005752

08004940 <_printf_common>:
 8004940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004944:	4616      	mov	r6, r2
 8004946:	4699      	mov	r9, r3
 8004948:	688a      	ldr	r2, [r1, #8]
 800494a:	690b      	ldr	r3, [r1, #16]
 800494c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004950:	4293      	cmp	r3, r2
 8004952:	bfb8      	it	lt
 8004954:	4613      	movlt	r3, r2
 8004956:	6033      	str	r3, [r6, #0]
 8004958:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800495c:	4607      	mov	r7, r0
 800495e:	460c      	mov	r4, r1
 8004960:	b10a      	cbz	r2, 8004966 <_printf_common+0x26>
 8004962:	3301      	adds	r3, #1
 8004964:	6033      	str	r3, [r6, #0]
 8004966:	6823      	ldr	r3, [r4, #0]
 8004968:	0699      	lsls	r1, r3, #26
 800496a:	bf42      	ittt	mi
 800496c:	6833      	ldrmi	r3, [r6, #0]
 800496e:	3302      	addmi	r3, #2
 8004970:	6033      	strmi	r3, [r6, #0]
 8004972:	6825      	ldr	r5, [r4, #0]
 8004974:	f015 0506 	ands.w	r5, r5, #6
 8004978:	d106      	bne.n	8004988 <_printf_common+0x48>
 800497a:	f104 0a19 	add.w	sl, r4, #25
 800497e:	68e3      	ldr	r3, [r4, #12]
 8004980:	6832      	ldr	r2, [r6, #0]
 8004982:	1a9b      	subs	r3, r3, r2
 8004984:	42ab      	cmp	r3, r5
 8004986:	dc26      	bgt.n	80049d6 <_printf_common+0x96>
 8004988:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800498c:	1e13      	subs	r3, r2, #0
 800498e:	6822      	ldr	r2, [r4, #0]
 8004990:	bf18      	it	ne
 8004992:	2301      	movne	r3, #1
 8004994:	0692      	lsls	r2, r2, #26
 8004996:	d42b      	bmi.n	80049f0 <_printf_common+0xb0>
 8004998:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800499c:	4649      	mov	r1, r9
 800499e:	4638      	mov	r0, r7
 80049a0:	47c0      	blx	r8
 80049a2:	3001      	adds	r0, #1
 80049a4:	d01e      	beq.n	80049e4 <_printf_common+0xa4>
 80049a6:	6823      	ldr	r3, [r4, #0]
 80049a8:	68e5      	ldr	r5, [r4, #12]
 80049aa:	6832      	ldr	r2, [r6, #0]
 80049ac:	f003 0306 	and.w	r3, r3, #6
 80049b0:	2b04      	cmp	r3, #4
 80049b2:	bf08      	it	eq
 80049b4:	1aad      	subeq	r5, r5, r2
 80049b6:	68a3      	ldr	r3, [r4, #8]
 80049b8:	6922      	ldr	r2, [r4, #16]
 80049ba:	bf0c      	ite	eq
 80049bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049c0:	2500      	movne	r5, #0
 80049c2:	4293      	cmp	r3, r2
 80049c4:	bfc4      	itt	gt
 80049c6:	1a9b      	subgt	r3, r3, r2
 80049c8:	18ed      	addgt	r5, r5, r3
 80049ca:	2600      	movs	r6, #0
 80049cc:	341a      	adds	r4, #26
 80049ce:	42b5      	cmp	r5, r6
 80049d0:	d11a      	bne.n	8004a08 <_printf_common+0xc8>
 80049d2:	2000      	movs	r0, #0
 80049d4:	e008      	b.n	80049e8 <_printf_common+0xa8>
 80049d6:	2301      	movs	r3, #1
 80049d8:	4652      	mov	r2, sl
 80049da:	4649      	mov	r1, r9
 80049dc:	4638      	mov	r0, r7
 80049de:	47c0      	blx	r8
 80049e0:	3001      	adds	r0, #1
 80049e2:	d103      	bne.n	80049ec <_printf_common+0xac>
 80049e4:	f04f 30ff 	mov.w	r0, #4294967295
 80049e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049ec:	3501      	adds	r5, #1
 80049ee:	e7c6      	b.n	800497e <_printf_common+0x3e>
 80049f0:	18e1      	adds	r1, r4, r3
 80049f2:	1c5a      	adds	r2, r3, #1
 80049f4:	2030      	movs	r0, #48	; 0x30
 80049f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049fa:	4422      	add	r2, r4
 80049fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a04:	3302      	adds	r3, #2
 8004a06:	e7c7      	b.n	8004998 <_printf_common+0x58>
 8004a08:	2301      	movs	r3, #1
 8004a0a:	4622      	mov	r2, r4
 8004a0c:	4649      	mov	r1, r9
 8004a0e:	4638      	mov	r0, r7
 8004a10:	47c0      	blx	r8
 8004a12:	3001      	adds	r0, #1
 8004a14:	d0e6      	beq.n	80049e4 <_printf_common+0xa4>
 8004a16:	3601      	adds	r6, #1
 8004a18:	e7d9      	b.n	80049ce <_printf_common+0x8e>
	...

08004a1c <_printf_i>:
 8004a1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a20:	460c      	mov	r4, r1
 8004a22:	4691      	mov	r9, r2
 8004a24:	7e27      	ldrb	r7, [r4, #24]
 8004a26:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004a28:	2f78      	cmp	r7, #120	; 0x78
 8004a2a:	4680      	mov	r8, r0
 8004a2c:	469a      	mov	sl, r3
 8004a2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a32:	d807      	bhi.n	8004a44 <_printf_i+0x28>
 8004a34:	2f62      	cmp	r7, #98	; 0x62
 8004a36:	d80a      	bhi.n	8004a4e <_printf_i+0x32>
 8004a38:	2f00      	cmp	r7, #0
 8004a3a:	f000 80d8 	beq.w	8004bee <_printf_i+0x1d2>
 8004a3e:	2f58      	cmp	r7, #88	; 0x58
 8004a40:	f000 80a3 	beq.w	8004b8a <_printf_i+0x16e>
 8004a44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004a48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a4c:	e03a      	b.n	8004ac4 <_printf_i+0xa8>
 8004a4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a52:	2b15      	cmp	r3, #21
 8004a54:	d8f6      	bhi.n	8004a44 <_printf_i+0x28>
 8004a56:	a001      	add	r0, pc, #4	; (adr r0, 8004a5c <_printf_i+0x40>)
 8004a58:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004a5c:	08004ab5 	.word	0x08004ab5
 8004a60:	08004ac9 	.word	0x08004ac9
 8004a64:	08004a45 	.word	0x08004a45
 8004a68:	08004a45 	.word	0x08004a45
 8004a6c:	08004a45 	.word	0x08004a45
 8004a70:	08004a45 	.word	0x08004a45
 8004a74:	08004ac9 	.word	0x08004ac9
 8004a78:	08004a45 	.word	0x08004a45
 8004a7c:	08004a45 	.word	0x08004a45
 8004a80:	08004a45 	.word	0x08004a45
 8004a84:	08004a45 	.word	0x08004a45
 8004a88:	08004bd5 	.word	0x08004bd5
 8004a8c:	08004af9 	.word	0x08004af9
 8004a90:	08004bb7 	.word	0x08004bb7
 8004a94:	08004a45 	.word	0x08004a45
 8004a98:	08004a45 	.word	0x08004a45
 8004a9c:	08004bf7 	.word	0x08004bf7
 8004aa0:	08004a45 	.word	0x08004a45
 8004aa4:	08004af9 	.word	0x08004af9
 8004aa8:	08004a45 	.word	0x08004a45
 8004aac:	08004a45 	.word	0x08004a45
 8004ab0:	08004bbf 	.word	0x08004bbf
 8004ab4:	680b      	ldr	r3, [r1, #0]
 8004ab6:	1d1a      	adds	r2, r3, #4
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	600a      	str	r2, [r1, #0]
 8004abc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ac0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e0a3      	b.n	8004c10 <_printf_i+0x1f4>
 8004ac8:	6825      	ldr	r5, [r4, #0]
 8004aca:	6808      	ldr	r0, [r1, #0]
 8004acc:	062e      	lsls	r6, r5, #24
 8004ace:	f100 0304 	add.w	r3, r0, #4
 8004ad2:	d50a      	bpl.n	8004aea <_printf_i+0xce>
 8004ad4:	6805      	ldr	r5, [r0, #0]
 8004ad6:	600b      	str	r3, [r1, #0]
 8004ad8:	2d00      	cmp	r5, #0
 8004ada:	da03      	bge.n	8004ae4 <_printf_i+0xc8>
 8004adc:	232d      	movs	r3, #45	; 0x2d
 8004ade:	426d      	negs	r5, r5
 8004ae0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ae4:	485e      	ldr	r0, [pc, #376]	; (8004c60 <_printf_i+0x244>)
 8004ae6:	230a      	movs	r3, #10
 8004ae8:	e019      	b.n	8004b1e <_printf_i+0x102>
 8004aea:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004aee:	6805      	ldr	r5, [r0, #0]
 8004af0:	600b      	str	r3, [r1, #0]
 8004af2:	bf18      	it	ne
 8004af4:	b22d      	sxthne	r5, r5
 8004af6:	e7ef      	b.n	8004ad8 <_printf_i+0xbc>
 8004af8:	680b      	ldr	r3, [r1, #0]
 8004afa:	6825      	ldr	r5, [r4, #0]
 8004afc:	1d18      	adds	r0, r3, #4
 8004afe:	6008      	str	r0, [r1, #0]
 8004b00:	0628      	lsls	r0, r5, #24
 8004b02:	d501      	bpl.n	8004b08 <_printf_i+0xec>
 8004b04:	681d      	ldr	r5, [r3, #0]
 8004b06:	e002      	b.n	8004b0e <_printf_i+0xf2>
 8004b08:	0669      	lsls	r1, r5, #25
 8004b0a:	d5fb      	bpl.n	8004b04 <_printf_i+0xe8>
 8004b0c:	881d      	ldrh	r5, [r3, #0]
 8004b0e:	4854      	ldr	r0, [pc, #336]	; (8004c60 <_printf_i+0x244>)
 8004b10:	2f6f      	cmp	r7, #111	; 0x6f
 8004b12:	bf0c      	ite	eq
 8004b14:	2308      	moveq	r3, #8
 8004b16:	230a      	movne	r3, #10
 8004b18:	2100      	movs	r1, #0
 8004b1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b1e:	6866      	ldr	r6, [r4, #4]
 8004b20:	60a6      	str	r6, [r4, #8]
 8004b22:	2e00      	cmp	r6, #0
 8004b24:	bfa2      	ittt	ge
 8004b26:	6821      	ldrge	r1, [r4, #0]
 8004b28:	f021 0104 	bicge.w	r1, r1, #4
 8004b2c:	6021      	strge	r1, [r4, #0]
 8004b2e:	b90d      	cbnz	r5, 8004b34 <_printf_i+0x118>
 8004b30:	2e00      	cmp	r6, #0
 8004b32:	d04d      	beq.n	8004bd0 <_printf_i+0x1b4>
 8004b34:	4616      	mov	r6, r2
 8004b36:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b3a:	fb03 5711 	mls	r7, r3, r1, r5
 8004b3e:	5dc7      	ldrb	r7, [r0, r7]
 8004b40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b44:	462f      	mov	r7, r5
 8004b46:	42bb      	cmp	r3, r7
 8004b48:	460d      	mov	r5, r1
 8004b4a:	d9f4      	bls.n	8004b36 <_printf_i+0x11a>
 8004b4c:	2b08      	cmp	r3, #8
 8004b4e:	d10b      	bne.n	8004b68 <_printf_i+0x14c>
 8004b50:	6823      	ldr	r3, [r4, #0]
 8004b52:	07df      	lsls	r7, r3, #31
 8004b54:	d508      	bpl.n	8004b68 <_printf_i+0x14c>
 8004b56:	6923      	ldr	r3, [r4, #16]
 8004b58:	6861      	ldr	r1, [r4, #4]
 8004b5a:	4299      	cmp	r1, r3
 8004b5c:	bfde      	ittt	le
 8004b5e:	2330      	movle	r3, #48	; 0x30
 8004b60:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b64:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b68:	1b92      	subs	r2, r2, r6
 8004b6a:	6122      	str	r2, [r4, #16]
 8004b6c:	f8cd a000 	str.w	sl, [sp]
 8004b70:	464b      	mov	r3, r9
 8004b72:	aa03      	add	r2, sp, #12
 8004b74:	4621      	mov	r1, r4
 8004b76:	4640      	mov	r0, r8
 8004b78:	f7ff fee2 	bl	8004940 <_printf_common>
 8004b7c:	3001      	adds	r0, #1
 8004b7e:	d14c      	bne.n	8004c1a <_printf_i+0x1fe>
 8004b80:	f04f 30ff 	mov.w	r0, #4294967295
 8004b84:	b004      	add	sp, #16
 8004b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b8a:	4835      	ldr	r0, [pc, #212]	; (8004c60 <_printf_i+0x244>)
 8004b8c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b90:	6823      	ldr	r3, [r4, #0]
 8004b92:	680e      	ldr	r6, [r1, #0]
 8004b94:	061f      	lsls	r7, r3, #24
 8004b96:	f856 5b04 	ldr.w	r5, [r6], #4
 8004b9a:	600e      	str	r6, [r1, #0]
 8004b9c:	d514      	bpl.n	8004bc8 <_printf_i+0x1ac>
 8004b9e:	07d9      	lsls	r1, r3, #31
 8004ba0:	bf44      	itt	mi
 8004ba2:	f043 0320 	orrmi.w	r3, r3, #32
 8004ba6:	6023      	strmi	r3, [r4, #0]
 8004ba8:	b91d      	cbnz	r5, 8004bb2 <_printf_i+0x196>
 8004baa:	6823      	ldr	r3, [r4, #0]
 8004bac:	f023 0320 	bic.w	r3, r3, #32
 8004bb0:	6023      	str	r3, [r4, #0]
 8004bb2:	2310      	movs	r3, #16
 8004bb4:	e7b0      	b.n	8004b18 <_printf_i+0xfc>
 8004bb6:	6823      	ldr	r3, [r4, #0]
 8004bb8:	f043 0320 	orr.w	r3, r3, #32
 8004bbc:	6023      	str	r3, [r4, #0]
 8004bbe:	2378      	movs	r3, #120	; 0x78
 8004bc0:	4828      	ldr	r0, [pc, #160]	; (8004c64 <_printf_i+0x248>)
 8004bc2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004bc6:	e7e3      	b.n	8004b90 <_printf_i+0x174>
 8004bc8:	065e      	lsls	r6, r3, #25
 8004bca:	bf48      	it	mi
 8004bcc:	b2ad      	uxthmi	r5, r5
 8004bce:	e7e6      	b.n	8004b9e <_printf_i+0x182>
 8004bd0:	4616      	mov	r6, r2
 8004bd2:	e7bb      	b.n	8004b4c <_printf_i+0x130>
 8004bd4:	680b      	ldr	r3, [r1, #0]
 8004bd6:	6826      	ldr	r6, [r4, #0]
 8004bd8:	6960      	ldr	r0, [r4, #20]
 8004bda:	1d1d      	adds	r5, r3, #4
 8004bdc:	600d      	str	r5, [r1, #0]
 8004bde:	0635      	lsls	r5, r6, #24
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	d501      	bpl.n	8004be8 <_printf_i+0x1cc>
 8004be4:	6018      	str	r0, [r3, #0]
 8004be6:	e002      	b.n	8004bee <_printf_i+0x1d2>
 8004be8:	0671      	lsls	r1, r6, #25
 8004bea:	d5fb      	bpl.n	8004be4 <_printf_i+0x1c8>
 8004bec:	8018      	strh	r0, [r3, #0]
 8004bee:	2300      	movs	r3, #0
 8004bf0:	6123      	str	r3, [r4, #16]
 8004bf2:	4616      	mov	r6, r2
 8004bf4:	e7ba      	b.n	8004b6c <_printf_i+0x150>
 8004bf6:	680b      	ldr	r3, [r1, #0]
 8004bf8:	1d1a      	adds	r2, r3, #4
 8004bfa:	600a      	str	r2, [r1, #0]
 8004bfc:	681e      	ldr	r6, [r3, #0]
 8004bfe:	6862      	ldr	r2, [r4, #4]
 8004c00:	2100      	movs	r1, #0
 8004c02:	4630      	mov	r0, r6
 8004c04:	f7fb faec 	bl	80001e0 <memchr>
 8004c08:	b108      	cbz	r0, 8004c0e <_printf_i+0x1f2>
 8004c0a:	1b80      	subs	r0, r0, r6
 8004c0c:	6060      	str	r0, [r4, #4]
 8004c0e:	6863      	ldr	r3, [r4, #4]
 8004c10:	6123      	str	r3, [r4, #16]
 8004c12:	2300      	movs	r3, #0
 8004c14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c18:	e7a8      	b.n	8004b6c <_printf_i+0x150>
 8004c1a:	6923      	ldr	r3, [r4, #16]
 8004c1c:	4632      	mov	r2, r6
 8004c1e:	4649      	mov	r1, r9
 8004c20:	4640      	mov	r0, r8
 8004c22:	47d0      	blx	sl
 8004c24:	3001      	adds	r0, #1
 8004c26:	d0ab      	beq.n	8004b80 <_printf_i+0x164>
 8004c28:	6823      	ldr	r3, [r4, #0]
 8004c2a:	079b      	lsls	r3, r3, #30
 8004c2c:	d413      	bmi.n	8004c56 <_printf_i+0x23a>
 8004c2e:	68e0      	ldr	r0, [r4, #12]
 8004c30:	9b03      	ldr	r3, [sp, #12]
 8004c32:	4298      	cmp	r0, r3
 8004c34:	bfb8      	it	lt
 8004c36:	4618      	movlt	r0, r3
 8004c38:	e7a4      	b.n	8004b84 <_printf_i+0x168>
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	4632      	mov	r2, r6
 8004c3e:	4649      	mov	r1, r9
 8004c40:	4640      	mov	r0, r8
 8004c42:	47d0      	blx	sl
 8004c44:	3001      	adds	r0, #1
 8004c46:	d09b      	beq.n	8004b80 <_printf_i+0x164>
 8004c48:	3501      	adds	r5, #1
 8004c4a:	68e3      	ldr	r3, [r4, #12]
 8004c4c:	9903      	ldr	r1, [sp, #12]
 8004c4e:	1a5b      	subs	r3, r3, r1
 8004c50:	42ab      	cmp	r3, r5
 8004c52:	dcf2      	bgt.n	8004c3a <_printf_i+0x21e>
 8004c54:	e7eb      	b.n	8004c2e <_printf_i+0x212>
 8004c56:	2500      	movs	r5, #0
 8004c58:	f104 0619 	add.w	r6, r4, #25
 8004c5c:	e7f5      	b.n	8004c4a <_printf_i+0x22e>
 8004c5e:	bf00      	nop
 8004c60:	0800575d 	.word	0x0800575d
 8004c64:	0800576e 	.word	0x0800576e

08004c68 <_putc_r>:
 8004c68:	b570      	push	{r4, r5, r6, lr}
 8004c6a:	460d      	mov	r5, r1
 8004c6c:	4614      	mov	r4, r2
 8004c6e:	4606      	mov	r6, r0
 8004c70:	b118      	cbz	r0, 8004c7a <_putc_r+0x12>
 8004c72:	6983      	ldr	r3, [r0, #24]
 8004c74:	b90b      	cbnz	r3, 8004c7a <_putc_r+0x12>
 8004c76:	f7ff fb5b 	bl	8004330 <__sinit>
 8004c7a:	4b1c      	ldr	r3, [pc, #112]	; (8004cec <_putc_r+0x84>)
 8004c7c:	429c      	cmp	r4, r3
 8004c7e:	d124      	bne.n	8004cca <_putc_r+0x62>
 8004c80:	6874      	ldr	r4, [r6, #4]
 8004c82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c84:	07d8      	lsls	r0, r3, #31
 8004c86:	d405      	bmi.n	8004c94 <_putc_r+0x2c>
 8004c88:	89a3      	ldrh	r3, [r4, #12]
 8004c8a:	0599      	lsls	r1, r3, #22
 8004c8c:	d402      	bmi.n	8004c94 <_putc_r+0x2c>
 8004c8e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c90:	f7ff fbec 	bl	800446c <__retarget_lock_acquire_recursive>
 8004c94:	68a3      	ldr	r3, [r4, #8]
 8004c96:	3b01      	subs	r3, #1
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	60a3      	str	r3, [r4, #8]
 8004c9c:	da05      	bge.n	8004caa <_putc_r+0x42>
 8004c9e:	69a2      	ldr	r2, [r4, #24]
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	db1c      	blt.n	8004cde <_putc_r+0x76>
 8004ca4:	b2eb      	uxtb	r3, r5
 8004ca6:	2b0a      	cmp	r3, #10
 8004ca8:	d019      	beq.n	8004cde <_putc_r+0x76>
 8004caa:	6823      	ldr	r3, [r4, #0]
 8004cac:	1c5a      	adds	r2, r3, #1
 8004cae:	6022      	str	r2, [r4, #0]
 8004cb0:	701d      	strb	r5, [r3, #0]
 8004cb2:	b2ed      	uxtb	r5, r5
 8004cb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004cb6:	07da      	lsls	r2, r3, #31
 8004cb8:	d405      	bmi.n	8004cc6 <_putc_r+0x5e>
 8004cba:	89a3      	ldrh	r3, [r4, #12]
 8004cbc:	059b      	lsls	r3, r3, #22
 8004cbe:	d402      	bmi.n	8004cc6 <_putc_r+0x5e>
 8004cc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cc2:	f7ff fbd4 	bl	800446e <__retarget_lock_release_recursive>
 8004cc6:	4628      	mov	r0, r5
 8004cc8:	bd70      	pop	{r4, r5, r6, pc}
 8004cca:	4b09      	ldr	r3, [pc, #36]	; (8004cf0 <_putc_r+0x88>)
 8004ccc:	429c      	cmp	r4, r3
 8004cce:	d101      	bne.n	8004cd4 <_putc_r+0x6c>
 8004cd0:	68b4      	ldr	r4, [r6, #8]
 8004cd2:	e7d6      	b.n	8004c82 <_putc_r+0x1a>
 8004cd4:	4b07      	ldr	r3, [pc, #28]	; (8004cf4 <_putc_r+0x8c>)
 8004cd6:	429c      	cmp	r4, r3
 8004cd8:	bf08      	it	eq
 8004cda:	68f4      	ldreq	r4, [r6, #12]
 8004cdc:	e7d1      	b.n	8004c82 <_putc_r+0x1a>
 8004cde:	4629      	mov	r1, r5
 8004ce0:	4622      	mov	r2, r4
 8004ce2:	4630      	mov	r0, r6
 8004ce4:	f7ff f94a 	bl	8003f7c <__swbuf_r>
 8004ce8:	4605      	mov	r5, r0
 8004cea:	e7e3      	b.n	8004cb4 <_putc_r+0x4c>
 8004cec:	0800570c 	.word	0x0800570c
 8004cf0:	0800572c 	.word	0x0800572c
 8004cf4:	080056ec 	.word	0x080056ec

08004cf8 <_sbrk_r>:
 8004cf8:	b538      	push	{r3, r4, r5, lr}
 8004cfa:	4d06      	ldr	r5, [pc, #24]	; (8004d14 <_sbrk_r+0x1c>)
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	4604      	mov	r4, r0
 8004d00:	4608      	mov	r0, r1
 8004d02:	602b      	str	r3, [r5, #0]
 8004d04:	f7fc fb52 	bl	80013ac <_sbrk>
 8004d08:	1c43      	adds	r3, r0, #1
 8004d0a:	d102      	bne.n	8004d12 <_sbrk_r+0x1a>
 8004d0c:	682b      	ldr	r3, [r5, #0]
 8004d0e:	b103      	cbz	r3, 8004d12 <_sbrk_r+0x1a>
 8004d10:	6023      	str	r3, [r4, #0]
 8004d12:	bd38      	pop	{r3, r4, r5, pc}
 8004d14:	200009a0 	.word	0x200009a0

08004d18 <__sread>:
 8004d18:	b510      	push	{r4, lr}
 8004d1a:	460c      	mov	r4, r1
 8004d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d20:	f000 f8a0 	bl	8004e64 <_read_r>
 8004d24:	2800      	cmp	r0, #0
 8004d26:	bfab      	itete	ge
 8004d28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d2a:	89a3      	ldrhlt	r3, [r4, #12]
 8004d2c:	181b      	addge	r3, r3, r0
 8004d2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004d32:	bfac      	ite	ge
 8004d34:	6563      	strge	r3, [r4, #84]	; 0x54
 8004d36:	81a3      	strhlt	r3, [r4, #12]
 8004d38:	bd10      	pop	{r4, pc}

08004d3a <__swrite>:
 8004d3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d3e:	461f      	mov	r7, r3
 8004d40:	898b      	ldrh	r3, [r1, #12]
 8004d42:	05db      	lsls	r3, r3, #23
 8004d44:	4605      	mov	r5, r0
 8004d46:	460c      	mov	r4, r1
 8004d48:	4616      	mov	r6, r2
 8004d4a:	d505      	bpl.n	8004d58 <__swrite+0x1e>
 8004d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d50:	2302      	movs	r3, #2
 8004d52:	2200      	movs	r2, #0
 8004d54:	f000 f868 	bl	8004e28 <_lseek_r>
 8004d58:	89a3      	ldrh	r3, [r4, #12]
 8004d5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d62:	81a3      	strh	r3, [r4, #12]
 8004d64:	4632      	mov	r2, r6
 8004d66:	463b      	mov	r3, r7
 8004d68:	4628      	mov	r0, r5
 8004d6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d6e:	f000 b817 	b.w	8004da0 <_write_r>

08004d72 <__sseek>:
 8004d72:	b510      	push	{r4, lr}
 8004d74:	460c      	mov	r4, r1
 8004d76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d7a:	f000 f855 	bl	8004e28 <_lseek_r>
 8004d7e:	1c43      	adds	r3, r0, #1
 8004d80:	89a3      	ldrh	r3, [r4, #12]
 8004d82:	bf15      	itete	ne
 8004d84:	6560      	strne	r0, [r4, #84]	; 0x54
 8004d86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004d8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004d8e:	81a3      	strheq	r3, [r4, #12]
 8004d90:	bf18      	it	ne
 8004d92:	81a3      	strhne	r3, [r4, #12]
 8004d94:	bd10      	pop	{r4, pc}

08004d96 <__sclose>:
 8004d96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d9a:	f000 b813 	b.w	8004dc4 <_close_r>
	...

08004da0 <_write_r>:
 8004da0:	b538      	push	{r3, r4, r5, lr}
 8004da2:	4d07      	ldr	r5, [pc, #28]	; (8004dc0 <_write_r+0x20>)
 8004da4:	4604      	mov	r4, r0
 8004da6:	4608      	mov	r0, r1
 8004da8:	4611      	mov	r1, r2
 8004daa:	2200      	movs	r2, #0
 8004dac:	602a      	str	r2, [r5, #0]
 8004dae:	461a      	mov	r2, r3
 8004db0:	f7fc faab 	bl	800130a <_write>
 8004db4:	1c43      	adds	r3, r0, #1
 8004db6:	d102      	bne.n	8004dbe <_write_r+0x1e>
 8004db8:	682b      	ldr	r3, [r5, #0]
 8004dba:	b103      	cbz	r3, 8004dbe <_write_r+0x1e>
 8004dbc:	6023      	str	r3, [r4, #0]
 8004dbe:	bd38      	pop	{r3, r4, r5, pc}
 8004dc0:	200009a0 	.word	0x200009a0

08004dc4 <_close_r>:
 8004dc4:	b538      	push	{r3, r4, r5, lr}
 8004dc6:	4d06      	ldr	r5, [pc, #24]	; (8004de0 <_close_r+0x1c>)
 8004dc8:	2300      	movs	r3, #0
 8004dca:	4604      	mov	r4, r0
 8004dcc:	4608      	mov	r0, r1
 8004dce:	602b      	str	r3, [r5, #0]
 8004dd0:	f7fc fab7 	bl	8001342 <_close>
 8004dd4:	1c43      	adds	r3, r0, #1
 8004dd6:	d102      	bne.n	8004dde <_close_r+0x1a>
 8004dd8:	682b      	ldr	r3, [r5, #0]
 8004dda:	b103      	cbz	r3, 8004dde <_close_r+0x1a>
 8004ddc:	6023      	str	r3, [r4, #0]
 8004dde:	bd38      	pop	{r3, r4, r5, pc}
 8004de0:	200009a0 	.word	0x200009a0

08004de4 <_fstat_r>:
 8004de4:	b538      	push	{r3, r4, r5, lr}
 8004de6:	4d07      	ldr	r5, [pc, #28]	; (8004e04 <_fstat_r+0x20>)
 8004de8:	2300      	movs	r3, #0
 8004dea:	4604      	mov	r4, r0
 8004dec:	4608      	mov	r0, r1
 8004dee:	4611      	mov	r1, r2
 8004df0:	602b      	str	r3, [r5, #0]
 8004df2:	f7fc fab2 	bl	800135a <_fstat>
 8004df6:	1c43      	adds	r3, r0, #1
 8004df8:	d102      	bne.n	8004e00 <_fstat_r+0x1c>
 8004dfa:	682b      	ldr	r3, [r5, #0]
 8004dfc:	b103      	cbz	r3, 8004e00 <_fstat_r+0x1c>
 8004dfe:	6023      	str	r3, [r4, #0]
 8004e00:	bd38      	pop	{r3, r4, r5, pc}
 8004e02:	bf00      	nop
 8004e04:	200009a0 	.word	0x200009a0

08004e08 <_isatty_r>:
 8004e08:	b538      	push	{r3, r4, r5, lr}
 8004e0a:	4d06      	ldr	r5, [pc, #24]	; (8004e24 <_isatty_r+0x1c>)
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	4604      	mov	r4, r0
 8004e10:	4608      	mov	r0, r1
 8004e12:	602b      	str	r3, [r5, #0]
 8004e14:	f7fc fab1 	bl	800137a <_isatty>
 8004e18:	1c43      	adds	r3, r0, #1
 8004e1a:	d102      	bne.n	8004e22 <_isatty_r+0x1a>
 8004e1c:	682b      	ldr	r3, [r5, #0]
 8004e1e:	b103      	cbz	r3, 8004e22 <_isatty_r+0x1a>
 8004e20:	6023      	str	r3, [r4, #0]
 8004e22:	bd38      	pop	{r3, r4, r5, pc}
 8004e24:	200009a0 	.word	0x200009a0

08004e28 <_lseek_r>:
 8004e28:	b538      	push	{r3, r4, r5, lr}
 8004e2a:	4d07      	ldr	r5, [pc, #28]	; (8004e48 <_lseek_r+0x20>)
 8004e2c:	4604      	mov	r4, r0
 8004e2e:	4608      	mov	r0, r1
 8004e30:	4611      	mov	r1, r2
 8004e32:	2200      	movs	r2, #0
 8004e34:	602a      	str	r2, [r5, #0]
 8004e36:	461a      	mov	r2, r3
 8004e38:	f7fc faaa 	bl	8001390 <_lseek>
 8004e3c:	1c43      	adds	r3, r0, #1
 8004e3e:	d102      	bne.n	8004e46 <_lseek_r+0x1e>
 8004e40:	682b      	ldr	r3, [r5, #0]
 8004e42:	b103      	cbz	r3, 8004e46 <_lseek_r+0x1e>
 8004e44:	6023      	str	r3, [r4, #0]
 8004e46:	bd38      	pop	{r3, r4, r5, pc}
 8004e48:	200009a0 	.word	0x200009a0

08004e4c <__malloc_lock>:
 8004e4c:	4801      	ldr	r0, [pc, #4]	; (8004e54 <__malloc_lock+0x8>)
 8004e4e:	f7ff bb0d 	b.w	800446c <__retarget_lock_acquire_recursive>
 8004e52:	bf00      	nop
 8004e54:	20000998 	.word	0x20000998

08004e58 <__malloc_unlock>:
 8004e58:	4801      	ldr	r0, [pc, #4]	; (8004e60 <__malloc_unlock+0x8>)
 8004e5a:	f7ff bb08 	b.w	800446e <__retarget_lock_release_recursive>
 8004e5e:	bf00      	nop
 8004e60:	20000998 	.word	0x20000998

08004e64 <_read_r>:
 8004e64:	b538      	push	{r3, r4, r5, lr}
 8004e66:	4d07      	ldr	r5, [pc, #28]	; (8004e84 <_read_r+0x20>)
 8004e68:	4604      	mov	r4, r0
 8004e6a:	4608      	mov	r0, r1
 8004e6c:	4611      	mov	r1, r2
 8004e6e:	2200      	movs	r2, #0
 8004e70:	602a      	str	r2, [r5, #0]
 8004e72:	461a      	mov	r2, r3
 8004e74:	f7fc fa2c 	bl	80012d0 <_read>
 8004e78:	1c43      	adds	r3, r0, #1
 8004e7a:	d102      	bne.n	8004e82 <_read_r+0x1e>
 8004e7c:	682b      	ldr	r3, [r5, #0]
 8004e7e:	b103      	cbz	r3, 8004e82 <_read_r+0x1e>
 8004e80:	6023      	str	r3, [r4, #0]
 8004e82:	bd38      	pop	{r3, r4, r5, pc}
 8004e84:	200009a0 	.word	0x200009a0

08004e88 <_init>:
 8004e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e8a:	bf00      	nop
 8004e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e8e:	bc08      	pop	{r3}
 8004e90:	469e      	mov	lr, r3
 8004e92:	4770      	bx	lr

08004e94 <_fini>:
 8004e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e96:	bf00      	nop
 8004e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e9a:	bc08      	pop	{r3}
 8004e9c:	469e      	mov	lr, r3
 8004e9e:	4770      	bx	lr
